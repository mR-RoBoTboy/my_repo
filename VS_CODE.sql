-- DROP SCHEMA public;

CREATE SCHEMA public AUTHORIZATION root;

-- DROP SEQUENCE public.diy_emp_assign_id_seq;

CREATE SEQUENCE public.diy_emp_assign_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.hibernate_sequence;

CREATE SEQUENCE public.hibernate_sequence
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9223372036854775807
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.seq_pw_req_id;

CREATE SEQUENCE public.seq_pw_req_id
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9223372036854775807
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.tb_btc_accesscontrol_cfg_config_id_seq;

CREATE SEQUENCE public.tb_btc_accesscontrol_cfg_config_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.tb_btc_accesscontrol_cfg_hist_config_id_seq;

CREATE SEQUENCE public.tb_btc_accesscontrol_cfg_hist_config_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.tb_btc_prc_grp_disp_cfg_1_config_id_seq;

CREATE SEQUENCE public.tb_btc_prc_grp_disp_cfg_1_config_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.tb_btc_prc_grp_disp_cfg_config_id_seq;

CREATE SEQUENCE public.tb_btc_prc_grp_disp_cfg_config_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.tb_section_screen_mapping_uuid_seq;

CREATE SEQUENCE public.tb_section_screen_mapping_uuid_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;-- public.declaration_mst definition

-- Drop table

-- DROP TABLE public.declaration_mst;

CREATE TABLE public.declaration_mst (
	declaration_type varchar(200) NULL,
	declaration_code varchar(200) NULL,
	declaration_value text NULL,
	"version" int4 NULL,
	ref_1 varchar(2000) NULL,
	ref_2 varchar(2000) NULL,
	ref_3 varchar(2000) NULL,
	ref_4 varchar(2000) NULL,
	ref_5 varchar(2000) NULL
);


-- public.diy_emp_assign definition

-- Drop table

-- DROP TABLE public.diy_emp_assign;

CREATE TABLE public.diy_emp_assign (
	id serial4 NOT NULL,
	emp_id varchar NULL,
	lead_count int4 NULL,
	created_date timestamp NULL,
	flag varchar NULL,
	branch_code varchar NULL
);


-- public.dms_check_user_mapping definition

-- Drop table

-- DROP TABLE public.dms_check_user_mapping;

CREATE TABLE public.dms_check_user_mapping (
	employee_number varchar NULL,
	created_timestamp timestamp NULL DEFAULT CURRENT_TIMESTAMP
);


-- public.dms_image_check_temp definition

-- Drop table

-- DROP TABLE public.dms_image_check_temp;

CREATE TABLE public.dms_image_check_temp (
	object_pri_key_1 varchar NULL,
	image_id varchar NULL,
	image_type varchar NULL
);


-- public.dms_media_data_temp definition

-- Drop table

-- DROP TABLE public.dms_media_data_temp;

CREATE TABLE public.dms_media_data_temp (
	object_pri_key_1 varchar NULL,
	image_id varchar NULL
);


-- public.hrms_bkp definition

-- Drop table

-- DROP TABLE public.hrms_bkp;

CREATE TABLE public.hrms_bkp (
	employee_number varchar(100) NULL,
	oracle_employee_number varchar(100) NULL,
	company varchar(100) NULL,
	person_id varchar(100) NULL,
	attribute3 varchar(100) NULL,
	prefix varchar(100) NULL,
	first_name varchar(100) NULL,
	middle_names varchar(100) NULL,
	last_name varchar(100) NULL,
	email_address varchar(100) NULL,
	gender varchar(20) NULL,
	dob varchar(100) NULL,
	marital_status varchar(100) NULL,
	paddress1 varchar(200) NULL,
	paddress2 varchar(200) NULL,
	paddress3 varchar(200) NULL,
	pcity varchar(100) NULL,
	ppin varchar(100) NULL,
	taddress1 varchar(200) NULL,
	taddress2 varchar(200) NULL,
	taddress3 varchar(200) NULL,
	tcity varchar(100) NULL,
	tpin varchar(100) NULL,
	supervisor_emp_no varchar(100) NULL,
	sup_company varchar(100) NULL,
	doj varchar(100) NULL,
	father_husband_name varchar(100) NULL,
	division varchar(100) NULL,
	"function" varchar(100) NULL,
	function_id varchar(100) NULL,
	designation_id varchar(100) NULL,
	payroll_id varchar(100) NULL,
	designation_label_id varchar(100) NULL,
	"role" varchar(100) NULL,
	loc_code varchar(100) NULL,
	location_name varchar(200) NULL,
	date_employee_data_verified varchar(100) NULL,
	lob_code varchar(100) NULL,
	lob varchar(100) NULL,
	cc_code varchar(100) NULL,
	cc_name varchar(100) NULL,
	category varchar(100) NULL,
	domain_login_id varchar(100) NULL,
	last_working_date varchar(100) NULL,
	rm_name varchar(100) NULL,
	supervisor_no varchar(100) NULL,
	"source" varchar(100) NULL,
	kpo_code varchar(100) NULL,
	supervisor_name varchar(100) NULL,
	mobile_number varchar(100) NULL,
	assignment_change_date varchar(100) NULL,
	loc_code_new varchar(100) NULL,
	ing_emp_type varchar(100) NULL,
	segment varchar(100) NULL,
	emp_hierarchy_id varchar(1000) NULL,
	emp_branch_hierarchy_id varchar(1000) NULL,
	created_date timestamp NULL,
	created_by varchar(50) NULL,
	modified_date timestamp NULL,
	modified_by varchar(50) NULL,
	loc_code_view varchar(20) NULL,
	is_active varchar(10) NULL,
	bc_code varchar(20) NULL,
	emp_lwd_date timestamp NULL,
	prc_grp varchar(100) NULL,
	login_status varchar(100) NULL,
	supervisor_mobile_number varchar(100) NULL,
	branch_code varchar(200) NULL
);


-- public.hrms_hist_bkp definition

-- Drop table

-- DROP TABLE public.hrms_hist_bkp;

CREATE TABLE public.hrms_hist_bkp (
	employee_number varchar(100) NULL,
	oracle_employee_number varchar(100) NULL,
	company varchar(100) NULL,
	person_id varchar(100) NULL,
	attribute3 varchar(100) NULL,
	prefix varchar(100) NULL,
	first_name varchar(100) NULL,
	middle_names varchar(100) NULL,
	last_name varchar(100) NULL,
	email_address varchar(100) NULL,
	gender varchar(20) NULL,
	dob varchar(100) NULL,
	marital_status varchar(100) NULL,
	paddress1 varchar(200) NULL,
	paddress2 varchar(200) NULL,
	paddress3 varchar(200) NULL,
	pcity varchar(100) NULL,
	ppin varchar(100) NULL,
	taddress1 varchar(200) NULL,
	taddress2 varchar(200) NULL,
	taddress3 varchar(200) NULL,
	tcity varchar(100) NULL,
	tpin varchar(100) NULL,
	supervisor_emp_no varchar(100) NULL,
	sup_company varchar(100) NULL,
	doj varchar(100) NULL,
	father_husband_name varchar(100) NULL,
	division varchar(100) NULL,
	"function" varchar(100) NULL,
	function_id varchar(100) NULL,
	designation_id varchar(100) NULL,
	payroll_id varchar(100) NULL,
	designation_label_id varchar(100) NULL,
	"role" varchar(100) NULL,
	loc_code varchar(100) NULL,
	location_name varchar(200) NULL,
	date_employee_data_verified varchar(100) NULL,
	lob_code varchar(100) NULL,
	lob varchar(100) NULL,
	cc_code varchar(100) NULL,
	cc_name varchar(100) NULL,
	category varchar(100) NULL,
	domain_login_id varchar(100) NULL,
	last_working_date varchar(100) NULL,
	rm_name varchar(100) NULL,
	supervisor_no varchar(100) NULL,
	"source" varchar(100) NULL,
	kpo_code varchar(100) NULL,
	supervisor_name varchar(100) NULL,
	mobile_number varchar(100) NULL,
	assignment_change_date varchar(100) NULL,
	loc_code_new varchar(100) NULL,
	ing_emp_type varchar(100) NULL,
	segment varchar(100) NULL,
	emp_hierarchy_id varchar(1000) NULL,
	emp_branch_hierarchy_id varchar(1000) NULL,
	created_date timestamp NULL,
	created_by varchar(50) NULL,
	modified_date timestamp NULL,
	modified_by varchar(50) NULL,
	loc_code_view varchar(20) NULL,
	is_active varchar(10) NULL,
	bc_code varchar(20) NULL,
	emp_lwd_date timestamp NULL,
	prc_grp varchar(100) NULL,
	login_status varchar(100) NULL,
	supervisor_mobile_number varchar(100) NULL,
	branch_code varchar(200) NULL,
	log varchar(20) NULL
);


-- public.oee_email_validation definition

-- Drop table

-- DROP TABLE public.oee_email_validation;

CREATE TABLE public.oee_email_validation (
	id int4 NOT NULL,
	email_job_id int4 NULL,
	validation_message text NULL,
	CONSTRAINT oee_email_validation_pkey PRIMARY KEY (id)
);


-- public.oee_jobs definition

-- Drop table

-- DROP TABLE public.oee_jobs;

CREATE TABLE public.oee_jobs (
	job_id int4 NOT NULL,
	created_timestamp timestamp NULL DEFAULT CURRENT_TIMESTAMP,
	create_user varchar(255) NULL,
	failure_type varchar(255) NULL,
	job_email_subject varchar(255) NULL,
	job_status varchar(255) NULL,
	org_id varchar(255) NOT NULL,
	profile_id int4 NOT NULL,
	scheduled_time timestamp NULL,
	CONSTRAINT oee_jobs_pkey PRIMARY KEY (job_id)
);


-- public.oee_logs_details definition

-- Drop table

-- DROP TABLE public.oee_logs_details;

CREATE TABLE public.oee_logs_details (
	id int4 NOT NULL,
	attachment_status text NULL,
	bcc_emails varchar(255) NULL,
	cc_emails varchar(255) NULL,
	email_record_id int4 NULL,
	email_subject varchar(255) NULL,
	job_id int4 NULL,
	recipient_mail varchar(1000) NULL,
	remarks varchar(1000) NULL,
	status varchar(255) NULL,
	CONSTRAINT oee_logs_details_pkey PRIMARY KEY (id)
);


-- public.oee_logs_summary definition

-- Drop table

-- DROP TABLE public.oee_logs_summary;

CREATE TABLE public.oee_logs_summary (
	id int4 NOT NULL,
	failure_count int4 NULL,
	job_id int4 NULL,
	job_status varchar(255) NULL,
	total_email_count int4 NULL,
	org_id varchar(255) NULL,
	process_end_time timestamp NULL,
	process_start_time timestamp NULL,
	scheduled_time timestamp NULL,
	success_count int4 NULL,
	CONSTRAINT oee_logs_summary_pkey PRIMARY KEY (id)
);


-- public.oee_profiles definition

-- Drop table

-- DROP TABLE public.oee_profiles;

CREATE TABLE public.oee_profiles (
	email_profile_id int4 NOT NULL,
	host varchar(255) NOT NULL,
	port varchar(255) NOT NULL,
	username varchar(255) NULL,
	"password" varchar(255) NULL,
	sender_name varchar(255) NULL,
	default_signature varchar(255) NULL,
	CONSTRAINT oee_profiles_pkey PRIMARY KEY (email_profile_id)
);


-- public.pin_branch_mapping definition

-- Drop table

-- DROP TABLE public.pin_branch_mapping;

CREATE TABLE public.pin_branch_mapping (
	serviceable_pin_code int4 NULL,
	branch_code varchar(10) NULL
);
CREATE INDEX branch_code ON public.pin_branch_mapping USING btree (branch_code);
CREATE INDEX pin_branch_mapping_1 ON public.pin_branch_mapping USING btree (serviceable_pin_code);


-- public.rm_exclusion_definition definition

-- Drop table

-- DROP TABLE public.rm_exclusion_definition;

CREATE TABLE public.rm_exclusion_definition (
	id int4 NOT NULL,
	report_id int4 NULL,
	empids varchar(255) NULL,
	CONSTRAINT rm_exclusion_definition_pkey PRIMARY KEY (id)
);


-- public.rm_logs_details definition

-- Drop table

-- DROP TABLE public.rm_logs_details;

CREATE TABLE public.rm_logs_details (
	id int4 NOT NULL,
	report_id int4 NULL,
	created_timestamp timestamp NULL,
	emp_id varchar(255) NULL,
	employee_role varchar(255) NULL,
	is_inbody_report varchar(255) NULL,
	remarks varchar(2000) NULL,
	report_file_name varchar(255) NULL,
	report_file_path varchar(255) NULL,
	report_file_size varchar(255) NULL,
	report_file_status varchar(255) NULL,
	CONSTRAINT rm_logs_details_pkey PRIMARY KEY (id)
);


-- public.rm_logs_purge_details definition

-- Drop table

-- DROP TABLE public.rm_logs_purge_details;

CREATE TABLE public.rm_logs_purge_details (
	id int4 NOT NULL,
	file_name varchar(255) NULL,
	file_path varchar(255) NULL,
	process_time timestamp NULL,
	purge_status varchar(255) NULL,
	remarks varchar(255) NULL,
	CONSTRAINT rm_logs_purge_details_pkey PRIMARY KEY (id)
);


-- public.rm_logs_summary definition

-- Drop table

-- DROP TABLE public.rm_logs_summary;

CREATE TABLE public.rm_logs_summary (
	id int4 NOT NULL,
	report_id int4 NULL,
	end_time timestamp NULL,
	failure_count int4 NULL,
	org_id varchar(255) NULL,
	process_time timestamp NULL,
	report_send_count int4 NULL,
	scheduled_time varchar(255) NULL,
	success_count int4 NULL,
	CONSTRAINT rm_logs_summary_pkey PRIMARY KEY (id)
);


-- public.rm_logs_validation_errors definition

-- Drop table

-- DROP TABLE public.rm_logs_validation_errors;

CREATE TABLE public.rm_logs_validation_errors (
	id int4 NOT NULL,
	report_id int4 NULL,
	created_timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
	validation_errors text NULL,
	CONSTRAINT rm_logs_validation_errors_pkey PRIMARY KEY (id)
);


-- public.rm_pivot_definition definition

-- Drop table

-- DROP TABLE public.rm_pivot_definition;

CREATE TABLE public.rm_pivot_definition (
	id int4 NOT NULL,
	aggregate_function varchar(255) NULL,
	"columns" varchar(255) NULL,
	"filter" varchar(255) NULL,
	report_id int4 NULL,
	"rows" varchar(255) NULL,
	file_columns varchar(255) NULL,
	file_rows varchar(255) NULL,
	CONSTRAINT rm_pivot_definition_pkey PRIMARY KEY (id)
);


-- public.rm_purge_definition definition

-- Drop table

-- DROP TABLE public.rm_purge_definition;

CREATE TABLE public.rm_purge_definition (
	id int4 NOT NULL,
	report_id int4 NULL,
	report_file_path varchar(255) NULL,
	report_retain_for_days int4 NULL,
	CONSTRAINT rm_purge_definition_pkey PRIMARY KEY (id)
);


-- public.rm_reports_definition definition

-- Drop table

-- DROP TABLE public.rm_reports_definition;

CREATE TABLE public.rm_reports_definition (
	report_id int4 NOT NULL,
	append_file_name_with varchar(255) NOT NULL DEFAULT 'DATE'::character varying,
	create_pivot varchar(255) NULL,
	csv_col_separator varchar(2) NOT NULL DEFAULT ','::character varying,
	csv_record_separator varchar(2) NOT NULL DEFAULT '|'::character varying,
	daily_frequency_in_hours varchar(255) NULL,
	days_of_month varchar(255) NULL,
	days_of_week varchar(13) NULL DEFAULT '1,2,3,4,5,6,7'::character varying,
	default_http_url varchar(255) NULL,
	email_body_content text NULL,
	email_body_type varchar(255) NOT NULL DEFAULT 'STATIC'::character varying,
	email_profile_id varchar(255) NOT NULL,
	rm_end_time varchar(255) NULL,
	report_failed_count varchar(255) NOT NULL DEFAULT '0'::character varying,
	last_attempt_failure_type varchar(255) NULL,
	file_type varchar(255) NOT NULL DEFAULT 'CSV'::character varying,
	is_mail_to_be_sent varchar(255) NOT NULL DEFAULT '0'::character varying,
	last_report_status varchar(255) NULL,
	last_modified_on timestamp NULL,
	last_success_date date NULL,
	org_id varchar(255) NULL,
	output_file_path varchar(255) NULL,
	report_to_bcc_emails text NULL,
	report_to_cc_emails text NULL,
	report_file_name varchar(255) NULL,
	report_generation_type varchar(255) NOT NULL DEFAULT 'ONE_TIME'::character varying,
	report_header varchar(255) NULL,
	report_password varchar(255) NULL,
	report_procedure_name varchar(255) NULL,
	report_active_status varchar(255) NOT NULL DEFAULT '1'::character varying,
	report_to_emp_ids varchar(255) NULL,
	report_to_roles varchar(255) NULL,
	same_report_to_all varchar(255) NOT NULL DEFAULT '0'::character varying,
	send_report_as_zip varchar(255) NOT NULL DEFAULT '0'::character varying,
	report_send_time varchar(255) NULL,
	send_report_as varchar(255) NOT NULL DEFAULT 'ATTACHMENT'::character varying,
	rm_start_time varchar(255) NULL,
	template_file_path varchar(255) NULL,
	report_max_attempt_count varchar(255) NOT NULL DEFAULT '5'::character varying,
	use_template varchar(255) NOT NULL DEFAULT '0'::character varying,
	CONSTRAINT rm_reports_definition_pkey PRIMARY KEY (report_id)
);


-- public.rm_setup_configuration definition

-- Drop table

-- DROP TABLE public.rm_setup_configuration;

CREATE TABLE public.rm_setup_configuration (
	id int4 NOT NULL,
	emp_emailid_col_name varchar(255) NOT NULL,
	emp_id_col_name varchar(255) NOT NULL,
	emp_role_col_name varchar(255) NOT NULL,
	emp_mst_table_name varchar(255) NOT NULL,
	org_id varchar(255) NULL,
	CONSTRAINT rm_setup_configuration_pkey PRIMARY KEY (id)
);


-- public.rm_template_definition definition

-- Drop table

-- DROP TABLE public.rm_template_definition;

CREATE TABLE public.rm_template_definition (
	id int4 NOT NULL,
	create_pivot varchar(255) NULL,
	data_begin_row varchar(255) NULL,
	excel_sheet_name varchar(255) NULL,
	refresh_sp varchar(255) NULL,
	report_id int4 NULL,
	CONSTRAINT rm_template_definition_pkey PRIMARY KEY (id)
);


-- public.rm_template_pivot_definition definition

-- Drop table

-- DROP TABLE public.rm_template_pivot_definition;

CREATE TABLE public.rm_template_pivot_definition (
	id int4 NOT NULL,
	aggregate_function varchar(255) NULL,
	"columns" varchar(255) NULL,
	"filter" varchar(255) NULL,
	"rows" varchar(255) NULL,
	template_id int4 NULL,
	file_columns varchar(255) NULL,
	file_rows varchar(255) NULL,
	CONSTRAINT rm_template_pivot_definition_pkey PRIMARY KEY (id)
);


-- public.t4 definition

-- Drop table

-- DROP TABLE public.t4;

CREATE TABLE public.t4 (
	timeof timestamp NULL,
	entity bpchar(1) NULL,
	status int4 NULL,
	ct int4 NULL
);


-- public.tb_aadhaar_version definition

-- Drop table

-- DROP TABLE public.tb_aadhaar_version;

CREATE TABLE public.tb_aadhaar_version (
	"version" varchar(20) NULL,
	approval_number varchar(20) NULL,
	approval_status varchar(20) NULL,
	created_on date NULL,
	subject text NULL,
	verbiage varchar(100) NULL,
	approval_submitter varchar(100) NULL,
	approval_checker varchar(100) NULL,
	active_flag varchar(1) NULL,
	inactive_date timestamp NULL
);


-- public.tb_alerts_audit definition

-- Drop table

-- DROP TABLE public.tb_alerts_audit;

CREATE TABLE public.tb_alerts_audit (
	system_req_id varchar(100) NOT NULL,
	object_pri_key_1 varchar(100) NOT NULL,
	lead_stage varchar(100) NULL,
	alert_type varchar(100) NULL,
	alert_to varchar(100) NULL,
	email_subject varchar(2000) NULL,
	alert_body varchar(3000) NULL,
	template_id varchar(2000) NULL,
	server_ip varchar(200) NULL,
	alert_sent_status varchar(100) NULL,
	created_timestamp timestamp NULL DEFAULT now(),
	modify_timestamp timestamp NULL DEFAULT now(),
	text_1 varchar(200) NULL,
	text_2 varchar(200) NULL,
	text_3 varchar(200) NULL,
	text_4 varchar(200) NULL,
	text_5 varchar(200) NULL,
	CONSTRAINT tb_alerts_audit_pkey PRIMARY KEY (system_req_id)
);


-- public.tb_aof_history definition

-- Drop table

-- DROP TABLE public.tb_aof_history;

CREATE TABLE public.tb_aof_history (
	object_type varchar(10) NULL,
	object_pri_key_1 varchar(30) NULL,
	object_pri_key_2 varchar(30) NULL,
	object_pri_key_3 varchar(30) NULL,
	seq_id varchar(30) NULL,
	process_group varchar(30) NULL,
	prc_grp_disp varchar(30) NULL,
	lead_status varchar(30) NULL,
	remarks text NULL,
	user_id varchar(30) NULL,
	created_timestamp timestamp NULL DEFAULT now(),
	text_1 varchar(200) NULL,
	text_2 varchar(200) NULL,
	text_3 varchar(200) NULL,
	text_4 varchar(200) NULL,
	text_5 varchar(200) NULL,
	text_6 varchar(200) NULL,
	text_7 varchar(200) NULL,
	text_8 varchar(200) NULL,
	text_9 varchar(200) NULL,
	text_10 varchar(200) NULL
);


-- public.tb_aof_history_05052022 definition

-- Drop table

-- DROP TABLE public.tb_aof_history_05052022;

CREATE TABLE public.tb_aof_history_05052022 (
	object_type varchar(10) NULL,
	object_pri_key_1 varchar(30) NULL,
	object_pri_key_2 varchar(30) NULL,
	object_pri_key_3 varchar(30) NULL,
	seq_id varchar(30) NULL,
	process_group varchar(30) NULL,
	prc_grp_disp varchar(30) NULL,
	lead_status varchar(30) NULL,
	remarks varchar(2000) NULL,
	user_id varchar(30) NULL,
	created_timestamp timestamp NULL,
	text_1 varchar(200) NULL,
	text_2 varchar(200) NULL,
	text_3 varchar(200) NULL,
	text_4 varchar(200) NULL,
	text_5 varchar(200) NULL,
	text_6 varchar(200) NULL,
	text_7 varchar(200) NULL,
	text_8 varchar(200) NULL,
	text_9 varchar(200) NULL,
	text_10 varchar(200) NULL
);


-- public.tb_aof_history_testing definition

-- Drop table

-- DROP TABLE public.tb_aof_history_testing;

CREATE TABLE public.tb_aof_history_testing (
	object_type varchar(10) NULL,
	object_pri_key_1 varchar(30) NULL,
	object_pri_key_2 varchar(30) NULL,
	object_pri_key_3 varchar(30) NULL,
	seq_id varchar(30) NULL,
	process_group varchar(30) NULL,
	prc_grp_disp varchar(30) NULL,
	lead_status varchar(30) NULL,
	remarks varchar(2000) NULL,
	user_id varchar(30) NULL,
	created_timestamp timestamp NULL,
	text_1 varchar(200) NULL,
	text_2 varchar(200) NULL,
	text_3 varchar(200) NULL,
	text_4 varchar(200) NULL,
	text_5 varchar(200) NULL,
	text_6 varchar(200) NULL,
	text_7 varchar(200) NULL,
	text_8 varchar(200) NULL,
	text_9 varchar(200) NULL,
	text_10 varchar(200) NULL
);


-- public.tb_app_mapping_new definition

-- Drop table

-- DROP TABLE public.tb_app_mapping_new;

CREATE TABLE public.tb_app_mapping_new (
	employee_number varchar(20) NOT NULL
);


-- public.tb_audio_language_master definition

-- Drop table

-- DROP TABLE public.tb_audio_language_master;

CREATE TABLE public.tb_audio_language_master (
	"language" varchar(50) NULL,
	audio_type varchar(50) NULL,
	url varchar(64) NULL,
	is_active varchar(1) NULL
);


-- public.tb_branch_mst definition

-- Drop table

-- DROP TABLE public.tb_branch_mst;

CREATE TABLE public.tb_branch_mst (
	branch_cd varchar(500) NOT NULL,
	sdesc varchar(500) NULL,
	ldesc varchar(500) NULL,
	consolidation_cd varchar(500) NULL,
	address varchar(1000) NULL,
	phone_no varchar(15) NULL,
	fax varchar(50) NULL,
	micr_cd varchar(50) NULL,
	opening_date date NULL,
	pl_phone_no varchar(15) NULL,
	pl_fax_no varchar(50) NULL,
	pl_email_id varchar(50) NULL,
	cpc_branch_lu varchar(10) NULL,
	cpc_branch_lu_code1 varchar(10) NULL,
	hierarchy_id varchar(10) NULL,
	created_by varchar(50) NULL,
	created_date timestamp NULL,
	modified_by varchar(50) NULL,
	modified_date timestamp NULL,
	effective_date timestamp NULL,
	ineffective_date timestamp NULL,
	internal_flag varchar(1) NULL,
	value_sequence varchar(10) NULL,
	lob_code varchar(10) NULL,
	latitude varchar(50) NULL,
	longitude varchar(50) NULL,
	ifsc varchar(50) NULL,
	pincode varchar(50) NULL,
	city varchar(50) NULL,
	state varchar(50) NULL,
	emp_loc_code varchar(50) NULL,
	category varchar(50) NULL,
	CONSTRAINT tb_branch_mst_pkey PRIMARY KEY (branch_cd)
);
CREATE INDEX tb_branch_mst_1 ON public.tb_branch_mst USING btree (pincode);
CREATE INDEX tb_branch_mst_branch ON public.tb_branch_mst USING btree (branch_cd);


-- public.tb_branch_rcu_corrector_mapping definition

-- Drop table

-- DROP TABLE public.tb_branch_rcu_corrector_mapping;

CREATE TABLE public.tb_branch_rcu_corrector_mapping (
	rcu_corrector_id varchar(20) NOT NULL,
	branch varchar(20) NULL,
	internal_flag varchar(1) NULL DEFAULT 'Y'::character varying,
	created_by varchar(50) NULL,
	created_timestamp timestamp NULL DEFAULT CURRENT_TIMESTAMP,
	modified_by varchar(50) NULL,
	modified_timestamp timestamp NULL
);
CREATE INDEX tb_branch_rcu_corrector_mapping_corr ON public.tb_branch_rcu_corrector_mapping USING btree (rcu_corrector_id);


-- public.tb_branch_rcu_corrector_mapping_bkp_12_9_21 definition

-- Drop table

-- DROP TABLE public.tb_branch_rcu_corrector_mapping_bkp_12_9_21;

CREATE TABLE public.tb_branch_rcu_corrector_mapping_bkp_12_9_21 (
	rcu_corrector_id varchar(20) NULL,
	branch varchar(20) NULL,
	internal_flag varchar(1) NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamp NULL,
	modified_by varchar(50) NULL,
	modified_timestamp timestamp NULL
);


-- public.tb_btc_accesscontrol definition

-- Drop table

-- DROP TABLE public.tb_btc_accesscontrol;

CREATE TABLE public.tb_btc_accesscontrol (
	workflow_group_id varchar(50) NOT NULL,
	object_pri_key_1 varchar(50) NOT NULL,
	object_pri_key_2 varchar(50) NOT NULL,
	object_pri_key_3 varchar(50) NOT NULL,
	object_type varchar(50) NULL,
	"location" varchar(50) NOT NULL,
	system_role varchar(30) NOT NULL,
	emp_id varchar(50) NOT NULL,
	access_type varchar(1) NULL,
	access_group varchar(10) NULL,
	update_login_id varchar(50) NULL,
	emp_hierarchy_id varchar(2000) NULL,
	location_hierarchy_id varchar(2000) NULL,
	config_id varchar(20) NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamptz NULL DEFAULT now(),
	modified_by varchar(50) NULL,
	modified_timestamp timestamptz NULL,
	CONSTRAINT tb_btc_accesscontrol_pk PRIMARY KEY (workflow_group_id, object_pri_key_1, object_pri_key_2, object_pri_key_3, emp_id, location, system_role)
);
CREATE INDEX tb_btc_accesscontrol_cfg_idx1 ON public.tb_btc_accesscontrol USING btree (object_pri_key_1);
CREATE INDEX tb_btc_accesscontrol_cfg_idx2 ON public.tb_btc_accesscontrol USING btree (object_pri_key_1, object_pri_key_2, object_pri_key_3);
CREATE UNIQUE INDEX tb_btc_accesscontrol_lms_pk2 ON public.tb_btc_accesscontrol USING btree (object_pri_key_1, system_role);
CREATE UNIQUE INDEX tb_btc_accesscontrol_lms_pk6 ON public.tb_btc_accesscontrol USING btree (workflow_group_id, object_pri_key_1, object_pri_key_2, object_pri_key_3, object_type, emp_id, system_role);
CREATE INDEX tb_btc_accesscontrol_sysrole ON public.tb_btc_accesscontrol USING btree (system_role);

-- Table Triggers

create trigger trg_h_tb_btc_accesscontrol before
insert
    or
delete
    or
update
    on
    public.tb_btc_accesscontrol for each row execute function tf_h_tb_btc_accesscontrol();


-- public.tb_btc_accesscontrol_cfg definition

-- Drop table

-- DROP TABLE public.tb_btc_accesscontrol_cfg;

CREATE TABLE public.tb_btc_accesscontrol_cfg (
	config_id serial4 NOT NULL,
	workflow_group_id varchar(50) NULL,
	process_group varchar(50) NULL,
	prc_grp_disp varchar(50) NULL,
	access_type bpchar(1) NULL,
	action_flag bpchar(1) NULL DEFAULT 'a'::bpchar,
	system_role varchar(50) NULL,
	"location" varchar(50) NULL,
	emp_id varchar(50) NULL,
	access_group varchar(50) NULL,
	execution_br_id varchar(50) NULL,
	location_function varchar(50) NULL,
	access_group_function varchar(50) NULL,
	emp_function varchar(30) NULL,
	effective_date date NULL DEFAULT now(),
	ineffective_date date NULL DEFAULT now(),
	internal_flag varchar(1) NULL DEFAULT 'y'::character varying,
	created_by varchar(50) NULL,
	created_timestamp timestamptz NULL DEFAULT now(),
	modified_by varchar(50) NULL,
	modified_timestamp timestamptz NULL,
	delete_current numeric(1) NULL DEFAULT 1
);
CREATE INDEX tb_btc_accesscontrol_cfg_in1 ON public.tb_btc_accesscontrol_cfg USING btree (workflow_group_id, process_group, prc_grp_disp, system_role);

-- Table Triggers

create trigger trg_h_tb_btc_accesscontrol before
insert
    or
delete
    or
update
    on
    public.tb_btc_accesscontrol_cfg for each row execute function tf_h_tb_btc_accesscontrol_cfg();


-- public.tb_btc_accesscontrol_cfg_hist definition

-- Drop table

-- DROP TABLE public.tb_btc_accesscontrol_cfg_hist;

CREATE TABLE public.tb_btc_accesscontrol_cfg_hist (
	config_id serial4 NOT NULL,
	workflow_group_id varchar(50) NULL,
	process_group varchar(50) NULL,
	prc_grp_disp varchar(50) NULL,
	access_type bpchar(1) NULL,
	action_flag bpchar(1) NULL,
	system_role varchar(50) NULL,
	"location" varchar(50) NULL,
	emp_id varchar(50) NULL,
	access_group varchar(50) NULL,
	execution_br_id varchar(50) NULL,
	location_function varchar(50) NULL,
	access_group_function varchar(50) NULL,
	emp_function varchar(30) NULL,
	effective_date date NULL,
	ineffective_date date NULL,
	internal_flag varchar(1) NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamptz NULL,
	modified_by varchar(50) NULL,
	modified_timestamp timestamptz NULL,
	delete_current numeric(1) NULL,
	log_action varchar(10) NULL,
	log_time timestamp NULL,
	log_user varchar(100) NULL,
	system_name varchar(100) NULL
);


-- public.tb_btc_accesscontrol_hist definition

-- Drop table

-- DROP TABLE public.tb_btc_accesscontrol_hist;

CREATE TABLE public.tb_btc_accesscontrol_hist (
	workflow_group_id varchar(50) NULL,
	object_pri_key_1 varchar(50) NULL,
	object_pri_key_2 varchar(50) NULL,
	object_pri_key_3 varchar(50) NULL,
	object_type varchar(50) NULL,
	"location" varchar(50) NULL,
	system_role varchar(30) NULL,
	emp_id varchar(50) NULL,
	access_type varchar(1) NULL,
	access_group varchar(10) NULL,
	update_login_id varchar(50) NULL,
	emp_hierarchy_id varchar(2000) NULL,
	location_hierarchy_id varchar(2000) NULL,
	config_id varchar(20) NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamptz NULL,
	modified_by varchar(50) NULL,
	modified_timestamp timestamptz NULL,
	log_action varchar(10) NULL,
	log_time timestamp NULL,
	log_user varchar(100) NULL,
	system_name varchar(100) NULL
);
CREATE INDEX tb_btc_accesscontrol_hist_idx2 ON public.tb_btc_accesscontrol_hist USING btree (object_pri_key_1);
CREATE INDEX tb_btc_accesscontrol_hist_pk ON public.tb_btc_accesscontrol_hist USING btree (workflow_group_id, object_pri_key_1, object_pri_key_2, object_pri_key_3, object_type, emp_id, system_role);
CREATE INDEX tb_btc_accesscontrol_hist_pk1 ON public.tb_btc_accesscontrol_hist USING btree (object_pri_key_1, system_role);
CREATE INDEX tb_btc_accesscontrol_lms__logpk1 ON public.tb_btc_accesscontrol_hist USING btree (object_pri_key_1, system_role, log_time);
CREATE INDEX tb_btc_accesscontrol_lms_emp_pk1 ON public.tb_btc_accesscontrol_hist USING btree (object_pri_key_1, system_role, emp_id, update_login_id, emp_hierarchy_id);


-- public.tb_btc_accesscontrol_test1 definition

-- Drop table

-- DROP TABLE public.tb_btc_accesscontrol_test1;

CREATE TABLE public.tb_btc_accesscontrol_test1 (
	workflow_group_id varchar(50) NULL,
	object_pri_key_1 varchar(50) NULL,
	object_pri_key_2 varchar(50) NULL,
	object_pri_key_3 varchar(50) NULL,
	object_type varchar(50) NULL,
	"location" varchar(50) NULL,
	system_role varchar(30) NULL,
	emp_id varchar(50) NULL,
	access_type varchar(1) NULL,
	access_group varchar(10) NULL,
	update_login_id varchar(50) NULL,
	emp_hierarchy_id varchar(2000) NULL,
	location_hierarchy_id varchar(2000) NULL,
	config_id varchar(20) NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamptz NULL,
	modified_by varchar(50) NULL,
	modified_timestamp timestamptz NULL
);


-- public.tb_btc_prc_grp_disp definition

-- Drop table

-- DROP TABLE public.tb_btc_prc_grp_disp;

CREATE TABLE public.tb_btc_prc_grp_disp (
	workflow_group_id varchar(50) NOT NULL,
	object_pri_key_1 varchar(50) NOT NULL,
	object_pri_key_2 varchar(50) NOT NULL,
	object_pri_key_3 varchar(50) NOT NULL,
	object_type varchar(50) NULL,
	process_group varchar(50) NOT NULL,
	prc_grp_disp varchar(50) NOT NULL,
	start_timestamp timestamp NULL DEFAULT now(),
	end_timestamp timestamp NULL,
	last_updated_timestamp timestamp NULL,
	prc_grp_disp_category varchar(50) NULL,
	process_iteration_count int4 NULL,
	process_remarks varchar(4000) NULL,
	config_id varchar(20) NULL,
	login_id varchar(50) NULL,
	lob varchar(50) NULL,
	text_1 varchar(4000) NULL,
	text_2 varchar(1000) NULL,
	text_3 varchar(1000) NULL,
	text_4 varchar(1000) NULL,
	text_5 varchar(1000) NULL,
	created_timestamp timestamp NULL DEFAULT now(),
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL DEFAULT now(),
	modified_by varchar(50) NULL,
	tat_in_working_hrs int4 NULL,
	CONSTRAINT tb_btc_prc_grp_disp_pk PRIMARY KEY (workflow_group_id, object_pri_key_1, object_pri_key_2, object_pri_key_3, process_group)
);
CREATE INDEX tb_btc_prc_grp_disp_confg ON public.tb_btc_prc_grp_disp USING btree (config_id);
CREATE INDEX tb_btc_prc_grp_disp_idx3 ON public.tb_btc_prc_grp_disp USING btree (object_pri_key_1, object_pri_key_2, object_pri_key_3);
CREATE INDEX tb_btc_prc_grp_disp_idx4 ON public.tb_btc_prc_grp_disp USING btree (object_pri_key_1);
CREATE INDEX tb_btc_prc_grp_disp_workflow_group_id_idx ON public.tb_btc_prc_grp_disp USING btree (workflow_group_id, object_pri_key_1, object_pri_key_2, object_pri_key_3, object_type, process_group, prc_grp_disp);
CREATE INDEX tb_btc_prc_grp_disp_workflow_group_id_idx11 ON public.tb_btc_prc_grp_disp USING btree (object_pri_key_1, text_1);
CREATE UNIQUE INDEX tb_btc_prc_grp_disp_workflow_group_id_idx12 ON public.tb_btc_prc_grp_disp USING btree (object_pri_key_1, process_group, prc_grp_disp);

-- Table Triggers

create trigger trg_h_tb_btc_prc_grp_disp before
insert
    or
delete
    or
update
    on
    public.tb_btc_prc_grp_disp for each row execute function tf_h_tb_btc_prc_grp_disp();
create trigger trg_tb_btc_prc_grp_disp_trig before
insert
    or
update
    on
    public.tb_btc_prc_grp_disp for each row execute function tf_tb_btc_prc_grp_disp_trig();


-- public.tb_btc_prc_grp_disp_cfg_hist definition

-- Drop table

-- DROP TABLE public.tb_btc_prc_grp_disp_cfg_hist;

CREATE TABLE public.tb_btc_prc_grp_disp_cfg_hist (
	config_id int4 NULL,
	workflow_group_id varchar(50) NULL,
	event_process varchar(50) NULL,
	ref_input_1 varchar(50) NULL,
	ref_input_2 varchar(50) NULL,
	br_id varchar(50) NULL,
	condition_function varchar(100) NULL,
	process_group varchar(50) NULL,
	prc_grp_disp varchar(50) NULL,
	exec_level varchar(20) NULL,
	remarks varchar(200) NULL,
	notification_grp_id varchar(20) NULL,
	ref_batch_job varchar(20) NULL,
	effective_date date NULL,
	ineffective_date date NULL,
	internal_flag varchar(1) NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamptz NULL,
	modified_by varchar(50) NULL,
	modified_timestamp timestamptz NULL,
	exception_id varchar(50) NULL,
	exception_group_id varchar(50) NULL,
	exception_disposition varchar(50) NULL,
	exception_level varchar(50) NULL,
	message_id varchar(200) NULL,
	log_action varchar(10) NULL,
	log_time timestamp NULL,
	log_user varchar(100) NULL,
	system_name varchar(100) NULL
);


-- public.tb_btc_prc_grp_disp_hist definition

-- Drop table

-- DROP TABLE public.tb_btc_prc_grp_disp_hist;

CREATE TABLE public.tb_btc_prc_grp_disp_hist (
	workflow_group_id varchar(50) NULL,
	object_pri_key_1 varchar(50) NULL,
	object_pri_key_2 varchar(50) NULL,
	object_pri_key_3 varchar(50) NULL,
	object_type varchar(50) NULL,
	process_group varchar(50) NULL,
	prc_grp_disp varchar(50) NULL,
	start_timestamp timestamp NULL,
	end_timestamp timestamp NULL,
	last_updated_timestamp timestamp NULL,
	prc_grp_disp_category varchar(50) NULL,
	process_iteration_count int4 NULL,
	process_remarks varchar(4000) NULL,
	config_id varchar(20) NULL,
	login_id varchar(50) NULL,
	lob varchar(50) NULL,
	text_1 varchar(4000) NULL,
	text_2 varchar(1000) NULL,
	text_3 varchar(1000) NULL,
	text_4 varchar(1000) NULL,
	text_5 varchar(1000) NULL,
	created_timestamp timestamp NULL,
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	modified_by varchar(50) NULL,
	tat_in_working_hrs int4 NULL,
	log_action varchar(10) NULL,
	log_time timestamp NULL,
	log_user varchar(100) NULL,
	system_name varchar(100) NULL
);
CREATE INDEX tb_btc_prc_grp_disp_hist_idx ON public.tb_btc_prc_grp_disp_hist USING btree (workflow_group_id, object_pri_key_1, object_pri_key_2, object_pri_key_3, object_type, process_group, prc_grp_disp);
CREATE INDEX tb_btc_prc_grp_disp_hist_idx1 ON public.tb_btc_prc_grp_disp_hist USING btree (object_pri_key_1);
CREATE INDEX tb_btc_prc_grp_disp_workflow_group_id_idx122 ON public.tb_btc_prc_grp_disp_hist USING btree (object_pri_key_1, process_group, prc_grp_disp);
CREATE INDEX tb_cop_buss_txn_object_pri_key_1idx1 ON public.tb_btc_prc_grp_disp_hist USING btree (object_pri_key_1, text_1);


-- public.tb_btc_prc_grp_disp_mst_bkp definition

-- Drop table

-- DROP TABLE public.tb_btc_prc_grp_disp_mst_bkp;

CREATE TABLE public.tb_btc_prc_grp_disp_mst_bkp (
	workflow_group_id varchar(50) NULL,
	process_group varchar(50) NULL,
	prc_grp_disp varchar(50) NULL,
	prc_grp_disp_category varchar(50) NULL,
	effective_date date NULL,
	ineffective_date date NULL,
	internal_flag varchar(1) NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamptz NULL,
	modified_by varchar(50) NULL,
	modified_timestamp timestamptz NULL,
	prc_grp_disp_desc varchar(20) NULL,
	exec_seq int4 NULL
);


-- public.tb_btc_prc_grp_disp_mst_hist definition

-- Drop table

-- DROP TABLE public.tb_btc_prc_grp_disp_mst_hist;

CREATE TABLE public.tb_btc_prc_grp_disp_mst_hist (
	workflow_group_id varchar(50) NULL,
	process_group varchar(50) NULL,
	prc_grp_disp varchar(50) NULL,
	prc_grp_disp_category varchar(50) NULL,
	effective_date date NULL,
	ineffective_date date NULL,
	internal_flag varchar(1) NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamptz NULL,
	modified_by varchar(50) NULL,
	modified_timestamp timestamptz NULL,
	prc_grp_disp_desc varchar(20) NULL,
	exec_seq int4 NULL,
	log_action varchar(10) NULL,
	log_time timestamp NULL,
	log_user varchar(100) NULL,
	system_name varchar(100) NULL
);


-- public.tb_btc_prc_grp_mst_bkp definition

-- Drop table

-- DROP TABLE public.tb_btc_prc_grp_mst_bkp;

CREATE TABLE public.tb_btc_prc_grp_mst_bkp (
	workflow_group_id varchar(50) NULL,
	process_group varchar(50) NULL,
	parent_process_group varchar(50) NULL,
	is_auto_start_with_p varchar(1) NULL,
	auto_start_disp varchar(50) NULL,
	does_p_autp_start varchar(1) NULL,
	parent_auto_start_disp varchar(50) NULL,
	is_auto_end_with_p varchar(1) NULL,
	auto_end_success_disp varchar(50) NULL,
	auto_end_fail_disp varchar(50) NULL,
	does_p_auto_end varchar(1) NULL,
	p_auto_end_s_disp varchar(50) NULL,
	effective_date date NULL,
	ineffective_date date NULL,
	internal_flag varchar(1) NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamptz NULL,
	modified_by varchar(50) NULL,
	modified_timestamp timestamptz NULL,
	p_auto_end_f_disp varchar(50) NULL,
	p_auto_end_with_all_c varchar(1) NULL,
	p_end_disp_all_success varchar(50) NULL,
	p_end_disp_1_fail varchar(50) NULL,
	default_exec_level varchar(20) NULL
);


-- public.tb_btc_workflowgroup_mst definition

-- Drop table

-- DROP TABLE public.tb_btc_workflowgroup_mst;

CREATE TABLE public.tb_btc_workflowgroup_mst (
	workflow_group_id varchar(50) NOT NULL,
	workflow_group_desc varchar(200) NULL,
	effective_date date NULL DEFAULT now(),
	ineffective_date date NULL DEFAULT now(),
	internal_flag varchar(1) NULL DEFAULT 'y'::character varying,
	created_by varchar(50) NULL,
	created_timestamp timestamptz NULL DEFAULT now(),
	modified_by varchar(50) NULL,
	modified_timestamp timestamptz NULL,
	CONSTRAINT tb_btc_workflowgroup_mst_pk PRIMARY KEY (workflow_group_id)
);


-- public.tb_consent_data definition

-- Drop table

-- DROP TABLE public.tb_consent_data;

CREATE TABLE public.tb_consent_data (
	object_type varchar(50) NOT NULL,
	object_pri_key_1 varchar(50) NOT NULL,
	object_pri_key_2 varchar(50) NOT NULL,
	object_pri_key_3 varchar(50) NOT NULL,
	consent_type varchar(50) NOT NULL,
	consent_sub_type varchar(50) NOT NULL,
	request_sent_timestamp varchar NULL,
	request_expiry_timestamp varchar NULL,
	request_url varchar(2000) NULL,
	request_sent_to_mobile_no varchar(10) NULL,
	requert_sent_to_email varchar(50) NULL,
	request_status varchar(20) NULL,
	status_source varchar(20) NULL,
	status_update_timestamp varchar NULL,
	status_update_lat varchar(100) NULL,
	status_update_long varchar(100) NULL,
	status_update_address text NULL,
	final_status varchar(50) NULL,
	final_status_change_allowed varchar(10) NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamp NULL DEFAULT CURRENT_TIMESTAMP,
	modified_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	CONSTRAINT tb_consent_data_pkey PRIMARY KEY (object_pri_key_1, object_pri_key_2, object_pri_key_3, consent_type)
);
CREATE INDEX tb_consent_data_idx ON public.tb_consent_data USING btree (object_pri_key_1, object_pri_key_2, object_pri_key_3, object_type, consent_type, consent_sub_type, request_url);

-- Table Triggers

create trigger trg_inst_consent_hist before
insert
    or
delete
    or
update
    on
    public.tb_consent_data for each row execute function tf_ins_consent_hist();


-- public.tb_consent_data_hist definition

-- Drop table

-- DROP TABLE public.tb_consent_data_hist;

CREATE TABLE public.tb_consent_data_hist (
	object_type varchar(50) NOT NULL,
	object_pri_key_1 varchar(50) NOT NULL,
	object_pri_key_2 varchar(50) NOT NULL,
	object_pri_key_3 varchar(50) NOT NULL,
	consent_type varchar(50) NOT NULL,
	consent_sub_type varchar(50) NOT NULL,
	request_sent_timestamp varchar NULL,
	request_expiry_timestamp varchar NULL,
	request_url varchar(2000) NULL,
	request_sent_to_mobile_no varchar(10) NULL,
	requert_sent_to_email varchar(50) NULL,
	request_status varchar(20) NULL,
	status_source varchar(20) NULL,
	status_update_timestamp varchar NULL,
	status_update_lat varchar(100) NULL,
	status_update_long varchar(100) NULL,
	status_update_address text NULL,
	final_status varchar(50) NULL,
	final_status_change_allowed varchar(10) NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamp NULL DEFAULT CURRENT_TIMESTAMP,
	modified_by varchar(50) NULL,
	modified_timestamp timestamp NULL
);


-- public.tb_cop_buss_obj_txn definition

-- Drop table

-- DROP TABLE public.tb_cop_buss_obj_txn;

CREATE TABLE public.tb_cop_buss_obj_txn (
	object_type varchar(50) NOT NULL,
	object_pri_key_1 varchar(50) NOT NULL,
	object_pri_key_2 varchar(50) NOT NULL,
	object_pri_key_3 varchar(50) NOT NULL,
	object_data json NULL,
	server_version_number int4 NULL,
	device_modification_number int4 NULL,
	login_id varchar(50) NULL,
	modify_emp_id varchar(50) NULL,
	device_create_timestamp timestamp NULL,
	device_modify_timestamp timestamp NULL,
	create_pw_session_id varchar(500) NULL,
	last_pw_session_id varchar(500) NULL,
	is_active varchar(1) NULL DEFAULT 'Y'::character varying,
	deactivated_by varchar(50) NULL,
	deactivated_by_prc varchar(50) NULL,
	deactivated_timestamp timestamp NULL,
	text_1 varchar(200) NULL,
	text_2 text NULL,
	text_3 varchar(200) NULL,
	text_4 varchar(200) NULL,
	text_5 varchar(200) NULL,
	text_6 varchar(200) NULL,
	text_7 varchar(200) NULL,
	text_8 varchar(200) NULL,
	text_9 varchar(200) NULL,
	text_10 varchar(200) NULL,
	create_app_id varchar(50) NULL,
	modify_app_id varchar(50) NULL,
	created_timestamp timestamp NULL,
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	modified_by varchar(50) NULL,
	create_user_hierarchy_id varchar(200) NULL,
	lead_journey varchar(10) NULL,
	CONSTRAINT tb_cop_buss_obj_txn_pkey PRIMARY KEY (object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3)
);
CREATE INDEX idx_tb_cop_buss_obj_txn_bsn ON public.tb_cop_buss_obj_txn USING btree (((((object_data -> 'AOF'::text) -> 'BUS_DATA'::text) ->> 'BUS_NAME_1'::text)));
CREATE INDEX idx_tb_cop_buss_obj_txn_code ON public.tb_cop_buss_obj_txn USING btree ((((((object_data -> 'AOF'::text) -> 'CA'::text) -> 'HOME_BRANCH'::text) ->> 'CODE'::text)));
CREATE INDEX idx_tb_cop_buss_obj_txn_crn ON public.tb_cop_buss_obj_txn USING btree (((((object_data -> 'AOF'::text) -> 'CA'::text) ->> 'CRN_ENTITY'::text)));
CREATE INDEX idx_tb_cop_buss_obj_txn_opn ON public.tb_cop_buss_obj_txn USING btree ((((object_data -> 'AOF'::text) ->> 'ORG_PAN_NO'::text)));
CREATE INDEX idx_tb_cop_buss_obj_txn_pcm ON public.tb_cop_buss_obj_txn USING btree ((((object_data -> 'AOF'::text) ->> 'PRIMARY_CONTACT_MOBILE'::text)));
CREATE INDEX idx_tb_cop_buss_obj_txn_prgm ON public.tb_cop_buss_obj_txn USING btree ((((((object_data -> 'AOF'::text) -> 'CA'::text) -> 'PROGRAM_OPTION'::text) ->> 'VALUE'::text)));
CREATE INDEX idx_tb_cop_buss_obj_txn_wfj ON public.tb_cop_buss_obj_txn USING btree ((((object_data -> 'AOF'::text) ->> 'WORKFLOW_JOURNEY'::text)));
CREATE INDEX idx_tb_cop_buss_obj_txn_wfs ON public.tb_cop_buss_obj_txn USING btree ((((object_data -> 'AOF'::text) ->> 'WORKFLOW_STATUS'::text)));
CREATE INDEX tb_cop_buss_obj_txn_expr_expr1_expr4_idx ON public.tb_cop_buss_obj_txn USING btree ((((object_data -> 'AOF'::text) ->> 'EMAIL_CODE'::text)));
CREATE INDEX tb_cop_buss_obj_txn_expr_idx7 ON public.tb_cop_buss_obj_txn USING btree (((((object_data -> 'AOF'::text) -> 'CA'::text) ->> 'RAZORPAY_ORDER_ID'::text)));
CREATE INDEX tb_cop_buss_obj_txn_expr_idx8 ON public.tb_cop_buss_obj_txn USING btree (((((object_data -> 'AOF'::text) -> 'CA'::text) ->> 'RAZORPAY_PAYMENT_STATUS'::text)));
CREATE INDEX tb_cop_buss_obj_txn_idx4 ON public.tb_cop_buss_obj_txn USING btree (object_pri_key_1);
CREATE INDEX tb_cop_buss_txn_active ON public.tb_cop_buss_obj_txn USING btree (is_active);
CREATE UNIQUE INDEX tb_cop_buss_txn_pkeyidx ON public.tb_cop_buss_obj_txn USING btree (object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, text_1);
CREATE UNIQUE INDEX tb_cop_buss_txn_pkeyidx1 ON public.tb_cop_buss_obj_txn USING btree (object_pri_key_1, text_1);
CREATE INDEX tb_cop_buss_txn_text1 ON public.tb_cop_buss_obj_txn USING btree (text_1);

-- Table Triggers

create trigger f_ins_hist_tables_trg_trigger after
insert
    or
delete
    or
update
    on
    public.tb_cop_buss_obj_txn for each row execute function f_ins_hist_tables_trg();


-- public.tb_cop_buss_obj_txn_hist definition

-- Drop table

-- DROP TABLE public.tb_cop_buss_obj_txn_hist;

CREATE TABLE public.tb_cop_buss_obj_txn_hist (
	object_type varchar(50) NULL,
	object_pri_key_1 varchar(50) NULL,
	object_pri_key_2 varchar(50) NULL,
	object_pri_key_3 varchar(50) NULL,
	object_data varchar NULL,
	server_version_number int4 NULL,
	device_modification_number int4 NULL,
	login_id varchar(50) NULL,
	modify_emp_id varchar(50) NULL,
	device_create_timestamp timestamp NULL,
	device_modify_timestamp timestamp NULL,
	create_pw_session_id varchar(500) NULL,
	last_pw_session_id varchar(500) NULL,
	is_active varchar(1) NULL,
	deactivated_by varchar(50) NULL,
	deactivated_by_prc varchar(50) NULL,
	deactivated_timestamp timestamp NULL,
	text_1 varchar(200) NULL,
	text_2 text NULL,
	text_3 varchar(200) NULL,
	text_4 varchar(200) NULL,
	text_5 varchar(200) NULL,
	text_6 varchar(200) NULL,
	text_7 varchar(200) NULL,
	text_8 varchar(200) NULL,
	text_9 varchar(200) NULL,
	text_10 varchar(200) NULL,
	create_app_id varchar(50) NULL,
	modify_app_id varchar(50) NULL,
	created_timestamp timestamp NULL,
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	modified_by varchar(50) NULL,
	create_user_hierarchy_id varchar(200) NULL
);
CREATE INDEX tb_cop_buss_obj_txn_hist_idx ON public.tb_cop_buss_obj_txn_hist USING btree (object_pri_key_1, text_1);


-- public.tb_cop_metadata_txn definition

-- Drop table

-- DROP TABLE public.tb_cop_metadata_txn;

CREATE TABLE public.tb_cop_metadata_txn (
	object_pri_key_1 varchar(50) NOT NULL,
	object_pri_key_2 varchar(50) NOT NULL,
	object_pri_key_3 varchar(50) NOT NULL,
	crn varchar(20) NULL,
	account_no varchar(20) NULL,
	contact_mobile varchar(20) NULL,
	id_name_add varchar(100) NULL,
	entity_name varchar(200) NULL,
	scheme_code varchar(200) NULL,
	stat varchar(100) NULL,
	stat1 varchar(100) NULL,
	crn_entity varchar(50) NULL,
	aus_crn varchar(50) NULL,
	privy varchar(50) NULL,
	caseid varchar(50) NULL,
	lead_id varchar(50) NULL,
	opening_branch varchar(200) NULL,
	constitution_type varchar(50) NULL,
	region_name varchar(50) NULL,
	device_create_timestamp timestamp NULL,
	device_modify_timestamp timestamp NULL,
	assigned_user_id varchar(50) NULL,
	assigned_rm varchar(100) NULL,
	current_workstep varchar(100) NULL,
	assigned_to varchar(50) NULL,
	login_id varchar(50) NULL,
	modify_emp_id varchar(50) NULL,
	text_1 varchar(100) NULL,
	text_2 text NULL,
	text_3 varchar(100) NULL,
	text_4 varchar(100) NULL,
	text_5 varchar(100) NULL,
	text_6 varchar(100) NULL,
	text_7 varchar(100) NULL,
	text_8 varchar(100) NULL,
	text_9 varchar(100) NULL,
	text_10 varchar(100) NULL,
	create_app_id varchar(100) NULL,
	modify_app_id varchar(100) NULL,
	created_timestamp timestamp NULL,
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	modified_by varchar(50) NULL,
	create_user_hierarchy_id varchar(100) NULL,
	is_active varchar(20) NULL,
	workflow_status varchar(100) NULL,
	program_option varchar(50) NULL,
	object_data json NULL,
	lead_journey varchar(10) NULL,
	CONSTRAINT tb_cop_metadata_txn_pkey PRIMARY KEY (object_pri_key_1, object_pri_key_2, object_pri_key_3)
);
CREATE INDEX tb_cop_metadata_txn_account_no ON public.tb_cop_metadata_txn USING btree (account_no);
CREATE INDEX tb_cop_metadata_txn_btree ON public.tb_cop_metadata_txn USING btree (is_active);
CREATE INDEX tb_cop_metadata_txn_workflow_status ON public.tb_cop_metadata_txn USING btree (workflow_status);
CREATE UNIQUE INDEX tb_metadata_pkeyidx ON public.tb_cop_metadata_txn USING btree (object_pri_key_1, object_pri_key_2, object_pri_key_3, text_1);
CREATE UNIQUE INDEX tb_metadata_pkeyidx1 ON public.tb_cop_metadata_txn USING btree (object_pri_key_1, text_1);


-- public.tb_db_exception_log definition

-- Drop table

-- DROP TABLE public.tb_db_exception_log;

CREATE TABLE public.tb_db_exception_log (
	org_id varchar(50) NULL,
	app_id varchar(50) NULL,
	service_name varchar(50) NULL,
	object_name varchar(50) NULL,
	pw_request_id varchar(500) NULL,
	login_id varchar(50) NULL,
	object_pri_key_1 varchar(50) NULL,
	object_pri_key_2 varchar(50) NULL,
	object_pri_key_3 varchar(50) NULL,
	object_type varchar(50) NULL,
	err_state text NULL,
	err_msg text NULL,
	err_detail text NULL,
	err_hint text NULL,
	err_context text NULL,
	ref_data_1 text NULL,
	ref_data_2 text NULL,
	ref_data_3 text NULL,
	ref_data_4 text NULL,
	ref_data_5 text NULL,
	ref_data_6 text NULL,
	ref_data_7 text NULL,
	exception_timestamp timestamp NULL,
	is_processed_1 varchar(1) NULL DEFAULT 'N'::character varying,
	is_processed_2 varchar(1) NULL DEFAULT 'N'::character varying,
	is_processed_1_timestamp timestamp NULL,
	is_processed_2_timestamp timestamp NULL,
	developer_remarks varchar(1000) NULL,
	server_ver_no float8 NULL,
	device_mod_no float8 NULL
);


-- public.tb_db_exception_log_tt definition

-- Drop table

-- DROP TABLE public.tb_db_exception_log_tt;

CREATE TABLE public.tb_db_exception_log_tt (
	org_id varchar(50) NULL,
	app_id varchar(50) NULL,
	service_name varchar(50) NULL,
	object_name varchar(50) NULL,
	pw_request_id varchar(500) NULL,
	login_id varchar(50) NULL,
	object_pri_key_1 varchar(50) NULL,
	object_pri_key_2 varchar(50) NULL,
	object_pri_key_3 varchar(50) NULL,
	object_type varchar(50) NULL,
	err_state text NULL,
	err_msg text NULL,
	err_detail text NULL,
	err_hint text NULL,
	err_context text NULL,
	ref_data_1 text NULL,
	ref_data_2 text NULL,
	ref_data_3 text NULL,
	ref_data_4 text NULL,
	ref_data_5 text NULL,
	ref_data_6 text NULL,
	ref_data_7 text NULL,
	exception_timestamp timestamp NULL,
	is_processed_1 varchar(1) NULL DEFAULT 'N'::character varying,
	is_processed_2 varchar(1) NULL DEFAULT 'N'::character varying,
	is_processed_1_timestamp timestamp NULL,
	is_processed_2_timestamp timestamp NULL,
	developer_remarks varchar(1000) NULL,
	server_ver_no float8 NULL,
	device_mod_no float8 NULL
);


-- public.tb_dms_json_update_1 definition

-- Drop table

-- DROP TABLE public.tb_dms_json_update_1;

CREATE TABLE public.tb_dms_json_update_1 (
	object_pri_key_1 text NULL,
	object_data jsonb NULL,
	created_date text NULL,
	api_job_processor text NULL,
	updated_path text NULL
);


-- public.tb_do_ctrl_aadhar_property definition

-- Drop table

-- DROP TABLE public.tb_do_ctrl_aadhar_property;

CREATE TABLE public.tb_do_ctrl_aadhar_property (
	wadh_version varchar(50) NULL,
	aadhar_environment varchar(50) NULL,
	device_type varchar(50) NULL,
	aadhar_url varchar(500) NULL,
	str_version varchar(50) NULL,
	aadhaar_version varchar(50) NULL,
	ftype varchar(10) NULL
);


-- public.tb_emp_hrms definition

-- Drop table

-- DROP TABLE public.tb_emp_hrms;

CREATE TABLE public.tb_emp_hrms (
	employee_number varchar(100) NOT NULL,
	oracle_employee_number varchar(100) NULL,
	company varchar(100) NULL,
	person_id varchar(100) NULL,
	attribute3 varchar(100) NULL,
	prefix varchar(100) NULL,
	first_name varchar(100) NULL,
	middle_names varchar(100) NULL,
	last_name varchar(100) NULL,
	email_address varchar(100) NULL,
	gender varchar(20) NULL,
	dob varchar(100) NULL,
	marital_status varchar(100) NULL,
	paddress1 varchar(200) NULL,
	paddress2 varchar(200) NULL,
	paddress3 varchar(200) NULL,
	pcity varchar(100) NULL,
	ppin varchar(100) NULL,
	taddress1 varchar(200) NULL,
	taddress2 varchar(200) NULL,
	taddress3 varchar(200) NULL,
	tcity varchar(100) NULL,
	tpin varchar(100) NULL,
	supervisor_emp_no varchar(100) NULL,
	sup_company varchar(100) NULL,
	doj varchar(100) NULL,
	father_husband_name varchar(100) NULL,
	division varchar(100) NULL,
	"function" varchar(100) NULL,
	function_id varchar(100) NULL,
	designation_id varchar(100) NULL,
	payroll_id varchar(100) NULL,
	designation_label_id varchar(100) NULL,
	"role" varchar(100) NULL,
	loc_code varchar(100) NULL,
	location_name varchar(200) NULL,
	date_employee_data_verified varchar(100) NULL,
	lob_code varchar(100) NULL,
	lob varchar(100) NULL,
	cc_code varchar(100) NULL,
	cc_name varchar(100) NULL,
	category varchar(100) NULL,
	domain_login_id varchar(100) NULL,
	last_working_date varchar(100) NULL,
	rm_name varchar(100) NULL,
	supervisor_no varchar(100) NULL,
	"source" varchar(100) NULL,
	kpo_code varchar(100) NULL,
	supervisor_name varchar(100) NULL,
	mobile_number varchar(100) NULL,
	assignment_change_date varchar(100) NULL,
	loc_code_new varchar(100) NULL,
	ing_emp_type varchar(100) NULL,
	segment varchar(100) NULL,
	emp_hierarchy_id varchar(1000) NULL,
	emp_branch_hierarchy_id varchar(1000) NULL,
	created_date timestamp NULL,
	created_by varchar(50) NULL,
	modified_date timestamp NULL,
	modified_by varchar(50) NULL,
	loc_code_view varchar(20) NULL,
	is_active varchar(10) NULL,
	bc_code varchar(20) NULL,
	emp_lwd_date timestamp NULL,
	prc_grp varchar(100) NULL,
	login_status varchar(100) NULL,
	supervisor_mobile_number varchar(100) NULL,
	branch_code varchar(200) NULL,
	CONSTRAINT tb_emp_hrms_pk PRIMARY KEY (employee_number)
);
CREATE INDEX tb_emp_hrms_branch ON public.tb_emp_hrms USING btree (branch_code);
CREATE INDEX tb_emp_hrms_emp ON public.tb_emp_hrms USING btree (employee_number);
CREATE INDEX tb_emp_hrms_supemp ON public.tb_emp_hrms USING btree (supervisor_emp_no);


-- public.tb_emp_hrms1 definition

-- Drop table

-- DROP TABLE public.tb_emp_hrms1;

CREATE TABLE public.tb_emp_hrms1 (
	employee_number varchar(100) NULL,
	oracle_employee_number varchar(100) NULL,
	company varchar(100) NULL,
	person_id varchar(100) NULL,
	attribute3 varchar(100) NULL,
	prefix varchar(100) NULL,
	first_name varchar(100) NULL,
	middle_names varchar(100) NULL,
	last_name varchar(100) NULL,
	email_address varchar(100) NULL,
	gender varchar(20) NULL,
	dob varchar(100) NULL,
	marital_status varchar(100) NULL,
	paddress1 varchar(200) NULL,
	paddress2 varchar(200) NULL,
	paddress3 varchar(200) NULL,
	pcity varchar(100) NULL,
	ppin varchar(100) NULL,
	taddress1 varchar(200) NULL,
	taddress2 varchar(200) NULL,
	taddress3 varchar(200) NULL,
	tcity varchar(100) NULL,
	tpin varchar(100) NULL,
	supervisor_emp_no varchar(100) NULL,
	sup_company varchar(100) NULL,
	doj varchar(100) NULL,
	father_husband_name varchar(100) NULL,
	division varchar(100) NULL,
	"function" varchar(100) NULL,
	function_id varchar(100) NULL,
	designation_id varchar(100) NULL,
	payroll_id varchar(100) NULL,
	designation_label_id varchar(100) NULL,
	"role" varchar(100) NULL,
	loc_code varchar(100) NULL,
	location_name varchar(200) NULL,
	date_employee_data_verified varchar(100) NULL,
	lob_code varchar(100) NULL,
	lob varchar(100) NULL,
	cc_code varchar(100) NULL,
	cc_name varchar(100) NULL,
	category varchar(100) NULL,
	domain_login_id varchar(100) NULL,
	last_working_date varchar(100) NULL,
	rm_name varchar(100) NULL,
	supervisor_no varchar(100) NULL,
	"source" varchar(100) NULL,
	kpo_code varchar(100) NULL,
	supervisor_name varchar(100) NULL,
	mobile_number varchar(100) NULL,
	assignment_change_date varchar(100) NULL,
	loc_code_new varchar(100) NULL,
	ing_emp_type varchar(100) NULL,
	segment varchar(100) NULL,
	emp_hierarchy_id varchar(1000) NULL,
	emp_branch_hierarchy_id varchar(1000) NULL,
	created_date timestamp NULL,
	created_by varchar(50) NULL,
	modified_date timestamp NULL,
	modified_by varchar(50) NULL,
	loc_code_view varchar(20) NULL,
	is_active varchar(10) NULL,
	bc_code varchar(20) NULL,
	emp_lwd_date timestamp NULL,
	prc_grp varchar(100) NULL,
	login_status varchar(100) NULL,
	supervisor_mobile_number varchar(100) NULL,
	branch_code varchar(200) NULL
);


-- public.tb_emp_hrms_23june definition

-- Drop table

-- DROP TABLE public.tb_emp_hrms_23june;

CREATE TABLE public.tb_emp_hrms_23june (
	employee_number varchar(100) NULL,
	oracle_employee_number varchar(100) NULL,
	company varchar(100) NULL,
	person_id varchar(100) NULL,
	attribute3 varchar(100) NULL,
	prefix varchar(100) NULL,
	first_name varchar(100) NULL,
	middle_names varchar(100) NULL,
	last_name varchar(100) NULL,
	email_address varchar(100) NULL,
	gender varchar(20) NULL,
	dob varchar(100) NULL,
	marital_status varchar(100) NULL,
	paddress1 varchar(200) NULL,
	paddress2 varchar(200) NULL,
	paddress3 varchar(200) NULL,
	pcity varchar(100) NULL,
	ppin varchar(100) NULL,
	taddress1 varchar(200) NULL,
	taddress2 varchar(200) NULL,
	taddress3 varchar(200) NULL,
	tcity varchar(100) NULL,
	tpin varchar(100) NULL,
	supervisor_emp_no varchar(100) NULL,
	sup_company varchar(100) NULL,
	doj varchar(100) NULL,
	father_husband_name varchar(100) NULL,
	division varchar(100) NULL,
	"function" varchar(100) NULL,
	function_id varchar(100) NULL,
	designation_id varchar(100) NULL,
	payroll_id varchar(100) NULL,
	designation_label_id varchar(100) NULL,
	"role" varchar(100) NULL,
	loc_code varchar(100) NULL,
	location_name varchar(200) NULL,
	date_employee_data_verified varchar(100) NULL,
	lob_code varchar(100) NULL,
	lob varchar(100) NULL,
	cc_code varchar(100) NULL,
	cc_name varchar(100) NULL,
	category varchar(100) NULL,
	domain_login_id varchar(100) NULL,
	last_working_date varchar(100) NULL,
	rm_name varchar(100) NULL,
	supervisor_no varchar(100) NULL,
	"source" varchar(100) NULL,
	kpo_code varchar(100) NULL,
	supervisor_name varchar(100) NULL,
	mobile_number varchar(100) NULL,
	assignment_change_date varchar(100) NULL,
	loc_code_new varchar(100) NULL,
	ing_emp_type varchar(100) NULL,
	segment varchar(100) NULL,
	emp_hierarchy_id varchar(1000) NULL,
	emp_branch_hierarchy_id varchar(1000) NULL,
	created_date timestamp NULL,
	created_by varchar(50) NULL,
	modified_date timestamp NULL,
	modified_by varchar(50) NULL,
	loc_code_view varchar(20) NULL,
	is_active varchar(10) NULL,
	bc_code varchar(20) NULL,
	emp_lwd_date timestamp NULL,
	prc_grp varchar(100) NULL,
	login_status varchar(100) NULL,
	supervisor_mobile_number varchar(100) NULL,
	branch_code varchar(200) NULL
);


-- public.tb_emp_hrms_25june definition

-- Drop table

-- DROP TABLE public.tb_emp_hrms_25june;

CREATE TABLE public.tb_emp_hrms_25june (
	employee_number varchar(100) NULL,
	oracle_employee_number varchar(100) NULL,
	company varchar(100) NULL,
	person_id varchar(100) NULL,
	attribute3 varchar(100) NULL,
	prefix varchar(100) NULL,
	first_name varchar(100) NULL,
	middle_names varchar(100) NULL,
	last_name varchar(100) NULL,
	email_address varchar(100) NULL,
	gender varchar(20) NULL,
	dob varchar(100) NULL,
	marital_status varchar(100) NULL,
	paddress1 varchar(200) NULL,
	paddress2 varchar(200) NULL,
	paddress3 varchar(200) NULL,
	pcity varchar(100) NULL,
	ppin varchar(100) NULL,
	taddress1 varchar(200) NULL,
	taddress2 varchar(200) NULL,
	taddress3 varchar(200) NULL,
	tcity varchar(100) NULL,
	tpin varchar(100) NULL,
	supervisor_emp_no varchar(100) NULL,
	sup_company varchar(100) NULL,
	doj varchar(100) NULL,
	father_husband_name varchar(100) NULL,
	division varchar(100) NULL,
	"function" varchar(100) NULL,
	function_id varchar(100) NULL,
	designation_id varchar(100) NULL,
	payroll_id varchar(100) NULL,
	designation_label_id varchar(100) NULL,
	"role" varchar(100) NULL,
	loc_code varchar(100) NULL,
	location_name varchar(200) NULL,
	date_employee_data_verified varchar(100) NULL,
	lob_code varchar(100) NULL,
	lob varchar(100) NULL,
	cc_code varchar(100) NULL,
	cc_name varchar(100) NULL,
	category varchar(100) NULL,
	domain_login_id varchar(100) NULL,
	last_working_date varchar(100) NULL,
	rm_name varchar(100) NULL,
	supervisor_no varchar(100) NULL,
	"source" varchar(100) NULL,
	kpo_code varchar(100) NULL,
	supervisor_name varchar(100) NULL,
	mobile_number varchar(100) NULL,
	assignment_change_date varchar(100) NULL,
	loc_code_new varchar(100) NULL,
	ing_emp_type varchar(100) NULL,
	segment varchar(100) NULL,
	emp_hierarchy_id varchar(1000) NULL,
	emp_branch_hierarchy_id varchar(1000) NULL,
	created_date timestamp NULL,
	created_by varchar(50) NULL,
	modified_date timestamp NULL,
	modified_by varchar(50) NULL,
	loc_code_view varchar(20) NULL,
	is_active varchar(10) NULL,
	bc_code varchar(20) NULL,
	emp_lwd_date timestamp NULL,
	prc_grp varchar(100) NULL,
	login_status varchar(100) NULL,
	supervisor_mobile_number varchar(100) NULL,
	branch_code varchar(200) NULL
);


-- public.tb_emp_hrms_bkp_12_9_21 definition

-- Drop table

-- DROP TABLE public.tb_emp_hrms_bkp_12_9_21;

CREATE TABLE public.tb_emp_hrms_bkp_12_9_21 (
	employee_number varchar(100) NULL,
	oracle_employee_number varchar(100) NULL,
	company varchar(100) NULL,
	person_id varchar(100) NULL,
	attribute3 varchar(100) NULL,
	prefix varchar(100) NULL,
	first_name varchar(100) NULL,
	middle_names varchar(100) NULL,
	last_name varchar(100) NULL,
	email_address varchar(100) NULL,
	gender varchar(20) NULL,
	dob varchar(100) NULL,
	marital_status varchar(100) NULL,
	paddress1 varchar(200) NULL,
	paddress2 varchar(200) NULL,
	paddress3 varchar(200) NULL,
	pcity varchar(100) NULL,
	ppin varchar(100) NULL,
	taddress1 varchar(200) NULL,
	taddress2 varchar(200) NULL,
	taddress3 varchar(200) NULL,
	tcity varchar(100) NULL,
	tpin varchar(100) NULL,
	supervisor_emp_no varchar(100) NULL,
	sup_company varchar(100) NULL,
	doj varchar(100) NULL,
	father_husband_name varchar(100) NULL,
	division varchar(100) NULL,
	"function" varchar(100) NULL,
	function_id varchar(100) NULL,
	designation_id varchar(100) NULL,
	payroll_id varchar(100) NULL,
	designation_label_id varchar(100) NULL,
	"role" varchar(100) NULL,
	loc_code varchar(100) NULL,
	location_name varchar(200) NULL,
	date_employee_data_verified varchar(100) NULL,
	lob_code varchar(100) NULL,
	lob varchar(100) NULL,
	cc_code varchar(100) NULL,
	cc_name varchar(100) NULL,
	category varchar(100) NULL,
	domain_login_id varchar(100) NULL,
	last_working_date varchar(100) NULL,
	rm_name varchar(100) NULL,
	supervisor_no varchar(100) NULL,
	"source" varchar(100) NULL,
	kpo_code varchar(100) NULL,
	supervisor_name varchar(100) NULL,
	mobile_number varchar(100) NULL,
	assignment_change_date varchar(100) NULL,
	loc_code_new varchar(100) NULL,
	ing_emp_type varchar(100) NULL,
	segment varchar(100) NULL,
	emp_hierarchy_id varchar(1000) NULL,
	emp_branch_hierarchy_id varchar(1000) NULL,
	created_date timestamp NULL,
	created_by varchar(50) NULL,
	modified_date timestamp NULL,
	modified_by varchar(50) NULL,
	loc_code_view varchar(20) NULL,
	is_active varchar(10) NULL,
	bc_code varchar(20) NULL,
	emp_lwd_date timestamp NULL,
	prc_grp varchar(100) NULL,
	login_status varchar(100) NULL,
	supervisor_mobile_number varchar(100) NULL,
	branch_code varchar(200) NULL
);


-- public.tb_emp_hrms_bkp_jatin definition

-- Drop table

-- DROP TABLE public.tb_emp_hrms_bkp_jatin;

CREATE TABLE public.tb_emp_hrms_bkp_jatin (
	employee_number varchar(100) NOT NULL,
	oracle_employee_number varchar(100) NULL,
	company varchar(100) NULL,
	person_id varchar(100) NULL,
	attribute3 varchar(100) NULL,
	prefix varchar(100) NULL,
	first_name varchar(100) NULL,
	middle_names varchar(100) NULL,
	last_name varchar(100) NULL,
	email_address varchar(100) NULL,
	gender varchar(20) NULL,
	dob varchar(100) NULL,
	marital_status varchar(100) NULL,
	paddress1 varchar(200) NULL,
	paddress2 varchar(200) NULL,
	paddress3 varchar(200) NULL,
	pcity varchar(100) NULL,
	ppin varchar(100) NULL,
	taddress1 varchar(200) NULL,
	taddress2 varchar(200) NULL,
	taddress3 varchar(200) NULL,
	tcity varchar(100) NULL,
	tpin varchar(100) NULL,
	supervisor_emp_no varchar(100) NULL,
	sup_company varchar(100) NULL,
	doj varchar(100) NULL,
	father_husband_name varchar(100) NULL,
	division varchar(100) NULL,
	"function" varchar(100) NULL,
	function_id varchar(100) NULL,
	designation_id varchar(100) NULL,
	payroll_id varchar(100) NULL,
	designation_label_id varchar(100) NULL,
	"role" varchar(500) NULL,
	loc_code varchar(100) NULL,
	location_name varchar(200) NULL,
	date_employee_data_verified varchar(100) NULL,
	lob_code varchar(100) NULL,
	lob varchar(100) NULL,
	cc_code varchar(100) NULL,
	cc_name varchar(100) NULL,
	category varchar(100) NULL,
	domain_login_id varchar(100) NULL,
	last_working_date varchar(100) NULL,
	rm_name varchar(100) NULL,
	supervisor_no varchar(100) NULL,
	"source" varchar(100) NULL,
	kpo_code varchar(100) NULL,
	supervisor_name varchar(100) NULL,
	mobile_number varchar(100) NULL,
	assignment_change_date varchar(100) NULL,
	loc_code_new varchar(100) NULL,
	ing_emp_type varchar(100) NULL,
	segment varchar(100) NULL,
	emp_hierarchy_id varchar(1000) NULL,
	emp_branch_hierarchy_id varchar(1000) NULL,
	created_date timestamp NULL,
	created_by varchar(50) NULL,
	modified_date timestamp NULL,
	modified_by varchar(50) NULL,
	loc_code_view varchar(20) NULL,
	is_active varchar(10) NULL,
	bc_code varchar(20) NULL,
	emp_lwd_date timestamp NULL,
	prc_grp varchar(100) NULL,
	login_status varchar(100) NULL,
	supervisor_mobile_number varchar(100) NULL,
	branch_code varchar(200) NULL,
	CONSTRAINT tb_emp_hrms_pkey_ja PRIMARY KEY (employee_number)
);


-- public.tb_emp_hrms_hist definition

-- Drop table

-- DROP TABLE public.tb_emp_hrms_hist;

CREATE TABLE public.tb_emp_hrms_hist (
	employee_number varchar(100) NULL,
	oracle_employee_number varchar(100) NULL,
	company varchar(100) NULL,
	person_id varchar(100) NULL,
	attribute3 varchar(100) NULL,
	prefix varchar(100) NULL,
	first_name varchar(100) NULL,
	middle_names varchar(100) NULL,
	last_name varchar(100) NULL,
	email_address varchar(100) NULL,
	gender varchar(20) NULL,
	dob varchar(100) NULL,
	marital_status varchar(100) NULL,
	paddress1 varchar(200) NULL,
	paddress2 varchar(200) NULL,
	paddress3 varchar(200) NULL,
	pcity varchar(100) NULL,
	ppin varchar(100) NULL,
	taddress1 varchar(200) NULL,
	taddress2 varchar(200) NULL,
	taddress3 varchar(200) NULL,
	tcity varchar(100) NULL,
	tpin varchar(100) NULL,
	supervisor_emp_no varchar(100) NULL,
	sup_company varchar(100) NULL,
	doj varchar(100) NULL,
	father_husband_name varchar(100) NULL,
	division varchar(100) NULL,
	"function" varchar(100) NULL,
	function_id varchar(100) NULL,
	designation_id varchar(100) NULL,
	payroll_id varchar(100) NULL,
	designation_label_id varchar(100) NULL,
	"role" varchar(100) NULL,
	loc_code varchar(100) NULL,
	location_name varchar(200) NULL,
	date_employee_data_verified varchar(100) NULL,
	lob_code varchar(100) NULL,
	lob varchar(100) NULL,
	cc_code varchar(100) NULL,
	cc_name varchar(100) NULL,
	category varchar(100) NULL,
	domain_login_id varchar(100) NULL,
	last_working_date varchar(100) NULL,
	rm_name varchar(100) NULL,
	supervisor_no varchar(100) NULL,
	"source" varchar(100) NULL,
	kpo_code varchar(100) NULL,
	supervisor_name varchar(100) NULL,
	mobile_number varchar(100) NULL,
	assignment_change_date varchar(100) NULL,
	loc_code_new varchar(100) NULL,
	ing_emp_type varchar(100) NULL,
	segment varchar(100) NULL,
	emp_hierarchy_id varchar(1000) NULL,
	emp_branch_hierarchy_id varchar(1000) NULL,
	created_date timestamp NULL,
	created_by varchar(50) NULL,
	modified_date timestamp NULL,
	modified_by varchar(50) NULL,
	loc_code_view varchar(20) NULL,
	is_active varchar(10) NULL,
	bc_code varchar(20) NULL,
	emp_lwd_date timestamp NULL,
	prc_grp varchar(100) NULL,
	login_status varchar(100) NULL,
	supervisor_mobile_number varchar(100) NULL,
	branch_code varchar(200) NULL,
	log varchar(20) NULL
);


-- public.tb_emp_hrms_new definition

-- Drop table

-- DROP TABLE public.tb_emp_hrms_new;

CREATE TABLE public.tb_emp_hrms_new (
	employee_number varchar(100) NOT NULL,
	oracle_employee_number varchar(100) NULL,
	company varchar(100) NULL,
	person_id varchar(100) NULL,
	attribute3 varchar(100) NULL,
	prefix varchar(100) NULL,
	first_name varchar(100) NULL,
	middle_names varchar(100) NULL,
	last_name varchar(100) NULL,
	email_address varchar(100) NULL,
	gender varchar(20) NULL,
	dob varchar(100) NULL,
	marital_status varchar(100) NULL,
	paddress1 varchar(200) NULL,
	paddress2 varchar(200) NULL,
	paddress3 varchar(200) NULL,
	pcity varchar(100) NULL,
	ppin varchar(100) NULL,
	taddress1 varchar(200) NULL,
	taddress2 varchar(200) NULL,
	taddress3 varchar(200) NULL,
	tcity varchar(100) NULL,
	tpin varchar(100) NULL,
	supervisor_emp_no varchar(100) NULL,
	sup_company varchar(100) NULL,
	doj varchar(100) NULL,
	father_husband_name varchar(100) NULL,
	division varchar(100) NULL,
	"function" varchar(100) NULL,
	function_id varchar(100) NULL,
	designation_id varchar(100) NULL,
	payroll_id varchar(100) NULL,
	designation_label_id varchar(100) NULL,
	"role" varchar(100) NULL,
	loc_code varchar(100) NULL,
	location_name varchar(200) NULL,
	date_employee_data_verified varchar(100) NULL,
	lob_code varchar(100) NULL,
	lob varchar(100) NULL,
	cc_code varchar(100) NULL,
	cc_name varchar(100) NULL,
	category varchar(100) NULL,
	domain_login_id varchar(100) NULL,
	last_working_date varchar(100) NULL,
	rm_name varchar(100) NULL,
	supervisor_no varchar(100) NULL,
	"source" varchar(100) NULL,
	kpo_code varchar(100) NULL,
	supervisor_name varchar(100) NULL,
	mobile_number varchar(100) NULL,
	assignment_change_date varchar(100) NULL,
	loc_code_new varchar(100) NULL,
	ing_emp_type varchar(100) NULL,
	segment varchar(100) NULL,
	emp_hierarchy_id varchar(1000) NULL,
	emp_branch_hierarchy_id varchar(1000) NULL,
	created_date timestamp NULL,
	created_by varchar(50) NULL,
	modified_date timestamp NULL,
	modified_by varchar(50) NULL,
	loc_code_view varchar(20) NULL,
	is_active varchar(10) NULL,
	bc_code varchar(20) NULL,
	emp_lwd_date timestamp NULL,
	prc_grp varchar(100) NULL,
	login_status varchar(100) NULL,
	supervisor_mobile_number varchar(100) NULL,
	branch_code varchar(200) NULL,
	CONSTRAINT tb_emp_hrms_new_pk PRIMARY KEY (employee_number)
);


-- public.tb_emp_hrms_rollback definition

-- Drop table

-- DROP TABLE public.tb_emp_hrms_rollback;

CREATE TABLE public.tb_emp_hrms_rollback (
	employee_number varchar(100) NULL,
	oracle_employee_number varchar(100) NULL,
	company varchar(100) NULL,
	person_id varchar(100) NULL,
	attribute3 varchar(100) NULL,
	prefix varchar(100) NULL,
	first_name varchar(100) NULL,
	middle_names varchar(100) NULL,
	last_name varchar(100) NULL,
	email_address varchar(100) NULL,
	gender varchar(20) NULL,
	dob varchar(100) NULL,
	marital_status varchar(100) NULL,
	paddress1 varchar(200) NULL,
	paddress2 varchar(200) NULL,
	paddress3 varchar(200) NULL,
	pcity varchar(100) NULL,
	ppin varchar(100) NULL,
	taddress1 varchar(200) NULL,
	taddress2 varchar(200) NULL,
	taddress3 varchar(200) NULL,
	tcity varchar(100) NULL,
	tpin varchar(100) NULL,
	supervisor_emp_no varchar(100) NULL,
	sup_company varchar(100) NULL,
	doj varchar(100) NULL,
	father_husband_name varchar(100) NULL,
	division varchar(100) NULL,
	"function" varchar(100) NULL,
	function_id varchar(100) NULL,
	designation_id varchar(100) NULL,
	payroll_id varchar(100) NULL,
	designation_label_id varchar(100) NULL,
	"role" varchar(100) NULL,
	loc_code varchar(100) NULL,
	location_name varchar(200) NULL,
	date_employee_data_verified varchar(100) NULL,
	lob_code varchar(100) NULL,
	lob varchar(100) NULL,
	cc_code varchar(100) NULL,
	cc_name varchar(100) NULL,
	category varchar(100) NULL,
	domain_login_id varchar(100) NULL,
	last_working_date varchar(100) NULL,
	rm_name varchar(100) NULL,
	supervisor_no varchar(100) NULL,
	"source" varchar(100) NULL,
	kpo_code varchar(100) NULL,
	supervisor_name varchar(100) NULL,
	mobile_number varchar(100) NULL,
	assignment_change_date varchar(100) NULL,
	loc_code_new varchar(100) NULL,
	ing_emp_type varchar(100) NULL,
	segment varchar(100) NULL,
	emp_hierarchy_id varchar(1000) NULL,
	emp_branch_hierarchy_id varchar(1000) NULL,
	created_date timestamp NULL,
	created_by varchar(50) NULL,
	modified_date timestamp NULL,
	modified_by varchar(50) NULL,
	loc_code_view varchar(20) NULL,
	is_active varchar(10) NULL,
	bc_code varchar(20) NULL,
	emp_lwd_date timestamp NULL,
	prc_grp varchar(100) NULL,
	login_status varchar(100) NULL,
	supervisor_mobile_number varchar(100) NULL,
	branch_code varchar(200) NULL,
	log varchar(20) NULL
);


-- public.tb_fin_city_mapping definition

-- Drop table

-- DROP TABLE public.tb_fin_city_mapping;

CREATE TABLE public.tb_fin_city_mapping (
	fin_city_code varchar(20) NOT NULL,
	fin_city_desc varchar(100) NULL,
	created_timestamp timestamp NULL DEFAULT now(),
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL DEFAULT now(),
	modified_by varchar(50) NULL,
	CONSTRAINT tb_fin_city_mapping_pkey UNIQUE (fin_city_code, fin_city_desc)
);


-- public.tb_fin_state_mapping definition

-- Drop table

-- DROP TABLE public.tb_fin_state_mapping;

CREATE TABLE public.tb_fin_state_mapping (
	fin_state_code varchar(20) NOT NULL,
	fin_state_desc varchar(100) NULL,
	created_timestamp timestamp NULL DEFAULT now(),
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL DEFAULT now(),
	modified_by varchar(50) NULL,
	CONSTRAINT tb_fin_state_mapping_pkey PRIMARY KEY (fin_state_code)
);


-- public.tb_function_roles_mst definition

-- Drop table

-- DROP TABLE public.tb_function_roles_mst;

CREATE TABLE public.tb_function_roles_mst (
	function_code varchar(50) NOT NULL,
	role_code varchar(50) NOT NULL,
	role_name varchar(100) NULL,
	parent_role_code varchar(100) NULL,
	default_system_role_code varchar(100) NULL,
	sort_sequence int4 NULL,
	effective_date timestamp NULL DEFAULT now(),
	ineffective_date timestamp NULL DEFAULT (now() + '5000 days'::interval day),
	internal_flag varchar(1) NULL DEFAULT 'Y'::character varying,
	created_timestamp timestamp NULL DEFAULT now(),
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	modified_by varchar(50) NULL,
	server_ver_no float8 NULL,
	device_mod_no float8 NULL,
	role_alias varchar(150) NOT NULL
);


-- public.tb_function_roles_mst_bkp_12_9_21 definition

-- Drop table

-- DROP TABLE public.tb_function_roles_mst_bkp_12_9_21;

CREATE TABLE public.tb_function_roles_mst_bkp_12_9_21 (
	function_code varchar(50) NULL,
	role_code varchar(50) NULL,
	role_name varchar(100) NULL,
	parent_role_code varchar(100) NULL,
	default_system_role_code varchar(100) NULL,
	sort_sequence int4 NULL,
	effective_date timestamp NULL,
	ineffective_date timestamp NULL,
	internal_flag varchar(1) NULL,
	created_timestamp timestamp NULL,
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	modified_by varchar(50) NULL,
	server_ver_no float8 NULL,
	device_mod_no float8 NULL
);


-- public.tb_holiday_master definition

-- Drop table

-- DROP TABLE public.tb_holiday_master;

CREATE TABLE public.tb_holiday_master (
	occasion varchar(200) NULL,
	holiday_date date NULL,
	holiday_day varchar(20) NULL,
	andhra_pradesh varchar(30) NULL,
	assam varchar(30) NULL,
	bihar varchar(30) NULL,
	chandigarh varchar(30) NULL,
	chhattisgarh varchar(30) NULL,
	dadra_nagar_haveli varchar(30) NULL,
	daman_diu varchar(30) NULL,
	delhi varchar(30) NULL,
	goa varchar(30) NULL,
	gujarat varchar(30) NULL,
	haryana varchar(30) NULL,
	himachal_pradesh varchar(30) NULL,
	jammu_kashmir varchar(30) NULL,
	jharkhand varchar(30) NULL,
	karnataka varchar(30) NULL,
	kerala varchar(30) NULL,
	madhya_pradesh varchar(30) NULL,
	maharashtra varchar(30) NULL,
	meghalaya varchar(30) NULL,
	orissa varchar(30) NULL,
	pondicherry varchar(30) NULL,
	punjab varchar(30) NULL,
	sikkim varchar(30) NULL,
	rajasthan varchar(30) NULL,
	tamilnadu varchar(30) NULL,
	telangana varchar(30) NULL,
	tripura varchar(30) NULL,
	uttar_pradesh varchar(30) NULL,
	uttarakhand varchar(30) NULL,
	west_bengal varchar(30) NULL,
	is_active varchar(1) NULL,
	created_timestamp timestamp NULL DEFAULT now(),
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	modified_by varchar(50) NULL
);


-- public.tb_holiday_master_re definition

-- Drop table

-- DROP TABLE public.tb_holiday_master_re;

CREATE TABLE public.tb_holiday_master_re (
	occasion varchar(200) NULL,
	holiday_date date NULL,
	holiday_day varchar(20) NULL,
	andhra_pradesh varchar(30) NULL,
	assam varchar(30) NULL,
	bihar varchar(30) NULL,
	chandigarh varchar(30) NULL,
	chhattisgarh varchar(30) NULL,
	dadra_nagar_haveli varchar(30) NULL,
	daman_diu varchar(30) NULL,
	delhi varchar(30) NULL,
	goa varchar(30) NULL,
	gujarat varchar(30) NULL,
	haryana varchar(30) NULL,
	himachal_pradesh varchar(30) NULL,
	jammu_kashmir varchar(30) NULL,
	jharkhand varchar(30) NULL,
	karnataka varchar(30) NULL,
	kerala varchar(30) NULL,
	madhya_pradesh varchar(30) NULL,
	maharashtra varchar(30) NULL,
	meghalaya varchar(30) NULL,
	orissa varchar(30) NULL,
	pondicherry varchar(30) NULL,
	punjab varchar(30) NULL,
	sikkim varchar(30) NULL,
	rajasthan varchar(30) NULL,
	tamilnadu varchar(30) NULL,
	telangana varchar(30) NULL,
	tripura varchar(30) NULL,
	uttar_pradesh varchar(30) NULL,
	uttarakhand varchar(30) NULL,
	west_bengal varchar(30) NULL,
	is_active varchar(1) NULL,
	created_timestamp timestamp NULL,
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	modified_by varchar(50) NULL
);


-- public.tb_image_data_obj definition

-- Drop table

-- DROP TABLE public.tb_image_data_obj;

CREATE TABLE public.tb_image_data_obj (
	form_id varchar(100) NULL,
	control_id varchar(100) NULL,
	image_dfn_id varchar(100) NULL,
	doc_id varchar(100) NULL,
	image_name varchar(500) NOT NULL,
	object_type varchar(50) NOT NULL,
	object_pri_key_1 varchar(50) NOT NULL,
	object_pri_key_2 varchar(50) NOT NULL,
	object_pri_key_3 varchar(50) NULL,
	image_stream text NULL,
	image_meta_data text NULL,
	server_version_integer varchar(100) NULL,
	device_modification_integer varchar(100) NULL,
	login_id varchar(50) NULL,
	modify_emp_id varchar(50) NULL,
	is_active varchar(1) NULL DEFAULT 'Y'::character varying,
	device_create_timestamp timestamp NULL,
	device_modify_timestamp timestamp NULL,
	create_pw_session_id varchar(100) NULL,
	last_pw_session_id varchar(100) NULL,
	deactivated_by varchar(50) NULL,
	deactivated_by_prc varchar(50) NULL,
	deactivated_timestamp timestamp NULL,
	created_timestamp timestamp NULL,
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	modified_by varchar(50) NULL,
	doc_type varchar(50) NULL,
	doc_bundle_id varchar(50) NOT NULL,
	create_app_id varchar(50) NULL,
	modify_app_id varchar(50) NULL,
	file_type varchar(100) NULL,
	file_path varchar(500) NULL,
	CONSTRAINT tb_image_data_obj_pk PRIMARY KEY (image_name, doc_bundle_id, object_pri_key_1, object_pri_key_2)
);
CREATE INDEX tb_image_data_obj_indesx_ne ON public.tb_image_data_obj USING btree (object_pri_key_1);
CREATE INDEX tb_image_data_obj_indesx_new ON public.tb_image_data_obj USING btree (object_pri_key_1);


-- public.tb_image_data_obj_hist definition

-- Drop table

-- DROP TABLE public.tb_image_data_obj_hist;

CREATE TABLE public.tb_image_data_obj_hist (
	form_id varchar(100) NULL,
	control_id varchar(100) NULL,
	image_dfn_id varchar(100) NULL,
	doc_id varchar(100) NULL,
	image_name varchar(500) NOT NULL,
	object_type varchar(50) NOT NULL,
	object_pri_key_1 varchar(50) NOT NULL,
	object_pri_key_2 varchar(50) NOT NULL,
	object_pri_key_3 varchar(50) NULL,
	image_stream text NULL,
	image_meta_data text NULL,
	server_version_integer varchar(100) NULL,
	device_modification_integer varchar(100) NULL,
	login_id varchar(50) NULL,
	modify_emp_id varchar(50) NULL,
	is_active varchar(1) NULL DEFAULT 'Y'::character varying,
	device_create_timestamp timestamp NULL,
	device_modify_timestamp timestamp NULL,
	create_pw_session_id varchar(100) NULL,
	last_pw_session_id varchar(100) NULL,
	deactivated_by varchar(50) NULL,
	deactivated_by_prc varchar(50) NULL,
	deactivated_timestamp timestamp NULL,
	created_timestamp timestamp NULL,
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	modified_by varchar(50) NULL,
	doc_type varchar(50) NULL,
	doc_bundle_id varchar(50) NOT NULL,
	create_app_id varchar(50) NULL,
	modify_app_id varchar(50) NULL,
	file_type varchar(100) NULL,
	file_path varchar(500) NULL
);


-- public.tb_lead_request definition

-- Drop table

-- DROP TABLE public.tb_lead_request;

CREATE TABLE public.tb_lead_request (
	request_id text NULL,
	service_request_id text NULL,
	created_date timestamp NULL,
	num_records text NULL
);


-- public.tb_lead_rework_details definition

-- Drop table

-- DROP TABLE public.tb_lead_rework_details;

CREATE TABLE public.tb_lead_rework_details (
	object_type varchar(50) NOT NULL,
	object_pri_key_1 varchar(50) NOT NULL,
	object_pri_key_2 varchar(50) NOT NULL,
	object_pri_key_3 varchar(50) NOT NULL,
	object_data json NULL,
	emp_id varchar(30) NOT NULL,
	rework_iteration int4 NULL,
	section_id varchar(50) NOT NULL,
	status varchar(10) NULL,
	status_remarks varchar(2000) NULL,
	screen_name varchar(200) NULL,
	status_update_user varchar(10) NULL,
	status_timetstamp timestamp NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamp NULL DEFAULT now(),
	modified_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	rework_status varchar(1) NULL,
	lead_remarks varchar(2000) NULL,
	rm_se_remarks varchar(2000) NULL,
	rm_se_date timestamp NULL,
	rm_se_id varchar(20) NULL
);


-- public.tb_lead_rework_details_copy definition

-- Drop table

-- DROP TABLE public.tb_lead_rework_details_copy;

CREATE TABLE public.tb_lead_rework_details_copy (
	object_type varchar(50) NOT NULL,
	object_pri_key_1 varchar(50) NOT NULL,
	object_pri_key_2 varchar(50) NOT NULL,
	object_pri_key_3 varchar(50) NOT NULL,
	object_data json NULL,
	emp_id varchar(30) NOT NULL,
	rework_iteration int4 NULL,
	section_id varchar(50) NOT NULL,
	status varchar(10) NULL,
	status_remarks varchar(2000) NULL,
	screen_name varchar(200) NULL,
	status_update_user varchar(10) NULL,
	status_timetstamp timestamp NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamp NULL DEFAULT now(),
	modified_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	rework_status varchar(1) NULL,
	lead_remarks varchar(2000) NULL,
	rm_se_remarks varchar(2000) NULL,
	rm_se_date timestamp NULL,
	rm_se_id varchar(20) NULL
);
CREATE INDEX tb_lead_rework_details_copy_object_pri_key_1_idx ON public.tb_lead_rework_details_copy USING btree (object_pri_key_1);
CREATE INDEX tb_lead_rework_details_copy_object_pri_key_2_idx ON public.tb_lead_rework_details_copy USING btree (object_pri_key_1, emp_id);
CREATE INDEX tb_lead_rework_details_copy_object_pri_key_3_idx ON public.tb_lead_rework_details_copy USING btree (object_pri_key_1, emp_id, rework_iteration);


-- public.tb_lead_status_data definition

-- Drop table

-- DROP TABLE public.tb_lead_status_data;

CREATE TABLE public.tb_lead_status_data (
	lead_id varchar(50) NULL,
	"CUSTOMER_NAME" text NULL,
	"CRN_OF_INDIVIDUAL_AUTHORISED_SIG" varchar(50) NULL,
	"ENTITY_NAME" varchar(200) NULL,
	"Entity_CRN" varchar(50) NULL,
	"MANDATE_HOLDER" text NULL,
	"MANDATE_HOLDER_NAME" text NULL,
	"ACCOUNT_NUMBER" varchar(20) NULL,
	"KIT_TYPE" text NULL,
	"FundingMode" text NULL,
	"IP_AMOUNT" text NULL,
	constitution varchar(50) NULL,
	"ReOpenedLead" text NULL,
	"SEGMENT" text NULL,
	"LEAD_ORIGINATION" text NULL,
	"FINAL_CLASSIFICATION_IN_BCIF" text NULL,
	"INDUSTRY_DESCRIPTION" text NULL,
	"DEBIT_CARD" text NULL,
	"EXISTING_CREDIT_FACILITY" text NULL,
	"TYPE_OF_FACILITY" text NULL,
	lead_created_date timestamp NULL,
	"LG_CODE" text NULL,
	"RM_CODE" text NULL,
	"MANDATE_HOLDER_CRN" text NULL,
	"RM_NAME" text NULL,
	"LC_NAME" text NULL,
	"PRODUCT_CODE" text NULL,
	"LeadStatus" varchar(100) NULL,
	"PROMO_CODE" text NULL,
	"LOB" text NULL,
	"BRANCH_CODE" text NULL,
	"BRANCH_NAME" text NULL,
	"COCO" text NULL,
	"RISK" text NULL,
	"NATURE_OF_BUSINESS" text NULL,
	"ACTIVE_MONEY" text NULL,
	"ADDRESS_PROOF" text NULL,
	"IDENTITY_TYPE" text NULL,
	"PAN_STATUS" text NULL,
	"PAN_AADHAR_LINKING_STATUS" text NULL,
	"PRIVY_NON_PRIVY" varchar(50) NULL,
	"ENTITY_DOC_1" text NULL,
	"ENTITY_DOC_2" text NULL,
	"LEAD_CREATED_BY_LC" varchar(100) NULL,
	"LEAD_STATUS_1" varchar NULL,
	"LAST_MODIFIED_BY" varchar(50) NULL,
	"LAST_MODIFIED_BY_ROLE" varchar(150) NULL,
	"LAST_MODIFIED_DATE" timestamp NULL,
	"ACCOUNT_OPENED_DATE" text NULL,
	"SOURCING_RM_SUPERVISOR_NAME" text NULL,
	"SENT_TO_MID_OFFICE_DATE" timestamp NULL,
	"SENT_TO_DVU_DATE" timestamp NULL,
	"DVU_ASSIGNED_DATE" timestamp NULL,
	"MID_OFFICE_ASSIGNED_DATE" timestamp NULL,
	"DVU_ASSIGNED_USER_NAME" text NULL,
	"MID_OFFICE_ASSIGNED_USER_NAME" text NULL,
	"DVU_REASSIGNED_USER_NAME" text NULL,
	"DVU_REASSIGNED_USER_ID" varchar(100) NULL,
	"MID_OFFICE_PENDING_DATE" text NULL,
	"DVU_PENDING_DATE" text NULL,
	"DVU_REWORK_REASON1" text NULL,
	"DVU_REWORK_REASON2" text NULL,
	"DVU_REWORK_REASON3" text NULL,
	"DVU_REWORK_REMARK1" text NULL,
	"DVU_REWORK_REMARK2" text NULL,
	"DVU_REWORK_REMARK3" text NULL,
	"DVU_REWORK_DATE1" timestamp NULL,
	"DVU_REWORK_DATE2" timestamp NULL,
	"DVU_REWORK_DATE3" timestamp NULL,
	"DVU_REWORK_USER1" varchar(50) NULL,
	"DVU_REWORK_USER2" varchar(50) NULL,
	"DVU_REWORK_USER3" varchar(50) NULL,
	"RM_REWORK_REMARK1" text NULL,
	"RM_REWORK_REMARK2" text NULL,
	"RM_REWORK_REMARK3" text NULL,
	"RM_REWORK_REVERT_DATE1" timestamp NULL,
	"RM_REWORK_REVERT_DATE2" timestamp NULL,
	"RM_REWORK_REVERT_DATE3" timestamp NULL,
	"LAST_ACTION_RM" text NULL,
	privy_option varchar(50) NULL,
	emp_hierarchy_id varchar(100) NULL,
	emp_supervisor_id varchar(100) NULL,
	"DATE" text NULL,
	"FirstPass" text NULL,
	constitution_code text NULL
);
CREATE INDEX tb_lead_status_data_idx1 ON public.tb_lead_status_data USING btree (lead_id);
CREATE INDEX tb_lead_status_data_idx2 ON public.tb_lead_status_data USING btree (lead_id);


-- public.tb_leave_master definition

-- Drop table

-- DROP TABLE public.tb_leave_master;

CREATE TABLE public.tb_leave_master (
	leave_day varchar(200) NULL,
	leave_date date NULL,
	is_active varchar(1) NULL,
	created_timestamp timestamp NULL DEFAULT now(),
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	modified_by varchar(50) NULL
);


-- public.tb_lov_mst definition

-- Drop table

-- DROP TABLE public.tb_lov_mst;

CREATE TABLE public.tb_lov_mst (
	property varchar(50) NOT NULL,
	value_code varchar(50) NOT NULL,
	value_desc varchar(100) NULL,
	parent_code varchar(100) NULL,
	parent_property varchar(50) NULL,
	text_1 varchar(2000) NULL,
	text_2 varchar(2000) NULL,
	text_3 varchar(50) NULL,
	text_4 varchar(50) NULL,
	text_5 varchar(50) NULL,
	sort_sequence numeric NULL,
	effective_date date NULL DEFAULT now(),
	ineffective_date date NULL DEFAULT (now() + '2 years'::interval),
	internal_flag varchar(1) NULL DEFAULT 'Y'::character varying,
	created_by varchar(50) NULL,
	created_timestamp timestamp NULL DEFAULT CURRENT_TIMESTAMP,
	modified_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	org_id varchar(40) NULL,
	app_id varchar(40) NULL
);


-- public.tb_master_data_objs definition

-- Drop table

-- DROP TABLE public.tb_master_data_objs;

CREATE TABLE public.tb_master_data_objs (
	group_id varchar(300) NULL,
	channel varchar(300) NULL,
	"location" varchar(300) NULL,
	emp_id varchar(30) NULL,
	master_type varchar(500) NOT NULL,
	data_object text NULL,
	"version" float8 NULL,
	org_id varchar(50) NULL,
	app_id varchar(50) NULL,
	full_master_name varchar(500) NULL,
	created_by varchar(100) NULL,
	created_date date NULL,
	modify_by varchar(100) NULL,
	modify_date date NULL,
	CONSTRAINT tb_master_data_objs_pk PRIMARY KEY (master_type)
);


-- public.tb_master_data_objs_hist definition

-- Drop table

-- DROP TABLE public.tb_master_data_objs_hist;

CREATE TABLE public.tb_master_data_objs_hist (
	group_id varchar(30) NULL,
	channel varchar(30) NULL,
	"location" varchar(30) NULL,
	emp_id varchar(30) NULL,
	master_type varchar(50) NULL,
	data_object text NULL,
	"version" float8 NULL,
	org_id varchar(50) NULL,
	app_id varchar(50) NULL,
	history_create_date timestamp NULL DEFAULT CURRENT_TIMESTAMP,
	created_by varchar(100) NULL,
	created_date date NULL,
	modify_by varchar(100) NULL,
	modify_date date NULL
);


-- public.tb_org_locations_mst definition

-- Drop table

-- DROP TABLE public.tb_org_locations_mst;

CREATE TABLE public.tb_org_locations_mst (
	location_code varchar(50) NOT NULL,
	location_type varchar(100) NULL,
	location_sub_type varchar(100) NULL,
	location_address varchar(500) NULL,
	parent_location_code varchar(100) NULL,
	location_head_emp_code varchar(100) NULL,
	location_hierarchy_id varchar(500) NULL,
	sort_sequence int4 NULL,
	effective_date timestamp NULL DEFAULT now(),
	ineffective_date timestamp NULL DEFAULT (now() + '5000 days'::interval day),
	internal_flag varchar(1) NULL DEFAULT 'Y'::character varying,
	created_timestamp timestamp NULL DEFAULT now(),
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	modified_by varchar(50) NULL,
	server_ver_no float8 NULL,
	device_mod_no float8 NULL,
	CONSTRAINT tb_org_locations_mst_pk PRIMARY KEY (location_code)
);


-- public.tb_pgn_mst definition

-- Drop table

-- DROP TABLE public.tb_pgn_mst;

CREATE TABLE public.tb_pgn_mst (
	lob varchar(50) NULL,
	crn_entity varchar(50) NULL,
	crn_aus varchar(50) NULL,
	account_no varchar(50) NULL,
	aof_id varchar(50) NULL,
	create_user varchar(50) NULL,
	create_date date NULL,
	apply_date date NULL,
	scheme_code varchar(50) NULL,
	app_type varchar(10) NULL,
	lead_id varchar(50) NULL,
	CONSTRAINT tb_pgn_mst_unq UNIQUE (account_no)
);


-- public.tb_pincode_city_master definition

-- Drop table

-- DROP TABLE public.tb_pincode_city_master;

CREATE TABLE public.tb_pincode_city_master (
	pin_code varchar(200) NOT NULL,
	city_name varchar(200) NULL,
	city_cd varchar(200) NULL,
	state_cd varchar(200) NULL,
	state_name varchar(200) NULL,
	country_name varchar(100) NULL,
	created_timestamp timestamp NULL DEFAULT CURRENT_TIMESTAMP,
	created_by varchar(50) NULL DEFAULT 'ADMIN'::character varying,
	modified_timestamp timestamp NULL DEFAULT CURRENT_TIMESTAMP,
	modified_by varchar(50) NULL DEFAULT 'ADMIN'::character varying,
	CONSTRAINT tb_pincode_city_master_pkey PRIMARY KEY (pin_code)
);
CREATE INDEX tb_pincode_city_master_idx ON public.tb_pincode_city_master USING btree (pin_code);
CREATE INDEX tb_pincode_city_master_idx2 ON public.tb_pincode_city_master USING btree (pin_code, city_cd, state_cd);


-- public.tb_process_group_nomenclature definition

-- Drop table

-- DROP TABLE public.tb_process_group_nomenclature;

CREATE TABLE public.tb_process_group_nomenclature (
	process_group varchar(20) NULL,
	prc_grp_disp varchar(30) NULL,
	process_name varchar(40) NULL,
	text_1 varchar(40) NULL,
	created_timestamp timestamp NULL DEFAULT now(),
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL DEFAULT now(),
	modified_by varchar(50) NULL
);


-- public.tb_process_group_nomenclature1 definition

-- Drop table

-- DROP TABLE public.tb_process_group_nomenclature1;

CREATE TABLE public.tb_process_group_nomenclature1 (
	process_group varchar(20) NULL,
	prc_grp_disp varchar(30) NULL,
	process_name varchar(40) NULL,
	text_1 varchar(40) NULL,
	created_timestamp timestamp NULL,
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	modified_by varchar(50) NULL
);


-- public.tb_process_group_nomenclature1_bkp definition

-- Drop table

-- DROP TABLE public.tb_process_group_nomenclature1_bkp;

CREATE TABLE public.tb_process_group_nomenclature1_bkp (
	process_group varchar(20) NULL,
	prc_grp_disp varchar(30) NULL,
	process_name varchar(40) NULL,
	text_1 varchar(40) NULL,
	created_timestamp timestamp NULL,
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	modified_by varchar(50) NULL
);


-- public.tb_product_master definition

-- Drop table

-- DROP TABLE public.tb_product_master;

CREATE TABLE public.tb_product_master (
	product_code varchar(50) NULL,
	scheme_code varchar(50) NOT NULL,
	eligible_account varchar(50) NULL,
	product_name varchar(500) NULL,
	sweep_in_threshold varchar(50) NULL,
	sweep_out_threshold varchar(50) NULL,
	td_product_code varchar(50) NULL,
	no_of_leave_rl_seg varchar(50) NULL,
	no_of_leave_wl_seg varchar(50) NULL,
	classification varchar(50) NULL,
	ip_min_req varchar(50) NULL,
	fin_classification varchar(50) NULL,
	allowed_metro varchar(1) NULL,
	text_1 varchar(50) NULL,
	text_2 varchar(50) NULL,
	text_3 varchar(50) NULL,
	text_4 varchar(50) NULL,
	text_5 varchar(50) NULL,
	text_6 varchar(50) NULL,
	text_7 varchar(50) NULL,
	text_8 varchar(50) NULL,
	url varchar(500) NULL,
	benefit varchar(100) NULL,
	CONSTRAINT tb_product_master_pkey PRIMARY KEY (scheme_code)
);


-- public.tb_program_priv definition

-- Drop table

-- DROP TABLE public.tb_program_priv;

CREATE TABLE public.tb_program_priv (
	constitution_type varchar(30) NULL,
	banking_type varchar(30) NULL,
	program_option varchar(30) NULL,
	program_variant varchar(30) NULL,
	sub_class varchar(30) NULL,
	acc_variant varchar(30) NULL,
	parent_id varchar(30) NULL,
	class_to_flow varchar(30) NULL,
	ip_intial varchar(30) NULL,
	internal_flag varchar(20) NULL
);


-- public.tb_queues_workflow_mapping definition

-- Drop table

-- DROP TABLE public.tb_queues_workflow_mapping;

CREATE TABLE public.tb_queues_workflow_mapping (
	count_group_id varchar(20) NOT NULL,
	process_group varchar(50) NOT NULL,
	prc_grp_disp varchar(50) NOT NULL,
	check_access varchar(10) NULL,
	access_level varchar(20) NULL,
	internal_flag varchar(1) NULL,
	effective_date date NULL DEFAULT now(),
	ineffective_date date NULL DEFAULT now(),
	created_by varchar(50) NULL,
	created_timestamp timestamptz NULL DEFAULT now(),
	modified_by varchar(50) NULL,
	modified_timestamp timestamptz NULL,
	CONSTRAINT queue_workflow_mapping_pk PRIMARY KEY (count_group_id, process_group, prc_grp_disp)
);
CREATE INDEX tb_queues_workflow_mapping_pg ON public.tb_queues_workflow_mapping USING btree (process_group);
CREATE INDEX tb_queues_workflow_mapping_pgd ON public.tb_queues_workflow_mapping USING btree (prc_grp_disp);


-- public.tb_rejected_rm_leads_data definition

-- Drop table

-- DROP TABLE public.tb_rejected_rm_leads_data;

CREATE TABLE public.tb_rejected_rm_leads_data (
	object_type varchar(6) NOT NULL,
	object_pri_key_1 varchar(20) NOT NULL,
	object_pri_key_2 varchar(20) NOT NULL,
	object_pri_key_3 varchar(20) NOT NULL,
	remarks varchar(200) NULL,
	screen_name varchar(500) NULL,
	status varchar(100) NULL,
	created_timestamp timestamp NULL,
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	modified_by varchar(50) NULL,
	CONSTRAINT tb_rejected_rm_leads_data_pkey PRIMARY KEY (object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3)
);
CREATE INDEX screen_name_idx ON public.tb_rejected_rm_leads_data USING btree (screen_name);
CREATE INDEX tb_rejected_rm_leads_data_indx ON public.tb_rejected_rm_leads_data USING btree (object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3);


-- public.tb_role_master_stagging definition

-- Drop table

-- DROP TABLE public.tb_role_master_stagging;

CREATE TABLE public.tb_role_master_stagging (
	service_request_id varchar(100) NULL,
	processing_request_id varchar(30) NULL,
	table_name varchar(20) NULL,
	request json NULL,
	process_flag varchar(20) NULL,
	created_timestamp timestamptz NULL,
	created_by varchar(10) NULL
);


-- public.tb_se_app_mapping definition

-- Drop table

-- DROP TABLE public.tb_se_app_mapping;

CREATE TABLE public.tb_se_app_mapping (
	se_id varchar(20) NOT NULL,
	approver_id varchar(20) NULL,
	internal_flag varchar(1) NULL DEFAULT 'Y'::character varying,
	created_by varchar(50) NULL,
	created_timestamp timestamp NULL DEFAULT CURRENT_TIMESTAMP,
	modified_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	CONSTRAINT tb_se_app_mapping_pkey PRIMARY KEY (se_id)
);


-- public.tb_se_app_mapping160322 definition

-- Drop table

-- DROP TABLE public.tb_se_app_mapping160322;

CREATE TABLE public.tb_se_app_mapping160322 (
	se_id varchar(20) NULL,
	approver_id varchar(20) NULL,
	internal_flag varchar(1) NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamp NULL,
	modified_by varchar(50) NULL,
	modified_timestamp timestamp NULL
);


-- public.tb_se_app_mapping_bkp definition

-- Drop table

-- DROP TABLE public.tb_se_app_mapping_bkp;

CREATE TABLE public.tb_se_app_mapping_bkp (
	se_id varchar(20) NULL,
	approver_id varchar(20) NULL,
	internal_flag varchar(1) NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamp NULL,
	modified_by varchar(50) NULL,
	modified_timestamp timestamp NULL
);


-- public.tb_se_app_mapping_bkp_09_05_22 definition

-- Drop table

-- DROP TABLE public.tb_se_app_mapping_bkp_09_05_22;

CREATE TABLE public.tb_se_app_mapping_bkp_09_05_22 (
	se_id varchar(20) NOT NULL,
	approver_id varchar(20) NULL,
	internal_flag varchar(1) NULL DEFAULT 'Y'::character varying,
	created_by varchar(50) NULL,
	created_timestamp timestamp NULL DEFAULT CURRENT_TIMESTAMP,
	modified_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	CONSTRAINT tb_se_app_mapping_bkp_pkey PRIMARY KEY (se_id)
);


-- public.tb_se_app_mapping_bkp_12_9_21 definition

-- Drop table

-- DROP TABLE public.tb_se_app_mapping_bkp_12_9_21;

CREATE TABLE public.tb_se_app_mapping_bkp_12_9_21 (
	se_id varchar(20) NULL,
	approver_id varchar(20) NULL,
	internal_flag varchar(1) NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamp NULL,
	modified_by varchar(50) NULL,
	modified_timestamp timestamp NULL
);


-- public.tb_se_app_mapping_new definition

-- Drop table

-- DROP TABLE public.tb_se_app_mapping_new;

CREATE TABLE public.tb_se_app_mapping_new (
	se_id varchar(20) NOT NULL,
	approver_id varchar(20) NULL,
	internal_flag varchar(1) NULL DEFAULT 'Y'::character varying,
	created_by varchar(50) NULL,
	created_timestamp timestamp NULL DEFAULT CURRENT_TIMESTAMP,
	modified_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	CONSTRAINT tb_se_app_mapping_new_pkey PRIMARY KEY (se_id)
);


-- public.tb_section_screen definition

-- Drop table

-- DROP TABLE public.tb_section_screen;

CREATE TABLE public.tb_section_screen (
	screen_name varchar(40) NULL,
	section_id varchar(40) NULL,
	constitution_type varchar(40) NULL,
	status varchar(1) NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamp NULL DEFAULT now(),
	modified_by varchar(50) NULL,
	modified_timestamp timestamp NULL
);


-- public.tb_section_screen_mapping definition

-- Drop table

-- DROP TABLE public.tb_section_screen_mapping;

CREATE TABLE public.tb_section_screen_mapping (
	uuid serial4 NOT NULL,
	constitution_type varchar(20) NULL,
	workflow_group_id varchar(20) NULL,
	workflow_status varchar(100) NULL,
	group_name varchar(200) NULL,
	screen_name varchar(100) NULL,
	section_id varchar(100) NULL,
	created_on timestamp NULL,
	created_by varchar(100) NULL,
	modify_on timestamp NULL,
	modify_by varchar(100) NULL,
	is_active varchar(10) NULL,
	CONSTRAINT tb_section_screen_mapping_pkey PRIMARY KEY (uuid)
);


-- public.tb_section_status definition

-- Drop table

-- DROP TABLE public.tb_section_status;

CREATE TABLE public.tb_section_status (
	object_type varchar(50) NOT NULL,
	object_pri_key_1 varchar(50) NOT NULL,
	object_pri_key_2 varchar(50) NOT NULL,
	object_pri_key_3 varchar(50) NOT NULL,
	object_data json NULL,
	"role" varchar(30) NOT NULL,
	section_id varchar(50) NOT NULL,
	status varchar(10) NULL,
	status_remarks varchar(2000) NULL,
	screen_name varchar(200) NULL,
	status_update_user varchar(10) NULL,
	status_timetstamp timestamp NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamp NULL DEFAULT now(),
	modified_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	rework_status varchar(1) NULL,
	CONSTRAINT tb_section_status_pkey PRIMARY KEY (object_pri_key_1, object_pri_key_2, object_pri_key_3, role, object_type, section_id)
);
CREATE INDEX tb_section_status_idx1 ON public.tb_section_status USING btree (object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, role, section_id);
CREATE INDEX tb_section_status_idx2 ON public.tb_section_status USING btree (object_pri_key_1);

-- Table Triggers

create trigger f_ins_section_hist_tables_trg after
insert
    or
delete
    or
update
    on
    public.tb_section_status for each row execute function f_ins_sec_hist_tables_trg();


-- public.tb_section_status1 definition

-- Drop table

-- DROP TABLE public.tb_section_status1;

CREATE TABLE public.tb_section_status1 (
	object_type varchar(50) NULL,
	object_pri_key_1 varchar(50) NULL,
	object_pri_key_2 varchar(50) NULL,
	object_pri_key_3 varchar(50) NULL,
	object_data json NULL,
	"role" varchar(30) NULL,
	section_id varchar(50) NULL,
	status varchar(10) NULL,
	status_update_user varchar(10) NULL,
	status_timetstamp timestamp NULL,
	status_remarks varchar(200) NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamp NULL,
	modified_by varchar(50) NULL,
	modified_timestamp timestamp NULL
);


-- public.tb_section_status_hist definition

-- Drop table

-- DROP TABLE public.tb_section_status_hist;

CREATE TABLE public.tb_section_status_hist (
	object_type varchar(50) NOT NULL,
	object_pri_key_1 varchar(50) NOT NULL,
	object_pri_key_2 varchar(50) NOT NULL,
	object_pri_key_3 varchar(50) NOT NULL,
	object_data json NULL,
	"role" varchar(30) NOT NULL,
	section_id varchar(50) NOT NULL,
	status varchar(10) NULL,
	status_remarks varchar(2000) NULL,
	screen_name varchar(200) NULL,
	status_update_user varchar(10) NULL,
	status_timetstamp timestamp NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamp NULL DEFAULT now(),
	modified_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	rework_status varchar(1) NULL
);


-- public.tb_section_status_temp definition

-- Drop table

-- DROP TABLE public.tb_section_status_temp;

CREATE TABLE public.tb_section_status_temp (
	object_type varchar(50) NULL,
	object_pri_key_1 varchar(50) NULL,
	object_pri_key_2 varchar(50) NULL,
	object_pri_key_3 varchar(50) NULL,
	object_data json NULL,
	"role" varchar(30) NULL,
	section_id varchar(50) NULL,
	status varchar(10) NULL,
	status_remarks varchar(2000) NULL,
	screen_name varchar(200) NULL,
	status_update_user varchar(10) NULL,
	status_timetstamp timestamp NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamp NULL,
	modified_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	rework_status varchar(1) NULL,
	group_name varchar(100) NULL
);


-- public.tb_secugen_device_hits_dtls definition

-- Drop table

-- DROP TABLE public.tb_secugen_device_hits_dtls;

CREATE TABLE public.tb_secugen_device_hits_dtls (
	device_id varchar(100) NOT NULL,
	rm varchar(100) NOT NULL,
	lead_id varchar(100) NULL,
	hit_time timestamp NULL DEFAULT now(),
	status varchar(100) NOT NULL,
	remark text NULL,
	created_by varchar(100) NULL,
	created_timestamp timestamp NULL DEFAULT now(),
	modified_by varchar(100) NULL,
	modified_timestamp timestamp NULL DEFAULT now(),
	full_device_id varchar(100) NULL
);


-- public.tb_service_audit definition

-- Drop table

-- DROP TABLE public.tb_service_audit;

CREATE TABLE public.tb_service_audit (
	request_id varchar(50) NOT NULL,
	ref_id varchar(50) NOT NULL,
	object_pri_key_1 varchar(50) NOT NULL,
	object_pri_key_2 varchar(50) NOT NULL,
	object_pri_key_3 varchar(50) NOT NULL,
	object_type varchar(50) NULL,
	process_group varchar(50) NOT NULL,
	prc_grp_disp varchar(50) NOT NULL,
	created_timestamp varchar NULL DEFAULT now(),
	modified_timestamp varchar NULL,
	request_payload text NULL,
	response_payload text NULL,
	exception_payload varchar(30000) NULL,
	status varchar(50) NULL,
	is_active varchar(1) NULL,
	text_1 varchar(4000) NULL,
	text_2 varchar(1000) NULL,
	text_3 varchar(1000) NULL,
	text_4 varchar(1000) NULL,
	text_5 varchar(1000) NULL,
	lead_id text NULL,
	request text NULL,
	response text NULL,
	CONSTRAINT tb_service_audit_pk PRIMARY KEY (ref_id)
);
CREATE INDEX tb_service_audit_opk1 ON public.tb_service_audit USING btree (object_pri_key_1);
CREATE INDEX tb_service_audit_pg ON public.tb_service_audit USING btree (process_group);
CREATE INDEX tb_service_audit_pgd ON public.tb_service_audit USING btree (prc_grp_disp);


-- public.tb_sqllite_ddl_cnf definition

-- Drop table

-- DROP TABLE public.tb_sqllite_ddl_cnf;

CREATE TABLE public.tb_sqllite_ddl_cnf (
	org_id varchar(300) NULL,
	app_id varchar(300) NULL,
	object_name varchar(50) NULL,
	"action" varchar(50) NULL,
	version_number varchar(10) NULL,
	ddl_description varchar(200) NULL,
	sql_ddl_script text NULL,
	execution_sequence int4 NULL,
	effective_date date NULL DEFAULT CURRENT_DATE,
	ineffective_date date NULL DEFAULT CURRENT_DATE + 5000,
	internal_flag varchar(10) NULL DEFAULT 'Y'::character varying,
	created_date date NULL,
	created_by varchar(50) NULL,
	modified_date date NULL,
	modified_by varchar(50) NULL,
	lob_code varchar(50) NULL
);


-- public.tb_string_rpl_mapping definition

-- Drop table

-- DROP TABLE public.tb_string_rpl_mapping;

CREATE TABLE public.tb_string_rpl_mapping (
	groupcode varchar(100) NULL,
	searchstring varchar(100) NULL,
	replacewith varchar(100) NULL,
	created_by varchar(50) NULL,
	created_timestamp timestamp NULL DEFAULT CURRENT_TIMESTAMP,
	modified_by varchar(50) NULL,
	modified_timestamp timestamp NULL
);


-- public.tb_title_lov_bo definition

-- Drop table

-- DROP TABLE public.tb_title_lov_bo;

CREATE TABLE public.tb_title_lov_bo (
	code varchar(20) NULL,
	value varchar(20) NULL,
	gender varchar(20) NULL,
	marital varchar(20) NULL,
	sort_sequence numeric NULL,
	effective_date date NULL DEFAULT now(),
	ineffective_date date NULL DEFAULT (now() + '2 years'::interval),
	internal_flag varchar(1) NULL DEFAULT 'Y'::character varying,
	created_by varchar(50) NULL,
	created_timestamp timestamp NULL DEFAULT CURRENT_TIMESTAMP,
	modified_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	org_id varchar(40) NULL,
	app_id varchar(40) NULL
);


-- public.tb_user_mst definition

-- Drop table

-- DROP TABLE public.tb_user_mst;

CREATE TABLE public.tb_user_mst (
	user_id varchar(50) NOT NULL,
	user_name varchar(100) NOT NULL,
	user_type varchar(100) NULL,
	dob date NULL,
	mobile_no varchar(10) NULL,
	employee_id varchar(100) NULL,
	email_id varchar(1000) NULL,
	domain_name varchar(100) NULL,
	"domain" varchar(100) NULL,
	user_password varchar(100) NULL,
	authentication varchar(100) NULL,
	"role" varchar(100) NULL,
	system_role varchar(100) NULL,
	supervisor_id varchar(100) NULL,
	hierarchy_id varchar(500) NULL,
	designation varchar(100) NULL,
	home_location varchar(100) NULL,
	parent_entity varchar(100) NULL,
	org_id varchar(100) NULL,
	app_id varchar(100) NULL,
	access_level varchar(100) NULL,
	sub_system_role varchar(100) NULL,
	block_flag varchar(1) NULL DEFAULT 'Y'::character varying,
	password_update_timestamp varchar(100) NULL,
	pwd_change_flag varchar(1) NULL DEFAULT 'Y'::character varying,
	pwd_response_message varchar(100) NULL,
	sort_sequence int4 NULL,
	effective_date timestamp NULL DEFAULT now(),
	ineffective_date timestamp NULL DEFAULT (now() + '5000 days'::interval day),
	internal_flag varchar(1) NULL DEFAULT 'Y'::character varying,
	created_timestamp timestamp NULL DEFAULT now(),
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	modified_by varchar(50) NULL,
	server_ver_no float8 NULL,
	device_mod_no float8 NULL,
	CONSTRAINT tb_user_mst_pkey PRIMARY KEY (user_id, user_name)
);


-- public.tb_user_system_role_mapping definition

-- Drop table

-- DROP TABLE public.tb_user_system_role_mapping;

CREATE TABLE public.tb_user_system_role_mapping (
	user_id varchar(50) NOT NULL,
	system_role varchar(50) NOT NULL,
	from_date timestamp NULL,
	to_date timestamp NULL,
	sort_sequence int4 NULL,
	effective_date timestamp NULL DEFAULT now(),
	ineffective_date timestamp NULL DEFAULT (now() + '5000 days'::interval day),
	internal_flag varchar(1) NULL DEFAULT 'Y'::character varying,
	created_timestamp timestamp NULL DEFAULT now(),
	created_by varchar(50) NULL,
	modified_timestamp timestamp NULL,
	modified_by varchar(50) NULL,
	server_ver_no float8 NULL,
	device_mod_no float8 NULL
);


-- public.tb_view_details definition

-- Drop table

-- DROP TABLE public.tb_view_details;

CREATE TABLE public.tb_view_details (
	"VIEW_NAME" varchar(50) NULL,
	"COLUMN_NAMES" varchar(4000) NULL,
	"TABLE_NAME" varchar(50) NULL,
	"FILTER_BY" varchar(4000) NULL,
	"ORDER_BY" varchar(1000) NULL,
	"VIEW_STMT" varchar(50) NULL,
	"TEXT1" varchar(50) NULL
);


-- public.temp_java definition

-- Drop table

-- DROP TABLE public.temp_java;

CREATE TABLE public.temp_java (
	login_id text NULL
);


-- public.test_arpit definition

-- Drop table

-- DROP TABLE public.test_arpit;

CREATE TABLE public.test_arpit (
	iid text NULL,
	object_data text NULL,
	lead_id text NULL
);


-- public.test_jatin definition

-- Drop table

-- DROP TABLE public.test_jatin;

CREATE TABLE public.test_jatin (
	iid text NULL,
	object_data text NULL,
	lead_id text NULL
);


-- public.v_approver_id definition

-- Drop table

-- DROP TABLE public.v_approver_id;

CREATE TABLE public.v_approver_id (
	approver_id varchar(20) NULL
);


-- public.v_count definition

-- Drop table

-- DROP TABLE public.v_count;

CREATE TABLE public.v_count (
	count int8 NULL
);


-- public.v_data definition

-- Drop table

-- DROP TABLE public.v_data;

CREATE TABLE public.v_data (
	jsonb_agg jsonb NULL
);


-- public.v_role definition

-- Drop table

-- DROP TABLE public.v_role;

CREATE TABLE public.v_role (
	"role" varchar(100) NULL
);


-- public.v_text definition

-- Drop table

-- DROP TABLE public.v_text;

CREATE TABLE public.v_text (
	text_1 varchar(200) NULL
);


-- public.oee_emails definition

-- Drop table

-- DROP TABLE public.oee_emails;

CREATE TABLE public.oee_emails (
	email_record_id int4 NOT NULL,
	attachments_path text NULL,
	bcc_emails text NULL,
	cc_emails text NULL,
	created_timestamp timestamp NULL DEFAULT CURRENT_TIMESTAMP,
	email_subject varchar(255) NOT NULL,
	in_body_content text NULL,
	recipient_emails varchar(1000) NOT NULL,
	email_job_id int4 NOT NULL,
	CONSTRAINT oee_emails_pkey PRIMARY KEY (email_record_id),
	CONSTRAINT fk6qn94qj96sxi616l1u1vv3576 FOREIGN KEY (email_job_id) REFERENCES public.oee_jobs(job_id)
);


-- public.tb_btc_prc_grp_mst definition

-- Drop table

-- DROP TABLE public.tb_btc_prc_grp_mst;

CREATE TABLE public.tb_btc_prc_grp_mst (
	workflow_group_id varchar(50) NOT NULL,
	process_group varchar(50) NOT NULL,
	parent_process_group varchar(50) NULL,
	is_auto_start_with_p varchar(1) NULL DEFAULT 'n'::character varying,
	auto_start_disp varchar(50) NULL,
	does_p_autp_start varchar(1) NULL DEFAULT 'n'::character varying,
	parent_auto_start_disp varchar(50) NULL,
	is_auto_end_with_p varchar(1) NULL DEFAULT 'n'::character varying,
	auto_end_success_disp varchar(50) NULL,
	auto_end_fail_disp varchar(50) NULL,
	does_p_auto_end varchar(1) NULL DEFAULT 'n'::character varying,
	p_auto_end_s_disp varchar(50) NULL,
	effective_date date NULL DEFAULT now(),
	ineffective_date date NULL DEFAULT now(),
	internal_flag varchar(1) NULL DEFAULT 'y'::character varying,
	created_by varchar(50) NULL,
	created_timestamp timestamptz NULL DEFAULT now(),
	modified_by varchar(50) NULL,
	modified_timestamp timestamptz NULL,
	p_auto_end_f_disp varchar(50) NULL,
	p_auto_end_with_all_c varchar(1) NULL DEFAULT 'n'::character varying,
	p_end_disp_all_success varchar(50) NULL,
	p_end_disp_1_fail varchar(50) NULL,
	default_exec_level varchar(20) NULL DEFAULT 'l1'::character varying,
	CONSTRAINT tb_btc_prc_grp_mst_pkey PRIMARY KEY (workflow_group_id, process_group),
	CONSTRAINT tb_btc_prc_grp_mst_fk FOREIGN KEY (workflow_group_id) REFERENCES public.tb_btc_workflowgroup_mst(workflow_group_id)
);
CREATE UNIQUE INDEX tb_rl_prc_grp_mst_pk ON public.tb_btc_prc_grp_mst USING btree (workflow_group_id, process_group);


-- public.tb_btc_prc_grp_disp_mst definition

-- Drop table

-- DROP TABLE public.tb_btc_prc_grp_disp_mst;

CREATE TABLE public.tb_btc_prc_grp_disp_mst (
	workflow_group_id varchar(50) NOT NULL,
	process_group varchar(50) NOT NULL,
	prc_grp_disp varchar(50) NOT NULL,
	prc_grp_disp_category varchar(50) NULL,
	effective_date date NULL DEFAULT now(),
	ineffective_date date NULL DEFAULT now(),
	internal_flag varchar(1) NULL DEFAULT 'y'::character varying,
	created_by varchar(50) NULL,
	created_timestamp timestamptz NULL DEFAULT now(),
	modified_by varchar(50) NULL,
	modified_timestamp timestamptz NULL,
	prc_grp_disp_desc varchar(20) NULL,
	exec_seq int4 NULL,
	CONSTRAINT tb_btc_prc_grp_disp_mst_pk PRIMARY KEY (workflow_group_id, process_group, prc_grp_disp),
	CONSTRAINT tb_btc_prc_grp_disp_mst_fk FOREIGN KEY (workflow_group_id) REFERENCES public.tb_btc_workflowgroup_mst(workflow_group_id),
	CONSTRAINT tb_btc_prc_grp_disp_mst_fk_1 FOREIGN KEY (workflow_group_id,process_group) REFERENCES public.tb_btc_prc_grp_mst(workflow_group_id,process_group)
);

-- Table Triggers

create trigger trg_h_tb_btc_prc_grp_disp_mst before
insert
    or
delete
    or
update
    on
    public.tb_btc_prc_grp_disp_mst for each row execute function tf_h_tb_btc_prc_grp_disp_mst();


-- public.tb_btc_prc_grp_disp_cfg definition

-- Drop table

-- DROP TABLE public.tb_btc_prc_grp_disp_cfg;

CREATE TABLE public.tb_btc_prc_grp_disp_cfg (
	config_id serial4 NOT NULL,
	workflow_group_id varchar(50) NOT NULL,
	event_process varchar(50) NOT NULL,
	ref_input_1 varchar(50) NOT NULL DEFAULT ''::character varying,
	ref_input_2 varchar(50) NULL DEFAULT ''::character varying,
	br_id varchar(50) NULL,
	condition_function varchar(100) NULL,
	process_group varchar(50) NULL,
	prc_grp_disp varchar(50) NULL,
	exec_level varchar(20) NULL DEFAULT 'l1'::character varying,
	remarks varchar(200) NULL,
	notification_grp_id varchar(20) NULL,
	ref_batch_job varchar(20) NULL,
	effective_date date NULL DEFAULT now(),
	ineffective_date date NULL DEFAULT now(),
	internal_flag varchar(1) NULL DEFAULT 'y'::character varying,
	created_by varchar(50) NULL,
	created_timestamp timestamptz NULL DEFAULT now(),
	modified_by varchar(50) NULL,
	modified_timestamp timestamptz NULL,
	exception_id varchar(50) NULL,
	exception_group_id varchar(50) NULL,
	exception_disposition varchar(50) NULL,
	exception_level varchar(50) NULL,
	message_id varchar(200) NULL,
	prc_grp_disp_category varchar(1) NULL,
	prc_grp_disp_desc varchar(200) NULL,
	exec_seq varchar(1) NULL,
	CONSTRAINT tb_btc_prc_grp_disp_cfg_pk PRIMARY KEY (config_id),
	CONSTRAINT tb_btc_prc_grp_disp_cfg_un UNIQUE (workflow_group_id, event_process, ref_input_1, ref_input_2, process_group, prc_grp_disp),
	CONSTRAINT tb_btc_prc_grp_disp_cfg_fk FOREIGN KEY (workflow_group_id,process_group,prc_grp_disp) REFERENCES public.tb_btc_prc_grp_disp_mst(workflow_group_id,process_group,prc_grp_disp)
);
CREATE INDEX tb_btc_prc_grp_disp_cfg_confg ON public.tb_btc_prc_grp_disp_cfg USING btree (config_id);

-- Table Triggers

create trigger trg_h_tb_btc_prc_grp_disp_cfg before
insert
    or
delete
    or
update
    on
    public.tb_btc_prc_grp_disp_cfg for each row execute function tf_h_tb_btc_prc_grp_disp_cfg();


-- public.tb_btc_prc_grp_disp_cfg_1 definition

-- Drop table

-- DROP TABLE public.tb_btc_prc_grp_disp_cfg_1;

CREATE TABLE public.tb_btc_prc_grp_disp_cfg_1 (
	config_id serial4 NOT NULL,
	workflow_group_id varchar(50) NOT NULL,
	event_process varchar(50) NOT NULL,
	ref_input_1 varchar(50) NOT NULL DEFAULT ''::character varying,
	ref_input_2 varchar(50) NULL DEFAULT ''::character varying,
	br_id varchar(50) NULL,
	condition_function varchar(100) NULL,
	process_group varchar(50) NULL,
	prc_grp_disp varchar(50) NULL,
	exec_level varchar(20) NULL DEFAULT 'l1'::character varying,
	remarks varchar(200) NULL,
	notification_grp_id varchar(20) NULL,
	ref_batch_job varchar(20) NULL,
	effective_date date NULL DEFAULT now(),
	ineffective_date date NULL DEFAULT now(),
	internal_flag varchar(1) NULL DEFAULT 'y'::character varying,
	created_by varchar(50) NULL,
	created_timestamp timestamptz NULL DEFAULT now(),
	modified_by varchar(50) NULL,
	modified_timestamp timestamptz NULL,
	exception_id varchar(50) NULL,
	exception_group_id varchar(50) NULL,
	exception_disposition varchar(50) NULL,
	exception_level varchar(50) NULL,
	message_id varchar(200) NULL,
	prc_grp_disp_category varchar(1) NULL,
	prc_grp_disp_desc varchar(200) NULL,
	exec_seq varchar(1) NULL,
	CONSTRAINT tb_btc_prc_grp_disp_cfg_pk1 PRIMARY KEY (config_id),
	CONSTRAINT tb_btc_prc_grp_disp_cfg_un1 UNIQUE (workflow_group_id, event_process, ref_input_1, ref_input_2, process_group, prc_grp_disp),
	CONSTRAINT tb_btc_prc_grp_disp_cfg_fk1 FOREIGN KEY (workflow_group_id,process_group,prc_grp_disp) REFERENCES public.tb_btc_prc_grp_disp_mst(workflow_group_id,process_group,prc_grp_disp)
);
CREATE INDEX tb_btc_prc_grp_disp_cfg_confg_1 ON public.tb_btc_prc_grp_disp_cfg_1 USING btree (config_id);

-- Table Triggers

create trigger trg_h_tb_btc_prc_grp_disp_cfg before
insert
    or
delete
    or
update
    on
    public.tb_btc_prc_grp_disp_cfg_1 for each row execute function tf_h_tb_btc_prc_grp_disp_cfg();


-- public.emp_data source

CREATE MATERIALIZED VIEW public.emp_data
TABLESPACE pg_default
AS SELECT tb_emp_hrms.employee_number,
    tb_emp_hrms.oracle_employee_number,
    tb_emp_hrms.company,
    tb_emp_hrms.person_id,
    tb_emp_hrms.attribute3,
    tb_emp_hrms.prefix,
    tb_emp_hrms.first_name,
    tb_emp_hrms.middle_names,
    tb_emp_hrms.last_name,
    tb_emp_hrms.email_address,
    tb_emp_hrms.gender,
    tb_emp_hrms.dob,
    tb_emp_hrms.marital_status,
    tb_emp_hrms.paddress1,
    tb_emp_hrms.paddress2,
    tb_emp_hrms.paddress3,
    tb_emp_hrms.pcity,
    tb_emp_hrms.ppin,
    tb_emp_hrms.taddress1,
    tb_emp_hrms.taddress2,
    tb_emp_hrms.taddress3,
    tb_emp_hrms.tcity,
    tb_emp_hrms.tpin,
    tb_emp_hrms.supervisor_emp_no,
    tb_emp_hrms.sup_company,
    tb_emp_hrms.doj,
    tb_emp_hrms.father_husband_name,
    tb_emp_hrms.division,
    tb_emp_hrms.function,
    tb_emp_hrms.function_id,
    tb_emp_hrms.designation_id,
    tb_emp_hrms.payroll_id,
    tb_emp_hrms.designation_label_id,
    tb_emp_hrms.role,
    tb_emp_hrms.loc_code,
    tb_emp_hrms.location_name,
    tb_emp_hrms.date_employee_data_verified,
    tb_emp_hrms.lob_code,
    tb_emp_hrms.lob,
    tb_emp_hrms.cc_code,
    tb_emp_hrms.cc_name,
    tb_emp_hrms.category,
    tb_emp_hrms.domain_login_id,
    tb_emp_hrms.last_working_date,
    tb_emp_hrms.rm_name,
    tb_emp_hrms.supervisor_no,
    tb_emp_hrms.source,
    tb_emp_hrms.kpo_code,
    tb_emp_hrms.supervisor_name,
    tb_emp_hrms.mobile_number,
    tb_emp_hrms.assignment_change_date,
    tb_emp_hrms.loc_code_new,
    tb_emp_hrms.ing_emp_type,
    tb_emp_hrms.segment,
    tb_emp_hrms.emp_hierarchy_id,
    tb_emp_hrms.emp_branch_hierarchy_id,
    tb_emp_hrms.created_date,
    tb_emp_hrms.created_by,
    tb_emp_hrms.modified_date,
    tb_emp_hrms.modified_by,
    tb_emp_hrms.loc_code_view,
    tb_emp_hrms.is_active,
    tb_emp_hrms.bc_code,
    tb_emp_hrms.emp_lwd_date,
    tb_emp_hrms.prc_grp,
    tb_emp_hrms.login_status,
    tb_emp_hrms.supervisor_mobile_number,
    tb_emp_hrms.branch_code
   FROM tb_emp_hrms
WITH DATA;


-- public.mv_lead_status_report_1 source

CREATE MATERIALIZED VIEW public.mv_lead_status_report_1
TABLESPACE pg_default
AS SELECT (cop.object_data -> 'AOF'::text) ->> 'MODIFIED_LEAD_ID'::text AS "LEAD_ID",
    ((cop.object_data -> 'AOF'::text) -> 'WORK_VARIABLES'::text) ->> 'ID_NAME_ADD'::text AS "CUSTOMER_NAME",
    ((cop.object_data -> 'AOF'::text) -> 'CA'::text) ->> 'CRN_AUS'::text AS "CRN_OF_INDIVIDUAL_AUTHORISED_SIG",
    COALESCE(((cop.object_data -> 'AOF'::text) -> 'BUS_DATA'::text) ->> 'BUS_NAME_1'::text, 'NA'::text) AS "ENTITY_NAME",
    COALESCE(((cop.object_data -> 'AOF'::text) -> 'CA'::text) ->> 'CRN_ENTITY'::text, 'NA'::text) AS "Entity_CRN",
    COALESCE(((((cop.object_data -> 'AOF'::text) -> 'INDIVIDUAL_STAKEHOLDERS'::text) -> '0'::text) -> 'ADD_MHOLDER'::text) ->> 'VALUE'::text, 'NA'::text) AS "MANDATE_HOLDER",
    COALESCE((((cop.object_data -> 'AOF'::text) -> 'WORK_VARIABLES'::text) -> 'MH'::text) ->> 'ID_NAME_ADD'::text, 'NA'::text) AS "MANDATE_HOLDER_NAME",
    ((cop.object_data -> 'AOF'::text) -> 'CA'::text) ->> 'ACCOUNT_NO'::text AS "ACCOUNT_NUMBER",
    (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'KIT_TYPE'::text) ->> 'VALUE'::text AS "KIT_TYPE",
    'Cheque'::text AS "FUNDING_MODE",
    ((cop.object_data -> 'AOF'::text) -> 'CA'::text) ->> 'IP_AMOUNT'::text AS "IP_AMOUNT",
        CASE
            WHEN ((cop.object_data -> 'AOF'::text) ->> 'WORKFLOW_JOURNEY'::text) = 'IN'::text THEN 'Individual'::text
            WHEN ((cop.object_data -> 'AOF'::text) ->> 'WORKFLOW_JOURNEY'::text) = 'SP'::text THEN 'Sole Proprietor'::text
            ELSE NULL::text
        END AS constitution,
        CASE
            WHEN cop.text_2 IS NOT NULL THEN 'Yes'::text
            ELSE 'No'::text
        END AS "RE_OPENED_LEAD",
    'Retail Liabilities'::text AS "SEGMENT",
    'Assisted Journey'::text AS "LEAD_ORIGINATION",
        CASE
            WHEN ((cop.object_data -> 'PRODUCTSELECTION_CHOICE'::text) ->> 'value'::text) IS NOT NULL AND ((cop.object_data -> 'PRODUCTSELECTION_CHOICE'::text) ->> 'value'::text) <> ''::text THEN (cop.object_data -> 'PRODUCTSELECTION_CHOICE'::text) ->> 'value'::text
            WHEN ((cop.object_data -> 'PRODUCTSELECTION_CHOICE'::text) ->> 'value'::text) IS NULL OR ((cop.object_data -> 'PRODUCTSELECTION_CHOICE'::text) ->> 'value'::text) = ''::text THEN ((cop.object_data -> 'AOF'::text) -> 'CA'::text) ->> 'PRIVY_PRO_CLASSIFICATION'::text
            ELSE 'NA'::text
        END AS "FINAL_CLASSIFICATION_IN_BCIF",
    (((cop.object_data -> 'AOF'::text) -> 'BUS_DATA'::text) -> 'NAT_OF_INDUSTRY'::text) ->> 'CODE'::text AS "INDUSTRY_DESCRIPTION",
    (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'DEBIT_CARD_TYPE'::text) ->> 'VALUE'::text AS "DEBIT_CARD",
    COALESCE((((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'CREDIT_FACILITIES'::text) ->> 'VALUE'::text, 'NA'::text) AS "EXISTING_CREDIT_FACILITY",
    (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'ANNEXURE_1_CREDIT_FACILITY_TYPE'::text) ->> 'VALUE'::text AS "TYPE_OF_FACILITY",
    cop.device_create_timestamp AS "LEAD_CREATED_DATE",
    (cop.object_data -> 'AOF'::text) ->> 'LG_CODE'::text AS "LG_CODE",
    (cop.object_data -> 'AOF'::text) ->> 'RM_CODE'::text AS "RM_CODE",
    COALESCE(((cop.object_data -> 'AOF'::text) -> 'CA'::text) ->> 'CRN_MANDATE'::text, 'NA'::text) AS "MANDATE_HOLDER_CRN",
    ( SELECT (teh.first_name::text || ' '::text) || teh.last_name::text
           FROM tb_emp_hrms teh
          WHERE teh.employee_number::text = cop.login_id::text) AS "RM_NAME",
    ( SELECT (teh.first_name::text || ' '::text) || teh.last_name::text
           FROM tb_emp_hrms teh
          WHERE teh.employee_number::text = cop.login_id::text) AS "LC_NAME",
    (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'SCHEME_CODE'::text) ->> 'VALUE'::text AS "PRODUCT_CODE",
    cop.text_1 AS "LEAD_STATUS",
    COALESCE(((cop.object_data -> 'AOF'::text) -> 'PROMO'::text) ->> 'VALUE'::text, 'NA'::text) AS "PROMO_CODE",
    ((cop.object_data -> 'AOF'::text) -> 'LOB'::text) ->> 'VALUE'::text AS "LOB",
    (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'HOME_BRANCH'::text) ->> 'CODE'::text AS "BRANCH_CODE",
    (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'HOME_BRANCH'::text) ->> 'VALUE'::text AS "BRANCH_NAME",
    ((cop.object_data -> 'AOF'::text) -> 'COCO_CODE'::text) ->> 'VALUE'::text AS "COCO",
    ((cop.object_data -> 'AOF'::text) -> 'RISK_PROFILE'::text) ->> 'VALUE'::text AS "RISK",
    COALESCE((((cop.object_data -> 'AOF'::text) -> 'BUS_DATA'::text) -> 'NAT_OF_BUSSINESS'::text) ->> 'VALUE'::text, 'NA'::text) AS "NATURE_OF_BUSINESS",
        CASE
            WHEN ((((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'ACTIV_MONEY'::text) ->> 'VALUE'::text) = '--Select--'::text OR ((((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'ACTIV_MONEY'::text) ->> 'VALUE'::text) = ''::text OR ((((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'ACTIV_MONEY'::text) ->> 'VALUE'::text) IS NULL THEN 'NA'::text
            ELSE (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'ACTIV_MONEY'::text) ->> 'VALUE'::text
        END AS "ACTIVE_MONEY",
    COALESCE(((((cop.object_data -> 'AOF'::text) -> 'INDIVIDUAL_STAKEHOLDERS'::text) -> '0'::text) -> 'KYC_DOCUMENT_TYPE'::text) ->> 'VALUE'::text, 'NA'::text) AS "ADDRESS_PROOF",
    COALESCE(((((cop.object_data -> 'AOF'::text) -> 'INDIVIDUAL_STAKEHOLDERS'::text) -> '0'::text) -> 'IS_ID_PROOF'::text) ->> 'VALUE'::text, 'NA'::text) AS "IDENTITY_TYPE",
    ((cop.object_data -> 'AOF'::text) -> 'WORK_VARIABLES'::text) ->> 'AADHAAR_PAN'::text AS "PAN_STATUS",
    ((cop.object_data -> 'AOF'::text) -> 'WORK_VARIABLES'::text) ->> 'AADHAAR_PAN_LINKING'::text AS "PAN_AADHAR_LINKING_STATUS",
    (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'PROGRAM_OPTION'::text) ->> 'VALUE'::text AS "PRIVY_NON_PRIVY",
    COALESCE((((cop.object_data -> 'AOF'::text) -> 'BUS_DATA'::text) -> 'EP1_DOCTYPE'::text) ->> 'VALUE'::text, 'NA'::text) AS "ENTITY_DOC_1",
    COALESCE((((cop.object_data -> 'AOF'::text) -> 'BUS_DATA'::text) -> 'EP2_DOCTYPE'::text) ->> 'VALUE'::text, 'NA'::text) AS "ENTITY_DOC_2",
    ( SELECT teh.employee_number
           FROM tb_emp_hrms teh
          WHERE teh.employee_number::text = cop.login_id::text) AS "LEAD_CREATED_BY_LC",
    ( SELECT COALESCE(tbpgd.process_group, 'NA'::character varying) AS "coalesce"
           FROM tb_btc_prc_grp_disp tbpgd
          WHERE tbpgd.object_pri_key_1::text = cop.object_pri_key_1::text AND tbpgd.process_group::text = 'ACCOUNT'::text AND tbpgd.prc_grp_disp::text = 'SUCCESS'::text) AS "LEAD_STATUS_1",
    cop.modify_emp_id AS "LAST_MODIFIED_BY",
    ( SELECT DISTINCT tfrm.role_alias
           FROM tb_emp_hrms tehh,
            tb_function_roles_mst tfrm,
            tb_cop_buss_obj_txn tcbot
          WHERE tehh.role::text = tfrm.role_name::text AND tcbot.modify_emp_id::text = tehh.employee_number::text AND tcbot.object_pri_key_1::text = cop.object_pri_key_1::text
         LIMIT 1) AS "LAST_MODIFIED_BY_ROLE",
    cop.device_modify_timestamp AS "LAST_MODIFIED_DATE",
    ( SELECT to_char(tbpgd.created_timestamp, 'YYYY-MM-DD HH24:MI:SS'::text) AS to_char
           FROM tb_btc_prc_grp_disp tbpgd
          WHERE tbpgd.object_pri_key_1::text = cop.object_pri_key_1::text AND tbpgd.process_group::text = 'ACCOUNT'::text AND tbpgd.prc_grp_disp::text = 'SUCCESS'::text) AS "ACCOUNT_OPENED_DATE",
        CASE
            WHEN cop.text_2 IS NOT NULL THEN 'Yes'::text
            ELSE 'No'::text
        END AS "FIRST_PASS",
    COALESCE((cop.object_data -> 'PRODUCTSELECTION_CHOICE'::text) ->> 'value'::text, 'NA'::text) AS "CLASSIFICATION_SELECTED_BY_DVU",
    ( SELECT (teh.first_name::text || ' '::text) || teh.last_name::text
           FROM tb_emp_hrms teh
          WHERE (teh.employee_number::text IN ( SELECT teh2.supervisor_emp_no
                   FROM tb_emp_hrms teh2,
                    tb_btc_accesscontrol tba2
                  WHERE teh2.employee_number::text = tba2.emp_id::text AND tba2.object_pri_key_1::text = cop.object_pri_key_1::text AND tba2.system_role::text = 'RM'::text))) AS "SOURCING_RM_SUPERVISOR_NAME",
    ( SELECT dis.created_timestamp
           FROM tb_btc_accesscontrol_hist tssh,
            tb_btc_prc_grp_disp_hist dis
          WHERE dis.object_pri_key_1::text = cop.object_pri_key_1::text AND dis.object_pri_key_1::text = tssh.object_pri_key_1::text AND tssh.system_role::text = 'RCU'::text AND dis.process_group::text = 'RCU'::text AND dis.prc_grp_disp::text = 'WIP'::text AND tssh.object_pri_key_1::text = dis.object_pri_key_1::text AND tssh.emp_id::text <> ''::text
          ORDER BY tssh.log_time
         LIMIT 1) AS "SENT_TO_MID_OFFICE_DATE",
    ( SELECT dis.created_timestamp
           FROM tb_btc_accesscontrol_hist tssh,
            tb_btc_prc_grp_disp_hist dis
          WHERE dis.object_pri_key_1::text = cop.object_pri_key_1::text AND tssh.system_role::text = 'DVU'::text AND dis.process_group::text = 'DVU'::text AND dis.prc_grp_disp::text = 'USERWAIT'::text AND tssh.object_pri_key_1::text = dis.object_pri_key_1::text AND tssh.emp_id::text <> ''::text
          ORDER BY tssh.log_time
         LIMIT 1) AS "SENT_TO_DVU_DATE",
    ( SELECT dis.created_timestamp
           FROM tb_btc_accesscontrol_hist tssh,
            tb_btc_prc_grp_disp_hist dis
          WHERE dis.object_pri_key_1::text = cop.object_pri_key_1::text AND dis.object_pri_key_1::text = tssh.object_pri_key_1::text AND tssh.system_role::text = 'DVU'::text AND dis.process_group::text = 'DVU'::text AND dis.prc_grp_disp::text = 'WIP'::text AND tssh.emp_hierarchy_id::text <> ''::text
          ORDER BY tssh.log_time
         LIMIT 1) AS "DVU_ASSIGNED_DATE",
    ( SELECT dis.created_timestamp
           FROM tb_btc_accesscontrol_hist tssh,
            tb_btc_prc_grp_disp_hist dis
          WHERE dis.object_pri_key_1::text = cop.object_pri_key_1::text AND dis.object_pri_key_1::text = tssh.object_pri_key_1::text AND tssh.system_role::text = 'RCU'::text AND dis.process_group::text = 'RCU'::text AND dis.prc_grp_disp::text = 'WIP'::text AND tssh.object_pri_key_1::text = dis.object_pri_key_1::text AND tssh.emp_id::text <> ''::text
          ORDER BY tssh.log_time
         LIMIT 1) AS "MID_OFFICE_ASSIGNED_DATE",
    ( SELECT (teh3.first_name::text || ' '::text) || teh3.last_name::text
           FROM tb_emp_hrms teh3
          WHERE (teh3.employee_number::text IN ( SELECT tssh.emp_hierarchy_id
                   FROM tb_btc_accesscontrol_hist tssh,
                    tb_btc_prc_grp_disp_hist dis
                  WHERE dis.object_pri_key_1::text = cop.object_pri_key_1::text AND dis.object_pri_key_1::text = tssh.object_pri_key_1::text AND tssh.system_role::text = 'DVU'::text AND dis.process_group::text = 'DVU'::text AND dis.prc_grp_disp::text = 'WIP'::text AND tssh.object_pri_key_1::text = dis.object_pri_key_1::text AND tssh.emp_hierarchy_id::text <> ''::text
                  ORDER BY tssh.log_time
                 LIMIT 1))) AS "DVU_ASSIGNED_USER_NAME",
    ( SELECT (teh3.first_name::text || ' '::text) || teh3.last_name::text
           FROM tb_emp_hrms teh3
          WHERE (teh3.employee_number::text IN ( SELECT tssh.emp_id
                   FROM tb_btc_accesscontrol_hist tssh,
                    tb_btc_prc_grp_disp_hist dis
                  WHERE dis.object_pri_key_1::text = cop.object_pri_key_1::text AND dis.object_pri_key_1::text = tssh.object_pri_key_1::text AND tssh.system_role::text = 'RCU'::text AND dis.process_group::text = 'RCU'::text AND dis.prc_grp_disp::text = 'WIP'::text AND tssh.emp_id::text <> ''::text AND tssh.config_id::text = '44'::text
                  ORDER BY tssh.log_time
                 LIMIT 1))) AS "MID_OFFICE_ASSIGNED_USER_NAME",
    ( SELECT concat(teh.first_name, ' ', teh.last_name) AS concat
           FROM tb_btc_accesscontrol_hist tssh,
            tb_btc_prc_grp_disp_hist dis,
            tb_emp_hrms teh,
            tb_function_roles_mst tfrm
          WHERE dis.object_pri_key_1::text = cop.object_pri_key_1::text AND dis.object_pri_key_1::text = tssh.object_pri_key_1::text AND teh.role::text = tfrm.role_name::text AND teh.employee_number::text = tssh.emp_hierarchy_id::text AND tssh.system_role::text = 'DVU'::text AND tssh.emp_hierarchy_id::text <> ''::text
          ORDER BY tssh.log_time DESC
         LIMIT 1) AS "DVU_REASSIGNED_USER_NAME",
    ( SELECT teh.employee_number
           FROM tb_btc_accesscontrol_hist tssh,
            tb_btc_prc_grp_disp_hist dis,
            tb_emp_hrms teh,
            tb_function_roles_mst tfrm
          WHERE dis.object_pri_key_1::text = cop.object_pri_key_1::text AND dis.object_pri_key_1::text = tssh.object_pri_key_1::text AND teh.role::text = tfrm.role_name::text AND teh.employee_number::text = tssh.emp_hierarchy_id::text AND tssh.system_role::text = 'DVU'::text AND tssh.emp_hierarchy_id::text <> ''::text
          ORDER BY tssh.log_time DESC
         LIMIT 1) AS "DVU_REASSIGNED_USER_ID",
        CASE
            WHEN cop.text_1::text = 'RCU_ASSIGNED'::text THEN ( SELECT concat(CURRENT_DATE - to_char(dis.start_timestamp, 'YYYY-MM-DD'::text)::date, ' days') AS concat
               FROM tb_btc_accesscontrol_hist tssh,
                tb_btc_prc_grp_disp_hist dis,
                tb_emp_hrms teh,
                tb_function_roles_mst tfrm
              WHERE dis.object_pri_key_1::text = cop.object_pri_key_1::text AND dis.object_pri_key_1::text = tssh.object_pri_key_1::text AND teh.role::text = tfrm.role_name::text AND teh.employee_number::text = tssh.emp_id::text AND tssh.system_role::text = 'RCU'::text AND dis.process_group::text = 'RCU'::text AND dis.prc_grp_disp::text = 'WIP'::text AND tssh.object_pri_key_1::text = dis.object_pri_key_1::text AND tssh.emp_id::text <> ''::text
              ORDER BY tssh.log_time
             LIMIT 1)
            ELSE NULL::text
        END AS "MID_OFFICE_PENDING_DATE",
        CASE
            WHEN cop.text_1::text = 'DVU_ASSIGNED'::text THEN ( SELECT concat(CURRENT_DATE - to_char(dis.start_timestamp, 'YYYY-MM-DD'::text)::date, ' days') AS concat
               FROM tb_btc_accesscontrol_hist tssh,
                tb_btc_prc_grp_disp_hist dis,
                tb_emp_hrms teh,
                tb_function_roles_mst tfrm
              WHERE dis.object_pri_key_1::text = cop.object_pri_key_1::text AND dis.object_pri_key_1::text = tssh.object_pri_key_1::text AND teh.role::text = tfrm.role_name::text AND teh.employee_number::text = tssh.emp_id::text AND tssh.system_role::text = 'DVU'::text AND dis.process_group::text = 'DVU'::text AND dis.prc_grp_disp::text = 'WIP'::text AND tssh.object_pri_key_1::text = dis.object_pri_key_1::text AND tssh.emp_id::text <> ''::text
              ORDER BY tssh.log_time
             LIMIT 1)
            ELSE NULL::text
        END AS "DVU_PENDING_DATE",
    ( SELECT string_agg((a.section_id::text || ' - '::text) || a.status_remarks::text, ' , '::text ORDER BY a.section_id, a.status_remarks) AS string_agg
           FROM ( SELECT tssh.status_remarks,
                    tssh.section_id,
                    tssh.created_timestamp,
                    rank() OVER (PARTITION BY tssh.status_remarks, tssh.section_id ORDER BY tssh.created_timestamp) AS rn
                   FROM tb_emp_hrms teh
                     JOIN tb_function_roles_mst fun ON fun.role_name::text = teh.role::text
                     JOIN tb_section_status_hist tssh ON tssh.role::text = teh.employee_number::text
                     JOIN tb_cop_buss_obj_txn cop_1 ON cop_1.object_pri_key_1::text = tssh.object_pri_key_1::text
                  WHERE fun.default_system_role_code::text = 'DVU'::text AND tssh.status::text = 'N'::text AND cop_1.text_1::text = 'DVU_REWORK'::text) a
          WHERE a.rn = 1) AS "DVU_REWORK_REASON1",
    ( SELECT string_agg((a.section_id::text || ' - '::text) || a.status_remarks::text, ' , '::text ORDER BY a.section_id, a.status_remarks) AS string_agg
           FROM ( SELECT tssh.status_remarks,
                    tssh.section_id,
                    tssh.created_timestamp,
                    rank() OVER (PARTITION BY tssh.status_remarks, tssh.section_id ORDER BY tssh.created_timestamp) AS rn
                   FROM tb_emp_hrms teh
                     JOIN tb_function_roles_mst fun ON fun.role_name::text = teh.role::text
                     JOIN tb_section_status_hist tssh ON tssh.role::text = teh.employee_number::text
                     JOIN tb_cop_buss_obj_txn cop_1 ON cop_1.object_pri_key_1::text = tssh.object_pri_key_1::text
                  WHERE fun.default_system_role_code::text = 'DVU'::text AND tssh.status::text = 'N'::text AND cop_1.text_1::text = 'DVU_REWORK'::text) a
          WHERE a.rn = 2) AS "DVU_REWORK_REASON2",
    ( SELECT string_agg((a.section_id::text || ' - '::text) || a.status_remarks::text, ' , '::text ORDER BY a.section_id, a.status_remarks) AS string_agg
           FROM ( SELECT tssh.status_remarks,
                    tssh.section_id,
                    tssh.created_timestamp,
                    rank() OVER (PARTITION BY tssh.status_remarks, tssh.section_id ORDER BY tssh.created_timestamp) AS rn
                   FROM tb_emp_hrms teh
                     JOIN tb_function_roles_mst fun ON fun.role_name::text = teh.role::text
                     JOIN tb_section_status_hist tssh ON tssh.role::text = teh.employee_number::text
                     JOIN tb_cop_buss_obj_txn cop_1 ON cop_1.object_pri_key_1::text = tssh.object_pri_key_1::text
                  WHERE fun.default_system_role_code::text = 'DVU'::text AND tssh.status::text = 'N'::text AND cop_1.text_1::text = 'DVU_REWORK'::text) a
          WHERE a.rn = 3) AS "DVU_REWORK_REASON3",
    ( SELECT x.text_2
           FROM ( SELECT cop1.device_modify_timestamp,
                    cop1.text_2,
                    rank() OVER (PARTITION BY cop1.device_modify_timestamp, cop1.text_2 ORDER BY cop.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist cop1,
                    tb_btc_prc_grp_disp disp
                  WHERE cop1.object_pri_key_1::text = disp.object_pri_key_1::text AND cop.object_pri_key_1::text = cop1.object_pri_key_1::text AND cop1.text_1::text = 'DVU_REWORK'::text AND cop1.modified_by::text = 'SPUPDVFLOWDATA'::text) x
          WHERE x.rn = 1
         LIMIT 1) AS "DVU_REWORK_REMARK1",
    ( SELECT x.text_2
           FROM ( SELECT cop1.device_modify_timestamp,
                    cop1.text_2,
                    rank() OVER (PARTITION BY cop1.device_modify_timestamp, cop1.text_2 ORDER BY cop.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist cop1,
                    tb_btc_prc_grp_disp disp
                  WHERE cop1.object_pri_key_1::text = disp.object_pri_key_1::text AND cop.object_pri_key_1::text = cop1.object_pri_key_1::text AND cop1.text_1::text = 'DVU_REWORK'::text AND cop1.modified_by::text = 'SPUPDVFLOWDATA'::text) x
          WHERE x.rn = 2
         LIMIT 1) AS "DVU_REWORK_REMARK2",
    ( SELECT x.text_2
           FROM ( SELECT cop1.device_modify_timestamp,
                    cop1.text_2,
                    rank() OVER (PARTITION BY cop1.device_modify_timestamp, cop1.text_2 ORDER BY cop.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist cop1,
                    tb_btc_prc_grp_disp disp
                  WHERE cop1.object_pri_key_1::text = disp.object_pri_key_1::text AND cop1.object_pri_key_1::text = cop.object_pri_key_1::text AND cop1.text_1::text = 'DVU_REWORK'::text AND cop1.modified_by::text = 'SPUPDVFLOWDATA'::text) x
          WHERE x.rn = 3
         LIMIT 1) AS "DVU_REWORK_REMARK3",
    ( SELECT x.device_modify_timestamp
           FROM ( SELECT cop1.device_modify_timestamp,
                    cop1.text_2,
                    rank() OVER (PARTITION BY cop1.device_modify_timestamp, cop1.text_2 ORDER BY cop.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist cop1,
                    tb_btc_prc_grp_disp disp
                  WHERE cop1.object_pri_key_1::text = disp.object_pri_key_1::text AND cop1.object_pri_key_1::text = cop.object_pri_key_1::text AND cop1.text_1::text = 'DVU_REWORK'::text AND cop1.modified_by::text = 'SPUPDVFLOWDATA'::text) x
          WHERE x.rn = 1
         LIMIT 1) AS "DVU_REWORK_DATE1",
    ( SELECT x.device_modify_timestamp
           FROM ( SELECT cop1.device_modify_timestamp,
                    cop1.text_2,
                    rank() OVER (PARTITION BY cop1.device_modify_timestamp, cop1.text_2 ORDER BY cop.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist cop1,
                    tb_btc_prc_grp_disp disp
                  WHERE cop1.object_pri_key_1::text = disp.object_pri_key_1::text AND cop1.object_pri_key_1::text = cop.object_pri_key_1::text AND cop1.text_1::text = 'DVU_REWORK'::text AND cop1.modified_by::text = 'SPUPDVFLOWDATA'::text) x
          WHERE x.rn = 2
         LIMIT 1) AS "DVU_REWORK_DATE2",
    ( SELECT x.device_modify_timestamp
           FROM ( SELECT cop1.device_modify_timestamp,
                    cop1.text_2,
                    rank() OVER (PARTITION BY cop1.device_modify_timestamp, cop1.text_2 ORDER BY cop.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist cop1,
                    tb_btc_prc_grp_disp disp
                  WHERE cop1.object_pri_key_1::text = disp.object_pri_key_1::text AND cop1.object_pri_key_1::text = cop.object_pri_key_1::text AND cop1.text_1::text = 'DVU_REWORK'::text AND cop1.modified_by::text = 'SPUPDVFLOWDATA'::text) x
          WHERE x.rn = 3
         LIMIT 1) AS "DVU_REWORK_DATE3",
    ( SELECT x.modify_emp_id
           FROM ( SELECT cop1.device_modify_timestamp,
                    cop1.text_2,
                    cop1.modify_emp_id,
                    rank() OVER (PARTITION BY cop1.device_modify_timestamp, cop1.text_2, cop1.modify_emp_id ORDER BY cop.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist cop1,
                    tb_btc_prc_grp_disp disp
                  WHERE cop1.object_pri_key_1::text = disp.object_pri_key_1::text AND cop1.object_pri_key_1::text = cop.object_pri_key_1::text AND cop1.text_1::text = 'DVU_REWORK'::text AND cop1.modified_by::text = 'SPUPDVFLOWDATA'::text) x
          WHERE x.rn = 1
         LIMIT 1) AS "DVU_REWORK_USER1",
    ( SELECT x.modify_emp_id
           FROM ( SELECT cop1.device_modify_timestamp,
                    cop1.text_2,
                    cop1.modify_emp_id,
                    rank() OVER (PARTITION BY cop1.device_modify_timestamp, cop1.text_2, cop1.modify_emp_id ORDER BY cop.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist cop1,
                    tb_btc_prc_grp_disp disp
                  WHERE cop1.object_pri_key_1::text = disp.object_pri_key_1::text AND cop1.object_pri_key_1::text = cop.object_pri_key_1::text AND cop1.text_1::text = 'DVU_REWORK'::text AND cop1.modified_by::text = 'SPUPDVFLOWDATA'::text) x
          WHERE x.rn = 2
         LIMIT 1) AS "DVU_REWORK_USER2",
    ( SELECT x.modify_emp_id
           FROM ( SELECT cop1.device_modify_timestamp,
                    cop1.text_2,
                    cop1.modify_emp_id,
                    rank() OVER (PARTITION BY cop1.device_modify_timestamp, cop1.text_2, cop1.modify_emp_id ORDER BY cop.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist cop1,
                    tb_btc_prc_grp_disp disp
                  WHERE cop1.object_pri_key_1::text = disp.object_pri_key_1::text AND cop1.object_pri_key_1::text = cop.object_pri_key_1::text AND cop1.text_1::text = 'DVU_REWORK'::text AND cop1.modified_by::text = 'SPUPDVFLOWDATA'::text) x
          WHERE x.rn = 3
         LIMIT 1) AS "DVU_REWORK_USER3",
    ( SELECT x.text_2
           FROM ( SELECT cop1.device_modify_timestamp,
                    cop1.text_2,
                    rank() OVER (PARTITION BY cop1.device_modify_timestamp, cop1.text_2 ORDER BY cop.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist cop1,
                    tb_btc_prc_grp_disp disp
                  WHERE cop1.object_pri_key_1::text = disp.object_pri_key_1::text AND cop1.object_pri_key_1::text = cop.object_pri_key_1::text AND cop1.text_1::text = 'BOM_REWORK_APPROVED'::text) x
          WHERE x.rn = 1
         LIMIT 1) AS "RM_REWORK_REMARK1",
    ( SELECT x.text_2
           FROM ( SELECT cop1.device_modify_timestamp,
                    cop1.text_2,
                    rank() OVER (PARTITION BY cop1.device_modify_timestamp, cop1.text_2 ORDER BY cop.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist cop1,
                    tb_btc_prc_grp_disp disp
                  WHERE cop1.object_pri_key_1::text = disp.object_pri_key_1::text AND cop1.object_pri_key_1::text = cop.object_pri_key_1::text AND cop1.text_1::text = 'BOM_REWORK_APPROVED'::text) x
          WHERE x.rn = 2
         LIMIT 1) AS "RM_REWORK_REMARK2",
    ( SELECT x.text_2
           FROM ( SELECT cop1.device_modify_timestamp,
                    cop1.text_2,
                    rank() OVER (PARTITION BY cop1.device_modify_timestamp, cop1.text_2 ORDER BY cop.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist cop1,
                    tb_btc_prc_grp_disp disp
                  WHERE cop1.object_pri_key_1::text = disp.object_pri_key_1::text AND cop1.object_pri_key_1::text = cop.object_pri_key_1::text AND cop1.text_1::text = 'BOM_REWORK_APPROVED'::text) x
          WHERE x.rn = 3
         LIMIT 1) AS "RM_REWORK_REMARK3",
    ( SELECT x.device_modify_timestamp
           FROM ( SELECT cop1.device_modify_timestamp,
                    cop1.text_2,
                    rank() OVER (PARTITION BY cop1.device_modify_timestamp ORDER BY cop1.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist cop1,
                    tb_btc_accesscontrol tba
                  WHERE cop1.object_pri_key_1::text = cop.object_pri_key_1::text AND cop1.text_1::text = 'BOM_REWORK_APPROVED'::text AND tba.system_role::text = 'RM'::text) x
          WHERE x.rn = 1
         LIMIT 1) AS "RM_REWORK_REVERT_DATE1",
    ( SELECT x.device_modify_timestamp
           FROM ( SELECT cop1.device_modify_timestamp,
                    cop1.text_2,
                    rank() OVER (PARTITION BY cop1.device_modify_timestamp ORDER BY cop1.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist cop1,
                    tb_btc_accesscontrol tba
                  WHERE cop1.object_pri_key_1::text = cop.object_pri_key_1::text AND cop1.text_1::text = 'BOM_REWORK_APPROVED'::text AND tba.system_role::text = 'RM'::text) x
          WHERE x.rn = 2
         LIMIT 1) AS "RM_REWORK_REVERT_DATE2",
    ( SELECT x.device_modify_timestamp
           FROM ( SELECT cop1.device_modify_timestamp,
                    cop1.text_2,
                    rank() OVER (PARTITION BY cop1.device_modify_timestamp ORDER BY cop.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist cop1,
                    tb_btc_accesscontrol tba
                  WHERE cop1.object_pri_key_1::text = cop.object_pri_key_1::text AND cop1.text_1::text = 'BOM_REWORK_APPROVED'::text AND tba.system_role::text = 'RM'::text) x
          WHERE x.rn = 3
         LIMIT 1) AS "RM_REWORK_REVERT_DATE3",
    ( SELECT (teh.first_name::text || ' '::text) || teh.last_name::text
           FROM tb_emp_hrms teh
          WHERE (teh.employee_number::text IN ( SELECT tba.emp_id
                   FROM tb_btc_accesscontrol tba
                  WHERE tba.object_pri_key_1::text = cop.object_pri_key_1::text AND tba.system_role::text = 'RM'::text))) AS "LAST_ACTION_RM",
    upper(COALESCE((((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'PROGRAM_OPTION'::text) ->> 'VALUE'::text, 'NA'::text)) AS privy_option,
    ( SELECT teh.employee_number
           FROM tb_emp_hrms teh
          WHERE teh.employee_number::text = cop.login_id::text) AS emp_hierarchy_id,
    ( SELECT teh.supervisor_emp_no
           FROM tb_emp_hrms teh
          WHERE teh.employee_number::text = cop.login_id::text) AS emp_supervisor_id,
    to_char(cop.device_create_timestamp, 'YYYY-MM-DD'::text)::date AS "DATE",
    (((cop.object_data -> 'AOF'::text) -> 'BUS_DATA'::text) -> 'EP1_DOCTYPE'::text) ->> 'VALUE'::text AS entity_doc_1,
    (((cop.object_data -> 'AOF'::text) -> 'BUS_DATA'::text) -> 'EP2_DOCTYPE'::text) ->> 'VALUE'::text AS entity_doc_2,
    cop.text_2 AS "FIRSTPASS",
        CASE
            WHEN ((cop.object_data -> 'AOF'::text) ->> 'WORKFLOW_JOURNEY'::text) = 'IN'::text THEN 'IN'::text
            WHEN ((cop.object_data -> 'AOF'::text) ->> 'WORKFLOW_JOURNEY'::text) = 'SP'::text THEN 'SP'::text
            ELSE NULL::text
        END AS constitution_code
   FROM tb_cop_buss_obj_txn cop
  WHERE (EXISTS ( SELECT 1
           FROM tb_btc_prc_grp_disp disp
          WHERE disp.object_pri_key_1::text = cop.object_pri_key_1::text AND disp.prc_grp_disp::text <> 'REJECT'::text))
WITH DATA;

-- View indexes:
CREATE INDEX idx1 ON public.mv_lead_status_report_1 USING btree ("LEAD_ID");


-- public.mv_lead_status_report_metadata source

CREATE MATERIALIZED VIEW public.mv_lead_status_report_metadata
TABLESPACE pg_default
AS SELECT t.lead_id AS "LEAD_ID",
    ((cop.object_data -> 'AOF'::text) -> 'WORK_VARIABLES'::text) ->> 'ID_NAME_ADD'::text AS "CUSTOMER_NAME",
    t.aus_crn AS "CRN_OF_INDIVIDUAL_AUTHORISED_SIG",
    t.entity_name AS "ENTITY_NAME",
    t.crn_entity AS "Entity_CRN",
    COALESCE(((((cop.object_data -> 'AOF'::text) -> 'INDIVIDUAL_STAKEHOLDERS'::text) -> '0'::text) -> 'ADD_MHOLDER'::text) ->> 'VALUE'::text, 'NA'::text) AS "MANDATE_HOLDER",
    COALESCE((((cop.object_data -> 'AOF'::text) -> 'WORK_VARIABLES'::text) -> 'MH'::text) ->> 'ID_NAME_ADD'::text, 'NA'::text) AS "MANDATE_HOLDER_NAME",
    t.account_no AS "ACCOUNT_NUMBER",
    (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'KIT_TYPE'::text) ->> 'VALUE'::text AS "KIT_TYPE",
    'Cheque'::text AS "FundingMode",
    ((cop.object_data -> 'AOF'::text) -> 'CA'::text) ->> 'IP_AMOUNT'::text AS "IP_AMOUNT",
    t.constitution_type AS constitution,
        CASE
            WHEN t.text_2 IS NOT NULL THEN 'Yes'::text
            ELSE 'No'::text
        END AS "ReOpenedLead",
    'Retail Liabilities'::text AS "SEGMENT",
    'Assisted Journey'::text AS "LEAD_ORIGINATION",
        CASE
            WHEN ((cop.object_data -> 'PRODUCTSELECTION_CHOICE'::text) ->> 'value'::text) IS NOT NULL AND ((cop.object_data -> 'PRODUCTSELECTION_CHOICE'::text) ->> 'value'::text) <> ''::text THEN (cop.object_data -> 'PRODUCTSELECTION_CHOICE'::text) ->> 'value'::text
            WHEN ((cop.object_data -> 'PRODUCTSELECTION_CHOICE'::text) ->> 'value'::text) IS NULL OR ((cop.object_data -> 'PRODUCTSELECTION_CHOICE'::text) ->> 'value'::text) = ''::text THEN ((cop.object_data -> 'AOF'::text) -> 'CA'::text) ->> 'PRIVY_PRO_CLASSIFICATION'::text
            ELSE 'NA'::text
        END AS "FINAL_CLASSIFICATION_IN_BCIF",
    (((cop.object_data -> 'AOF'::text) -> 'BUS_DATA'::text) -> 'NAT_OF_INDUSTRY'::text) ->> 'CODE'::text AS "INDUSTRY_DESCRIPTION",
    (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'DEBIT_CARD_TYPE'::text) ->> 'VALUE'::text AS "DEBIT_CARD",
    COALESCE((((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'CREDIT_FACILITIES'::text) ->> 'VALUE'::text, 'NA'::text) AS "EXISTING_CREDIT_FACILITY",
    (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'ANNEXURE_1_CREDIT_FACILITY_TYPE'::text) ->> 'VALUE'::text AS "TYPE_OF_FACILITY",
    t.device_create_timestamp AS "LEAD_CREATED_DATE",
    (cop.object_data -> 'AOF'::text) ->> 'LG_CODE'::text AS "LG_CODE",
    (cop.object_data -> 'AOF'::text) ->> 'RM_CODE'::text AS "RM_CODE",
    COALESCE(((cop.object_data -> 'AOF'::text) -> 'CA'::text) ->> 'CRN_MANDATE'::text, 'NA'::text) AS "MANDATE_HOLDER_CRN",
    ( SELECT (teh.first_name::text || ' '::text) || teh.last_name::text
           FROM tb_emp_hrms teh
          WHERE teh.employee_number::text = t.login_id::text) AS "RM_NAME",
    ( SELECT (teh.first_name::text || ' '::text) || teh.last_name::text
           FROM tb_emp_hrms teh
          WHERE teh.employee_number::text = t.login_id::text) AS "LC_NAME",
    (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'SCHEME_CODE'::text) ->> 'VALUE'::text AS "PRODUCT_CODE",
    t.text_1 AS "LeadStatus",
    COALESCE(((cop.object_data -> 'AOF'::text) -> 'PROMO'::text) ->> 'VALUE'::text, 'NA'::text) AS "PROMO_CODE",
    ((cop.object_data -> 'AOF'::text) -> 'LOB'::text) ->> 'VALUE'::text AS "LOB",
    (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'HOME_BRANCH'::text) ->> 'CODE'::text AS "BRANCH_CODE",
    (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'HOME_BRANCH'::text) ->> 'VALUE'::text AS "BRANCH_NAME",
    ((cop.object_data -> 'AOF'::text) -> 'COCO_CODE'::text) ->> 'VALUE'::text AS "COCO",
    ((cop.object_data -> 'AOF'::text) -> 'RISK_PROFILE'::text) ->> 'VALUE'::text AS "RISK",
    COALESCE((((cop.object_data -> 'AOF'::text) -> 'BUS_DATA'::text) -> 'NAT_OF_BUSSINESS'::text) ->> 'VALUE'::text, 'NA'::text) AS "NATURE_OF_BUSINESS",
        CASE
            WHEN ((((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'ACTIV_MONEY'::text) ->> 'VALUE'::text) = '--Select--'::text OR ((((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'ACTIV_MONEY'::text) ->> 'VALUE'::text) = ''::text OR ((((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'ACTIV_MONEY'::text) ->> 'VALUE'::text) IS NULL THEN 'NA'::text
            ELSE (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'ACTIV_MONEY'::text) ->> 'VALUE'::text
        END AS "ACTIVE_MONEY",
    COALESCE(((((cop.object_data -> 'AOF'::text) -> 'INDIVIDUAL_STAKEHOLDERS'::text) -> '0'::text) -> 'KYC_DOCUMENT_TYPE'::text) ->> 'VALUE'::text, 'NA'::text) AS "ADDRESS_PROOF",
    COALESCE(((((cop.object_data -> 'AOF'::text) -> 'INDIVIDUAL_STAKEHOLDERS'::text) -> '0'::text) -> 'IS_ID_PROOF'::text) ->> 'VALUE'::text, 'NA'::text) AS "IDENTITY_TYPE",
    ((cop.object_data -> 'AOF'::text) -> 'WORK_VARIABLES'::text) ->> 'AADHAAR_PAN'::text AS "PAN_STATUS",
    ((cop.object_data -> 'AOF'::text) -> 'WORK_VARIABLES'::text) ->> 'AADHAAR_PAN_LINKING'::text AS "PAN_AADHAR_LINKING_STATUS",
    t.privy AS "PRIVY_NON_PRIVY",
    COALESCE((((cop.object_data -> 'AOF'::text) -> 'BUS_DATA'::text) -> 'EP1_DOCTYPE'::text) ->> 'VALUE'::text, 'NA'::text) AS "ENTITY_DOC_1",
    COALESCE((((cop.object_data -> 'AOF'::text) -> 'BUS_DATA'::text) -> 'EP2_DOCTYPE'::text) ->> 'VALUE'::text, 'NA'::text) AS "ENTITY_DOC_2",
    ( SELECT teh.employee_number
           FROM tb_emp_hrms teh
          WHERE teh.employee_number::text = t.login_id::text) AS "LEAD_CREATED_BY_LC",
    ( SELECT COALESCE(tbpgd.process_group, 'NA'::character varying) AS "coalesce"
           FROM tb_btc_prc_grp_disp tbpgd
          WHERE tbpgd.object_pri_key_1::text = t.object_pri_key_1::text AND tbpgd.process_group::text = 'ACCOUNT'::text AND tbpgd.prc_grp_disp::text = 'SUCCESS'::text) AS "LEAD_STATUS_1",
    t.modify_emp_id AS "LAST_MODIFIED_BY",
    ( SELECT DISTINCT tfrm.role_alias
           FROM tb_emp_hrms tehh,
            tb_function_roles_mst tfrm,
            tb_cop_metadata_txn tcbot
          WHERE tehh.role::text = tfrm.role_name::text AND tcbot.modify_emp_id::text = tehh.employee_number::text AND tcbot.object_pri_key_1::text = t.object_pri_key_1::text
         LIMIT 1) AS "LAST_MODIFIED_BY_ROLE",
    t.device_modify_timestamp AS "LAST_MODIFIED_DATE",
    ( SELECT to_char(tbpgd.created_timestamp, 'YYYY-MM-DD HH24:MI:SS'::text) AS to_char
           FROM tb_btc_prc_grp_disp tbpgd
          WHERE tbpgd.object_pri_key_1::text = t.object_pri_key_1::text AND tbpgd.process_group::text = 'ACCOUNT'::text AND tbpgd.prc_grp_disp::text = 'SUCCESS'::text) AS "ACCOUNT_OPENED_DATE",
    ( SELECT (teh.first_name::text || ' '::text) || teh.last_name::text
           FROM tb_emp_hrms teh
          WHERE (teh.employee_number::text IN ( SELECT teh2.supervisor_emp_no
                   FROM tb_emp_hrms teh2,
                    tb_btc_accesscontrol tba2
                  WHERE teh2.employee_number::text = tba2.emp_id::text AND tba2.object_pri_key_1::text = t.object_pri_key_1::text AND tba2.system_role::text = 'RM'::text))) AS "SOURCING_RM_SUPERVISOR_NAME",
    ( SELECT dis.created_timestamp
           FROM tb_btc_accesscontrol_hist tssh,
            tb_btc_prc_grp_disp_hist dis
          WHERE dis.object_pri_key_1::text = t.object_pri_key_1::text AND dis.object_pri_key_1::text = tssh.object_pri_key_1::text AND tssh.system_role::text = 'RCU'::text AND dis.process_group::text = 'RCU'::text AND dis.prc_grp_disp::text = 'WIP'::text AND tssh.object_pri_key_1::text = dis.object_pri_key_1::text AND tssh.emp_id::text <> ''::text
          ORDER BY tssh.log_time
         LIMIT 1) AS "SENT_TO_MID_OFFICE_DATE",
    ( SELECT dis.created_timestamp
           FROM tb_btc_accesscontrol_hist tssh,
            tb_btc_prc_grp_disp_hist dis
          WHERE dis.object_pri_key_1::text = t.object_pri_key_1::text AND tssh.system_role::text = 'DVU'::text AND dis.process_group::text = 'DVU'::text AND dis.prc_grp_disp::text = 'USERWAIT'::text AND tssh.object_pri_key_1::text = dis.object_pri_key_1::text AND tssh.emp_id::text <> ''::text
          ORDER BY tssh.log_time
         LIMIT 1) AS "SENT_TO_DVU_DATE",
    ( SELECT dis.created_timestamp
           FROM tb_btc_accesscontrol_hist tssh,
            tb_btc_prc_grp_disp_hist dis
          WHERE dis.object_pri_key_1::text = t.object_pri_key_1::text AND dis.object_pri_key_1::text = tssh.object_pri_key_1::text AND tssh.system_role::text = 'DVU'::text AND dis.process_group::text = 'DVU'::text AND dis.prc_grp_disp::text = 'WIP'::text AND tssh.emp_hierarchy_id::text <> ''::text
          ORDER BY tssh.log_time
         LIMIT 1) AS "DVU_ASSIGNED_DATE",
    ( SELECT dis.created_timestamp
           FROM tb_btc_accesscontrol_hist tssh,
            tb_btc_prc_grp_disp_hist dis
          WHERE dis.object_pri_key_1::text = t.object_pri_key_1::text AND dis.object_pri_key_1::text = tssh.object_pri_key_1::text AND tssh.system_role::text = 'RCU'::text AND dis.process_group::text = 'RCU'::text AND dis.prc_grp_disp::text = 'WIP'::text AND tssh.object_pri_key_1::text = dis.object_pri_key_1::text AND tssh.emp_id::text <> ''::text
          ORDER BY tssh.log_time
         LIMIT 1) AS "MID_OFFICE_ASSIGNED_DATE",
    ( SELECT (teh3.first_name::text || ' '::text) || teh3.last_name::text
           FROM tb_emp_hrms teh3
          WHERE (teh3.employee_number::text IN ( SELECT tssh.emp_hierarchy_id
                   FROM tb_btc_accesscontrol_hist tssh,
                    tb_btc_prc_grp_disp_hist dis
                  WHERE dis.object_pri_key_1::text = t.object_pri_key_1::text AND dis.object_pri_key_1::text = tssh.object_pri_key_1::text AND tssh.system_role::text = 'DVU'::text AND dis.process_group::text = 'DVU'::text AND dis.prc_grp_disp::text = 'WIP'::text AND tssh.object_pri_key_1::text = dis.object_pri_key_1::text AND tssh.emp_hierarchy_id::text <> ''::text
                  ORDER BY tssh.log_time
                 LIMIT 1))) AS "DVU_ASSIGNED_USER_NAME",
    ( SELECT (teh3.first_name::text || ' '::text) || teh3.last_name::text
           FROM tb_emp_hrms teh3
          WHERE (teh3.employee_number::text IN ( SELECT tssh.emp_id
                   FROM tb_btc_accesscontrol_hist tssh,
                    tb_btc_prc_grp_disp_hist dis
                  WHERE dis.object_pri_key_1::text = t.object_pri_key_1::text AND dis.object_pri_key_1::text = tssh.object_pri_key_1::text AND tssh.system_role::text = 'RCU'::text AND dis.process_group::text = 'RCU'::text AND dis.prc_grp_disp::text = 'WIP'::text AND tssh.emp_id::text <> ''::text AND tssh.config_id::text = '44'::text
                  ORDER BY tssh.log_time
                 LIMIT 1))) AS "MID_OFFICE_ASSIGNED_USER_NAME",
    ( SELECT concat(teh.first_name, ' ', teh.last_name) AS concat
           FROM tb_btc_accesscontrol_hist tssh,
            tb_btc_prc_grp_disp_hist dis,
            tb_emp_hrms teh,
            tb_function_roles_mst tfrm
          WHERE dis.object_pri_key_1::text = t.object_pri_key_1::text AND dis.object_pri_key_1::text = tssh.object_pri_key_1::text AND teh.role::text = tfrm.role_name::text AND teh.employee_number::text = tssh.emp_hierarchy_id::text AND tssh.system_role::text = 'DVU'::text AND tssh.emp_hierarchy_id::text <> ''::text
          ORDER BY tssh.log_time DESC
         LIMIT 1) AS "DVU_REASSIGNED_USER_NAME",
    ( SELECT teh.employee_number
           FROM tb_btc_accesscontrol_hist tssh,
            tb_btc_prc_grp_disp_hist dis,
            tb_emp_hrms teh,
            tb_function_roles_mst tfrm
          WHERE dis.object_pri_key_1::text = t.object_pri_key_1::text AND dis.object_pri_key_1::text = tssh.object_pri_key_1::text AND teh.role::text = tfrm.role_name::text AND teh.employee_number::text = tssh.emp_hierarchy_id::text AND tssh.system_role::text = 'DVU'::text AND tssh.emp_hierarchy_id::text <> ''::text
          ORDER BY tssh.log_time DESC
         LIMIT 1) AS "DVU_REASSIGNED_USER_ID",
        CASE
            WHEN t.text_1::text = 'RCU_ASSIGNED'::text THEN ( SELECT concat(CURRENT_DATE - to_char(dis.start_timestamp, 'YYYY-MM-DD'::text)::date, ' days') AS concat
               FROM tb_btc_accesscontrol_hist tssh,
                tb_btc_prc_grp_disp_hist dis,
                tb_emp_hrms teh,
                tb_function_roles_mst tfrm
              WHERE dis.object_pri_key_1::text = t.object_pri_key_1::text AND dis.object_pri_key_1::text = tssh.object_pri_key_1::text AND teh.role::text = tfrm.role_name::text AND teh.employee_number::text = tssh.emp_id::text AND tssh.system_role::text = 'RCU'::text AND dis.process_group::text = 'RCU'::text AND dis.prc_grp_disp::text = 'WIP'::text AND tssh.object_pri_key_1::text = dis.object_pri_key_1::text AND tssh.emp_id::text <> ''::text
              ORDER BY tssh.log_time
             LIMIT 1)
            ELSE NULL::text
        END AS "MID_OFFICE_PENDING_DATE",
        CASE
            WHEN t.text_1::text = 'DVU_ASSIGNED'::text THEN ( SELECT concat(CURRENT_DATE - to_char(dis.start_timestamp, 'YYYY-MM-DD'::text)::date, ' days') AS concat
               FROM tb_btc_accesscontrol_hist tssh,
                tb_btc_prc_grp_disp_hist dis,
                tb_emp_hrms teh,
                tb_function_roles_mst tfrm
              WHERE dis.object_pri_key_1::text = t.object_pri_key_1::text AND dis.object_pri_key_1::text = tssh.object_pri_key_1::text AND teh.role::text = tfrm.role_name::text AND teh.employee_number::text = tssh.emp_id::text AND tssh.system_role::text = 'DVU'::text AND dis.process_group::text = 'DVU'::text AND dis.prc_grp_disp::text = 'WIP'::text AND tssh.object_pri_key_1::text = dis.object_pri_key_1::text AND tssh.emp_id::text <> ''::text
              ORDER BY tssh.log_time
             LIMIT 1)
            ELSE NULL::text
        END AS "DVU_PENDING_DATE",
    ( SELECT string_agg((a.section_id::text || ' - '::text) || a.status_remarks::text, ' , '::text ORDER BY a.section_id, a.status_remarks) AS string_agg
           FROM ( SELECT tssh.status_remarks,
                    tssh.section_id,
                    tssh.created_timestamp,
                    rank() OVER (PARTITION BY tssh.status_remarks, tssh.section_id ORDER BY tssh.created_timestamp) AS rn
                   FROM tb_emp_hrms teh
                     JOIN tb_function_roles_mst fun ON fun.role_name::text = teh.role::text
                     JOIN tb_section_status_hist tssh ON tssh.role::text = teh.employee_number::text
                     JOIN tb_cop_metadata_txn t_1 ON t_1.object_pri_key_1::text = tssh.object_pri_key_1::text
                  WHERE fun.default_system_role_code::text = 'DVU'::text AND tssh.status::text = 'N'::text AND t_1.text_1::text = 'DVU_REWORK'::text) a
          WHERE a.rn = 1) AS "DVU_REWORK_REASON1",
    ( SELECT string_agg((a.section_id::text || ' - '::text) || a.status_remarks::text, ' , '::text ORDER BY a.section_id, a.status_remarks) AS string_agg
           FROM ( SELECT tssh.status_remarks,
                    tssh.section_id,
                    tssh.created_timestamp,
                    rank() OVER (PARTITION BY tssh.status_remarks, tssh.section_id ORDER BY tssh.created_timestamp) AS rn
                   FROM tb_emp_hrms teh
                     JOIN tb_function_roles_mst fun ON fun.role_name::text = teh.role::text
                     JOIN tb_section_status_hist tssh ON tssh.role::text = teh.employee_number::text
                     JOIN tb_cop_metadata_txn t_1 ON t_1.object_pri_key_1::text = tssh.object_pri_key_1::text
                  WHERE fun.default_system_role_code::text = 'DVU'::text AND tssh.status::text = 'N'::text AND t_1.text_1::text = 'DVU_REWORK'::text) a
          WHERE a.rn = 2) AS "DVU_REWORK_REASON2",
    ( SELECT string_agg((a.section_id::text || ' - '::text) || a.status_remarks::text, ' , '::text ORDER BY a.section_id, a.status_remarks) AS string_agg
           FROM ( SELECT tssh.status_remarks,
                    tssh.section_id,
                    tssh.created_timestamp,
                    rank() OVER (PARTITION BY tssh.status_remarks, tssh.section_id ORDER BY tssh.created_timestamp) AS rn
                   FROM tb_emp_hrms teh
                     JOIN tb_function_roles_mst fun ON fun.role_name::text = teh.role::text
                     JOIN tb_section_status_hist tssh ON tssh.role::text = teh.employee_number::text
                     JOIN tb_cop_metadata_txn t_1 ON t_1.object_pri_key_1::text = tssh.object_pri_key_1::text
                  WHERE fun.default_system_role_code::text = 'DVU'::text AND tssh.status::text = 'N'::text AND t_1.text_1::text = 'DVU_REWORK'::text) a
          WHERE a.rn = 3) AS "DVU_REWORK_REASON3",
    ( SELECT x.text_2
           FROM ( SELECT t1.device_modify_timestamp,
                    t1.text_2,
                    rank() OVER (PARTITION BY t1.device_modify_timestamp, t1.text_2 ORDER BY t.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist t1,
                    tb_btc_prc_grp_disp disp
                  WHERE t1.object_pri_key_1::text = disp.object_pri_key_1::text AND t.object_pri_key_1::text = t1.object_pri_key_1::text AND t1.text_1::text = 'DVU_REWORK'::text AND t1.modified_by::text = 'SPUPDVFLOWDATA'::text) x
          WHERE x.rn = 1
         LIMIT 1) AS "DVU_REWORK_REMARK1",
    ( SELECT x.text_2
           FROM ( SELECT t1.device_modify_timestamp,
                    t1.text_2,
                    rank() OVER (PARTITION BY t1.device_modify_timestamp, t1.text_2 ORDER BY t.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist t1,
                    tb_btc_prc_grp_disp disp
                  WHERE t1.object_pri_key_1::text = disp.object_pri_key_1::text AND t.object_pri_key_1::text = t1.object_pri_key_1::text AND t1.text_1::text = 'DVU_REWORK'::text AND t1.modified_by::text = 'SPUPDVFLOWDATA'::text) x
          WHERE x.rn = 2
         LIMIT 1) AS "DVU_REWORK_REMARK2",
    ( SELECT x.text_2
           FROM ( SELECT t1.device_modify_timestamp,
                    t1.text_2,
                    rank() OVER (PARTITION BY t1.device_modify_timestamp, t1.text_2 ORDER BY t.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist t1,
                    tb_btc_prc_grp_disp disp
                  WHERE t1.object_pri_key_1::text = disp.object_pri_key_1::text AND t1.object_pri_key_1::text = t.object_pri_key_1::text AND t1.text_1::text = 'DVU_REWORK'::text AND t1.modified_by::text = 'SPUPDVFLOWDATA'::text) x
          WHERE x.rn = 3
         LIMIT 1) AS "DVU_REWORK_REMARK3",
    ( SELECT x.device_modify_timestamp
           FROM ( SELECT t1.device_modify_timestamp,
                    t1.text_2,
                    rank() OVER (PARTITION BY t1.device_modify_timestamp, t1.text_2 ORDER BY t.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist t1,
                    tb_btc_prc_grp_disp disp
                  WHERE t1.object_pri_key_1::text = disp.object_pri_key_1::text AND t1.object_pri_key_1::text = t.object_pri_key_1::text AND t1.text_1::text = 'DVU_REWORK'::text AND t1.modified_by::text = 'SPUPDVFLOWDATA'::text) x
          WHERE x.rn = 1
         LIMIT 1) AS "DVU_REWORK_DATE1",
    ( SELECT x.device_modify_timestamp
           FROM ( SELECT t1.device_modify_timestamp,
                    t1.text_2,
                    rank() OVER (PARTITION BY t1.device_modify_timestamp, t1.text_2 ORDER BY t.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist t1,
                    tb_btc_prc_grp_disp disp
                  WHERE t1.object_pri_key_1::text = disp.object_pri_key_1::text AND t1.object_pri_key_1::text = t.object_pri_key_1::text AND t1.text_1::text = 'DVU_REWORK'::text AND t1.modified_by::text = 'SPUPDVFLOWDATA'::text) x
          WHERE x.rn = 2
         LIMIT 1) AS "DVU_REWORK_DATE2",
    ( SELECT x.device_modify_timestamp
           FROM ( SELECT t1.device_modify_timestamp,
                    t1.text_2,
                    rank() OVER (PARTITION BY t1.device_modify_timestamp, t1.text_2 ORDER BY t.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist t1,
                    tb_btc_prc_grp_disp disp
                  WHERE t1.object_pri_key_1::text = disp.object_pri_key_1::text AND t1.object_pri_key_1::text = t.object_pri_key_1::text AND t1.text_1::text = 'DVU_REWORK'::text AND t1.modified_by::text = 'SPUPDVFLOWDATA'::text) x
          WHERE x.rn = 3
         LIMIT 1) AS "DVU_REWORK_DATE3",
    ( SELECT x.modify_emp_id
           FROM ( SELECT t1.device_modify_timestamp,
                    t1.text_2,
                    t1.modify_emp_id,
                    rank() OVER (PARTITION BY t1.device_modify_timestamp, t1.text_2, t1.modify_emp_id ORDER BY t.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist t1,
                    tb_btc_prc_grp_disp disp
                  WHERE t1.object_pri_key_1::text = disp.object_pri_key_1::text AND t1.object_pri_key_1::text = t.object_pri_key_1::text AND t1.text_1::text = 'DVU_REWORK'::text AND t1.modified_by::text = 'SPUPDVFLOWDATA'::text) x
          WHERE x.rn = 1
         LIMIT 1) AS "DVU_REWORK_USER1",
    ( SELECT x.modify_emp_id
           FROM ( SELECT t1.device_modify_timestamp,
                    t1.text_2,
                    t1.modify_emp_id,
                    rank() OVER (PARTITION BY t1.device_modify_timestamp, t1.text_2, t1.modify_emp_id ORDER BY t.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist t1,
                    tb_btc_prc_grp_disp disp
                  WHERE t1.object_pri_key_1::text = disp.object_pri_key_1::text AND t1.object_pri_key_1::text = t.object_pri_key_1::text AND t1.text_1::text = 'DVU_REWORK'::text AND t1.modified_by::text = 'SPUPDVFLOWDATA'::text) x
          WHERE x.rn = 2
         LIMIT 1) AS "DVU_REWORK_USER2",
    ( SELECT x.modify_emp_id
           FROM ( SELECT t1.device_modify_timestamp,
                    t1.text_2,
                    t1.modify_emp_id,
                    rank() OVER (PARTITION BY t1.device_modify_timestamp, t1.text_2, t1.modify_emp_id ORDER BY t.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist t1,
                    tb_btc_prc_grp_disp disp
                  WHERE t1.object_pri_key_1::text = disp.object_pri_key_1::text AND t1.object_pri_key_1::text = t.object_pri_key_1::text AND t1.text_1::text = 'DVU_REWORK'::text AND t1.modified_by::text = 'SPUPDVFLOWDATA'::text) x
          WHERE x.rn = 3
         LIMIT 1) AS "DVU_REWORK_USER3",
    ( SELECT x.text_2
           FROM ( SELECT t1.device_modify_timestamp,
                    t1.text_2,
                    rank() OVER (PARTITION BY t1.device_modify_timestamp, t1.text_2 ORDER BY t.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist t1,
                    tb_btc_prc_grp_disp disp
                  WHERE t1.object_pri_key_1::text = disp.object_pri_key_1::text AND t1.object_pri_key_1::text = t.object_pri_key_1::text AND t1.text_1::text = 'BOM_REWORK_APPROVED'::text) x
          WHERE x.rn = 1
         LIMIT 1) AS "RM_REWORK_REMARK1",
    ( SELECT x.text_2
           FROM ( SELECT t1.device_modify_timestamp,
                    t1.text_2,
                    rank() OVER (PARTITION BY t1.device_modify_timestamp, t1.text_2 ORDER BY t.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist t1,
                    tb_btc_prc_grp_disp disp
                  WHERE t1.object_pri_key_1::text = disp.object_pri_key_1::text AND t1.object_pri_key_1::text = t.object_pri_key_1::text AND t1.text_1::text = 'BOM_REWORK_APPROVED'::text) x
          WHERE x.rn = 2
         LIMIT 1) AS "RM_REWORK_REMARK2",
    ( SELECT x.text_2
           FROM ( SELECT t1.device_modify_timestamp,
                    t1.text_2,
                    rank() OVER (PARTITION BY t1.device_modify_timestamp, t1.text_2 ORDER BY t.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist t1,
                    tb_btc_prc_grp_disp disp
                  WHERE t1.object_pri_key_1::text = disp.object_pri_key_1::text AND t1.object_pri_key_1::text = t.object_pri_key_1::text AND t1.text_1::text = 'BOM_REWORK_APPROVED'::text) x
          WHERE x.rn = 3
         LIMIT 1) AS "RM_REWORK_REMARK3",
    ( SELECT x.device_modify_timestamp
           FROM ( SELECT t1.device_modify_timestamp,
                    t1.text_2,
                    rank() OVER (PARTITION BY t1.device_modify_timestamp ORDER BY t1.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist t1,
                    tb_btc_accesscontrol tba
                  WHERE t1.object_pri_key_1::text = t.object_pri_key_1::text AND t1.text_1::text = 'BOM_REWORK_APPROVED'::text AND tba.system_role::text = 'RM'::text) x
          WHERE x.rn = 1
         LIMIT 1) AS "RM_REWORK_REVERT_DATE1",
    ( SELECT x.device_modify_timestamp
           FROM ( SELECT t1.device_modify_timestamp,
                    t1.text_2,
                    rank() OVER (PARTITION BY t1.device_modify_timestamp ORDER BY t1.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist t1,
                    tb_btc_accesscontrol tba
                  WHERE t1.object_pri_key_1::text = t.object_pri_key_1::text AND t1.text_1::text = 'BOM_REWORK_APPROVED'::text AND tba.system_role::text = 'RM'::text) x
          WHERE x.rn = 2
         LIMIT 1) AS "RM_REWORK_REVERT_DATE2",
    ( SELECT x.device_modify_timestamp
           FROM ( SELECT t1.device_modify_timestamp,
                    t1.text_2,
                    rank() OVER (PARTITION BY t1.device_modify_timestamp ORDER BY t.device_modify_timestamp) AS rn
                   FROM tb_cop_buss_obj_txn_hist t1,
                    tb_btc_accesscontrol tba
                  WHERE t1.object_pri_key_1::text = t.object_pri_key_1::text AND t1.text_1::text = 'BOM_REWORK_APPROVED'::text AND tba.system_role::text = 'RM'::text) x
          WHERE x.rn = 3
         LIMIT 1) AS "RM_REWORK_REVERT_DATE3",
    ( SELECT (teh.first_name::text || ' '::text) || teh.last_name::text
           FROM tb_emp_hrms teh
          WHERE (teh.employee_number::text IN ( SELECT tba.emp_id
                   FROM tb_btc_accesscontrol tba
                  WHERE tba.object_pri_key_1::text = t.object_pri_key_1::text AND tba.system_role::text = 'RM'::text))) AS "LAST_ACTION_RM",
    t.program_option AS privy_option,
    ( SELECT teh.employee_number
           FROM tb_emp_hrms teh
          WHERE teh.employee_number::text = t.login_id::text) AS emp_hierarchy_id,
    ( SELECT teh.supervisor_emp_no
           FROM tb_emp_hrms teh
          WHERE teh.employee_number::text = t.login_id::text) AS emp_supervisor_id,
    to_char(t.device_create_timestamp, 'YYYY-MM-DD'::text) AS "DATE",
    t.text_2 AS "FirstPass",
        CASE
            WHEN t.constitution_type::text ~~ 'Individual'::text THEN 'IN'::text
            WHEN t.constitution_type::text ~~ 'Sole Properitor'::text THEN 'SP'::text
            ELSE NULL::text
        END AS constitution_code
   FROM tb_cop_metadata_txn t
     JOIN tb_cop_buss_obj_txn cop ON t.object_pri_key_1::text = cop.object_pri_key_1::text
WITH DATA;


-- public.test_mv_jatin source

CREATE MATERIALIZED VIEW public.test_mv_jatin
TABLESPACE pg_default
AS SELECT (cop.object_data -> 'AOF'::text) ->> 'MODIFIED_LEAD_ID'::text AS "LEAD_ID",
    ((cop.object_data -> 'AOF'::text) -> 'WORK_VARIABLES'::text) ->> 'ID_NAME_ADD'::text AS "CUSTOMER_NAME",
    ((cop.object_data -> 'AOF'::text) -> 'CA'::text) ->> 'CRN_AUS'::text AS "CRN_OF_INDIVIDUAL_AUTHORISED_SIG",
    COALESCE(((cop.object_data -> 'AOF'::text) -> 'BUS_DATA'::text) ->> 'BUS_NAME_1'::text, 'NA'::text) AS "ENTITY_NAME",
    COALESCE(((cop.object_data -> 'AOF'::text) -> 'CA'::text) ->> 'CRN_ENTITY'::text, 'NA'::text) AS "Entity_CRN",
    COALESCE(((((cop.object_data -> 'AOF'::text) -> 'INDIVIDUAL_STAKEHOLDERS'::text) -> '0'::text) -> 'ADD_MHOLDER'::text) ->> 'VALUE'::text, 'NA'::text) AS "MANDATE_HOLDER",
    COALESCE((((cop.object_data -> 'AOF'::text) -> 'WORK_VARIABLES'::text) -> 'MH'::text) ->> 'ID_NAME_ADD'::text, 'NA'::text) AS "MANDATE_HOLDER_NAME",
    ((cop.object_data -> 'AOF'::text) -> 'CA'::text) ->> 'ACCOUNT_NO'::text AS "ACCOUNT_NUMBER",
    (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'KIT_TYPE'::text) ->> 'VALUE'::text AS "KIT_TYPE",
    'Cheque'::text AS "FUNDING_MODE",
    ((cop.object_data -> 'AOF'::text) -> 'CA'::text) ->> 'IP_AMOUNT'::text AS "IP_AMOUNT",
        CASE
            WHEN ((cop.object_data -> 'AOF'::text) ->> 'WORKFLOW_JOURNEY'::text) = 'IN'::text THEN 'Individual'::text
            WHEN ((cop.object_data -> 'AOF'::text) ->> 'WORKFLOW_JOURNEY'::text) = 'SP'::text THEN 'Sole Proprietor'::text
            ELSE NULL::text
        END AS constitution,
        CASE
            WHEN cop.text_2 IS NOT NULL THEN 'Yes'::text
            ELSE 'No'::text
        END AS "RE_OPENED_LEAD",
    'Retail Liabilities'::text AS "SEGMENT",
    'Assisted Journey'::text AS "LEAD_ORIGINATION",
        CASE
            WHEN ((cop.object_data -> 'PRODUCTSELECTION_CHOICE'::text) ->> 'value'::text) IS NOT NULL AND ((cop.object_data -> 'PRODUCTSELECTION_CHOICE'::text) ->> 'value'::text) <> ''::text THEN (cop.object_data -> 'PRODUCTSELECTION_CHOICE'::text) ->> 'value'::text
            WHEN ((cop.object_data -> 'PRODUCTSELECTION_CHOICE'::text) ->> 'value'::text) IS NULL OR ((cop.object_data -> 'PRODUCTSELECTION_CHOICE'::text) ->> 'value'::text) = ''::text THEN ((cop.object_data -> 'AOF'::text) -> 'CA'::text) ->> 'PRIVY_PRO_CLASSIFICATION'::text
            ELSE 'NA'::text
        END AS "FINAL_CLASSIFICATION_IN_BCIF",
    (((cop.object_data -> 'AOF'::text) -> 'BUS_DATA'::text) -> 'NAT_OF_INDUSTRY'::text) ->> 'CODE'::text AS "INDUSTRY_DESCRIPTION",
    (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'DEBIT_CARD_TYPE'::text) ->> 'VALUE'::text AS "DEBIT_CARD",
    COALESCE((((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'CREDIT_FACILITIES'::text) ->> 'VALUE'::text, 'NA'::text) AS "EXISTING_CREDIT_FACILITY",
    (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'ANNEXURE_1_CREDIT_FACILITY_TYPE'::text) ->> 'VALUE'::text AS "TYPE_OF_FACILITY",
    cop.device_create_timestamp AS "LEAD_CREATED_DATE",
    (cop.object_data -> 'AOF'::text) ->> 'LG_CODE'::text AS "LG_CODE",
    (cop.object_data -> 'AOF'::text) ->> 'RM_CODE'::text AS "RM_CODE",
    COALESCE(((cop.object_data -> 'AOF'::text) -> 'CA'::text) ->> 'CRN_MANDATE'::text, 'NA'::text) AS "MANDATE_HOLDER_CRN",
    ( SELECT (teh.first_name::text || ' '::text) || teh.last_name::text
           FROM tb_emp_hrms teh
          WHERE teh.employee_number::text = cop.login_id::text) AS "RM_NAME",
    ( SELECT (teh.first_name::text || ' '::text) || teh.last_name::text
           FROM tb_emp_hrms teh
          WHERE teh.employee_number::text = cop.login_id::text) AS "LC_NAME",
    (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'SCHEME_CODE'::text) ->> 'VALUE'::text AS "PRODUCT_CODE",
    cop.text_1 AS "LEAD_STATUS",
    COALESCE(((cop.object_data -> 'AOF'::text) -> 'PROMO'::text) ->> 'VALUE'::text, 'NA'::text) AS "PROMO_CODE",
    ((cop.object_data -> 'AOF'::text) -> 'LOB'::text) ->> 'VALUE'::text AS "LOB",
    (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'HOME_BRANCH'::text) ->> 'CODE'::text AS "BRANCH_CODE",
    (((cop.object_data -> 'AOF'::text) -> 'CA'::text) -> 'HOME_BRANCH'::text) ->> 'VALUE'::text AS "BRANCH_NAME",
    ((cop.object_data -> 'AOF'::text) -> 'COCO_CODE'::text) ->> 'VALUE'::text AS "COCO",
    ((cop.object_data -> 'AOF'::text) -> 'RISK_PROFILE'::text) ->> 'VALUE'::text AS "RISK"
   FROM tb_cop_buss_obj_txn cop
WITH DATA;



CREATE OR REPLACE FUNCTION public.account_report(x_filter_applied character varying, x_param character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
v_data text;
p_msg REFCURSOR := 'cur';
v_from_date VARCHAR(100) ;
v_to_date VARCHAR(100);
v_account_active_date VARCHAR(100);
v_constitution_type VARCHAR(100);
v_filer_type  VARCHAR(100);


begin
	
raise notice 'x_filter_applied%',x_filter_applied;
if x_filter_applied = 'N' then 
v_from_date :='';
v_to_date :='';
v_account_active_date :='';
v_constitution_type :='';


else   

select json_array_elements(cast(x_param as json)) ->> 'filter_type',
	   json_array_elements(cast(x_param as json)) ->> 'lead_modified_from_date',
	   json_array_elements(cast(x_param as json)) ->> 'lead_modified_to_date' ,
	   json_array_elements(cast(x_param as json)) ->> 'account_active_date',
	   json_array_elements(cast(x_param as json)) ->> 'constitution_type' 
  into v_filer_type ,v_from_date , v_to_date, v_account_active_date ,v_constitution_type;
 
end if;
raise notice 'v_filer_type%',v_filer_type;
raise notice 'v_from_date%',v_from_date;
raise notice 'v_to_date%',v_to_date;
raise notice 'v_account_active_date%',v_account_active_date;
raise notice 'v_constitution_type%',v_constitution_type;


	
if x_filter_applied ='N' then 
	select json_agg(row_to_json(t)) into v_data from
	(select a.lead_id,
a.id_name_add as customer_name, 
a.entity_name,a.crn_entity,a.aus_crn ,a.account_no,
(select to_char(start_timestamp,'DD-MM-YYYY') from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 
and av.process_group='ACCOUNT' and av.prc_grp_disp='SUCCESS') as account_opening_date,
--object_data::JSON->'AOF'->'CA'->'CPV1'->>'DATE' as account_opening_date,
object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE' as CRN_MANDATE,
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'SIGNATURE') as SIGNATURE,
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'FATCA Handoff') as FATCA_HANDOFF,
((select case when (a.constitution_type = 'Sole Properitor' or a.constitution_type = 'SP') and av.process_group='GSTIN'
then av.prc_grp_disp else 'NA' END
from tb_btc_prc_grp_disp av join tb_cop_metadata_txn tcmt 
on av.object_pri_key_1 = t.object_pri_key_1 and av.object_pri_key_1 = tcmt.object_pri_key_1
and av.process_group='GSTIN')
union 
(select 'NA' from tb_cop_metadata_txn tcmt where a.lead_id like '%IN%')) as GSTIN,
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'CERSAI') as CERSAI,
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'FILENET') as FILENET,
((select case when tcmt.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE' <> '' and (a.constitution_type = 'Sole Properitor' or a.constitution_type = 'SP')
then av.prc_grp_disp else 'NA' end from tb_btc_prc_grp_disp av,tb_cop_metadata_txn tcmt 
where av.object_pri_key_1 = t.object_pri_key_1 and av.object_pri_key_1 = tcmt.object_pri_key_1 and av.process_group  = 'ACCOUNTMAN')
union 
(select 'NA' from tb_cop_metadata_txn tcmt where a.lead_id like '%IN%')) as Mandate_Addition_API
from tb_cop_metadata_txn a, tb_btc_prc_grp_disp t
where a.object_pri_key_1 = t.object_pri_key_1 and t.process_group='ACCOUNT' and t.prc_grp_disp='SUCCESS' and a.is_active ='Y'
group by a.caseid,a.lead_id,a.entity_name ,a.crn,a.aus_crn ,a.crn_entity,a.account_no,t.prc_grp_disp,t.object_pri_key_1,a.constitution_type,
a.object_data::JSON->'AOF'->'CA'->'CPV1'->>'DATE',
a.id_name_add,t.process_group,
a.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE')t;


elsif x_filter_applied ='Y' then 
  select json_agg(row_to_json(t)) into v_data from
	(select a.lead_id,
a.id_name_add as customer_name, 
a.entity_name,a.crn_entity,a.aus_crn ,a.account_no,
(select to_char(start_timestamp,'DD-MM-YYYY') from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 
and av.process_group='ACCOUNT' and av.prc_grp_disp='SUCCESS') as account_opening_date,
--object_data::JSON->'AOF'->'CA'->'CPV1'->>'DATE' as account_opening_date,
object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE' as CRN_MANDATE,
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'SIGNATURE') as SIGNATURE,
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'FATCA Handoff') as FATCA_HANDOFF,
((select case when (a.constitution_type = 'Sole Properitor' or a.constitution_type = 'SP') and av.process_group='GSTIN'
then av.prc_grp_disp else 'NA' END
from tb_btc_prc_grp_disp av join tb_cop_metadata_txn tcmt 
on av.object_pri_key_1 = t.object_pri_key_1 and av.object_pri_key_1 = tcmt.object_pri_key_1
and av.process_group='GSTIN')
union 
(select 'NA' from tb_cop_metadata_txn tcmt where a.lead_id like '%IN%')) as GSTIN,
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'CERSAI') as CERSAI,
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'FILENET') as FILENET,
((select case when tcmt.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE' <> '' and (a.constitution_type = 'Sole Properitor' or a.constitution_type = 'SP')
then av.prc_grp_disp else 'NA' end from tb_btc_prc_grp_disp av,tb_cop_metadata_txn tcmt 
where av.object_pri_key_1 = t.object_pri_key_1 and av.object_pri_key_1 = tcmt.object_pri_key_1 and av.process_group  = 'ACCOUNTMAN')
union 
(select 'NA' from tb_cop_metadata_txn tcmt where a.lead_id like '%IN%')) as Mandate_Addition_API
from tb_cop_metadata_txn a, tb_btc_prc_grp_disp t
where a.object_pri_key_1 = t.object_pri_key_1 and t.process_group='ACCOUNT' and t.prc_grp_disp='SUCCESS' and a.is_active ='Y'
and case when  v_filer_type ='date' 
        then  date(coalesce (a.device_modify_timestamp ,a.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
and case when v_filer_type ='account_active_date' 
        then (select to_char(start_timestamp,'DD-MM-YYYY') from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 
              and av.process_group='ACCOUNT' and av.prc_grp_disp='SUCCESS')=v_account_active_date  else 1=1 end
and case  when v_filer_type ='constitution_type' 
        then a.constitution_type=v_constitution_type else 1=1 end
group by a.caseid,a.lead_id,a.entity_name ,a.crn,a.aus_crn ,a.crn_entity,a.account_no,t.prc_grp_disp,t.object_pri_key_1,a.constitution_type,
a.object_data::JSON->'AOF'->'CA'->'CPV1'->>'DATE',
a.id_name_add,t.process_group,
a.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE',a.device_modify_timestamp ,a.created_timestamp
order by coalesce (a.device_modify_timestamp ,a.created_timestamp))t;

else 
v_data = 'No Data';
end if ;
if (v_data = '' or v_data is null)
then
null;

END IF;



 OPEN p_msg FOR SELECT 
            v_data  AS    "OBJECT";
              return p_msg; 
exception when others then 
open p_msg for select 'Something went wrong!!' as res_msg;
return p_msg;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.diy_btc_accesscontrol(x_object_pri_key_1 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
 x_result REFCURSOR := 'cur';
v_rm_name text;
segment text;
v_count INTEGER;
text1 varchar(50);
t_count integer;
x_email varchar(50);
t_result varchar;
x_mobile_number varchar(50);
X_OBJECT json;
Y_OBJECT json;
x_lob varchar(50);
t_emp_id varchar(50);
x_time timestamp;
V_OBJECT json;
x_object_data json;
v_emp_id varchar;
v_code varchar := (select object_data->'AOF'->'CA'->'HOME_BRANCH'->>'CODE' 
		from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1);
hrms_emp_id cursor for select employee_number as x_emp_id, is_active from tb_emp_hrms teh where branch_code <> '' and "role" in (select role_name from tb_function_roles_mst where role_alias = 'Sales Executive') and branch_code::integer =v_code::integer;

v_not_exist varchar;

begin
	
	 		select object_data into x_object_data from tb_cop_buss_obj_txn where object_pri_key_1 =x_object_pri_key_1;
	 	-----------------------
	select count(1) into v_count from tb_cop_buss_obj_txn tb
	           where tb.object_pri_key_1  = x_object_pri_key_1;
	          ----------------------------------------------
	           select now() AT TIME ZONE 'Asia/Kolkata' into x_time;   
	          ---------------------------------------------------
	          select count(1) into t_count from tb_btc_accesscontrol t where object_pri_key_1 =x_object_pri_key_1 and t.system_role ='RM' ;
	           select object_data->'AOF'->'CA'->'HOME_BRANCH'->>'CODE' into v_code from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1;

if         v_count > 0 then 
						select object_data->'AOF'->>'RM_CODE' into t_result from tb_cop_buss_obj_txn tb
					where tb.object_pri_key_1=x_object_pri_key_1 ;
				
				
				
   if                t_result = '' or t_result is null or t_result ='DIYCA' then
       				 
       		
	
	
	for i in hrms_emp_id loop

		if i.x_emp_id in (select employee_number from tb_emp_hrms teh where branch_code <> '' and branch_code::integer = v_code::integer and "role" in (select role_name from tb_function_roles_mst where role_alias = 'Sales Executive')) then
		
		update diy_emp_assign set flag=(select is_active from tb_emp_hrms teh2 where employee_number=i.x_emp_id) where emp_id =i.x_emp_id;
	end if;
end loop;
	
																								 
for i in hrms_emp_id loop
	
	if (select count(1) from diy_emp_assign de where de.emp_id=i.x_emp_id)=0 and i.is_active='Y' then v_not_exist=i.x_emp_id;
exit when v_not_exist != '';
end if;
end loop;

if v_not_exist is null or v_not_exist ='' then 

update diy_emp_assign set lead_count = lead_count+1,created_date =current_timestamp where created_date = (select created_date from diy_emp_assign dea where flag='Y' and branch_code::integer = v_code::integer order by created_date limit 1) and flag ='Y';

else insert into diy_emp_assign(emp_id,lead_count,created_date,flag,branch_code) values (v_not_exist,1,current_timestamp,'Y',v_code);
end if;
select emp_id into t_emp_id from diy_emp_assign dea where branch_code::integer =v_code::integer order by created_date desc limit 1;

	select	 t.mobile_number,t.lob_code, CONCAT(T.first_name ,' ',T.middle_names ,' ',T.last_name) ,t.email_address  into x_mobile_number,x_lob,v_rm_name,x_email 
 from tb_emp_hrms t where t.employee_number = t_emp_id;
select t.text_1 into text1  from tb_lov_mst t where t.value_code =x_lob
 and t.property ='LOB';
if text1 <> 'WBG'
then segment:='RL' ;
else 
segment:='CB' ;
end if;
				select JSONB_SET(x_object_data::jsonb,'{AOF}',x_object_data::jsonb->'AOF'||concat('{"EMPLOYE_CODE":"',t_emp_id,'","MOVE_TO_ASSISTED":"','Y','","RM_CODE":"',t_emp_id,'","RM_NAME":"',v_rm_name,'","SEGMENT":"',segment,'","RM_EMAIL":"',x_email,'","RM_MOBILE":"',x_mobile_number,'"}')::jsonb) into V_OBJECT  ;
			
			select   JSONB_SET(CAST(V_OBJECT AS JSONB) , -- JSON OBJECT
                '{"AOF","LOB"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(V_OBJECT AS JSONB)->'AOF'->'LOB'|| JSONB_BUILD_OBJECT(
						'CODE',x_lob,'VALUE',x_lob
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  ) into Y_OBJECT;
			
					select	 t.mobile_number into x_mobile_number from tb_emp_hrms t where t.employee_number = t_emp_id;
				
				select   JSONB_SET(CAST(Y_OBJECT AS JSONB) , -- JSON OBJECT
                '{"AOF","CA"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(Y_OBJECT AS JSONB)->'AOF'->'CA'|| JSONB_BUILD_OBJECT(
						'CHQ_AMOUNT','','IP_ACC_HOLDER_NAME','','IP_ACCOUNT_NO','','IP_CHQ_NO','','IP_BANK_NAME','',
						'IP_BRANCH_NAME','','IP_CHQ_DATE','','IP_CHQ_IFSC',''
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  ) into X_OBJECT;
				


if t_count >0 then
				update tb_btc_accesscontrol set emp_id =t_emp_id where object_pri_key_1 =x_object_pri_key_1 and system_role ='RM';

else
			insert into tb_btc_accesscontrol(workflow_group_id, object_pri_key_1,object_pri_key_2 ,object_pri_key_3 , object_type,"location", system_role, emp_id, access_type, created_timestamp,created_by)    
						values ('CADIY',x_object_pri_key_1,'','','AOF','NA','RM',t_emp_id,'W',x_time,'diy_btc_accesscontrol');
end if;		
					update tb_cop_buss_obj_txn set object_data =X_OBJECT, modified_timestamp =x_time,device_modify_timestamp =x_time,login_id =t_emp_id,modified_by ='diy_btc_accesscontrol1'
				where object_pri_key_1 =x_object_pri_key_1;
			
				update tb_cop_metadata_txn set object_data =X_OBJECT, modified_timestamp =x_time,device_modify_timestamp =x_time,assigned_user_id =t_emp_id,login_id = t_emp_id
				where object_pri_key_1 =x_object_pri_key_1;
				
				 open x_result for select json_build_object('status','success',	
				                                      'mobile_number',x_mobile_number,
	                                                           'message','emp no. with the least count of lead has been generated for new lead id',
	                                                           'data','[]'::json)::text as "object";
	                                                          return x_result;


					                
 else
					select object_data->'AOF'->>'RM_CODE' into t_emp_id from tb_cop_buss_obj_txn tb where x_object_pri_key_1=tb.object_pri_key_1;
       					select	JSONB_SET(x_object_data::jsonb,'{AOF}',x_object_data::jsonb->'AOF'||concat('{"MOVE_TO_ASSISTED":"','Y','","RM_CODE":"',t_emp_id,'"}')::jsonb) into V_OBJECT  ;	
       				
       				select   JSONB_SET(CAST(V_OBJECT AS JSONB) , -- JSON OBJECT
                '{"AOF","CA"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(V_OBJECT AS JSONB)->'AOF'->'CA'|| JSONB_BUILD_OBJECT(
						'CHQ_AMOUNT','','IP_ACC_HOLDER_NAME','','IP_ACCOUNT_NO','','IP_CHQ_NO','','IP_BANK_NAME','',
						'IP_BRANCH_NAME','','IP_CHQ_DATE','','IP_CHQ_IFSC',''
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  ) into X_OBJECT;
	                 
       							select	 t.mobile_number into x_mobile_number from tb_emp_hrms t where t.employee_number = t_emp_id;


if t_count >0 then
					
				update tb_btc_accesscontrol set emp_id =t_emp_id where object_pri_key_1 =x_object_pri_key_1 and system_role ='RM';
			
       				
else 
insert into tb_btc_accesscontrol(workflow_group_id, object_pri_key_1,object_pri_key_2 ,object_pri_key_3 , object_type,"location", system_role, emp_id, access_type, created_timestamp,created_by)
       					values
       					('CADIY',x_object_pri_key_1,'','','AOF','NA','RM',t_emp_id,'W',x_time,'diy_btc_accesscontrol');
end if;       				
       				
       						update tb_cop_buss_obj_txn set object_data =X_OBJECT, modified_timestamp =x_time,device_modify_timestamp =x_time,login_id =t_emp_id,modified_by ='diy_btc_accesscontrol2'
				where object_pri_key_1 =x_object_pri_key_1;
						update tb_cop_metadata_txn set object_data =X_OBJECT,  modified_timestamp =x_time,device_modify_timestamp =x_time,assigned_rm =t_emp_id,login_id =t_emp_id
				where object_pri_key_1 =x_object_pri_key_1;
												open x_result for select json_build_object('status','success',	
												                      'mobile_number',x_mobile_number,
	                                                           'message','Lead id with the RM_code has been generated',
	                                                           'data','[]'::json)::text as "object";
	                                                          return x_result;

						end if;
else
 									 open x_result for select json_build_object('status','failure',	
	                                                           'message','Please enter valid lead id',
	                                                           'data','[]'::json)::text as "object";
	                                                          return x_result; 
return x_result;
 
end if;

exception when others then 
open x_result  for 
                                    select json_build_object('status','failure',
                                                  'message','some error occurred',
                                                   'data','[]'::json)::text as "object";
                                               return x_result;

END;
$function$
;

CREATE OR REPLACE FUNCTION public.diy_btc_accesscontrol_cpvmid(x_object_pri_key_1 character varying, x_role character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
 x_result REFCURSOR := 'cur';
 v_count INTEGER;
t_result varchar;
t_emp_id varchar(50);
x_time timestamp;
begin
	 		select count(1) into v_count from tb_cop_buss_obj_txn tb
	           where tb.object_pri_key_1  = x_object_pri_key_1;
	      select now() AT TIME ZONE 'Asia/Kolkata' into x_time;         
if         v_count > 0 then 
		
		if upper(x_role)='CPV' then

insert into tb_btc_accesscontrol (
	workflow_group_id,
	object_pri_key_1,
	object_pri_key_2,
	object_pri_key_3,
	object_type,
	"location",
	system_role,
	emp_id,
	access_type,
	access_group,
	update_login_id,
	emp_hierarchy_id,
	location_hierarchy_id,
	config_id,
	created_by,
	created_timestamp)
	values
	(
	'CADIY',
	x_object_pri_key_1,
	'',
	'',
	'AOF',
	'',
	'CPV',
	'',
	'W',
	'',
	'',
	'',
	'',
	'',
	'diy_btc_accesscontrol_cpvmid',
	x_time
	);
	
	open x_result  for 
                                       select json_build_object('status','SUCCESS',
                                                      'message','DATA INSERTED SUCCESFULLY FOR CPV',
                                                    'data','[]'::json)::text as "object";	
					
return x_result;
 
		elsif upper(x_role)='MIDOFFICE_DIY' then
		
insert into tb_btc_accesscontrol (
	workflow_group_id,
	object_pri_key_1,
	object_pri_key_2,
	object_pri_key_3,
	object_type,
	"location",
	system_role,
	emp_id,
	access_type,
	access_group,
	update_login_id,
	emp_hierarchy_id,
	location_hierarchy_id,
	config_id,
	created_by,
	created_timestamp)
	values
	(
	'CADIY',
	x_object_pri_key_1,
	'',
	'',
	'AOF',
	'',
	'Midoffice_DIY',
	'',
	'W',
	'',
	'',
	'',
	'',
	'',
	'diy_btc_accesscontrol_cpvmid',
	x_time
	);
	
open x_result  for 
                                       select json_build_object('status','SUCCESS',
                                                      'message','DATA INSERTED SUCCESFULLY FOR MIDOFFICE',
                                                    'data','[]'::json)::text as "object";	
					
return x_result;
end if;
end if;

exception when others then 
	open x_result  for 
                                       select json_build_object('status','failure',
                                                      'message','some error occurred',
                                                    'data','[]'::json)::text as "object";
                                                    return x_result;

END;
$function$
;

CREATE OR REPLACE FUNCTION public.diy_check_payment_status(x_object_pri_key_1 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
  x_result REFCURSOR := 'cur';
  V_AOF_ID VARCHAR(40); 
 v_crn_aus  varchar(50);
v_account_no varchar(50);
 v_status VARCHAR(40);
 d_count INT;
a_count INT;
BEGIN
     
	
	
   	 select count(1) into d_count from tb_cop_buss_obj_txn tb
	where tb.object_pri_key_1 = x_object_pri_key_1;
	
	if 	  d_count > 0 then 
	
     SELECT OBJECT_DATA::JSON->'AOF'->'CA'->>'RAZORPAY_PAYMENT_STATUS' into v_status
      FROM tb_cop_buss_obj_txn tcbot
      WHERE tcbot.object_pri_key_1 =x_object_pri_key_1;
     
          if v_status='Payment Successful'  then
          
           select count(1) into a_count from tb_pgn_mst t where t.aof_id =x_object_pri_key_1;
          
          if a_count >0 
          then 
         select t.account_no,t.crn_aus into v_account_no,v_crn_aus from tb_pgn_mst t where t.aof_id =x_object_pri_key_1;
        
               if   (v_account_no is not null and v_crn_aus is not null ) then 
               
               	   open x_result for select json_build_object('status','success',	
	                                               'message','data fetched successfully',
	                                               'data',json_agg(json_build_object('Account_number',v_account_no ,
	                                                                                'Crn_number', v_crn_aus
	                                                                                 )))::text as object;
	                         RETURN x_result;

	                                                                                 
	                                                                                 
	              else       
	              
	               open x_result  for select json_build_object('status','failure',
                                                     'message','No acount number or crn_number assign to lead id',
                                                     'data','[]'::json)::text as "object";
                                                    
                               RETURN x_result;
                              end if;--v_account,v_crn if close

                                                    
                  else 
                  open x_result  for select json_build_object('status','failure',
                                                     'message','No lead id in pgn_master table',
                                                     'data','[]'::json)::text as "object";
                                                    RETURN x_result;
                                                          
                                                   end if;--pgn table lead id

                                                   
                                        else  
                                        
                                        open x_result  for select json_build_object('status','failure',
                                                     'message','Payment has failed',
                                                     'data','[]'::json)::text as "object";
                                                    
                                                                              RETURN x_result;
                                                                             
                                                                   end if;
                                        
                                   else   open x_result  for select json_build_object('status','failure',
                                                     'message','No lead id is present',
                                                     'data','[]'::json)::text as "object";
                RETURN x_result;
               end if;

     
 exception when others then 
	open x_result  for select json_build_object('status','failure',
                                                     'message','DIY_142',
                                                     'data','[]'::json)::text as "object";

       RETURN x_result;

END; 
$function$
;

CREATE OR REPLACE FUNCTION public.diy_cpv_status_update(x_object_pri_key_1 character varying, x_status character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
--X_RESULT refcursor:='cur';
x_user_id varchar;
x_rm_code varchar;
x_mobile_number varchar(50);
x_result REFCURSOR := 'curr';
v_object json;
v_count integer;
 x_time timestamp;



BEGIN

			--select count(*) into v_count from tb_cop_buss_obj_txn tcbot 
 				--			where object_pri_key_1 = x_object_pri_key_1;
--if v_count>0 then
									select now() AT TIME ZONE 'Asia/Kolkata' into x_time;
select JSONB_SET(object_data::jsonb,'{AOF}',object_data::jsonb->'AOF'||concat('{"WORKFLOW_STATUS":"','MOVETOASSISTED','"}')::jsonb) into V_OBJECT from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 ;

select t.user_id into x_user_id  from tb_aof_history t where process_group ='CPV' and prc_grp_disp ='ASSIGNMENTPENDING'
and object_pri_key_1 =x_object_pri_key_1;

	if upper(x_status) ='REWORK' then

			perform public.sp_btc_prc_grp_disp('CADIY',x_object_pri_key_1,'','',null,null,null,null,'AOF','MBCPV','REWORK','NA',null,'',null,null,null,null,null,null,null);
          perform public.SP_INSERT_AOF_HISTORY('AOF', x_object_pri_key_1 , '' , '' , 'MBCPV' , 'REWORK', 'MOVETOASSISTED','',x_user_id,'','','','', '','CADIY');	

update tb_cop_metadata_txn set text_1 ='MOVETOASSISTED', 
                               workflow_status = 'MOVETOASSISTED',
                               object_data = v_object,
                               modified_timestamp =x_time,
                               modified_by ='diycpvstatusupdate',
                               device_modify_timestamp =x_time
where object_pri_key_1 =x_object_pri_key_1;

update tb_cop_buss_obj_txn set text_1 ='MOVETOASSISTED' ,object_data = v_object,device_modify_timestamp =x_time,modified_timestamp =x_time,modified_by ='diycpvstatusupdate'
where object_pri_key_1 =x_object_pri_key_1;

perform public.diy_btc_accesscontrol(x_object_pri_key_1);
 SELECT    OBJECT_DATA::JSON->'AOF'->>'RM_CODE' into x_rm_code
      FROM tb_cop_buss_obj_txn t
      WHERE  t.object_pri_key_1 =x_object_pri_key_1;
     
     select t.mobile_number into x_mobile_number from tb_emp_hrms t where t.employee_number =x_rm_code;
        update tb_aof_history set user_id =x_rm_code
    where process_group = 'RM_SE'
   and prc_grp_disp ='ASSIGNED'
  and object_pri_key_1 =x_object_pri_key_1;



/*insert into tb_btc_accesscontrol (workflow_group_id,
	object_pri_key_1,
	object_pri_key_2,
	object_pri_key_3,
	object_type,
	"location",
	system_role,
	emp_id,
	access_type,
	access_group,
	update_login_id,
	emp_hierarchy_id,
	location_hierarchy_id,
	config_id,
	created_by,
	created_timestamp,
	modified_by,
	modified_timestamp)
	values
	('CA',
	x_object_pri_key_1,
	'',
	'',
	'AOF',
	'',
	'DVU',
	'DVU1',
	'W',
	'',
	'DVU1',
	'',
	'',
	'',
	'diy_cpv_status',
	x_time,
	'',
	x_time);*/

	   OPEN x_result for   SELECT 
                          json_build_object('status','SUCCESS',	
	                                                           'message','LEAD MOVED TO ASSISTED',
	                                                           'mobile_number',x_mobile_number,
	                                                           'data','[]'::json)::text as "object";
	                                                          return x_result;  


	elsif upper(x_status)='SUBMIT' then
--else
perform public.sp_btc_prc_grp_disp('CADIY',x_object_pri_key_1,'','',null,null,null,null,'AOF','PRBOMAOFUPDC','APPROVE','NA',null,'',null,null,null,null,null,null,null);
perform public.SP_INSERT_AOF_HISTORY('AOF', x_object_pri_key_1 , '' , '' , 'PRBOMAOFUPDC' , 'APPROVE', 'CPVAPPROVEDDVUUSERWAIT','',x_user_id,'','','','', '','CADIY');	
update tb_cop_metadata_txn set text_1 ='CPVAPPROVED', workflow_status = 'CPVAPPROVED',device_modify_timestamp =x_time,modified_timestamp =x_time
where object_pri_key_1 =x_object_pri_key_1;

update tb_cop_buss_obj_txn set text_1 ='CPVAPPROVED',device_modify_timestamp =x_time,modified_timestamp =x_time 
where object_pri_key_1 =x_object_pri_key_1;

/*update tb_btc_accesscontrol set update_login_id ='DVU1' ,system_role ='DVU' ,modified_by ='diy_cpv_status_update',modified_timestamp =x_time
where object_pri_key_1 =x_object_pri_key_1; */

/*insert into tb_btc_accesscontrol (workflow_group_id,
	object_pri_key_1,
	object_pri_key_2,
	object_pri_key_3,
	object_type,
	"location",
	system_role,
	emp_id,
	access_type,
	access_group,
	update_login_id,
	emp_hierarchy_id,
	location_hierarchy_id,
	config_id,
	created_by,
	created_timestamp,
	modified_by,
	modified_timestamp)
	values
	('CA',
	x_object_pri_key_1,
	'',
	'',
	'AOF',
	'',
	'DVU',
	'DVU1',
	'W',
	'',
	'DVU1',
	'',
	'',
	'',
	'diy_cpv_status',
	x_time,
	'',
	x_time);*/
OPEN x_result for   SELECT 
                            json_build_object('status','SUCCESS',	
	                                                           'message','LEAD SUBMITTED SUCCESSFULLY',
	                                                           'data','[]'::json)::text as "object";
	                                                          return x_result;  
end if;
RETURN X_RESULT;
exception when others then 
	open x_result  for select json_build_object('status','failure',
                                                  'message','Some error occurred while moving lead to assisted',
                                                      'data','[]'::json)::text as "object";
                                                      RETURN X_RESULT;
END; 
$function$
;

CREATE OR REPLACE FUNCTION public.diy_cpv_update_json(x_object_pri_key_1 character varying, x_object_data text)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare
X_RESULT refcursor:='cur';
v_count INTEGER;
 y_time timestamp;
begin	
	 select count(1) into v_count from tb_cop_buss_obj_txn tb
	where tb.object_pri_key_1 = x_object_pri_key_1;
      
       if v_count > 0 then 
    
		select now() AT TIME ZONE 'Asia/Kolkata' into y_time;

       Update tb_cop_buss_obj_txn 
              set object_data  = x_object_data::json,
               modified_timestamp=y_time,
              device_modify_timestamp=y_time
        where object_pri_key_1 =x_object_pri_key_1;


             update tb_cop_metadata_txn 
             set object_data =x_object_data::json
            where object_pri_key_1 =x_object_pri_key_1;
           
          
             	    open x_result for select json_build_object('status','success',	
	                                                           'message','data updated successfully',
	                                                           'data','[]'::json)::text as "object";
	                                                          

 else
 OPEN x_result for   SELECT 
                         '0000012313' AS "response_code", 
                         '{"PROCEED_LABEL":"","STAYBACK_LABEL":"","RESPONSE_MESSAGE":"Please enter valid lead id "}' as "response_message",
                         'E' "response_type";
                         
end if;
return x_result;
exception when others then 
	open x_result  for select json_build_object('status','failure',
                                                    'message','some error occurred',
                                                     'data','[]'::json)::text as "object";

       RETURN x_result;

END;
$function$
;

CREATE OR REPLACE FUNCTION public.diy_fetch_data(x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
  x_result REFCURSOR := 'cur';
 v_count INTEGER;
begin
	 		select count(1) into v_count from tb_cop_buss_obj_txn tb
	           where tb.object_pri_key_1  = x_object_pri_key_1;
      
if         v_count > 0 then 
       
            						open x_result for 
     						select t.object_data::json as object_d
							FROM PUBLIC.tb_cop_buss_obj_txn t
							WHERE t.object_pri_key_1 =x_object_pri_key_1;
				

else
 									OPEN x_result for   SELECT 
                         '0000012313' AS "response_code", 
                         '{"PROCEED_LABEL":"","STAYBACK_LABEL":"","RESPONSE_MESSAGE":"Please enter valid lead id "}' as "response_message",
                         'E' "response_type";  

 
end if;
return x_result;
exception when others then 
	open x_result  for select json_build_object('status','failure',
                                                       'message','some error occurred',
                                                       'data','[]'::json)::text as "object";
END;
$function$
;

CREATE OR REPLACE FUNCTION public.diy_fetch_pending_leads(x_prc_grp character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
  x_result REFCURSOR := 'cur';
 v_count INTEGER;
prc_grp varchar;
begin
select t.process_group  into prc_grp from tb_btc_prc_grp_disp t where 
t.process_group  = x_prc_grp;
      
      
       
       if prc_grp ='VKYC' then 
       
       open x_result for 
     			select m.object_data  from tb_cop_buss_obj_txn m where 
								 m.text_1  in ('PENDING','VKYC_UNABLE') 
							and     m.object_data::JSON->'AOF'->>'VKYC_TRACKING_ID' <> ''
						and m.lead_journey ='DIY';
						
							else 
							
							  open x_result for 
							  
							  
							  	  	select m.object_data  from tb_cop_buss_obj_txn m where  
     	  	  m.text_1 ='WIP'
							and m.lead_journey  = 'DIY'
                     order by m.device_create_timestamp ;
							
				
 

 
end if;
return x_result;
exception when others then 
	open x_result  for select json_build_object('status','failure',
                                                       'message','some error occurred',
                                                       'data','[]'::json)::text as "object";
                                                      return x_result;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.diy_get_branch_details(x_pincode character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare 

v_count INTEGER;
t_count INTEGER;
x_result REFCURSOR :='cur';
begin 
		select count(1) into v_count from tb_branch_mst   tb
	where tb.pincode  = x_pincode;

if 					v_count > 0 then 
	
							open x_result for
								WITH branch 
                  					 AS
                        (
            	  select distinct t.branch_cd as branch_code,t.ldesc as branch_name,t.category as category from tb_branch_mst t 
where t.pincode =x_pincode
)
             
                                       select json_build_object('status','success',
	                                               'message','data fetched successfully',
	                                               'data',json_agg(json_build_object('branch_name', a.branch_name ,
	                                                                                 'category',a.category ,
	                                                                                 'branch_cd',a.branch_code)))::text as object
	         	from branch a;
            
    	return x_result;

else
						select count(1) into t_count from PIN_BRANCH_MAPPING tb
						where tb.serviceable_pin_code:: varchar  = x_pincode;

									if t_count>0 
								
		then 
					open x_result for  select json_build_object('status','success',
	                                               'message','data fetched successfully',
	                                               'data',json_agg(json_build_object('branch_name',t.ldesc ,
	                                                                                 'category',t.category ,
	                                                                                 'branch_city',t.city ,
	                                                                                 'branch_cd',t.branch_cd)))::text as object
	         from tb_branch_mst t left join  pin_branch_mapping   m 
on m.branch_code::integer  =t.branch_cd::integer
where m.serviceable_pin_code:: varchar  =x_pincode
;
                                                                  	 			return x_result;


else 

							open x_result  for select json_build_object('status','failure',
                                                       'message','DIY_105',
                                                       'data','[]'::json)::text as "object";
					return x_result;
end if;
end if;

				--	exception when others then
					--open x_result  for select json_build_object('status','failure',
                      --                               'message','DIY_142',
                        --                              'data','[]'::json)::text as "object";
                          --                            	 			return x_result;

END; $function$
;

CREATE OR REPLACE FUNCTION public.diy_get_declaration_mst()
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
RESULT refcursor;

BEGIN

        		OPEN RESULT FOR	select json_build_object('status','success',	
	                                             'message','data fetched successfully',
	                                             'data',  json_agg(json_build_object('declaration_type',a.declaration_type ,
	                                                                                 'declaration_code',a.declaration_code  ,
	                                                                                 'declaration_value',a.declaration_value  ,
	                                                                                 'version' ,a.version  )))::text as object
	                                                                                  from declaration_mst a;
        return result;
       
       				exception when others then
							open result  for select json_build_object('status','failure',
                                                       'message','DIY_142',
                                                       'data','[]'::json)::text as "object";
                                                      	 			return result;
       END; 

      $function$
;

CREATE OR REPLACE FUNCTION public.diy_get_email_data(x_email_code character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
  x_result REFCURSOR := 'cur';
 d_count INT;
BEGIN
     
	
	
   SELECT COUNT(1) INTO d_count  
      FROM tb_cop_buss_obj_txn tcbot
      WHERE  OBJECT_DATA::JSON->'AOF'->>'EMAIL_CODE' = x_email_code;
	 
	
	if 	  d_count > 0 then 
	
	               open x_result for select tcbot.object_data FROM tb_cop_buss_obj_txn tcbot
                    WHERE OBJECT_DATA::JSON->'AOF'->>'EMAIL_CODE' = x_email_code; 
       
				RETURN x_result;

         
    else
                           OPEN x_result for   SELECT 
                         '0000012313' AS "response_code", 
                         '{"PROCEED_LABEL":"","STAYBACK_LABEL":"","RESPONSE_MESSAGE":"Please enter valid email code "}' as "response_message",
                         'E' "response_type";  
end if;
 RETURN x_result;

exception when others then 
	open x_result  for select json_build_object('status','failure',
                                                       'message','some error occurred',
                                                       'data','[]'::json)::text as "object";

       RETURN x_result;

END; 
$function$
;

CREATE OR REPLACE FUNCTION public.diy_get_ip_amt(x_scheme_code character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare
X_RESULT refcursor:='cur';
v_count INTEGER;
begin
	 select count(1) into v_count from tb_product_master tb
	where upper(tb.scheme_code)  = upper(x_scheme_code);
      
   if        v_count > 0 then 
             
             	        OPEN X_RESULT FOR select json_build_object('status','success',        
                                            'message','IP Amount fetched successfully',
                                            'data',json_agg(json_build_object('ip_amount',t.ip_min_req)))::text as object
                                                                               from tb_product_master t 
                                                                  WHERE t.scheme_code  = x_scheme_code;
 else
                open X_RESULT for select json_build_object('status','failure',	
                                            'message','Scheme code does not exist',
	                                        'data','[]'::json)::text as "object";
                         
end if;
return X_RESULT;
               exception when others then 
                     open X_RESULT  for select json_build_object('status','failure',
                                                       'message','DIY_142',
                                                       'data','[]'::json)::text as "object";

       RETURN x_result;

END;
$function$
;

CREATE OR REPLACE FUNCTION public.diy_get_lov(x_app_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$

DECLARE

  ref REFCURSOR := 'cur';

  V_COUNT INT;

BEGIN

  SELECT
    COUNT(1) INTO V_COUNT
  FROM public.TB_MASTER_DATA_OBJS
  WHERE GROUP_ID = 'CA-DIY-XE5WYTE853';
  --AND MASTER_TYPE = x_master_type;



  IF V_COUNT > 0
    THEN

      OPEN ref FOR select json_build_object('status','success',        
                                            'message','Master Data is available',
                                            'data',json_agg(json_build_object('MASTER_TYPE',tpm.MASTER_TYPE,
                                                                              'DATA_OBJECT',tpm.DATA_OBJECT,
                                                                              'version'   ,tpm.version,
                                                                              'Y',  'REC_SYNC_STATUS'
                                                                               )))::text as object
                                                                               from TB_MASTER_DATA_OBJS tpm 

      WHERE GROUP_ID = 'CA-DIY-XE5WYTE853';
     -- AND MASTER_TYPE = x_master_type;

    ELSE

      OPEN ref for select json_build_object('status','success',        
                                            'message','Master Data is not available',
                                            'data',json_agg(json_build_object('MASTER_TYPE','',
                                                                              'DATA_OBJECT','{}',
                                                                              'version'   ,'',
                                                                              'N',  'REC_SYNC_STATUS'
                                                                               )))::text as object;
 


  END IF;



  RETURN ref;
 exception when others then 
	open ref  for select json_build_object('status','failure',
                                                       'message','DIY_142',
                                                       'data','[]'::json)::text as "object";

return ref;

END;

$function$
;

CREATE OR REPLACE FUNCTION public.diy_get_or_create_lead(x_mobile_number character varying, x_constitution_type character varying, x_object_data text)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
  x_result REFCURSOR := 'curr';
 x_time timestamp;
 y_time timestamp;
  V_AOF_ID VARCHAR(40); 
 x_status varchar;
X_SCHEME_CODE VARCHAR(40);

 X_PRIMARY_CONTACT_EMAIL VARCHAR(40);
 d_count INT;
x_lead_id varchar;
V_OBJECT json;
x_prc_grp varchar;
R_OBJECT json;
x_prc_grp_disp varchar;
D_OBJECT json;
BEGIN
     
	
	
  SELECT COUNT(1) INTO d_count  
      FROM tb_cop_buss_obj_txn tcbot
      WHERE  OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' = x_mobile_number
	  and OBJECT_DATA::JSON->'AOF'->>'WORKFLOW_JOURNEY' = x_constitution_type;
	 ------------------------------------------------------

	 SELECT t.object_pri_key_1,t.text_1  into x_lead_id,x_status
      FROM tb_cop_buss_obj_txn t
       WHERE  OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' = x_mobile_number
	  and OBJECT_DATA::JSON->'AOF'->>'WORKFLOW_JOURNEY' = x_constitution_type
	 -- and t.object_pri_key_1 like '%DIY%'
	       order by created_timestamp desc limit 1;

	 

	 -------------------------------------------------------------------------
	 

	if 	  d_count > 0 and x_status not in ('MDO REJECTED')   then 
	
	--- SELECT OBJECT_DATA::JSON->'AOF'->>'LEAD_ID' into x_lead_id
   --   FROM tb_cop_buss_obj_txn tcbot
    --  WHERE  OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE'=x_mobile_number
   --   and OBJECT_DATA::JSON->'AOF'->>'WORKFLOW_JOURNEY' = x_constitution_type; 
     
      SELECT OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_EMAIL' into X_PRIMARY_CONTACT_EMAIL
      FROM tb_cop_buss_obj_txn tcbot
      WHERE  object_pri_key_1 =x_lead_id;
     
      SELECT OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'CODE' into X_SCHEME_CODE
      FROM tb_cop_buss_obj_txn tcbot
      WHERE  object_pri_key_1 =x_lead_id;
	
	select t.process_group ,t.prc_grp_disp into x_prc_grp,x_prc_grp_disp from tb_btc_prc_grp_disp t where t.object_pri_key_1=x_lead_id
 order by t.created_timestamp  desc;
		select now() AT TIME ZONE 'Asia/Kolkata' into y_time;

	
  select JSONB_SET(object_data::jsonb,'{AOF}',object_data::jsonb->'AOF'||concat('{"JOURNEY_TYPE":"','R','"}')::jsonb) into D_OBJECT
    from tb_cop_buss_obj_txn t 	 WHERE  object_pri_key_1 =x_lead_id;
   
       	select   JSONB_SET(CAST(D_OBJECT  AS JSONB) , -- JSON OBJECT
                '{"AOF","INDIVIDUAL_STAKEHOLDERS",0}', -- PATH , SEPERATE CHILD PATH
	                 CAST(D_OBJECT  AS JSONB)->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0|| JSONB_BUILD_OBJECT(
						'AADHAAR_REF_KEY',''
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  )  into R_OBJECT;
				
       update tb_cop_buss_obj_txn set object_data=R_OBJECT,modified_timestamp=y_time,device_modify_timestamp=y_time
      WHERE  object_pri_key_1 =x_lead_id;
				
	   open x_result for select json_build_object('status','success',	
	                                               'message','data fetched successfully',
	                                               'data',json_agg(json_build_object('AOF_ID',x_lead_id ,
	                                               											'PROCESS_GROUP',x_prc_grp,
	                                                                                 'PROCESS_GROUP_DISP',x_prc_grp_disp,
	                                                                                 'PRIMARY_CONTACT_EMAIL',X_PRIMARY_CONTACT_EMAIL,
	                                                                                 'object_data',tcbot.object_data ,
	                                                                                 'JOURNEY_TYPE','R',
	                                                                                 'scheme_code',X_SCHEME_CODE
	                                                                                 )))::text as object
	                                                                                 FROM tb_cop_buss_obj_txn tcbot
					where tcbot.object_pri_key_1 =x_lead_id;
					---- OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' = x_mobile_number
				--	and OBJECT_DATA::JSON->'AOF'->>'WORKFLOW_JOURNEY' = x_constitution_type
       
				RETURN x_result;

         
     else     
								if   x_constitution_type='SP' then 
								select now() AT TIME ZONE 'Asia/Kolkata' into x_time;

								select  concat(concat('SPDIY',to_char(x_time,'DDMMYYHH24MISS')),(random_between(10,99))) into V_AOF_ID;
										perform public.sp_btc_prc_grp_disp('CADIY',V_AOF_ID,'','',null,null,null,null,'AOF','MBDIYJOURNEY','INITIATE','NA',null,x_mobile_number,null,null,null,null,null,null,null);		  				 

								else    
									select now() AT TIME ZONE 'Asia/Kolkata' into x_time;

										select  concat(concat('INDIY',to_char(x_time,'DDMMYYHH24MISS')),(random_between(10,99))) into V_AOF_ID;
										perform public.sp_btc_prc_grp_disp('CADIY',V_AOF_ID,'','',null,null,null,null,'AOF','MBDIYJOURNEY','INITIATE','NA',null,x_mobile_number,null,null,null,null,null,null,null);		  				 

								end if;
							select t.process_group ,t.prc_grp_disp into x_prc_grp,x_prc_grp_disp from tb_btc_prc_grp_disp t where t.object_pri_key_1=V_AOF_ID
 order by t.created_timestamp  desc;
		
							

	     select JSONB_SET(x_object_data::jsonb,'{AOF}',x_object_data::jsonb->'AOF'||concat('{"LEAD_ID":"',V_AOF_ID,'","MODIFIED_LEAD_ID":"',V_AOF_ID,'","JOURNEY_TYPE":"','N','","MOVE_TO_ASSISTED":"','N','"}')::jsonb) into V_OBJECT  ;
     
        INSERT INTO tb_cop_buss_obj_txn
								      ( OBJECT_TYPE,
								        OBJECT_PRI_KEY_1,
								        OBJECT_PRI_KEY_2,
								        OBJECT_PRI_KEY_3,
								        OBJECT_DATA,
								        LOGIN_ID,
								        MODIFY_EMP_ID,
								        CREATE_APP_ID,
								        MODIFY_APP_ID,
								      	DEVICE_CREATE_TIMESTAMP,
								        CREATE_PW_SESSION_ID,
								        IS_ACTIVE,
								        DEACTIVATED_BY,
								        DEACTIVATED_BY_PRC,
								        DEACTIVATED_TIMESTAMP,
								        TEXT_1,
								        TEXT_2,
								        TEXT_3,
								        CREATED_TIMESTAMP,
								        CREATED_BY,device_modify_timestamp,lead_journey)
								        VALUES
								       ('AOF',
								        V_AOF_ID,
								        '',
								        '',
								       V_OBJECT::JSON,
								        V_OBJECT::JSON->'AOF'->>'RM_CODE',
								        null,
								        null,
								        null,
								        x_time,
								        null,
								        'Y',
								       null, 
									    null, 
								        null,
								        x_prc_grp_disp,  
								        null, 
								        null,
								        x_time,
								        'GETORCREATELEADDIY',
								        x_time,'DIY');
   INSERT INTO public.tb_cop_metadata_txn
			(
			object_pri_key_1,
			object_pri_key_2,
			object_pri_key_3,
		  crn,
			account_no,
			contact_mobile,
			id_name_add,
			entity_name,
			scheme_code,
			stat, stat1,
			crn_entity, aus_crn, privy, caseid, lead_id, opening_branch,
			constitution_type, region_name, device_create_timestamp,
			device_modify_timestamp, assigned_user_id,
			assigned_rm,
			current_workstep,
			--assigned_to,
			login_id,
			modify_emp_id, text_1, text_2, text_3, text_4,
			text_5, text_6, text_7, text_8, text_9, text_10, created_timestamp,
			modified_timestamp, modified_by, create_user_hierarchy_id, is_active,workflow_status,program_option,object_data, lead_journey)
			values
			(V_AOF_ID,
			'',
			'',
			V_OBJECT::JSON->'AOF'->'CA'->>'CRN_ENTITY',
			V_OBJECT::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO',
			V_OBJECT::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE',
			V_OBJECT::JSON->'AOF'->'WORK_VARIABLES'->'AADHAAR_EKYC_RESPONSE'->>'NAME',
			V_OBJECT::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1',
			V_OBJECT::JSON->'AOF'->>'SCHEME_CODE',
			'',
			'',
			V_OBJECT::JSON->'AOF'->'CA'->>'CRN_ENTITY',
			V_OBJECT::JSON->'AOF'->'CA'->>'CRN_AUS',
			V_OBJECT::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE',
			V_OBJECT::JSON->'AOF'->>'LEAD_ID',
			V_OBJECT::JSON->'AOF'->>'MODIFIED_LEAD_ID',
			V_OBJECT::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE',
			V_OBJECT::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE',
			V_OBJECT::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE',
			x_time,
			x_time,
			V_OBJECT::JSON->'AOF'->>'RM_CODE',
			V_OBJECT::JSON->'AOF'->>'RM_NAME',
			  '',
			 -- ACC.update_login_id,
			  V_OBJECT::JSON->'AOF'->>'RM_CODE',
			  '',
			  x_prc_grp_disp,
			 '', '', '', '', '', '', '', '','0',
			x_time,
			x_time,
			'diy_get_or_create_lead',
			'CREATE_USER_HIERARCHY_ID',
			'Y',
			x_prc_grp_disp,
			x_object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE',
			cast(V_OBJECT as jsonb)
			,'DIY');
                         
		
       end if; 
      
      perform public.SP_INSERT_AOF_HISTORY('AOF', V_AOF_ID , '' , '' , 'MBDIYJOURNEY' , 'INITIATE', 'WORKINPROGRESS','','System','','','','', '','CADIY');	

                 
 OPEN x_result FOR select json_build_object('status','success',	
	                                        'message','data fetched successfully',
	                                        'data',json_agg(json_build_object('AOF_ID',V_AOF_ID ,
	                                                                          'PROCESS_GROUP',x_prc_grp,
	                                                                            'PROCESS_GROUP_DISP',x_prc_grp_disp,
	                                                                          'object_data',V_OBJECT::json,
	                                                                          'JOURNEY_TYPE','N'
	                                                                           )))::text as object;
 RETURN x_result;

exception when others then 
	open x_result  for select json_build_object('status','failure',
                                                    'message','DIY_142',
                                                 'data','[]'::json)::text as "object";

       RETURN x_result;

END; 
$function$
;

CREATE OR REPLACE FUNCTION public.diy_get_pincode_data(x_pincode character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare 

v_count INTEGER;
x_result REFCURSOR :='cur';
begin 
		 SELECT COUNT(1) INTO  v_count  
   FROM tb_pincode_city_master  
   WHERE pin_code=x_pincode;

if 				v_count > 0 then 
	
						open x_result  for  WITH branch 
                                   
   								as  ( select pin.city_name AS "city_name",
	       pin.state_name AS "state_name" ,
	     pin.country_name as "country_name" ,
	     (select fin_city_code from tb_fin_city_mapping tfcm 
	       where upper(fin_city_desc) = upper(pin.city_name) limit 1) as "city_code",
	       (select fin_state_code from tb_fin_state_mapping tfsm 
	       where upper(fin_state_desc) = upper(pin.state_name) limit 1) as "state_code"
	             from tb_pincode_city_master pin
       where pin.pin_code= x_pincode)
       	select json_build_object('status','success',
	                                               'message','data fetched successfully',
	                                               'data',json_agg(json_build_object('branch_name', a.city_name ,
	                                                                                 'category',a.state_name ,
	                                                                                 'branch_city',a.country_name,
	                                                                                 'branch_cd',a.city_code,
	                                                                                 'state_cd',a.state_code)))::text as object
	        																				 from branch a;
            
    return x_result;

else
				

							open x_result  for select json_build_object('status','failure',
                                                       'message','DIY_105',
                                                       'data','[]'::json)::text as "object";
					return x_result;
end if;


exception when others then
	open x_result  for select json_build_object('status','failure',
                                                   'message','DIY_142',
                                                    'data','[]'::json)::text as "object";
                                                      			return x_result;

END; $function$
;

CREATE OR REPLACE FUNCTION public.diy_get_product_type(x_scheme_code character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare
X_RESULT refcursor:='cur';
v_count INTEGER;
begin
	 select count(1) into v_count from tb_product_master tb
	where upper(tb.scheme_code)  = upper(x_scheme_code);
      
   if        v_count > 0 then 
             
             	     OPEN X_RESULT FOR select json_build_object('status','success',        
                                            'message','Product code fetched successfully',
                                            'data',json_agg(json_build_object('product_type',t.text_1,
                                                                              'product_name',t.product_name, 
                                                                             'banking_type',t.text_2,
                                                                             'product_code',t.eligible_account,
                                                                              'classification_type',t.classification, 
                                                                             'sweep_in amount',t.sweep_in_threshold,
                                                                             'sweep_out amount',t.sweep_out_threshold)))::text as object
                                                                               from tb_product_master t 
                                                                  WHERE t.scheme_code  = x_scheme_code;
 else
                open X_RESULT for select json_build_object('status','failure',	
                                            'message','Scheme code does not exist',
	                                        'data','[]'::json)::text as "object";
                         
end if;
return X_RESULT;
               exception when others then 
                     open X_RESULT  for select json_build_object('status','failure',
                                                       'message','DIY_142',
                                                       'data','[]'::json)::text as "object";

       RETURN x_result;

END;
$function$
;

CREATE OR REPLACE FUNCTION public.diy_get_razor_pay_data(x_razorpay_order_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
  x_result REFCURSOR := 'cur';
 d_count INT;
BEGIN
     
	
	
   SELECT COUNT(1) INTO d_count  
      FROM tb_cop_buss_obj_txn tcbot
      WHERE  OBJECT_DATA::JSON->'AOF'->'CA'->>'RAZORPAY_ORDER_ID'= x_razorpay_order_id;
	 
	
	if 	  d_count > 0 then 
	
	               open x_result for select tcbot.object_data FROM tb_cop_buss_obj_txn tcbot
                    WHERE  OBJECT_DATA::JSON->'AOF'->'CA'->>'RAZORPAY_ORDER_ID' = x_razorpay_order_id; 
       
				RETURN x_result;

         
    else
                           OPEN x_result for   SELECT 
                         '0000012313' AS "response_code", 
                         '{"PROCEED_LABEL":"","STAYBACK_LABEL":"","RESPONSE_MESSAGE":"Please enter valid razorpay_order_id "}' as "response_message",
                         'E' "response_type";  
end if;
 RETURN x_result;

exception when others then 
	open x_result  for select json_build_object('status','failure',
                                                       'message','some error occurred',
                                                       'data','[]'::json)::text as "object";

       RETURN x_result;

END; 
$function$
;

CREATE OR REPLACE FUNCTION public.diy_get_scheme_branch_validation(x_scheme_code character varying, x_branch_code character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$

declare 

x_result refcursor :='cur';
v_allowed_metro text;
v_Branch text;
x_data text;
begin
          select a.allowed_metro into v_allowed_metro from tb_product_master a
           where a.scheme_code =x_scheme_code;
        select distinct b.category  into v_Branch from tb_branch_mst    b
       where b.branch_cd  =x_branch_code;
          
	 if (v_allowed_metro='Y') and (v_Branch='Metro') then 
		 open x_result  for select json_build_object('status','success',	
	                                                 'message','Product is available for the branch',
	                                                  'data','[]'::json)::text as object;
return x_result ;
elsif (v_allowed_metro='N') and (v_Branch='Metro') then 
open x_result for select json_build_object('status','success',	
	                                               'message','data fetched successfully',
	                                               'data',json_agg(json_build_object('product_name',tpm.product_name,
	                                                                                 'scheme_code',tpm.scheme_code,
	                                                                                 'url'   ,tpm.url,
	                                                                                 'benefit',  tpm.benefit
	                                                                                  )))::text as object
	                                                                                 from tb_product_master tpm where tpm.allowed_metro ='Y';
return x_result ;
elsif (v_allowed_metro='Y') and (v_Branch !='Metro') then 
open x_result for select json_build_object('status','success',	
	                                               'message','Product is available for the non metro branch',
	                                               'data','[]'::json)::text as object;
return x_result ;
elsif (v_allowed_metro='N') and (v_Branch !='Metro') then 
open x_result  for select json_build_object('status','success',	
	                                               'message','Product is available for the non metro branch',
	                                               'data','[]'::json)::text as object;
return x_result ;
end if;
return x_result ;
exception when others then 
	open x_result  for select json_build_object('status','failure',
                                                       'message','some error occurred',
                                                       'data','[]'::json)::text as "object";

return x_result;
end; $function$
;

CREATE OR REPLACE FUNCTION public.diy_lob_check(x_object_pri_key_1 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
x_result refcursor :='cur';
v_count int;
lob_code varchar;

begin
	select count(1) into v_count from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1;
	select object_data::json->'AOF'->'LOB'->>'VALUE' into lob_code from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1;
if v_count>0 then
	if lob_code in (select tlm.value_code from tb_lov_mst tlm where property='LOB' and text_1='WBG') then 
	open x_result for select 'LOB IN WBG' as "MESSAGE",'SUCCESS' as "STATUS";                                   
	                                                          return x_result;
	else 
	open x_result for select 'LOB NOT IN WBG' as "MESSAGE",'FAILURE' as "STATUS";
	                                                          return x_result; 
	end if;
else
open x_result for select jsonb_build_object('status','FAILURE',	
	                                                           'message','ENTER VALID LEAD ID',
	                                                           'data','[]'::json)::text as "object";
	                                                          return x_result; 
end if;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.diy_login_aof(x_object_pri_key_1 character varying, x_login_id character varying, x_role character varying, x_count_group_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result REFCURSOR := 'cur';
v_count INTEGER;
 y_time timestamp;
--x_prc_grp varchar;
--x_prc_disp varchar;

begin
		select now() AT TIME ZONE 'Asia/Kolkata' into y_time;
--	select tah.process_group into x_prc_grp from tb_aof_history tah where object_pri_key_1 =x_object_pri_key ;
--	select tah.prc_grp_disp  into x_prc_disp from tb_aof_history tah where object_pri_key_1 =x_object_pri_key;
	
			   select count(1) into v_count from tb_cop_buss_obj_txn tb
	           where tb.object_pri_key_1  = x_object_pri_key_1;
	         
if         v_count > 0 then 
		if upper(x_role)='CPV' and  x_count_group_id = 'MY_CPV'   then
			update tb_aof_history set user_id =x_login_id
		--,created_timestamp =y_time 
		where object_pri_key_1 =x_object_pri_key_1 and process_group ='CPV' and prc_grp_disp ='ASSIGNMENTPENDING';
			open x_result for select json_build_object('status','success',	
	                                                           'message','User id updated successfully',
	                                                           'data','[]'::json)::text as "object";
	                                                          return x_result;

		elsif upper(x_role)='MIDOFFICE_DIY' and x_count_group_id = 'Pending_midoffice' then
			update tb_aof_history set user_id =x_login_id
			--,created_timestamp =y_time 
			where object_pri_key_1 =x_object_pri_key_1 and process_group  ='DIYWEBAPP'
		and prc_grp_disp ='WIP';
	open x_result for select json_build_object('status','success',	
	                                                           'message','User id updated successfully',
	                                                           'data','[]'::json)::text as "object";
	                                                          return x_result;
	                                                         
	                                                         elsif upper(x_role)='MIDOFFICE_DIY' and  x_count_group_id = 'Pending_cc_od' then
			update tb_aof_history set user_id =x_login_id
			--,created_timestamp =y_time 
			where object_pri_key_1 =x_object_pri_key_1 and process_group  ='DIYWEBAPP'
		and prc_grp_disp ='MIDOFFDROP';
	open x_result for select json_build_object('status','success',	
	                                                           'message','User id updated successfully',
	                                                           'data','[]'::json)::text as "object";
	                                                          return x_result;
	                                                         
	                                                          elsif upper(x_role)='MIDOFFICE_DIY' and  x_count_group_id = 'All_midoffice' then
			
	open x_result for select json_build_object('status','success',	
	                                                           'message','User id updated successfully',
	                                                           'data','[]'::json)::text as "object";
	                                                          return x_result;

		
		else 
		 open x_result for select json_build_object('status','failure',	
	                                                           'message','Enter valid role',
	                                                           'data','[]'::json)::text as "object";
	                                                          return x_result;
		
		end if;
		
				



else
 									 open x_result for select json_build_object('status','failure',	
	                                                           'message','Please enter valid lead id',
	                                                           'data','[]'::json)::text as "object";
	                                                          return x_result; 
return x_result;
 
end if;

--exception when others then 
	--open x_result  for 
      --                                 select json_build_object('status','failure',
        --                                              'message','some error occurred',
          --                                          'data','[]'::json)::text as "object";
            --                                        return x_result;

END;
$function$
;

CREATE OR REPLACE FUNCTION public.diy_midoff_status_update(x_object_pri_key_1 character varying, x_remarks character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
--X_RESULT refcursor:='cur';
  x_result REFCURSOR := 'curr';
 x_mobile_number varchar(50);
x_rm_code varchar;
v_object json;
x_user_id varchar(50);
v_count integer;
x_time timestamp;
BEGIN
select now() AT TIME ZONE 'Asia/Kolkata' into x_time;



select JSONB_SET(object_data::jsonb,'{AOF}',object_data::jsonb->'AOF'||concat('{"WORKFLOW_STATUS":"','MOVETOASSISTED','","MIDOFFICE_REMARK":"',x_remarks,'"}')::jsonb) into V_OBJECT from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 ;


perform public.sp_btc_prc_grp_disp('CADIY',x_object_pri_key_1,'','',null,null,null,null,'AOF','MVMDO','MVASST','NA',null,'',null,null,null,null,null,null,null);
perform public.SP_INSERT_AOF_HISTORY('AOF', x_object_pri_key_1 , '' , '' , 'MVMDO' , 'MVASST', 'MOVETOASSISTED','','','','','','', '','CADIY');	

update tb_cop_metadata_txn set text_1 ='MOVETOASSISTED', workflow_status = 'MOVETOASSISTED',object_data = v_object,device_modify_timestamp =x_time,modified_timestamp =x_time,modified_by ='diy_midoff_status_update'
where object_pri_key_1 =x_object_pri_key_1;

update tb_cop_buss_obj_txn set text_1 ='MOVETOASSISTED' ,object_data = v_object,device_modify_timestamp =x_time,modified_timestamp =x_time,modified_by ='diy_midoff_status_update'
where object_pri_key_1 =x_object_pri_key_1;
perform public.diy_btc_accesscontrol(x_object_pri_key_1);

SELECT    OBJECT_DATA::JSON->'AOF'->>'RM_CODE' into x_rm_code
      FROM tb_cop_buss_obj_txn t
      WHERE  t.object_pri_key_1 =x_object_pri_key_1;
     
     select t.mobile_number into x_mobile_number from tb_emp_hrms t where t.employee_number =x_rm_code;
    
    select t.user_id into x_user_id  from tb_aof_history t where  t.process_group ='DIYWEBAPP'
and t.prc_grp_disp ='WIP' and t.object_pri_key_1 =x_object_pri_key_1;
    
    update tb_aof_history set user_id =x_rm_code
    where process_group = 'RM_SE'
   and prc_grp_disp ='ASSIGNED'
  and object_pri_key_1 =x_object_pri_key_1;
   
    update tb_aof_history set user_id =x_user_id
    where process_group = 'MIDOFFICE'
   and prc_grp_disp ='MOVETOASSISTED'
  and object_pri_key_1 =x_object_pri_key_1;




	   OPEN x_result for   SELECT 
                         json_build_object('status','SUCCESS',	
	                                                           'message','LEAD MOVED TO ASSISTED',
	                                                           'mobile_number',x_mobile_number,
	                                                          'data','[]'::json)::text as "object";
	                                                          return x_result;   
      return x_result;
exception when others then 
	open x_result  for select json_build_object('status','failure',
                                                  'message','Some error occurred while moving lead to assisted',
                                                      'data','[]'::json)::text as "object";
                                                    RETURN X_RESULT;
END; 
$function$
;

CREATE OR REPLACE FUNCTION public.diy_scheme_code_exist(x_scheme_code character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare 
x_result refcursor :='cur';
v_sch_code varchar;
begin
	
	select upper(tpm.scheme_code) into v_sch_code from tb_product_master tpm where upper(tpm.scheme_code) = upper(x_scheme_code);
--and text_1 in ('CC','OD');
	if v_sch_code <> '' or v_sch_code is not null then 
	open x_result for 
	select 'Success' as "STATUS",
		   'Valid Scheme Code' as "MESSAGE";
		  return x_result;
	else open x_result for select 'Failure' as "STATUS",
								  'Enter Valid Scheme Code' as "MESSAGE";
								 return x_result;
end if;
	
end;
$function$
;

CREATE OR REPLACE FUNCTION public.diy_scheme_rm_code_exist(x_scheme_code character varying, x_rm_code character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare

x_result refcursor :='cur';

v_scheme_count int;
v_rm_status text;
v_sc_status text;
v_sc_message text;
x_first_name text;
x_middle_name  text;
x_product_code text;
x_last_name  text;
v_rm_code_count int;
v_product_name text;
no_of_days int;
x_mobile_number varchar(50);
v_last_working_date text;
x_lob varchar(50);
v_rm_code varchar(50);
text1 varchar(50);
x_email varchar(50);
lwd_date integer;
segment text;
v_rm_name text;


begin
select count(1) into v_scheme_count from tb_product_master
 where upper(scheme_code) = upper(x_scheme_code);

if v_scheme_count > 0 then
v_sc_status :='Y';
select a.product_name,a.eligible_account  into v_product_name,x_product_code from tb_product_master a where a.scheme_code =x_scheme_code;
else
v_sc_status :='N';
v_product_name :='NA';
 open x_result for select json_build_object('status','failure',
                                            'message','Scheme code does not exist',
                                       'data','[]'::json)::text as "object";
                                               
return x_result;
end if;
 select count(1) into v_rm_code_count from tb_emp_hrms   where (employee_number = x_rm_code or attribute3 = x_rm_code);

select t.last_working_date::date - current_date into no_of_days from tb_emp_hrms t where 
(t.last_working_date <> '' and t.last_working_date is not null) and
(t.employee_number =x_rm_code or t.attribute3 = x_rm_code);

select COUNT(1) into lwd_date from tb_emp_hrms t where 
(t.last_working_date = '' OR t.last_working_date is  null) and
(t.employee_number =x_rm_code or t.attribute3 = x_rm_code);




if v_rm_code_count > 0 and no_of_days > 2 then
v_rm_status :='Y';

select v.last_working_date,v.lob_code,v.first_name,v.middle_names,v.last_name ,v.employee_number,v.email_address,v.mobile_number  
into v_last_working_date,x_lob,x_first_name,x_middle_name,x_last_name,v_rm_code,x_email,x_mobile_number
  from tb_emp_hrms v where (v.employee_number =x_rm_code or v.attribute3 = x_rm_code);
 
 select t.text_1 into text1  from tb_lov_mst t where t.value_code =x_lob
 and t.property ='LOB';
if text1 <> 'WBG'
then segment:='RL' ;
else
segment:='CB' ;
end if;

else if v_rm_code_count > 0 and lwd_date > 0 then
v_rm_status :='Y';

select v.last_working_date,v.lob_code,v.first_name,v.middle_names,v.last_name ,v.employee_number,v.email_address,v.mobile_number  
into v_last_working_date,x_lob,x_first_name,x_middle_name,x_last_name,v_rm_code,x_email,x_mobile_number
  from tb_emp_hrms v where (v.employee_number =x_rm_code or v.attribute3 = x_rm_code);
 
 select t.text_1 into text1  from tb_lov_mst t where t.value_code =x_lob
 and t.property ='LOB';
if text1 <> 'WBG'
then segment:='RL' ;
else
segment:='CB' ;
end if;

else 
v_rm_status :='N';
x_lob:='0051';
v_last_working_date :='NA';
v_rm_code :='DIYCA';
v_rm_name :='DIYCA';
segment:='RL' ;
x_email :='DIYCA';
x_mobile_number:='DIYCA';


 open x_result for select json_build_object('status','success',
                                            'message','Scheme code fetched successfully',
                                            'data',json_agg(json_build_object('rm_code_exist',v_rm_status,
                                                                              'scheme_code_exist',v_sc_status,
                                                                              'lob_code',x_lob,
                                                                              'product_name',v_product_name,
                                                                            'rm_code',v_rm_code,
                                                                           'rm_name',v_rm_name,
                                                                           'Segment',segment,
                                                                        'email',x_email,
                                                                       'mobile',x_mobile_number)))::text as object;                                                
return x_result;
end if;
end if;

 open x_result for select json_build_object('status','success',
                                              'message','data fetched successfully',
                                              'data',json_agg(json_build_object('rm_code_exist',v_rm_status,
                                                                                'scheme_code_exist',v_sc_status,
                                                                                 'lob_code',x_lob,
                                                                                 'First_name',coalesce(x_first_name,''),
                                                                                 'Middle_name',coalesce(x_middle_name,''),
                                                                                 'Last_name',coalesce(x_last_name,''),
                                                                                'last_working_date',v_last_working_date,
                                                                                'product_code',x_product_code,
                                                                                'product_name',v_product_name,
                                                                               'rm_code',v_rm_code,
                                                                              'Segment',segment,
                                                                             'email',x_email,
                                                                            'mobile',x_mobile_number)))::text as object;
   
return x_result;

exception when others then
open x_result  for select json_build_object('status','failure',
                                                    'message','DIY_142',
                                                      'data','[]'::json)::text as "object";
                                                     
return x_result;

                                                   
end;
 $function$
;

CREATE OR REPLACE FUNCTION public.diy_set_object_update(x_object_pri_key_1 character varying, x_lc_code character varying, x_lg_code character varying, x_rm_code character varying, x_coco_code character varying, x_risk_profile character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare 
X_RESULT refcursor:='cur';
v_lob varchar(20);
V_RESULT text;
x_object_data json;
v_count integer;
v_object_1 json;
V_OBJECT_2 json;
x_time timestamp;
lc_code varchar;
lg_code varchar;
rm_code varchar;
risk_profile varchar;
coco_code varchar;
v_object_3 json;
V_OBJECT_4 json;
/*v_object_4 json;
v_object_5 json;
v_object_6 json;*/
begin
				select now() AT TIME ZONE 'Asia/Kolkata' into x_time;
			select count(*) into v_count from tb_cop_buss_obj_txn tcbot 
 							where object_pri_key_1 = x_object_pri_key_1;
if v_count>0 then

   select object_data into x_object_data from tb_cop_buss_obj_txn t where t.object_pri_key_1  =x_object_pri_key_1;

	if x_lc_code in (select employee_number from tb_emp_hrms teh) then lc_code =x_lc_code;
elsif x_lc_code ='' then lc_code=(select object_data::json->'AOF'->>'LC_CODE' from tb_cop_buss_obj_txn tcbot where object_pri_key_1=x_object_pri_key_1);
else
lc_code= '';
open x_result for select 'ENTER VALID LC CODE' as "STATUS";
return x_result;
	end if;

	if x_lg_code in (select employee_number from tb_emp_hrms teh) then lg_code=x_lg_code;
elsif x_lg_code ='' then lg_code=(select object_data::json->'AOF'->>'LG_CODE' from tb_cop_buss_obj_txn tcbot where object_pri_key_1=x_object_pri_key_1);
else
lg_code ='';
open x_result for select 'ENTER VALID LG CODE' as "STATUS";
return x_result;
	end if;

	if x_rm_code in (select employee_number from tb_emp_hrms teh ) then rm_code = x_rm_code;
elsif x_rm_code ='' then rm_code=(select object_data::json->'AOF'->>'RM_CODE' from tb_cop_buss_obj_txn tcbot where object_pri_key_1=x_object_pri_key_1);
else
rm_code='';
open x_result for select 'ENTER VALID RM CODE' as "STATUS";
return x_result;
	end if;

	if x_risk_profile ='' or x_risk_profile is null then
risk_profile=(select object_data::json->'AOF'->'RISK_PROFILE'->>'VALUE' from tb_cop_buss_obj_txn tcbot where object_pri_key_1=x_object_pri_key_1);
elsif x_risk_profile <>'' then
risk_profile=x_risk_profile;
	end if;
	
	if x_coco_code ='' or x_coco_code is null then
coco_code=(select object_data::json->'AOF'->>'COCO_CODE' from tb_cop_buss_obj_txn tcbot where object_pri_key_1=x_object_pri_key_1);
elsif x_coco_code <>'' then
coco_code=x_coco_code;
	end if;


	if(lc_code <>'' and rm_code <>'' and lg_code <>'') then
	select lob_code  into v_lob from tb_emp_hrms where employee_number = x_lc_code;
select JSONB_SET(x_object_data::jsonb,'{AOF}',x_object_data::jsonb->'AOF'||concat('{"LC_CODE":"',lc_code,'","LG_CODE":"',lg_code,'","RM_CODE":"',rm_code,'"}')::jsonb) into v_object_1 
    from tb_cop_buss_obj_txn t where t.object_pri_key_1 =x_object_pri_key_1;
   
	select   JSONB_SET(CAST(v_object_1 AS JSONB) , -- JSON OBJECT
                '{"AOF","LOB"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(v_object_1 AS JSONB)->'AOF'->'LOB'|| JSONB_BUILD_OBJECT(
						'CODE',v_lob,'VALUE',v_lob
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  ) into V_OBJECT_2;
	                 
	select   JSONB_SET(CAST(v_object_2 AS JSONB) , -- JSON OBJECT
                '{"AOF","RISK_PROFILE"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(v_object_2 AS JSONB)->'AOF'->'RISK_PROFILE'|| JSONB_BUILD_OBJECT(
						'VALUE',risk_profile
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  ) into V_OBJECT_3;
	                 
	                 	select   JSONB_SET(CAST(V_OBJECT_3 AS JSONB) , -- JSON OBJECT
                '{"AOF","COCO_CODE"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(V_OBJECT_3 AS JSONB)->'AOF'->'COCO_CODE'|| JSONB_BUILD_OBJECT(
						'VALUE',x_coco_code
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  ) into V_OBJECT_4;
  
  
update tb_cop_metadata_txn set object_data=V_OBJECT_4,modified_timestamp =x_time,device_modify_timestamp =x_time
    where object_pri_key_1 =x_object_pri_key_1;
update tb_cop_buss_obj_txn set object_data =V_OBJECT_4,modified_timestamp =x_time,device_modify_timestamp =x_time
	where object_pri_key_1 =x_object_pri_key_1;

				OPEN X_RESULT FOR
SELECT   'DATA SUCCESSFULLY UPDATED' as "STATUS";
				RETURN X_RESULT; 
	end if;

else 
			open x_result for
	select 'Please Enter valid lead id' as "STATUS";
			return x_result;

end if;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.diy_sp_cpv_lead_assign(x_object_pri_key_1 character varying, x_assign_to character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT refcursor:='cur';
v_state   TEXT;
V_RESULT text;
NUM_ROWS INT;
x_object_data json;
V_OBJECT json;
v_status VARCHAR(100);
v_assign_to  VARCHAR(100);
x_time timestamp;


cur_a CURSOR for select json_array_elements(cast(x_object_pri_key_1 as json)) ->> 'caseid' as leadid;
BEGIN

	
	select now() AT TIME ZONE 'Asia/Kolkata' into x_time;
    v_assign_to := x_assign_to;
	
  FOR i IN cur_a LOOP


   select object_data into x_object_data from tb_cop_buss_obj_txn t where t.object_pri_key_1 =i.leadid;
  
  
   select JSONB_SET(x_object_data::jsonb,'{AOF}',x_object_data::jsonb->'AOF'||concat('{"CPV_ASSIGNED_TO":"',v_assign_to,'"}')::jsonb) into V_OBJECT  ;
  
  update tb_cop_metadata_txn set object_data=V_OBJECT,workflow_status ='ASSIGNED',text_1 ='ASSIGNED',device_modify_timestamp =x_time,modified_timestamp =x_time
    where object_pri_key_1 =i.leadid;
   
        
 update tb_cop_buss_obj_txn set object_data =V_OBJECT,text_1 ='ASSIGNED',modified_timestamp =x_time,device_modify_timestamp =x_time
  where object_pri_key_1 =i.leadid;
 
--perform public.sp_btc_prc_grp_disp('CADIY',i.leadid,'','',null,null,null,null,'AOF','MBCPV','ASSIGN','NA',null,'',null,null,null,null,null,null,null);


	
	   GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'LEAD SUCCESSFULLY REASSIGN';
	ELSE 
         V_RESULT = 'LEAD CAN NOT REASSIGN';
	END IF;
     
  end loop;

OPEN X_RESULT FOR
SELECT   V_RESULT as "STATUS";

RETURN X_RESULT;  


/*
EXCEPTION WHEN OTHERS THEN

V_ERR:=SQLERRM;
OPEN ref FOR SELECT '' as "UNSUCCESSFUL",
'In-correct data. Some error has Occured' as "ERROR_REMARKS",
                         'tb_client_master' as "TABLENAME",
                '' as "ACTION";

return ref;                                    
*/
END;
 $function$
;

CREATE OR REPLACE FUNCTION public.diy_update_data(x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_object_data text, x_login_id text)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare
X_RESULT refcursor:='cur';
x_prc_grp_disp varchar;
x_prc_grp varchar;
v_count INTEGER;
 y_time timestamp;
begin	
	 select count(1) into v_count from tb_cop_buss_obj_txn tb
	where tb.object_pri_key_1 = x_object_pri_key_1;
      
       if v_count > 0 then 
       select t.prc_grp_disp,t.process_group  into x_prc_grp_disp,x_prc_grp from tb_btc_prc_grp_disp t where t.object_pri_key_1=x_object_pri_key_1
       and process_group <> 'RM_SE'
 order by t.created_timestamp  desc limit 1;
		select now() AT TIME ZONE 'Asia/Kolkata' into y_time;
	if x_prc_grp_disp in ('MDO REJECTED','DWREJECTED') and x_prc_grp <>'VKYC' 
then 

       Update tb_cop_buss_obj_txn 
              set object_data  = x_object_data::json,
              login_id=x_object_data::JSON->'AOF'->>'RM_CODE',
              text_1 =x_prc_grp_disp,
              modified_timestamp=y_time,
              modified_by ='diy_update_data',
              device_modify_timestamp=y_time,
              is_active='N'
              
            -- , login_id =x_login_id
              where object_pri_key_1 =x_object_pri_key_1;
             update tb_cop_metadata_txn 
             set text_1=x_prc_grp_disp,workflow_status=x_prc_grp_disp,object_data =x_object_data::json
            where object_pri_key_1 =x_object_pri_key_1;
           
           update tb_cop_metadata_txn 
					set
					object_data  = cast(x_object_data as jsonb),
					object_pri_key_1 = X_OBJECT_PRI_KEY_1,
					object_pri_key_2 = X_OBJECT_PRI_KEY_2,
					object_pri_key_3 = X_OBJECT_PRI_KEY_3,
					crn = x_object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY',
					account_no  = x_object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO',
					contact_mobile  = x_object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE',
					id_name_add = x_object_data::JSON->'AOF'->'WORK_VARIABLES'->'AADHAAR_EKYC_RESPONSE'->>'NAME',
					entity_name =  x_object_data::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1',
					scheme_code   = x_object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE',
					--stat =X_TEXT_9,
				--	stat1  = X_TEXT_9,
					crn_entity = x_object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY',
					aus_crn = x_object_data::JSON->'AOF'->'CA'->>'CRN_AUS',
					privy = x_object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE',
					caseid =x_object_data::JSON->'AOF'->>'LEAD_ID',
					lead_id = x_object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID',
					opening_branch=x_object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE',
					constitution_type = object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE',
					region_name  = x_object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE',
					--device_create_timestamp =to_timestamp(X_DEVICE_CREATE_TIMESTAMP, 'yyyy-mm-dd hh24:mi:ss'),
					device_modify_timestamp = y_time,
					modified_by ='diy_update_data',
					assigned_user_id =x_object_data::JSON->'AOF'->>'RM_CODE',
				--	assigned_user_id =X_LOGIN_ID,
					assigned_rm =(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = assigned_user_id),
					current_workstep ='',
					--assigned_to =
					login_id =x_object_data::JSON->'AOF'->>'RM_CODE',
				--	modify_emp_id=X_LOGIN_ID,
					text_1= x_prc_grp_disp,
				--	text_2= X_TEXT_2,
				----	text_3= X_TEXT_3,
				--	text_4= X_TEXT_4,
			--		text_5= X_TEXT_5,
			--		text_6= X_TEXT_6,
			--		text_7= X_TEXT_7,
			--		text_8= X_TEXT_8,
			--		text_9= X_TEXT_9,
				--	text_10= '0',
				--	created_timestamp=CURRENT_TIMESTAMP,
					modified_timestamp=y_time,
				--	modified_by=X_PROCESS_ID,
					create_user_hierarchy_id='CREATE_USER_HIERARCHY_ID',
					is_active = 'N',
					workflow_status = x_prc_grp_disp,
					program_option = x_object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				where OBJECT_PRI_KEY_1 = X_OBJECT_PRI_KEY_1
			;
		
		 open x_result for select json_build_object('status','success',	
	                                                           'message','data updated successfully',
	                                                           'data','[]'::json)::text as "object";

		else
       
       Update tb_cop_buss_obj_txn 
              set object_data  = x_object_data::json,
              text_1 =x_prc_grp_disp,
              modified_timestamp=y_time,
              modified_by ='diy_update_data',
              device_modify_timestamp=y_time
            , login_id =x_object_data::JSON->'AOF'->>'RM_CODE'
              where object_pri_key_1 =x_object_pri_key_1;
             update tb_cop_metadata_txn 
             set text_1=x_prc_grp_disp,workflow_status=x_prc_grp_disp,object_data =x_object_data::json
            where object_pri_key_1 =x_object_pri_key_1;
           
           update tb_cop_metadata_txn 
					set
					object_data  = cast(x_object_data as jsonb),
					object_pri_key_1 = X_OBJECT_PRI_KEY_1,
					object_pri_key_2 = X_OBJECT_PRI_KEY_2,
					object_pri_key_3 = X_OBJECT_PRI_KEY_3,
					crn = x_object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY',
					account_no  = x_object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO',
					contact_mobile  = x_object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE',
					id_name_add = x_object_data::JSON->'AOF'->'WORK_VARIABLES'->'AADHAAR_EKYC_RESPONSE'->>'NAME',
					entity_name =  x_object_data::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1',
					scheme_code   = x_object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE',
					--stat =X_TEXT_9,
				--	stat1  = X_TEXT_9,
					crn_entity = x_object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY',
					aus_crn = x_object_data::JSON->'AOF'->'CA'->>'CRN_AUS',
					privy = x_object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE',
					caseid =x_object_data::JSON->'AOF'->>'LEAD_ID',
					lead_id = x_object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID',
					opening_branch=x_object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE',
					constitution_type = object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE',
					region_name  = x_object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE',
					--device_create_timestamp =to_timestamp(X_DEVICE_CREATE_TIMESTAMP, 'yyyy-mm-dd hh24:mi:ss'),
					device_modify_timestamp = y_time,
					modified_by ='diy_update_data',
				assigned_user_id =x_object_data::JSON->'AOF'->>'RM_CODE',
				--	assigned_user_id =X_LOGIN_ID,
					assigned_rm =(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = assigned_user_id),
					current_workstep ='',
					--assigned_to =
					login_id =x_object_data::JSON->'AOF'->>'RM_CODE',
				--	modify_emp_id=X_LOGIN_ID,
					text_1= x_prc_grp_disp,
				--	text_2= X_TEXT_2,
				----	text_3= X_TEXT_3,
				--	text_4= X_TEXT_4,
			--		text_5= X_TEXT_5,
			--		text_6= X_TEXT_6,
			--		text_7= X_TEXT_7,
			--		text_8= X_TEXT_8,
			--		text_9= X_TEXT_9,
				--	text_10= '0',
				--	created_timestamp=CURRENT_TIMESTAMP,
					modified_timestamp=y_time,
				--	modified_by=X_PROCESS_ID,
					create_user_hierarchy_id='CREATE_USER_HIERARCHY_ID',
				--	is_active = ,
					workflow_status = x_prc_grp_disp,
					program_option = x_object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				where OBJECT_PRI_KEY_1 = X_OBJECT_PRI_KEY_1
			;
             
             	    open x_result for select json_build_object('status','success',	
	                                                           'message','data updated successfully',
	                                                           'data','[]'::json)::text as "object";
	                                                          end if;

 else
 OPEN x_result for   SELECT 
                         '0000012313' AS "response_code", 
                         '{"PROCEED_LABEL":"","STAYBACK_LABEL":"","RESPONSE_MESSAGE":"Please enter valid lead id "}' as "response_message",
                         'E' "response_type";
                         
end if;
return x_result;
exception when others then 
	open x_result  for select json_build_object('status','failure',
                                                    'message','some error occurred',
                                                     'data','[]'::json)::text as "object";

       RETURN x_result;

END;
$function$
;

CREATE OR REPLACE FUNCTION public.dms_image_active(x_object_pri_key_1 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare 
v_count integer;
x_result refcursor := 'cur';
d_count integer;
--x_id cursor is
begin
	
	select count(1) into v_count from tb_cop_buss_obj_txn tcbot where object_pri_key_1 = x_object_pri_key_1;
if v_count > 0 then


insert into dms_media_data_temp
	
select x_object_pri_key_1 as object_pri_key_1,json_array_elements_text(object_data->'AOF'->'BUS_DATA'->'EP1_IMAGE') as image_id from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'BUS_DATA'->>'EP1_IMAGE' is not null or object_data->'AOF'->'BUS_DATA'->>'EP1_IMAGE' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'BUS_DATA'->'EP2_IMAGE') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'BUS_DATA'->>'EP2_IMAGE' is not null or object_data->'AOF'->'BUS_DATA'->>'EP2_IMAGE' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'BUS_DATA'->'INDUSTRY_IMG') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'BUS_DATA'->>'INDUSTRY_IMG' is not null or object_data->'AOF'->'BUS_DATA'->>'INDUSTRY_IMG' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'PAN_IMG') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->>'PAN_IMG' is not null or object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->>'PAN_IMG' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'DL_IMAGE') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->>'DL_IMAGE' is not null or object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->>'DL_IMAGE' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'PSPRT_IMAGE') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->>'PSPRT_IMAGE' is not null or object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->>'PSPRT_IMAGE' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'VID') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->>'VID' is not null or object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->>'VID' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ID_PROOF'->'DL_IMAGE') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ID_PROOF'->>'DL_IMAGE' is not null or object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ID_PROOF'->>'DL_IMAGE' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ID_PROOF'->'PSPRT_IMAGE') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ID_PROOF'->>'PSPRT_IMAGE' is not null or object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ID_PROOF'->>'PSPRT_IMAGE' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ID_PROOF'->'VID') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ID_PROOF'->>'VID' is not null or object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ID_PROOF'->>'VID' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->'PAN_IMG') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->>'PAN_IMG' is not null or object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->>'PAN_IMG' <> null) 
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->'DL_IMAGE') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->>'DL_IMAGE' is not null or object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->>'DL_IMAGE' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->'PSPRT_IMAGE') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->>'PSPRT_IMAGE' is not null or object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->>'PSPRT_IMAGE' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->'VID') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->>'VID' is not null or object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->>'VID' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'CUST_IMG') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->>'CUST_IMG' is not null or object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->>'CUST_IMG' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->'CUST_IMG') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->>'CUST_IMG' is not null or object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->>'CUST_IMG' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'CA'->'CUSTOMER_DECLARATION') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'CA'->>'CUSTOMER_DECLARATION' is not null or object_data->'AOF'->'CA'->>'CUSTOMER_DECLARATION' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'CA'->'GROUPING_CONSENT') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'CA'->>'GROUPING_CONSENT' is not null or object_data->'AOF'->'CA'->>'GROUPING_CONSENT' <> null) 
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'CA'->'IP_CHQ_IMAGES') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'CA'->>'IP_CHQ_IMAGES' is not null or object_data->'AOF'->'CA'->>'IP_CHQ_IMAGES' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'CA'->'IP_APPROVAL_IMG') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'CA'->>'IP_APPROVAL_IMG' is not null or object_data->'AOF'->'CA'->>'IP_APPROVAL_IMG' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'CA'->'DOCUMENTS'->0->'CUSTOMER_SIGN') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'CA'->'DOCUMENTS'->0->>'CUSTOMER_SIGN' is not null or object_data->'AOF'->'CA'->'DOCUMENTS'->0->>'CUSTOMER_SIGN' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'CA'->'DOCUMENTS'->0->'MITC') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'CA'->'DOCUMENTS'->0->>'MITC' is not null or object_data->'AOF'->'CA'->'DOCUMENTS'->0->>'MITC' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'CA'->'DOCUMENTS'->0->'MHOLDER_SIGN') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'CA'->'DOCUMENTS'->0->>'MHOLDER_SIGN' is not null or object_data->'AOF'->'CA'->'DOCUMENTS'->0->>'MHOLDER_SIGN' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'CA'->'DOCUMENTS'->0->'MHOLDER_DECLARATION') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'CA'->'DOCUMENTS'->0->>'MHOLDER_DECLARATION' is not null or object_data->'AOF'->'CA'->'DOCUMENTS'->0->>'MHOLDER_DECLARATION' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'CA'->'DOCUMENTS'->0->'SANCTION_LETTER/APPROVAL_IMG') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'CA'->'DOCUMENTS'->0->>'SANCTION_LETTER/APPROVAL_IMG' is not null or object_data->'AOF'->'CA'->'DOCUMENTS'->0->>'SANCTION_LETTER/APPROVAL_IMG' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'CA'->'DOCUMENTS'->0->'OTHER_DOCUMENTS') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'CA'->'DOCUMENTS'->0->>'OTHER_DOCUMENTS' is not null or object_data->'AOF'->'CA'->'DOCUMENTS'->0->>'OTHER_DOCUMENTS' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'CA'->'DOCUMENTS'->0->'PROGRAM_VARIENT') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'CA'->'DOCUMENTS'->0->>'PROGRAM_VARIENT' is not null or object_data->'AOF'->'CA'->'DOCUMENTS'->0->>'PROGRAM_VARIENT' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'CA'->'CPV1'->'NAMEPLATE_BOARD') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'CA'->'CPV1'->>'NAMEPLATE_BOARD' is not null or object_data->'AOF'->'CA'->'CPV1'->>'NAMEPLATE_BOARD' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'CA'->'CPV1'->'BUSS_SETUP') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'CA'->'CPV1'->>'BUSS_SETUP' is not null or object_data->'AOF'->'CA'->'CPV1'->>'BUSS_SETUP' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'CA'->'CPV1'->'INVOICE') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'CA'->'CPV1'->>'INVOICE' is not null or object_data->'AOF'->'CA'->'CPV1'->>'BUSS_SETUP' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'CA'->'CPV2'->'NAMEPLATE_BOARD') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'CA'->'CPV2'->>'NAMEPLATE_BOARD' is not null or object_data->'AOF'->'CA'->'CPV2'->>'NAMEPLATE_BOARD' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'CA'->'CPV2'->'BUSS_SETUP') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'CA'->'CPV2'->>'BUSS_SETUP' is not null or object_data->'AOF'->'CA'->'CPV2'->>'BUSS_SETUP' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'CA'->'CPV2'->'INVOICE') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'CA'->'CPV2'->>'INVOICE' is not null or object_data->'AOF'->'CA'->'CPV2'->>'INVOICE' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'PROMO_DOC') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->>'PROMO_DOC' is not null or object_data->'AOF'->>'PROMO_DOC' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->'ID_PROOF'->'DL_IMAGE') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->'ID_PROOF'->>'DL_IMAGE' is not null or object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->'ID_PROOF'->>'DL_IMAGE' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->'ID_PROOF'->'PSPRT_IMAGE') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->'ID_PROOF'->>'PSPRT_IMAGE' is not null or object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->'ID_PROOF'->>'PSPRT_IMAGE' <> null)
union 
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->'ID_PROOF'->'VID') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->'ID_PROOF'->>'VID' is not null or object_data->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->1->'ID_PROOF'->>'VID' <> null)
union
select x_object_pri_key_1,json_array_elements_text(object_data->'AOF'->'CA'->'DOCUMENTS'->0->'CREDITY_DECLARATION') from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1 and (object_data->'AOF'->'CA'->'DOCUMENTS'->0->>'CREDITY_DECLARATION' is not null or object_data->'AOF'->'CA'->'DOCUMENTS'->0->>'CREDITY_DECLARATION' <> null) ;

select count(*) into d_count from dms_media_data_temp where object_pri_key_1 = x_object_pri_key_1;

if d_count > 0 then

update dms.media_data_object set status ='INACTIVE' where object_pri_key_1 = x_object_pri_key_1 and id not in (select dt.image_id from dms_media_data_temp dt where object_pri_key_1=x_object_pri_key_1 );

end if;

delete from dms_media_data_temp where object_pri_key_1 =x_object_pri_key_1;
--update public.dms_media_data_temp set is_active = 'N' where object_pri_key_1 =x_object_pri_key_1;
open x_result for select 'Success' as "STATUS",
						 'Data Updated Successfully' as "MESSAGE";
return x_result;
else
open x_result for select 'Failure' as "STATUS",
						 'Enter Valid Lead Id' as "MESSAGE";


end if;
EXCEPTION WHEN OTHERS THEN

OPEN X_RESULT FOR SELECT 'FAILURE' as "STATUS",
       'FUNCTIONALITY FAILED' as "RESPONSE_MESSAGE";


return X_RESULT;    
end;
$function$
;

CREATE OR REPLACE FUNCTION public.dms_image_check(x_object_pri_key_1 character varying, x_object_data character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare 
x_result refcursor:='cur';
v_count int;
d_count int;
v1_count int;
v2_count int;
v_user_id varchar;
mapping_count integer;
--v_id cursor is 

begin
select count(1) into v_count from tb_cop_buss_obj_txn tcbot where object_pri_key_1 = x_object_pri_key_1 ;
select emp_id into v_user_id from tb_btc_accesscontrol tba where tba.object_pri_key_1 = x_object_pri_key_1 and tba.system_role = 'RM';
select count(1) into mapping_count from dms_check_user_mapping dp where dp.employee_number = v_user_id;


if mapping_count = 0 then


		if v_count > 0 then
		delete from dms_image_check_temp where object_pri_key_1 =x_object_pri_key_1;
		insert into dms_image_check_temp
		
		select x_object_pri_key_1 as object_pri_key_1,json_array_elements_text(x_object_data::json->'BUS_DATA'->'EP1_IMAGE') as image_id,'Entity_Proof_1_Img' as image_type where (x_object_data::json->'BUS_DATA'->>'EP1_IMAGE' is not null and x_object_data::json->'BUS_DATA'->>'EP1_IMAGE' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'BUS_DATA'->'EP2_IMAGE'),'Entity_Proof_2_Img' where (x_object_data::json->'BUS_DATA'->>'EP2_IMAGE' is not null and x_object_data::json->'BUS_DATA'->>'EP2_IMAGE' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'BUS_DATA'->'INDUSTRY_IMG'),'Industry_Specific_Img' where (x_object_data::json->'BUS_DATA'->>'INDUSTRY_IMG' is not null and x_object_data::json->'BUS_DATA'->>'INDUSTRY_IMG' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->'PAN_IMG'),'PAN_Img' where (x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->>'PAN_IMG' is not null and x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->>'PAN_IMG' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->'DL_IMAGE'),'DL_Img' where (x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->>'DL_IMAGE' is not null and x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->>'DL_IMAGE' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->'PSPRT_IMAGE'),'Passport_Img' where (x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->>'PSPRT_IMAGE' is not null and x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->>'PSPRT_IMAGE' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->'VID'),'Voter_ID_Img' where (x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->>'VID' is not null and x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->>'VID' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->'ID_PROOF'->'DL_IMAGE'),'DL_Img' where (x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->'ID_PROOF'->>'DL_IMAGE' is not null and x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->'ID_PROOF'->>'DL_IMAGE' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->'ID_PROOF'->'PSPRT_IMAGE'),'Passport_Img' where (x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->'ID_PROOF'->>'PSPRT_IMAGE' is not null and x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->'ID_PROOF'->>'PSPRT_IMAGE' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->'ID_PROOF'->'VID'),'Voter_ID_Img' where (x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->'ID_PROOF'->>'VID' is not null and x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->'ID_PROOF'->>'VID' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->'PAN_IMG'),'PAN_Mandate_Img' where (x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->>'PAN_IMG' is not null and x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->>'PAN_IMG' <> '') 
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->'DL_IMAGE'),'DL_Mandate_Img' where (x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->>'DL_IMAGE' is not null and x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->>'DL_IMAGE' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->'PSPRT_IMAGE'),'Passport_Mandate_Img' where (x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->>'PSPRT_IMAGE' is not null and x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->>'PSPRT_IMAGE' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->'VID'),'Voter_ID_Mandate_Img' where (x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->>'VID' is not null and x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->>'VID' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->'CUST_IMG'),'CUST_Img' where (x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->>'CUST_IMG' is not null and x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->0->>'CUST_IMG' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->'CUST_IMG'),'Mandate_Img' where (x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->>'CUST_IMG' is not null and x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->>'CUST_IMG' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'CA'->'CUSTOMER_DECLARATION'),'Customer_Declaration_Img' where (x_object_data::json->'CA'->>'CUSTOMER_DECLARATION' is not null and x_object_data::json->'CA'->>'CUSTOMER_DECLARATION' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'CA'->'GROUPING_CONSENT'),'Grouping_Consent_Img' where (x_object_data::json->'CA'->>'GROUPING_CONSENT' is not null and x_object_data::json->'CA'->>'GROUPING_CONSENT' <> '') 
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'CA'->'IP_CHQ_IMAGES'),'IP_Cheque_Img' where (x_object_data::json->'CA'->>'IP_CHQ_IMAGES' is not null and x_object_data::json->'CA'->>'IP_CHQ_IMAGES' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'CA'->'IP_APPROVAL_IMG'),'IP_Approval_Img' where (x_object_data::json->'CA'->>'IP_APPROVAL_IMG' is not null and x_object_data::json->'CA'->>'IP_APPROVAL_IMG' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'CA'->'DOCUMENTS'->0->'CUSTOMER_SIGN'),'Customer_Signature_Img' where (x_object_data::json->'CA'->'DOCUMENTS'->0->>'CUSTOMER_SIGN' is not null and x_object_data::json->'CA'->'DOCUMENTS'->0->>'CUSTOMER_SIGN' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'CA'->'DOCUMENTS'->0->'MITC'),'MITC_Img' where (x_object_data::json->'CA'->'DOCUMENTS'->0->>'MITC' is not null and x_object_data::json->'CA'->'DOCUMENTS'->0->>'MITC' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'CA'->'DOCUMENTS'->0->'MHOLDER_SIGN'),'Mandate_Signature_Img' where (x_object_data::json->'CA'->'DOCUMENTS'->0->>'MHOLDER_SIGN' is not null and x_object_data::json->'CA'->'DOCUMENTS'->0->>'MHOLDER_SIGN' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'CA'->'DOCUMENTS'->0->'MHOLDER_DECLARATION'),'Mandate_Declaration_Img' where (x_object_data::json->'CA'->'DOCUMENTS'->0->>'MHOLDER_DECLARATION' is not null and x_object_data::json->'CA'->'DOCUMENTS'->0->>'MHOLDER_DECLARATION' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'CA'->'DOCUMENTS'->0->'SANCTION_LETTER/APPROVAL_IMG'),'Sanction_Approval_Img' where (x_object_data::json->'CA'->'DOCUMENTS'->0->>'SANCTION_LETTER/APPROVAL_IMG' is not null and x_object_data::json->'CA'->'DOCUMENTS'->0->>'SANCTION_LETTER/APPROVAL_IMG' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'CA'->'DOCUMENTS'->0->'OTHER_DOCUMENTS'),'Other_Documents_Img' where (x_object_data::json->'CA'->'DOCUMENTS'->0->>'OTHER_DOCUMENTS' is not null and x_object_data::json->'CA'->'DOCUMENTS'->0->>'OTHER_DOCUMENTS' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'CA'->'DOCUMENTS'->0->'PROGRAM_VARIENT'),'Program_Variant_Img' where (x_object_data::json->'CA'->'DOCUMENTS'->0->>'PROGRAM_VARIENT' is not null and x_object_data::json->'CA'->'DOCUMENTS'->0->>'PROGRAM_VARIENT' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'CA'->'CPV1'->'NAMEPLATE_BOARD'),'Selfie_with_Name PlateBoard' where (x_object_data::json->'CA'->'CPV1'->>'NAMEPLATE_BOARD' is not null and x_object_data::json->'CA'->'CPV1'->>'NAMEPLATE_BOARD' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'CA'->'CPV1'->'BUSS_SETUP'),'Selfie_with_StockBusiness Setup' where (x_object_data::json->'CA'->'CPV1'->>'BUSS_SETUP' is not null and x_object_data::json->'CA'->'CPV1'->>'BUSS_SETUP' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'CA'->'CPV1'->'INVOICE'),'InvoiceContactWorkOrder_Img_CPV1' where (x_object_data::json->'CA'->'CPV1'->>'INVOICE' is not null and x_object_data::json->'CA'->'CPV1'->>'BUSS_SETUP' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'CA'->'CPV2'->'NAMEPLATE_BOARD'),'Selfie_with_NamePlateBoard' where (x_object_data::json->'CA'->'CPV2'->>'NAMEPLATE_BOARD' is not null and x_object_data::json->'CA'->'CPV2'->>'NAMEPLATE_BOARD' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'CA'->'CPV2'->'BUSS_SETUP'),'Selfie_with_StockBusiness Setup' where (x_object_data::json->'CA'->'CPV2'->>'BUSS_SETUP' is not null and x_object_data::json->'CA'->'CPV2'->>'BUSS_SETUP' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'CA'->'CPV2'->'INVOICE'),'InvoiceContactWorkOrder_Img_CPV2' where (x_object_data::json->'CA'->'CPV2'->>'INVOICE' is not null and x_object_data::json->'CA'->'CPV2'->>'INVOICE' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'PROMO_DOC'),'Promo_Document_Img' where (x_object_data::json->>'PROMO_DOC' is not null and x_object_data::json->>'PROMO_DOC' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->'ID_PROOF'->'DL_IMAGE'),'DL_Mandate_Img' where (x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->'ID_PROOF'->>'DL_IMAGE' is not null and x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->'ID_PROOF'->>'DL_IMAGE' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->'ID_PROOF'->'PSPRT_IMAGE'),'Passport_Mandate_Img' where (x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->'ID_PROOF'->>'PSPRT_IMAGE' is not null and x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->'ID_PROOF'->>'PSPRT_IMAGE' <> '')
		union 
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->'ID_PROOF'->'VID'),'Voter_ID_Mandate_Img' where (x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->'ID_PROOF'->>'VID' is not null and x_object_data::json->'INDIVIDUAL_STAKEHOLDERS'->1->'ID_PROOF'->>'VID' <> '')
		union
		select x_object_pri_key_1,json_array_elements_text(x_object_data::json->'CA'->'DOCUMENTS'->0->'CREDITY_DECLARATION'),'CREDIT_FACILITY_DECLARATION' where (x_object_data::json->'CA'->'DOCUMENTS'->0->>'CREDITY_DECLARATION' is not null and x_object_data::json->'CA'->'DOCUMENTS'->0->>'CREDITY_DECLARATION' <> '') ;
		
		select count(*) into v1_count from dms_image_check_temp dt where dt.object_pri_key_1=x_object_pri_key_1;
		select count(*) into v2_count from dms_image_check_temp dt where dt.object_pri_key_1 = x_object_pri_key_1 and dt.image_id in (select id from dms.media_data_object mdo where mdo.object_pri_key_1=x_object_pri_key_1);
		
		raise notice 'JSON COUNT%',v1_count;
		raise notice 'DMS COUNT%',v2_count;
		
		if (v1_count = v2_count) then
		open x_result for select json_build_object('STATUS','SUCCESS',
								 'MESSAGE', 'All Images Available in DMS')::text;
		return x_result;
		
		else 
		
		
		delete from dms_image_check_temp dt where dt.object_pri_key_1 = x_object_pri_key_1 and dt.image_id in (select id from dms.media_data_object mdo where mdo.object_pri_key_1=x_object_pri_key_1);
		open x_result for select json_build_object('STATUS','FAILURE',
								 'MESSAGE', 'Images are missing in DMS',
								 'IMAGE_TYPE',(select json_agg(row_to_json(t)) from (select distinct(dict.image_type)::text from dms_image_check_temp dict where object_pri_key_1 =x_object_pri_key_1) t))::text;
		return x_result;
		end if;
		delete from dms_image_check_temp where object_pri_key_1 =x_object_pri_key_1;
		else
		open x_result for select json_build_object('STATUS','FAILURE',
								 'MESSAGE', 'PLEASE ENTER VALID LEAD ID')::text;
		return x_result;
								
		end if;
	
else

open x_result for select json_build_object('STATUS','SUCCESS',
								 'MESSAGE', 'DMS IMAGE CHECK BYPASSED FOR USER')::text;
		return x_result;
	
end if;
/*EXCEPTION WHEN OTHERS THEN

open x_result for select json_build_object('STATUS','FAILURE',
						 'MESSAGE', 'FUNCTIONALITY FAILED')::text;
return x_result;
	*/
end;
$function$
;

CREATE OR REPLACE FUNCTION public.f_ins_hist_tables_trg()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
begin

if TG_OP in ('INSERT','UPDATE') then
	INSERT INTO public.tb_cop_buss_obj_txn_hist
	(object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, object_data, server_version_number, device_modification_number, login_id, modify_emp_id, device_create_timestamp, device_modify_timestamp, create_pw_session_id, last_pw_session_id, is_active, deactivated_by, deactivated_by_prc, deactivated_timestamp, text_1, text_2, text_3, text_4, text_5, text_6, text_7, text_8, text_9, text_10, create_app_id, modify_app_id, created_timestamp, created_by, modified_timestamp, modified_by)
	VALUES(new.object_type, new.object_pri_key_1, new.object_pri_key_2, new.object_pri_key_3, new.object_data, new.server_version_number, new.device_modification_number, new.login_id, new.modify_emp_id, now(), now(), new.create_pw_session_id, new.last_pw_session_id, new.is_active, new.deactivated_by, new.deactivated_by_prc, now(), new.text_1, new.text_2, new.text_3, new.text_4, new.text_5, new.text_6, new.text_7, new.text_8, new.text_9, new.text_10, new.create_app_id, new.modify_app_id, now(), new.created_by, now(), new.modified_by);

return new;

elsif TG_OP = 'DELETE' then
	INSERT INTO public.tb_cop_buss_obj_txn_hist
	(object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, object_data, server_version_number, device_modification_number, login_id, modify_emp_id, device_create_timestamp, device_modify_timestamp, create_pw_session_id, last_pw_session_id, is_active, deactivated_by, deactivated_by_prc, deactivated_timestamp, text_1, text_2, text_3, text_4, text_5, text_6, text_7, text_8, text_9, text_10, create_app_id, modify_app_id, created_timestamp, created_by, modified_timestamp, modified_by)
	VALUES(old.object_type, old.object_pri_key_1, old.object_pri_key_2, old.object_pri_key_3, old.object_data, old.server_version_number, old.device_modification_number, old.login_id, old.modify_emp_id, now(), now(), old.create_pw_session_id, old.last_pw_session_id, old.is_active, old.deactivated_by, old.deactivated_by_prc, now(), old.text_1, old.text_2, old.text_3, old.text_4, old.text_5, old.text_6, old.text_7, old.text_8, old.text_9, old.text_10, old.create_app_id, old.modify_app_id, now(), old.created_by, now(), old.modified_by);

return new;
  
end if;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.f_ins_master_hist_tables_trg()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$

begin

if TG_OP in ('INSERT','UPDATE') then

--insert into PUBLIC.tb_master_data_objs_hist(group_id,master_type,data_object,version,org_id,app_id)
values(new.group_id,new.master_type,new.data_object,new.version,new.org_id,new.app_id);

return new;

elsif TG_OP = 'DELETE' then

insert into PUBLIC.tb_master_data_objs_hist(group_id,master_type,data_object,version,org_id,app_id)
values(old.group_id,old.master_type,old.data_object,old.version,old.org_id,old.app_id);


return new;
/*
elsif (TG_TABLE_NAME = 'tb_image_data_obj') then
INSERT INTO public.tb_image_data_obj_hist
(form_id, control_id, image_dfn_id, doc_id, image_name, object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, image_stream, image_meta_data, server_version_integer, device_modification_integer, login_id, modify_emp_id, is_active, device_create_timestamp, device_modify_timestamp, create_pw_session_id, last_pw_session_id, deactivated_by, deactivated_by_prc, deactivated_timestamp, created_timestamp, created_by, modified_timestamp, modified_by, doc_type, doc_bundle_id, create_app_id, modify_app_id, file_type, file_path)
VALUES(new.form_id, new.control_id, new.image_dfn_id, new.doc_id, new.image_name, new.object_type, new.object_pri_key_1, new.object_pri_key_2, new.object_pri_key_3, new.image_stream, new.image_meta_data, new.server_version_integer, new.device_modification_integer, new.login_id, new.modify_emp_id, new.is_active, now(), now(), new.create_pw_session_id, new.last_pw_session_id, new.deactivated_by, new.deactivated_by_prc, now(), now(), new.created_by, now(), new.modified_by, new.doc_type, new.doc_bundle_id, new.create_app_id, new.modify_app_id, new.file_type, new.file_path);

        RETURN NEW;      
  */    
  
end if;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.f_ins_sec_hist_tables_trg()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
begin

if TG_OP in ('INSERT','UPDATE') then

INSERT INTO public.tb_section_status_HIST
(object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, object_data, "role", section_id, status,status_remarks,screen_name ,status_update_user,rework_status, status_timetstamp, created_by, created_timestamp, modified_by, modified_timestamp)
VALUES(NEW.object_type, NEW.object_pri_key_1, NEW.object_pri_key_2, NEW.object_pri_key_3, NEW.object_data, NEW.role, NEW.section_id, NEW.status, NEW.status_remarks,new.screen_name, NEW.status_update_user ,new.rework_status, NOW(),  'setsectionststus', NOW(), NOW(), NOW());

return new;

elsif TG_OP = 'DELETE' then
INSERT INTO public.tb_section_status_HIST
(object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, object_data, "role", section_id, status,status_remarks,screen_name ,status_update_user,rework_status, status_timetstamp,  created_by, created_timestamp, modified_by, modified_timestamp)
VALUES(old.object_type, old.object_pri_key_1, old.object_pri_key_2, old.object_pri_key_3, old.object_data, old.role, old.section_id, old.status,old.status_remarks, old.screen_name,old.status_update_user ,old.rework_status, NOW(),  'setsectionststus', NOW(), NOW(), NOW());

return new;
  
end if;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.get_aof_history(x_login_id character varying, x_object_pri_key_1 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ declare X_RESULT refcursor:='cur';
P_SYSTEM_ROLE varchar(30);
V_DATA text;
v_count int;
begin
select count(*) into v_count from tb_aof_history tah2 
 where object_pri_key_1 = X_OBJECT_PRI_KEY_1
-- and TO_CHAR(tah2.created_timestamp , 'DD-MM-YYYY') >'16-02-2022';
--and  cast(TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS')as TIMESTAMP)>'2022-02-16';
;

if v_count = 0 then 


--SELECT
--      jsonb_agg(row_to_json(T)) INTO V_DATA FROM (
--  select to_CHAR(created_timestamp ,'YYYY-MM-DD HH24:MI:SS')as "Activity_Date", 
--		   process_group as "user_role",
--		   hrms.employee_number as "user_id",
--		   hrms.first_name as "user_name",
--		   disp.prc_grp_disp as "actoion_name" 
--		--       (select first_name from tb_emp_hrms teh 
--		--        where first_name in (select login_id from tb_btc_prc_grp_disp  ))
--		from tb_btc_prc_grp_disp disp 
--		join tb_emp_hrms hrms on upper(hrms.first_name)= upper(disp.login_id)
--		where disp.object_pri_key_1 =X_OBJECT_PRI_KEY_1
--		order by created_timestamp asc)t;

--select jsonb_agg(row_to_json(t)) into v_data from 
--	(select to_CHAR(disp.created_timestamp ,'DD-MM-YYYY HH24:MI:SS')as "Activity_Date", 
--		   case when disp.process_group = 'BOM_APPROVER'
--		   then 'APPROVER' else disp.process_group end as "user_role",
--		   coalesce(hrms.employee_number,'System') as "user_id",
--		    coalesce(hrms.first_name || ' '|| hrms.last_name,'System') as "user_name",
--		   disp.prc_grp_disp as "actoion_name",
--		   disp.created_timestamp as "created_timestamp",
--		   disp.config_id as "seq_id"
--	from tb_btc_prc_grp_disp_hist disp join
--		(select process_group, min(created_timestamp) created_timestamp, prc_grp_disp
--		  from tb_btc_prc_grp_disp_hist
--		  where object_pri_key_1= X_OBJECT_PRI_KEY_1 
--		   group by process_group, prc_grp_disp) samp
--	on (samp.process_group= disp.process_group and samp.created_timestamp = disp.created_timestamp)
--	left join tb_emp_hrms hrms on upper(hrms.employee_number )= upper(disp.login_id)
--	where disp.object_pri_key_1 = X_OBJECT_PRI_KEY_1 
--	and disp.process_group != 'ENRICHMENT'
--	and disp.log_action = 'INSERT'
--	group by disp.process_group, disp.object_pri_key_1, disp.prc_grp_disp, disp.config_id, 
--	disp.created_timestamp, disp.start_timestamp, hrms.employee_number, hrms.first_name,hrms.last_name
--	order by disp.created_timestamp, disp.config_id
--)t;

select jsonb_agg(row_to_json(t)) into v_data from 
	(select to_CHAR(disp.created_timestamp ,'DD-MM-YYYY HH24:MI:SS')as "Activity_Date", 
		  cfg.prc_grp_disp_desc as "user_role",
		   coalesce(hrms.employee_number,'System') as "user_id",
		    coalesce(hrms.first_name || ' '|| hrms.last_name,'System') as "user_name",
		   disp.prc_grp_disp as "actoion_name",
		   disp.created_timestamp as "created_timestamp",
		   disp.config_id as "seq_id"
	from tb_btc_prc_grp_disp_hist disp join
		  (select process_group, min(created_timestamp) created_timestamp, prc_grp_disp
		  from tb_btc_prc_grp_disp_hist
		  where object_pri_key_1= X_OBJECT_PRI_KEY_1
		   group by process_group, prc_grp_disp) samp
	on (samp.process_group= disp.process_group and samp.created_timestamp = disp.created_timestamp)
	join tb_btc_prc_grp_disp_cfg cfg on cfg.process_group = disp.process_group 
	left join tb_emp_hrms hrms on upper(hrms.employee_number )= upper(disp.login_id)
	where disp.object_pri_key_1 = X_OBJECT_PRI_KEY_1
	and disp.process_group != 'ENRICHMENT'
	and disp.log_action = 'INSERT'
	group by disp.process_group, disp.object_pri_key_1, disp.prc_grp_disp, disp.config_id, 
	disp.created_timestamp, disp.start_timestamp, hrms.employee_number, hrms.first_name,hrms.last_name,cfg.prc_grp_disp_desc
	order by disp.created_timestamp, disp.config_id,cfg.prc_grp_disp_desc)t;

elsif V_COUNT >0 then 


select jsonb_agg(row_to_json(t)) 
  into v_data 
  from(
		  select to_CHAR("Activity_Date" ,'DD-MM-YYYY HH24:MI:SS')as "Activity_Date",
		         "user_role" ,
		         "user_id",
		         "user_name",
		         "actoion_name" ,
		         "seq_id"
		   from(
				   select 
						created_timestamp as "Activity_Date",
						--to_CHAR(created_timestamp ,'DD-MM-YYYY HH24:MI:SS')as "Activity_Date", 
						--cast(TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS')as TIMESTAMP)as "Activity_Date",
						case when  process_group = 'BOM_APPROVER' 
                             then 'APPROVER'
                             when  process_group = 'RCU_Correcter' 
                             then 'CORRECTOR'
                             when  process_group = 'RCU' 
                             then 'MID OFFICE'
                             when  process_group = 'RU' 
                             then 'RISK UNIT'
                             else process_group end as "user_role",
						  user_id  as "user_id",
						 (select CONCAT(TEH.first_name ,' ',TEH.middle_names ,' ',TEH.last_name) 
						    from tb_emp_hrms teh  
						   where teh.employee_number =tah.user_id
						  ) as "user_name",
						  (select PROCESS_NAME from tb_process_group_nomenclature1 NM 
						     where NM.prc_grp_disp = TAH.prc_grp_disp
						      and NM.process_group =TAH.process_group 
						  ) as "actoion_name",
						--   prc_grp_disp as "actoion_name",
						       seq_id 
						from tb_aof_history tah 
						where object_pri_key_1 =X_OBJECT_PRI_KEY_1
						and process_group not in ('ENRICHMENT','SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNT','ACCOUNTCASA',
						                          'CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN','FILENET','ACCOUNTFREEZE',
						                          'ACCOUNT2','FLEXI INFO','ACCOUNTCASA2')
				 union 
					  select 
						      dis.created_timestamp as "Activity_Date",
						      (select PROCESS_NAME from tb_process_group_nomenclature1 NM 
						         where NM.prc_grp_disp = DIS.prc_grp_disp
						          and NM.process_group =DIS.process_group 
						      ) as "user_role",
						      'System' as "user_id",
						      'System' as "user_name",
						      (select text_1 from tb_process_group_nomenclature1 NM 
						         where NM.prc_grp_disp = DIS.prc_grp_disp
						          and NM.process_group =DIS.process_group 
						      ) as "actoion_name",
						      config_id 
						from tb_btc_prc_grp_disp_hist dis  
						where object_pri_key_1 =X_OBJECT_PRI_KEY_1
						  and dis.process_group in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNT','ACCOUNTCASA',
						                          'CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN','ACCOUNTFREEZE',
						                          'ACCOUNT2','FLEXI INFO','ACCOUNTCASA2')                        
						  and dis.prc_grp_disp in ('WAIT','SUCCESS','FAILURE')
                union 
					  select 
						      dis.created_timestamp as "Activity_Date",
						      (select PROCESS_NAME from tb_process_group_nomenclature1 NM 
						         where NM.prc_grp_disp = DIS.prc_grp_disp
						          and NM.process_group =DIS.process_group 
						      ) as "user_role",
						      'USER_GEN_QUE' as "user_id",
						      NULL as "user_name",
						      (select text_1 from tb_process_group_nomenclature1 NM 
						         where NM.prc_grp_disp = DIS.prc_grp_disp
						          and NM.process_group =DIS.process_group 
						      ) as "actoion_name",
						      config_id 
						from tb_btc_prc_grp_disp_hist dis  
						where object_pri_key_1 =X_OBJECT_PRI_KEY_1
						  and dis.process_group ='RU'                        
						  and dis.prc_grp_disp ='RU_USERWAIT'		
		  union 
					      select 
						      dis.created_timestamp as "Activity_Date",
						      (select PROCESS_NAME from tb_process_group_nomenclature1 NM 
						         where NM.prc_grp_disp = DIS.prc_grp_disp
						          and NM.process_group =DIS.process_group 
						      ) as "user_role",
						      'System' as "user_id",
						      'System' as "user_name",
						      (select text_1 from tb_process_group_nomenclature1 NM 
						         where NM.prc_grp_disp = DIS.prc_grp_disp
						          and NM.process_group =DIS.process_group 
						      ) as "actoion_name",
						      config_id 
						from tb_btc_prc_grp_disp_hist dis  
						where object_pri_key_1 =X_OBJECT_PRI_KEY_1
						  and dis.process_group ='FILENET'                        
						  and dis.prc_grp_disp in ('SUCCESS','WAIT','FAILURE')
		        )A
		       order by cast(TO_CHAR("Activity_Date",'YYYY-MM-DD HH24:MI:SS')as TIMESTAMP) , seq_id
     )t;

--select jsonb_agg(row_to_json(t)) into v_data from
--(select to_CHAR("Activity_Date" ,'DD-MM-YYYY HH24:MI:SS')as "Activity_Date", "user_role" , "user_id",
--"user_name","actoion_name" ,"seq_id"from  
--(select 
--created_timestamp as "Activity_Date",
----to_CHAR(created_timestamp ,'DD-MM-YYYY HH24:MI:SS')as "Activity_Date", 
----cast(TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS')as TIMESTAMP)as "Activity_Date",
--case when  process_group = 'BOM_APPROVER' 
--     then 'APPROVER'
--     when  process_group = 'RCU_Correcter' 
--     then 'RCU CORRECTOR'
--     else process_group end as "user_role",
-- case when (process_group in ('DVU','RCU') and 
--             prc_grp_disp ='USERWAIT')
--      then ''
--      when (process_group = 'BOM_APPROVER' and 
--             prc_grp_disp ='USERWAIT')
--      then (select approver_id from tb_se_app_mapping tsam 
--                where se_id in ( select distinct ta.user_id from tb_aof_history ta
--                                 where  process_group ='RM_SE'
--                                 and TA.object_pri_key_1= TAH.object_pri_key_1))
--      when (process_group = 'RCU_Correcter' and 
--             prc_grp_disp ='USERWAIT')                                 
--       then (select RC.rcu_corrector_id from tb_emp_hrms teh , tb_branch_rcu_corrector_mapping RC 
--        where TEH.branch_code = RC.branch 
--        and TEH.employee_number in ( select distinct ta.user_id from tb_aof_history ta
--                                 where  process_group ='RM_SE'
--                                 and TA.object_pri_key_1= TAH.object_pri_key_1))
--      ELSE user_id end as "user_id",
-- (select CONCAT(TEH.first_name ,' ',TEH.middle_names ,' ',
--         TEH.last_name) as "user_name"
--       from tb_emp_hrms teh  
--       where teh.employee_number =tah.user_id),
--       (select PROCESS_NAME from tb_process_group_nomenclature1 NM 
--         where NM.prc_grp_disp = TAH.prc_grp_disp
--          and NM.process_group =TAH.process_group ) as "actoion_name",
----   prc_grp_disp as "actoion_name",
--       seq_id 
--from tb_aof_history tah 
--where object_pri_key_1 =X_OBJECT_PRI_KEY_1
--and process_group not in ('ENRICHMENT','SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNT','ACCOUNTCASA',
--                          'CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')
--union 
--select 
--dis.created_timestamp as "Activity_Date",
--      (select PROCESS_NAME from tb_process_group_nomenclature1 NM 
--         where NM.prc_grp_disp = DIS.prc_grp_disp
--          and NM.process_group =DIS.process_group ) as "user_role",
--'System' as "user_id",
--'System' as "user_name",
--       (select text_1 from tb_process_group_nomenclature1 NM 
--         where NM.prc_grp_disp = DIS.prc_grp_disp
--          and NM.process_group =DIS.process_group ) as "actoion_name",
--config_id 
--from tb_btc_prc_grp_disp_hist dis  
--where object_pri_key_1 =X_OBJECT_PRI_KEY_1
--and dis.process_group in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNT','ACCOUNTCASA',
--                          'CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')                        
--and dis.prc_grp_disp in ('WAIT','SUCCESS','FAILURE'))A
--order by cast(TO_CHAR("Activity_Date",'YYYY-MM-DD HH24:MI:SS')as TIMESTAMP) , seq_id)t;

	else 
	V_DATA = 'No Data Exist';
 END IF;

  IF V_DATA = ''
    THEN
     V_DATA := NULL;
  END IF;
 
 OPEN X_RESULT FOR

  SELECT
    V_DATA AS "OBJECT";
 RETURN X_RESULT;

/*
EXCEPTION WHEN OTHERS THEN

V_ERR:=SQLERRM;
OPEN ref FOR SELECT '' as "UNSUCCESSFUL",
'In-correct data. Some error has Occured' as "ERROR_REMARKS",
                         'tb_client_master' as "TABLENAME",
                '' as "ACTION";

return ref;                                    
*/
END;
 $function$
;

CREATE OR REPLACE FUNCTION public.get_aof_history_test(x_login_id character varying, x_object_pri_key_1 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ declare X_RESULT refcursor:='cur';
P_SYSTEM_ROLE varchar(30);
V_DATA text;
v_count int;
begin
	
select count(*) into v_count from tb_aof_history tah2 
 where object_pri_key_1 = X_OBJECT_PRI_KEY_1
and TO_CHAR(tah2.created_timestamp , 'DD-MM-YYYY') <'16-02-2022';

if v_count = 0 then 

select jsonb_agg(row_to_json(t)) into v_data from 
	(select to_CHAR(disp.created_timestamp ,'DD-MM-YYYY HH24:MI:SS')as "Activity_Date", 
		  cfg.prc_grp_disp_desc as "user_role",
		   coalesce(hrms.employee_number,'System') as "user_id",
		    coalesce(hrms.first_name || ' '|| hrms.last_name,'System') as "user_name",
		   disp.prc_grp_disp as "actoion_name",
		   disp.created_timestamp as "created_timestamp",
		   disp.config_id as "seq_id"
	from tb_btc_prc_grp_disp_hist disp join
		  (select process_group, min(created_timestamp) created_timestamp, prc_grp_disp
		  from tb_btc_prc_grp_disp_hist
		  where object_pri_key_1= X_OBJECT_PRI_KEY_1
		   group by process_group, prc_grp_disp) samp
	on (samp.process_group= disp.process_group and samp.created_timestamp = disp.created_timestamp)
	join tb_btc_prc_grp_disp_cfg cfg on cfg.process_group = disp.process_group 
	left join tb_emp_hrms hrms on upper(hrms.employee_number )= upper(disp.login_id)
	where disp.object_pri_key_1 = X_OBJECT_PRI_KEY_1
	and disp.process_group != 'ENRICHMENT'
	and disp.log_action = 'INSERT'
	group by disp.process_group, disp.object_pri_key_1, disp.prc_grp_disp, disp.config_id, 
	disp.created_timestamp, disp.start_timestamp, hrms.employee_number, hrms.first_name,hrms.last_name,cfg.prc_grp_disp_desc
	order by disp.created_timestamp, disp.config_id,cfg.prc_grp_disp_desc)t;

elsif V_COUNT >0 then 

select jsonb_agg(row_to_json(t)) into v_data from
(select * from  
(select --created_timestamp as "Activity_Date",
to_CHAR(created_timestamp ,'DD-MM-YYYY HH24:MI:SS')as "Activity_Date", 
case when  process_group = 'BOM_APPROVER' 
     then 'APPROVER'
     when  process_group = 'RCU_Correcter' 
     then 'RCU CORRECTOR'
     else process_group end as "user_role",
 case when (process_group in ('DVU','RCU') and 
             prc_grp_disp ='USERWAIT')
      then ''
      when (process_group = 'BOM_APPROVER' and 
             prc_grp_disp ='USERWAIT')
      then (select approver_id from tb_se_app_mapping tsam 
                where se_id in ( select distinct ta.user_id from tb_aof_history ta
                                 where  process_group ='RM_SE'
                                 and TA.object_pri_key_1= TAH.object_pri_key_1))
      when (process_group = 'RCU_Correcter' and 
             prc_grp_disp ='USERWAIT')                                 
       then (select RC.rcu_corrector_id from tb_emp_hrms teh , tb_branch_rcu_corrector_mapping RC 
        where TEH.branch_code = RC.branch 
        and TEH.employee_number in ( select distinct ta.user_id from tb_aof_history ta
                                 where  process_group ='RM_SE'
                                 and TA.object_pri_key_1= TAH.object_pri_key_1))
      ELSE user_id end as "user_id",
 (select CONCAT(TEH.first_name ,' ',TEH.middle_names ,' ',
         TEH.last_name) as "user_name"
       from tb_emp_hrms teh  
       where teh.employee_number =tah.user_id),
       (select PROCESS_NAME from tb_process_group_nomenclature1 NM 
         where NM.prc_grp_disp = TAH.prc_grp_disp
          and NM.process_group =TAH.process_group ) as "actoion_name",
--   prc_grp_disp as "actoion_name",
       seq_id 
from tb_aof_history tah 
where object_pri_key_1 =X_OBJECT_PRI_KEY_1
and process_group not in ('ENRICHMENT','SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNT','ACCOUNTCASA',
                          'CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')
union 
select 
--dis.created_timestamp as "Activity_Date",   
to_CHAR(dis.created_timestamp ,'DD-MM-YYYY HH24:MI:SS')as "Activity_Date", 
      (select PROCESS_NAME from tb_process_group_nomenclature1 NM 
         where NM.prc_grp_disp = DIS.prc_grp_disp
          and NM.process_group =DIS.process_group ) as "user_role",
'System' as "user_id",
'System' as "user_name",
       (select text_1 from tb_process_group_nomenclature1 NM 
         where NM.prc_grp_disp = DIS.prc_grp_disp
          and NM.process_group =DIS.process_group ) as "actoion_name",
--dis.prc_grp_disp as "actoion_name",
config_id 
from tb_btc_prc_grp_disp_hist dis  
where object_pri_key_1 =X_OBJECT_PRI_KEY_1
and dis.process_group in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNT','ACCOUNTCASA',
                          'CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')                        
and dis.prc_grp_disp in ('WAIT','SUCCESS','FAILURE'))A
order by "Activity_Date", seq_id )t;

	else 
	V_DATA = 'No Data Exist';
 END IF;

  IF V_DATA = ''
    THEN
     V_DATA := NULL;
  END IF;
 
 OPEN X_RESULT FOR

  SELECT
    V_DATA AS "OBJECT";
 RETURN X_RESULT;

/*
EXCEPTION WHEN OTHERS THEN

V_ERR:=SQLERRM;
OPEN ref FOR SELECT '' as "UNSUCCESSFUL",
'In-correct data. Some error has Occured' as "ERROR_REMARKS",
                         'tb_client_master' as "TABLENAME",
                '' as "ACTION";

return ref;                                    
*/
END;
 $function$
;

CREATE OR REPLACE FUNCTION public.get_aof_object(x_login_id character varying, x_process_id character varying, x_session_id character varying, x_modify_timestamp character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ declare X_RESULT refcursor:='cur';
P_SYSTEM_ROLE varchar(30);
X_ROLE VARCHAR(100);

begin
select
	role
into
	X_ROLE
from
	tb_user_mst tum 
where
	user_id = x_login_id;

open X_RESULT for
select
	obj.OBJECT_TYPE as "OBJECT_TYPE",
	obj.OBJECT_PRI_KEY_1 as "OBJECT_PRI_KEY_1",
	obj.OBJECT_PRI_KEY_2 as "OBJECT_PRI_KEY_2",
	obj.OBJECT_PRI_KEY_3 as "OBJECT_PRI_KEY_3",
	cast(obj.OBJECT_DATA as varchar) as "OBJECT_DATA",
	server_version_number as "VERSION_NO",
	0 as "MODIFICATION_NO",
	LOGIN_ID as "LOGIN_ID",
	TEXT_1 as "TEXT_1",
	TEXT_2 as "TEXT_2",
	TEXT_3 as "TEXT_3",
	TEXT_4 as "TEXT_4",
	TEXT_5 as "TEXT_5",
	TEXT_6 as "TEXT_6",
	TEXT_7 as "TEXT_7",
	TEXT_8 as "TEXT_8",
	TEXT_9 as "TEXT_9",
	TEXT_10 as "TEXT_10",
	IS_ACTIVE as "IS_ACTIVE",
	'Y' as status,
	LAST_PW_SESSION_ID as "PW_SESSION_ID", 
	TO_CHAR(obj.DEVICE_CREATE_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS') as "DEVICE_CREATE_TIMESTAMP",
	TO_CHAR(obj.DEVICE_MODIFY_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS') as "DEVICE_MODIFY_TIMESTAMP",
	'Y' as "REC_SYNC_STATUS",
	TO_CHAR(obj.MODIFIED_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS') as "REC_SYNC_TIMESTAMP",
	'' as "LEAD_ERROR"
	FROM TB_COP_BUSS_OBJ_TXN obj 
      JOIN tb_btc_accesscontrol ac on obj.OBJECT_PRI_KEY_1 = ac.object_pri_key_1 
       WHERE --obj.LOGIN_ID=X_LOGIN_ID
         ac.emp_id = X_LOGIN_ID
           and ac.system_role ='RM'
      AND obj.IS_ACTIVE='Y'  
      and ac.ACCESS_TYPE  IN ('R','W');

return X_RESULT;


end;

$function$
;

CREATE OR REPLACE FUNCTION public.get_approver(x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_object_type character varying, x_system_role character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT refcursor:='cur';
v_state   TEXT;
v_msg     TEXT;
v_detail  TEXT;
v_hint    TEXT;
v_context TEXT;
v_PW_SESSION_ID VARCHAR(500);
--v_system_role varchar2(50);
V_supervisor_emp_no VARCHAR(30);
begin

select supervisor_emp_no INTO V_supervisor_emp_no from tb_emp_hrms teh 
   where employee_number in (select login_id from tb_cop_buss_obj_txn tcbot where object_pri_key_1 =x_object_pri_key_1);
  
       
OPEN X_RESULT FOR

  SELECT
    V_supervisor_emp_no AS "v_assign_to_employe_code",
	 '' AS "v_assign_to_location" , 
	 '' AS "v_assign_to_access_group" ;
 RETURN X_RESULT;

/*
EXCEPTION WHEN OTHERS THEN

V_ERR:=SQLERRM;
OPEN ref FOR SELECT '' as "UNSUCCESSFUL",
'In-correct data. Some error has Occured' as "ERROR_REMARKS",
                         'tb_client_master' as "TABLENAME",
                '' as "ACTION";

return ref;                                    
*/
END;
 $function$
;

CREATE OR REPLACE FUNCTION public.get_consent_data(x_object_pri_key_1 character varying, x_vid character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
DECLARE
X_RESULT refcursor:= 'cur';
V_COUNT INT;
x_count INT;
V_ERR            VARCHAR(4000);
V_SYSTIME_VAR  timestamp;
V_VT_ID VARCHAR(50);
v_time timestamp;
begin

	select count(1) into x_count from tb_btc_prc_grp_disp prc
	join tb_cop_buss_obj_txn txn on txn.object_pri_key_1 = prc.object_pri_key_1 
	 where coalesce(trim(txn.object_pri_key_1),'NA') =coalesce(trim(x_object_pri_key_1),'NA');
	
	select count(1) into V_COUNT from tb_consent_data tcd 
  	 --join public.tb_btc_prc_grp_disp prc on prc.object_pri_key_1 =  tcd.object_pri_key_1 
	 where  coalesce(trim(tcd.object_pri_key_1), 'NA') = coalesce(trim(x_object_pri_key_1), 'NA') ;
	  --AND coalesce(trim(tcd.object_pri_key_3), 'NA') = coalesce(trim(x_vid), 'NA') ;

 SELECT to_timestamp( TRUNC( CAST( request_sent_timestamp AS bigint ) / 1000 ) )+ interval '10 minute' into v_time
   from tb_consent_data
   where  object_pri_key_1 =x_object_pri_key_1;
	
 if (V_COUNT >0 AND (x_vid IS NOT NULL OR x_vid!=''))then 

 select object_pri_key_3 into V_VT_ID from tb_consent_data tcd 
  where object_pri_key_3 =x_vid;
 
 if (v_time > now() and V_VT_ID = x_vid) then 
  
  OPEN X_RESULT FOR 
        SELECT object_type as "OBJECT_TYPE", 
        object_pri_key_1 as "OBJECT_PRI_KEY_1", 
        object_pri_key_2 as "OBJECT_PRI_KEY_2", 
        object_pri_key_3 as "OBJECT_PRI_KEY_3", 
        consent_type     as "CONSENT_TYPE", 
        consent_sub_type as "CONSENT_SUB_TYPE", 
        request_sent_timestamp as "REQUEST_SENT_TIMESTAMP", 
        request_expiry_timestamp as "REQUEST_EXPIRY_TIMESTAMP", 
        request_url  as "REQUEST_URL", 
        request_sent_to_mobile_no as "REQUEST_SENT_TO_MOBILE_NO", 
        requert_sent_to_email as "REQUERT_SENT_TO_EMAIL", 
        request_status as "REQUEST_STATUS", 
        status_source as "STATUS_SOURCE", 
        status_update_timestamp as "STATUS_UPDATE_TIMESTAMP", 
        status_update_lat as "STATUS_UPDATE_LAT", 
        status_update_long as "STATUS_UPDATE_LONG", 
        status_update_address as "STATUS_UPDATE_ADDRESS", 
        final_status as "FINAL_STATUS", 
        final_status_change_allowed as "FINAL_STATUS_CHANGE_ALLOWED"
         FROM public.tb_consent_data
          WHERE object_pri_key_1=x_object_pri_key_1;
 return X_RESULT; 
 else open X_RESULT for 
  SELECT '' as "OBJECT_TYPE", 
        '' as "OBJECT_PRI_KEY_1", 
        '' as "OBJECT_PRI_KEY_2", 
        '' as "OBJECT_PRI_KEY_3", 
        '' as "CONSENT_TYPE", 
        '' as "CONSENT_SUB_TYPE", 
        '' as "REQUEST_SENT_TIMESTAMP", 
        '' as "REQUEST_EXPIRY_TIMESTAMP", 
        '' as "REQUEST_URL", 
        '' as "REQUEST_SENT_TO_MOBILE_NO", 
        '' as "REQUERT_SENT_TO_EMAIL", 
 'EXPIRED' as "REQUEST_STATUS", 
        '' as "STATUS_SOURCE", 
        '' as "STATUS_UPDATE_TIMESTAMP", 
        '' as "STATUS_UPDATE_LAT", 
        '' as "STATUS_UPDATE_LONG", 
        '' as "STATUS_UPDATE_ADDRESS", 
        '' as "FINAL_STATUS", 
        '' as "FINAL_STATUS_CHANGE_ALLOWED";
       --select 'NO DATA EXIST' as "Response_message";
 return X_RESULT; 
END IF;
else open X_RESULT for 
  SELECT '' as "OBJECT_TYPE", 
        '' as "OBJECT_PRI_KEY_1", 
        '' as "OBJECT_PRI_KEY_2", 
        '' as "OBJECT_PRI_KEY_3", 
        ''     as "CONSENT_TYPE", 
        '' as "CONSENT_SUB_TYPE", 
        '' as "REQUEST_SENT_TIMESTAMP", 
        '' as "REQUEST_EXPIRY_TIMESTAMP", 
        ''  as "REQUEST_URL", 
        '' as "REQUEST_SENT_TO_MOBILE_NO", 
        '' as "REQUERT_SENT_TO_EMAIL", 
        '' as "REQUEST_STATUS", 
        '' as "STATUS_SOURCE", 
        '' as "STATUS_UPDATE_TIMESTAMP", 
        '' as "STATUS_UPDATE_LAT", 
        '' as "STATUS_UPDATE_LONG", 
        '' as "STATUS_UPDATE_ADDRESS", 
        '' as "FINAL_STATUS", 
        '' as "FINAL_STATUS_CHANGE_ALLOWED";
       --select 'NO DATA EXIST' as "Response_message";
 return X_RESULT; 
 
end if;
/*
   EXCEPTION
   WHEN NO_DATA_FOUND THEN 
    OPEN X_RESULT FOR 
        SELECT 'FAILURE' as "ISSUCCESSFUL",
                          '' as "ERROR_REMARKS",
                          X_OBJECT_PRI_KEY_1 as "PRIMARY_KEY_VALUE",
                          TO_CHAR(V_SYSTIME_VAR,'YYYY-MM-DD hh24:mi:SS') as "LAST_SYNC_TIMESTAMP",
                          'tb_consent_data' as "TABLENAME",
                  		  '' as "ACTION";
                        
  WHEN OTHERS THEN 
                OPEN X_RESULT FOR 
        SELECT 'FAILURE' as "ISSUCCESSFUL",
                          '' as "ERROR_REMARKS",
                          X_OBJECT_PRI_KEY_1 as "PRIMARY_KEY_VALUE",
                          TO_CHAR(V_SYSTIME_VAR,'YYYY-MM-DD hh24:mi:SS') as "LAST_SYNC_TIMESTAMP",
                          'tb_consent_data' as "TABLENAME",
                  		  '' as "ACTION";
                       return X_RESULT; 
      */
END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_cpv_data(x_object_pri_key_1 character varying, assigned_id character varying, x_login_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
 x_result REFCURSOR := 'cur';
 v_count INTEGER;
begin
	 		select count(1) into v_count from tb_cop_buss_obj_txn tb
	           where tb.object_pri_key_1  = x_object_pri_key_1;
	               
if         v_count > 0 then 
						
										
   		insert into tb_btc_accesscontrol (workflow_group_id,object_pri_key_1,object_pri_key_2,object_pri_key_3,object_type,"location",system_role,
emp_id,
access_type,
access_group,
update_login_id,
emp_hierarchy_id,
config_id,
created_by,
created_timestamp,
modified_by) 		

values
('CADIY',
x_object_pri_key_1,
'',
'',
'AOF',
'',
'CPV',
assigned_id,
'W',
'',
x_login_id,
'',
'012',
'get_cpv_data',
current_timestamp,
'get_cpv_data'
);

update tb_cop_metadata_txn set workflow_status ='CPVASSIGNED',is_active ='Y'
where object_pri_key_1 =x_object_pri_key_1;

perform public.sp_btc_prc_grp_disp('CADIY',x_object_pri_key_1,'','',null,null,null,null,'AOF','MBCPV','ASSIGN','NA',null,'9999999998',null,null,null,null,null,null,null);

 
 												open x_result for select json_build_object('status','success',	
	                                                           'message','Data successfully updated',
	                                                           'data','[]'::json)::text as "object";
	                                                          return x_result;

						
else
 									 open x_result for select json_build_object('status','failure',	
	                                                           'message','Please enter valid lead id',
	                                                           'data','[]'::json)::text as "object";
	                                                          return x_result; 
return x_result;
 
end if;

exception when others then 
	open x_result  for 
                                         select json_build_object('status','failure',
                                                      'message','some error occurred',
                                                     'data','[]'::json)::text as "object";

END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_emp_code_name_ru(x_object_pri_key_1 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare
x_count integer;
x_result refcursor := 'cur';
v_rm_code varchar(30);
v_rm_name varchar(30);
v_bom_code varchar(30);
v_bom_name varchar(30);
v_dvu_code varchar(30);
v_dvu_name varchar(30);
v_rcu_code varchar(30);
v_rcu_name varchar(30);
v_ru_code varchar(30);
v_ru_name varchar(30);
v_rm_mobile varchar(30);
begin
--	select count(1) into x_count from tb_btc_prc_grp_disp t where t.process_group ='RU' 
--and t.prc_grp_disp ='RU_SUBMITTED'
--and object_pri_key_1 =x_object_pri_key_1;
--
--	if x_count > 0 then 
select a.login_id,b.first_name ||' ' || b.last_name,b.mobile_number into v_rm_code,v_rm_name,v_rm_mobile
	from tb_btc_prc_grp_disp a join tb_emp_hrms b
on a.login_id = b.employee_number
--and a.process_group = 'RM_SE' and a.prc_grp_disp in ('SUBMITTED','APPROVEDQUERY','DVUAPPROVEDQUERY')
and a.process_group = 'RM_SE'
where object_pri_key_1 =x_object_pri_key_1;

if v_rm_code is NULL
THEN
select a.login_id into v_rm_code from tb_btc_prc_grp_disp a
where a.process_group = 'RM_SE' and a.object_pri_key_1 =x_object_pri_key_1;
END IF;

select a.login_id,b.first_name ||' ' || b.last_name into v_bom_code,v_bom_name
	from tb_btc_prc_grp_disp a join tb_emp_hrms b
on a.login_id = b.employee_number
--and a.process_group = 'BOM_APPROVER' and a.prc_grp_disp in ('APPROVE','DVU_APPROVED')
and a.process_group = 'BOM_APPROVER'
where object_pri_key_1 =x_object_pri_key_1;

if v_bom_code is NULL
THEN
select a.login_id into v_bom_code from tb_btc_prc_grp_disp a
where a.process_group = 'BOM_APPROVER' and a.object_pri_key_1 =x_object_pri_key_1;
END IF;


select a.login_id,b.first_name ||' ' || b.last_name into v_dvu_code,v_dvu_name
	from tb_btc_prc_grp_disp a join tb_emp_hrms b
on a.login_id = b.employee_number
--and a.process_group = 'DVU' and a.prc_grp_disp ='APPROVE'
and a.process_group = 'DVU'
where object_pri_key_1 =x_object_pri_key_1;

if v_dvu_code is NULL
THEN
select a.login_id into v_dvu_code from tb_btc_prc_grp_disp a
where a.process_group = 'DVU' and a.object_pri_key_1 =x_object_pri_key_1;
END IF;

select a.login_id,b.first_name ||' ' || b.last_name into v_rcu_code,v_rcu_name
	from tb_btc_prc_grp_disp a join tb_emp_hrms b
on a.login_id = b.employee_number
--and a.process_group = 'RCU' and a.prc_grp_disp ='APPROVE'
and a.process_group = 'RCU'
where object_pri_key_1 =x_object_pri_key_1;

if v_rcu_code is NULL
THEN
select a.login_id into v_rcu_code from tb_btc_prc_grp_disp a
where a.process_group = 'RCU' and a.object_pri_key_1 =x_object_pri_key_1;
END IF;

select a.login_id,b.first_name ||' ' || b.last_name into v_ru_code,v_ru_name
	from tb_btc_prc_grp_disp a join tb_emp_hrms b
on a.login_id = b.employee_number
--and a.process_group = 'RU' and a.prc_grp_disp ='RU_SUBMITTED'
and a.process_group = 'RU'
where object_pri_key_1 =x_object_pri_key_1;

if v_ru_code is NULL
THEN
select a.login_id into v_ru_code from tb_btc_prc_grp_disp a
where a.process_group = 'RU' and a.object_pri_key_1 =x_object_pri_key_1;
END IF;

open x_result for select v_rm_code as "emp_code_rm",v_rm_mobile as "emp_mobile_rm",
v_rm_name as "emp_name_rm",v_bom_code as "emp_code_approver",v_bom_name as "emp_name_approver",
v_dvu_code as "emp_code_dvu",v_dvu_name as "emp_name_dvu",v_rcu_code as "emp_code_rcu",
v_rcu_name as "emp_name_rcu",v_ru_code as "emp_code_ru",v_ru_name as "emp_name_ru";
--as final_msg;
return x_result;

--	else 
--	open x_result for select 'No data exist' as res_msg;
return x_result;
--end if;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.get_img_details(x_doc_id character varying, x_object_pri_key_1 character varying, x_bundle_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare 
X_RESULT refcursor ='cur';
v_id text;
begin open x_result for 
	select distinct id from dms.media_data_object where object_pri_key_1 = x_object_pri_key_1
	and doc_bundle_id = x_bundle_id and doc_id = x_doc_id;

return x_result;
exception when others then 
open x_result for select 'failure' as res_msg;
return x_result;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.get_lob_code(x_login_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
RESULT refcursor;
v_lob text;
begin
	select lob_code  into v_lob from tb_emp_hrms where employee_number = x_login_id;
		
if (v_lob is not null or v_lob != '') then 
open result for select v_lob;
return result;

else
open result for select 'No lob found for the entered user';
return result;
	
end if;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.get_pincode_data(x_pin_code character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare
num_rows INT;
V_ERR            VARCHAR(4000);
V_SYSTIME_VAR  timestamp;
i integer;
V_COUNT int;
ref refcursor:='cur';
begin
 SELECT COUNT(1) INTO  V_COUNT  
   FROM tb_pincode_city_master  
   WHERE trim(pin_code)=trim(x_pin_code);
      
IF V_COUNT > 0 THEN
	
	 OPEN ref for 
	 select pin.city_name AS "city_name",
	       pin.state_name AS "state_name" ,
	     pin.country_name as "country_name" ,
	     (select fin_city_code from tb_fin_city_mapping tfcm 
	       where upper(fin_city_desc) = upper(pin.city_name) limit 1) as "city_code",
	       (select fin_state_code from tb_fin_state_mapping tfsm 
	       where upper(fin_state_desc) = upper(pin.state_name) limit 1) as "state_code",
	             'I'  as "response_type" 
	             from tb_pincode_city_master pin
       where coalesce(trim(pin.pin_code),'NA')= coalesce(trim(x_pin_code),'NA');


      ELSE
               OPEN ref for   SELECT '' AS "CITY",'' AS "STATE",
                         '0000012313' AS "response_code", 
                         '{"PROCEED_LABEL":"","STAYBACK_LABEL":"","RESPONSE_MESSAGE":"Please enter valid Pincode "}' as "response_message",
                         'E' "response_type";         


 end if;
return ref;
 END;$function$
;

CREATE OR REPLACE FUNCTION public.get_pincode_data_java(x_pin_code character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare
num_rows INT;
V_ERR            VARCHAR(4000);
V_SYSTIME_VAR  timestamp;
i integer;
V_COUNT int;
ref refcursor:='cur';
begin
 SELECT COUNT(1) INTO  V_COUNT  
   FROM tb_pincode_city_master  
   WHERE trim(pin_code)=trim(x_pin_code);
      
IF V_COUNT > 0 THEN
	
	 OPEN ref for 
	 select city_cd AS "city_cd",
	       state_cd AS "state_cd" ,
	     country_name as "country_name" ,
	             'I'  as "response_type" 
	             from tb_pincode_city_master
       where coalesce(trim(pin_code),'NA')= coalesce(trim(x_pin_code),'NA');


      ELSE
               OPEN ref for   SELECT '' AS "CITY",'' AS "STATE",
                         '0000012313' AS "response_code", 
                         '{"PROCEED_LABEL":"","STAYBACK_LABEL":"","RESPONSE_MESSAGE":"Please enter valid Pincode "}' as "response_message",
                         'E' "response_type";         


 end if;
return ref;
 END;$function$
;

CREATE OR REPLACE FUNCTION public.get_preffered_account_creation_leads(x_proces_grp character varying, x_prc_grp_disp character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare
x_result refcursor:= 'cur';

begin
 OPEN x_result FOR SELECT distinct(object_pri_key_1) 
                  from tb_btc_prc_grp_disp 
                    where process_group=x_proces_grp 
                   and prc_grp_disp = x_prc_grp_disp and process_iteration_count < 5;
 return x_result;
 END;$function$
;

CREATE OR REPLACE FUNCTION public.get_processed_leads(x_proces_grp character varying, x_prc_grp_disp character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare
x_result refcursor:= 'cur';

begin
 OPEN x_result FOR SELECT distinct(object_pri_key_1) 
                  from tb_btc_prc_grp_disp 
                    where process_group=x_proces_grp 
                   and prc_grp_disp = x_prc_grp_disp;
 return x_result;
 END;$function$
;

CREATE OR REPLACE FUNCTION public.get_processed_leads_filenet(x_proces_grp character varying, x_prc_grp_disp character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare
x_result refcursor:= 'cur';

begin
 OPEN x_result FOR SELECT distinct(object_pri_key_1) 
                  from tb_btc_prc_grp_disp 
                    where process_group=x_proces_grp 
                   and prc_grp_disp = x_prc_grp_disp limit 3;
 return x_result;
 END;$function$
;

CREATE OR REPLACE FUNCTION public.get_processed_some_leads_filenet(x_object_pri_key_1 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare
x_result refcursor:= 'cur';
v_count int;
NUM_ROWS INT;
V_RESULT TEXT;

begin

select count(*) into v_count from  tb_btc_prc_grp_disp tbpgd  
where process_group = 'FILENET' and prc_grp_disp = 'WAIT'
AND object_pri_key_1 =x_object_pri_key_1;

 if v_count >0 then 
 
update tb_btc_prc_grp_disp set prc_grp_disp = 'SUCCESS'  
where process_group LIKE 'FILENET' and prc_grp_disp = 'WAIT' 
and object_pri_key_1 = x_object_pri_key_1;
  
 
 GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'FILENET STATUS SUCCESS FOR:  '||x_object_pri_key_1;
	ELSE 
         V_RESULT = 'FILENET STATUS FAILED FOR:  '||x_object_pri_key_1;
	END IF;
 end if ;    
 
OPEN X_RESULT FOR
SELECT   V_RESULT as "STATUS";

RETURN X_RESULT; 

 END;$function$
;

CREATE OR REPLACE FUNCTION public.get_section_status_for_user(x_login_id character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_object_type character varying, x_role character varying, x_section_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare X_RESULT refcursor:='cur';
P_SYSTEM_ROLE varchar(30);
--X_ROLE VARCHAR(100);
P_STRING text;
v_count int;
V_ROLE VARCHAR(100);
V_JOURNEY_TYPE varchar(30);
begin

select object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' into V_JOURNEY_TYPE 
 from tb_cop_buss_obj_txn tcbot 
 where object_pri_key_1 =x_object_pri_key_1;

select distinct FUN.default_system_role_code into V_ROLE from tb_emp_hrms teh
join tb_function_roles_mst FUN on FUN.role_name = TEH."role" 
 where employee_number = x_role; 

select count(*) into v_count 
 from tb_section_status
 where object_pri_key_1 =x_object_pri_key_1
 and object_type        = x_object_type
 and UPPER("role")      = UPPER(x_role)
and screen_name !='';

  if V_ROLE != 'RCU Corrector' and (x_section_id is null or x_section_id = '') 
  and V_JOURNEY_TYPE = 'IN'
  then 

   select jsonb_agg(row_to_json(T)) INTO P_STRING FROM (
      select object_pri_key_1 as "OBJECT_PRI_KEY_1",
       object_pri_key_2 "OBJECT_PRI_KEY_2",
       object_pri_key_3 "OBJECT_PRI_KEY_3",
       status "STATUS",
       status_remarks "REMARKS",
       OBJECT_DATA as "OBJECT_DATA",
       SCREEN_NAME as "SCREEN_NAME",
       '10' as "TOTAL_COUNT",
       v_count as "count"
       from tb_section_status
		 where object_pri_key_1 =x_object_pri_key_1
		 and object_type        = x_object_type
		 and UPPER("role")      = UPPER(x_role)
		 and screen_name !=''
	-- and  section_id        = x_section_id
		)T;
	
elsif (x_section_id is not null or x_section_id!='') 
 and V_JOURNEY_TYPE = 'IN' and V_ROLE != 'RCU Corrector'then

	select count(*) into v_count 
	 from tb_section_status
	 where object_pri_key_1 =x_object_pri_key_1
	 and object_type        = x_object_type
	 and UPPER("role")      = UPPER(x_role)
	 and  section_id        = x_section_id
	 and screen_name !='';
-- and status='Y';

select jsonb_agg(row_to_json(T)) INTO P_STRING FROM (
  select object_pri_key_1 as "OBJECT_PRI_KEY_1",
       object_pri_key_2 "OBJECT_PRI_KEY_2",
       object_pri_key_3 "OBJECT_PRI_KEY_3",
       status "STATUS",
       status_remarks "REMARKS" ,
       OBJECT_DATA as "OBJECT_DATA",
      '10' as "TOTAL_COUNT",
       v_count as "count"
       from tb_section_status
		 where object_pri_key_1 =x_object_pri_key_1
		 and object_type        = x_object_type
		 and UPPER("role")      = UPPER(x_role)
		 and  section_id        = x_section_id
		 and screen_name !=''
		--and status = 'Y'
		)t;

ELSIf (x_section_id is null or x_section_id = '')
   and V_JOURNEY_TYPE = 'SP' and V_ROLE != 'RCU Corrector'then 

 select jsonb_agg(row_to_json(T)) INTO P_STRING FROM (
   select object_pri_key_1 as "OBJECT_PRI_KEY_1",
       object_pri_key_2 "OBJECT_PRI_KEY_2",
       object_pri_key_3 "OBJECT_PRI_KEY_3",
       status "STATUS",
       status_remarks "REMARKS",
       OBJECT_DATA as "OBJECT_DATA",
       SCREEN_NAME as "SCREEN_NAME",
       '13' as "TOTAL_COUNT",
       v_count as "count"
       from tb_section_status
		 where object_pri_key_1 =x_object_pri_key_1
		 and coalesce(object_pri_key_2,'NA')   = COALESCE(X_OBJECT_PRI_KEY_2,'NA')
		 and coalesce(object_pri_key_3,'NA')   = COALESCE(X_OBJECT_PRI_KEY_3,'NA')
		 and object_type        = x_object_type
		 and UPPER("role")      = UPPER(x_role)
		 and screen_name !=''
		-- and  section_id        = x_section_id
		)T;

elsif (x_section_id is not null or x_section_id!='') 
 and V_JOURNEY_TYPE = 'SP' and V_ROLE != 'RCU Corrector'then

select count(*) into v_count 
 from tb_section_status
 where object_pri_key_1 =x_object_pri_key_1
 and object_type        = x_object_type
 and UPPER("role")      = UPPER(x_role)
  and  section_id        = x_section_id
 and screen_name !='';
-- and status='Y';

SELECT
     jsonb_agg(row_to_json(T)) INTO P_STRING FROM (
select object_pri_key_1 as "OBJECT_PRI_KEY_1",
       object_pri_key_2 "OBJECT_PRI_KEY_2",
       object_pri_key_3 "OBJECT_PRI_KEY_3",
       status "STATUS",
       status_remarks "REMARKS" ,
       OBJECT_DATA as "OBJECT_DATA",
      '13' as "TOTAL_COUNT",
       v_count as "count"
       from tb_section_status
 where object_pri_key_1 =x_object_pri_key_1
 and object_type        = x_object_type
 and UPPER("role")      = UPPER(x_role)
 and  section_id        = x_section_id
 and screen_name !=''
--and status = 'Y'
)t;

elsif  V_ROLE = 'RCU Corrector' --and V_COUNT != 0 
 and (x_section_id is not null or x_section_id!='')  then
 
 select jsonb_agg(row_to_json(T)) INTO P_STRING FROM (
   select TSS.object_pri_key_1 as "OBJECT_PRI_KEY_1",
       TSS.object_pri_key_2 "OBJECT_PRI_KEY_2",
       TSS.object_pri_key_3 "OBJECT_PRI_KEY_3",
       TSS.status "STATUS",
       TSS.status_remarks "REMARKS" ,
       TSS.OBJECT_DATA as "OBJECT_DATA"
       from tb_section_status tss
		 where object_pri_key_1 =x_object_pri_key_1
		 and object_type        = x_object_type
		-- and UPPER("role")      = UPPER(x_role)
		 and  section_id        = x_section_id
		and role in (select TEH.employee_number  from tb_emp_hrms teh 
		       join tb_function_roles_mst FUN on fun.role_name = teh."role" 
		         where FUN.default_system_role_code = 'RCU')
		--             and teh."role" ='RCU')
		)t;

elsif  V_ROLE = 'RCU Corrector' --and V_COUNT != 0 
and (x_section_id is  null or x_section_id='')  then

 select jsonb_agg(row_to_json(T)) INTO P_STRING FROM (
    select TSS.object_pri_key_1 as "OBJECT_PRI_KEY_1",
       TSS.object_pri_key_2 "OBJECT_PRI_KEY_2",
       TSS.object_pri_key_3 "OBJECT_PRI_KEY_3",
       TSS.status "STATUS",
       TSS.status_remarks "REMARKS" ,
       TSS.OBJECT_DATA as "OBJECT_DATA"
       from tb_section_status tss
		 where object_pri_key_1 =x_object_pri_key_1
		 and object_type        = x_object_type
		-- and UPPER("role")      = UPPER(x_role)
		-- and  section_id        = x_section_id
		and role in (select TEH.employee_number  from tb_emp_hrms teh 
		       join tb_function_roles_mst FUN on fun.role_name = teh."role" 
		         where FUN.default_system_role_code = 'RCU')
		--             and teh."role" ='RCU')
		)t;

end if;
--raise NOTICE'2 %',P_STRING;
  IF P_STRING = ''
    THEN

      P_STRING := '';
  END IF;

open X_RESULT for
select
	P_STRING as "OBJECT";

return X_RESULT;

/*
EXCEPTION WHEN OTHERS THEN

V_ERR:=SQLERRM;
OPEN ref FOR SELECT '' as "UNSUCCESSFUL",
'In-correct data. Some error has Occured' as "ERROR_REMARKS",
                         'tb_client_master' as "TABLENAME",
                '' as "ACTION";

return ref;                                    
*/
END;
 $function$
;

CREATE OR REPLACE FUNCTION public.get_user_session_object(p_login_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
DECLARE
x_last_login  VARCHAR(100);
x_user_name  VARCHAR(100);
x_user_role  VARCHAR(150);
x_system_defined_role   VARCHAR(50);
v_err  VARCHAR(500);
x_count int;
x_mdm_access_count int;
x_is_mdm_access varchar(1);
x_lead_mis_access varchar(1);
x_reports_access_count int;
x_is_reports_access varchar(1);
x_mdv_access_count int;
x_is_mdv_access varchar(1);
x_mis_access_count int;
x_is_mis_access varchar(1);
x_skill_map_access_count int;
x_skill_map_access varchar(1);
x_mitc_access_count int;
x_mitc_access varchar(1);
x_create_lead_access_count int;
x_create_lead_access varchar(1);
x_last_modification_timestamp varchar(20);
x_search_lead_access varchar(20);
x_search_lead_access_count int;
x_retag_access varchar(20);
x_retag_access_count int;
x_lead_access_count int;
x_lead_mis_count int;
x_lead_dedupe_count int;
x_lead_dedupe_access varchar(1);
x_crn_access varchar(1);
x_crn_access_count int;
x_rcu_report_access varchar(1);
x_rcu_report_count int;
p_count int;
x_prc_grp varchar(100);
ref refcursor;
x_login_status  varchar(100);

begin
	
	if p_login_id in ('FO1','FO2','FO3','FO4','FO5')  then 
	
	SELECT   count(*)
            INTO  p_count  FROM trl_emp_hrms WHERE EMPLOYEE_NUMBER = p_login_id;
           
           if p_count > 0 then 
            
	
   SELECT   concat(FIRST_NAME, ' ', MIDDLE_NAMES, ' ', LAST_NAME),role,prc_grp,login_status
            INTO  x_user_name,x_user_role,x_prc_grp,x_login_status
           FROM trl_emp_hrms WHERE EMPLOYEE_NUMBER = p_login_id;

  open REF for
    select x_user_name as user_name,  x_user_role as system_role,'true' as STATUS,x_prc_grp,x_login_status ;
RETURN REF;
else
open REF for SELECT  'false' as STATUS;
RETURN REF;
end if;
else
open REF for
    select 'N' as "STATUS";

   RETURN REF;
end if;



END;$function$
;

CREATE OR REPLACE FUNCTION public.post_account_mis_activation_report(x_filter_applied character varying, x_param character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
p_msg REFCURSOR := 'cur';
v_from_date text;
v_to_date text;
v_account_active_date varchar(100);
v_constitution_type text;
"object" text;
v_msg text;
begin 
	if x_filter_applied <> 'N' then 
	select    json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_FROM_DATE',
	   json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_TO_DATE' ,
	   json_array_elements(cast(x_param as json)) ->> 'Account_opening_date',
	   json_array_elements(cast(x_param as json)) ->> 'CONSTITUTION'
	into v_from_date,v_to_date,v_account_active_date,v_constitution_type;
--insert into temp_vdxx values (x_filter_applied,v_from_date,v_to_date,v_account_active_date,'checkkkddkdkdwith N');
end if;

	if x_filter_applied = 'N' then 
v_from_date :='';
v_to_date :='';
v_account_active_date :='';
v_constitution_type :='';
select json_agg(row_to_json(t)) into "object" from (select a.lead_id as "Lead_id",
a.id_name_add as "Customer_name", 
a.entity_name as "Entity_Name",
a.crn_entity as "CRN_ENTITY",
a.aus_crn as "AUS_IND_CRN",
a.account_no as "Account_Number",
(select TO_CHAR(end_timestamp,'DD-MM-YYYY') from tb_btc_prc_grp_disp tbpgd 
          where tbpgd.object_pri_key_1 =t.object_pri_key_1 
           and process_group ='ACCOUNT'and prc_grp_disp ='SUCCESS') as "Account_opening_date",
object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE' as "CRN_MANDATE",
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'SIGNATURE') as "Signature",
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'FATCA Handoff') as "FATCA_HANDOFF",
((select case when (a.constitution_type = 'Sole Properitor' or a.constitution_type = 'SP') and av.process_group='GSTIN'
then av.prc_grp_disp else 'NA' END
from tb_btc_prc_grp_disp av join tb_cop_metadata_txn tcmt
on av.object_pri_key_1 = t.object_pri_key_1 and av.object_pri_key_1 = tcmt.object_pri_key_1
and av.process_group='GSTIN')
union 
(select 'NA' from tb_cop_metadata_txn tcmt where a.lead_id like '%IN%')) as "GSTIN",
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'CERSAI') as "CERSAI",
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'FILENET') as "FILENET",
((select case when tcmt.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE' <> '' and (a.constitution_type = 'Sole Properitor' or a.constitution_type = 'SP')
then av.prc_grp_disp else 'NA' end from tb_btc_prc_grp_disp av,tb_cop_metadata_txn tcmt 
where av.object_pri_key_1 = t.object_pri_key_1 and av.object_pri_key_1 = tcmt.object_pri_key_1 and av.process_group  = 'CIFMAN')
union 
(select 'NA' from tb_cop_metadata_txn tcmt where a.lead_id like '%IN%')) as "Mandate_Addition_API"
from tb_cop_metadata_txn a, tb_btc_prc_grp_disp t
where a.object_pri_key_1 = t.object_pri_key_1 and t.process_group='ACCOUNT' and t.prc_grp_disp='SUCCESS'-- and a.is_active ='Y'
group by a.caseid,a.lead_id,a.entity_name ,a.crn,a.aus_crn ,a.crn_entity,a.account_no,t.prc_grp_disp,t.object_pri_key_1,a.constitution_type,
a.object_data::JSON->'AOF'->'CA'->'CPV1'->>'DATE',a.device_create_timestamp,
a.id_name_add,t.process_group,
a.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE',t.created_timestamp) t;
open p_msg for select "object";
return p_msg;
	elsif x_filter_applied <> 'N' then  
	
--insert into temp_vdxx values (x_filter_applied,v_from_date,v_to_date,null,v_constitution_type);

select json_agg(row_to_json(t)) into "object" from ( select a.lead_id as "Lead_id",
a.id_name_add as "Customer_name", 
a.entity_name as "Entity_Name",
a.crn_entity as "CRN_ENTITY",
a.aus_crn as "AUS_IND_CRN",
a.account_no as "Account_Number",
(select TO_CHAR(end_timestamp,'DD-MM-YYYY') from tb_btc_prc_grp_disp tbpgd 
          where tbpgd.object_pri_key_1 =t.object_pri_key_1 
           and process_group ='ACCOUNT'and prc_grp_disp ='SUCCESS') as "Account_opening_date",
tcb.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE' as "CRN_MANDATE",
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'SIGNATURE') as "Signature",
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'FATCA Handoff') as "FATCA_HANDOFF",
((select case when (a.constitution_type = 'Sole Properitor' or a.constitution_type = 'SP') and av.process_group='GSTIN'
then av.prc_grp_disp else 'NA' END
from tb_btc_prc_grp_disp av join tb_cop_metadata_txn tcmt 
on av.object_pri_key_1 = t.object_pri_key_1 and av.object_pri_key_1 = tcmt.object_pri_key_1
and av.process_group='GSTIN'
join tb_cop_buss_obj_txn tcb on 
tcb.object_pri_key_1=av.object_pri_key_1 and t.object_pri_key_1=tcb.object_pri_key_1 and tcmt.object_pri_key_1=tcb.object_pri_key_1)
union 
(select 'NA' from tb_cop_metadata_txn tcmt where a.lead_id like '%IN%')) as "GSTIN",
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'CERSAI') as "CERSAI",
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'FILENET') as "FILENET",
((select coalesce ((select case when (tcb.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE' <> '' or tcb.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE' is not null) and (a.constitution_type = 'Sole Properitor' or a.constitution_type = 'SP')
then av.prc_grp_disp else 'NA' end from tb_btc_prc_grp_disp av,tb_cop_metadata_txn tcmt,tb_cop_buss_obj_txn tcb
where av.object_pri_key_1 = t.object_pri_key_1 and av.object_pri_key_1 = tcmt.object_pri_key_1 and av.process_group  = 'CIFMAN'
and av.object_pri_key_1=tcb.object_pri_key_1 and tcmt.object_pri_key_1=tcb.object_pri_key_1),'NA')
union 
(select 'NA' from tb_cop_metadata_txn tcmt where a.lead_id like '%IN%'))) as "Mandate_Addition_API"
from tb_cop_metadata_txn a, tb_btc_prc_grp_disp t, tb_cop_buss_obj_txn tcb
where a.object_pri_key_1 = t.object_pri_key_1 and t.process_group='ACCOUNT' and t.prc_grp_disp='SUCCESS'
and tcb.object_pri_key_1 =a.object_pri_key_1 and t.object_pri_key_1 =tcb.object_pri_key_1   -- and a.is_active ='Y'
--and case when v_account_active_date <> '' or v_account_active_date is not null or v_account_active_date !='' then 
--(select av.end_timestamp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = a.object_pri_key_1
--and av.process_group='ACCOUNT' and av.prc_grp_disp='SUCCESS') 
--and to_char(av.end_timestamp,'YYYY-MM-DD') = v_account_active_date)
--else null end  
and case when V_FROM_DATE <> '' and v_to_date <> ''     
          then cast(tcb.device_create_timestamp as date) between cast(V_FROM_DATE as date) and  cast(V_TO_DATE as date)
    when V_FROM_DATE ='' and V_TO_DATE <> ''
          then cast(TO_CHAR(tcb.device_create_timestamp ,'YYYY-MM-DD')as DATE) < cast(V_TO_DATE as DATE)
          when V_FROM_DATE <>'' and V_TO_DATE = ''
          then cast(TO_CHAR(tcb.device_create_timestamp ,'YYYY-MM-DD')as DATE) between cast(V_FROM_DATE as DATE)and CURRENT_DATE					    	
         else tcb.device_create_timestamp in (select device_create_timestamp from tb_cop_buss_obj_txn)
END

     and case when v_constitution_type = '' or v_constitution_type is null then a.constitution_type in (select distinct(constitution_type) from tb_cop_metadata_txn where constitution_type is not null and constitution_type <>'') 
else a.constitution_type = v_constitution_type
end

and case when v_account_active_date = '' or v_account_active_date is null then to_char(t.end_timestamp,'DD-MM-YYYY') in (select to_char(end_timestamp ,'DD-MM-YYYY') from tb_btc_prc_grp_disp where process_group ='ACCOUNT'and prc_grp_disp ='SUCCESS')
else to_char(t.end_timestamp,'YYYY-MM-DD') = v_account_active_date
end

group by a.caseid,a.lead_id,a.entity_name ,a.crn,a.aus_crn ,a.crn_entity,a.account_no,t.prc_grp_disp,t.object_pri_key_1,a.constitution_type,
a.object_data::JSON->'AOF'->'CA'->'CPV1'->>'DATE',tcb.device_create_timestamp,
a.id_name_add,t.process_group,
tcb.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE',t.created_timestamp) t;
	open p_msg for select "object";
return p_msg;
end if;

end;
$function$
;

CREATE OR REPLACE FUNCTION public.post_account_mis_activation_report_final(x_filter_applied character varying, x_param character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
p_msg REFCURSOR := 'cur';
v_from_date text;
v_to_date text;
v_account_active_date varchar(100);
v_constitution_type text;

begin 
	if x_filter_applied <> 'N' then 
	select    json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_FROM_DATE',
	   json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_TO_DATE' ,
	   json_array_elements(cast(x_param as json)) ->> 'Account_opening_date',
	   json_array_elements(cast(x_param as json)) ->> 'CONSTITUTION'
	into v_from_date,v_to_date,v_account_active_date,v_constitution_type;
--insert into temp_vdxx values (x_filter_applied,v_from_date,v_to_date,v_account_active_date,'checkkkddkdkdwith N');
end if;

	if x_filter_applied = 'N' then 
v_from_date :='';
v_to_date :='';
v_account_active_date :='';
v_constitution_type :='';
 open p_msg for select a.lead_id,
a.id_name_add as customer_name, 
a.entity_name,a.crn_entity,a.aus_crn ,a.account_no,
(select TO_CHAR(end_timestamp,'DD-MM-YYYY') from tb_btc_prc_grp_disp tbpgd 
          where tbpgd.object_pri_key_1 =t.object_pri_key_1 
           and process_group ='ACCOUNT'and prc_grp_disp ='SUCCESS') as account_opening_date,
object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE' as CRN_MANDATE,
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'SIGNATURE') as SIGNATURE,
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'FATCA Handoff') as FATCA_HANDOFF,
((select case when (a.constitution_type = 'Sole Properitor' or a.constitution_type = 'SP') and av.process_group='GSTIN'
then av.prc_grp_disp else 'NA' END
from tb_btc_prc_grp_disp av join tb_cop_metadata_txn tcmt 
on av.object_pri_key_1 = t.object_pri_key_1 and av.object_pri_key_1 = tcmt.object_pri_key_1
and av.process_group='GSTIN')
union 
(select 'NA' from tb_cop_metadata_txn tcmt where a.lead_id like '%IN%')) as GSTIN,
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'CERSAI') as CERSAI,
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'FILENET') as FILENET,
((select case when tcmt.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE' <> '' and (a.constitution_type = 'Sole Properitor' or a.constitution_type = 'SP')
then av.prc_grp_disp else 'NA' end from tb_btc_prc_grp_disp av,tb_cop_metadata_txn tcmt 
where av.object_pri_key_1 = t.object_pri_key_1 and av.object_pri_key_1 = tcmt.object_pri_key_1 and av.process_group  = 'CIFMAN')
union 
(select 'NA' from tb_cop_metadata_txn tcmt where a.lead_id like '%IN%')) as Mandate_Addition_API
from tb_cop_metadata_txn a, tb_btc_prc_grp_disp t
where a.object_pri_key_1 = t.object_pri_key_1 and t.process_group='ACCOUNT' and t.prc_grp_disp='SUCCESS' and a.is_active ='Y'
group by a.caseid,a.lead_id,a.entity_name ,a.crn,a.aus_crn ,a.crn_entity,a.account_no,t.prc_grp_disp,t.object_pri_key_1,a.constitution_type,
a.object_data::JSON->'AOF'->'CA'->'CPV1'->>'DATE',a.device_create_timestamp,
a.id_name_add,t.process_group,
a.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE',t.created_timestamp;
return p_msg;
	elsif x_filter_applied <> 'N' then  
	
insert into temp_vdxx values (x_filter_applied,v_from_date,v_to_date,null,v_constitution_type);
open p_msg for select a.lead_id,
a.id_name_add as customer_name, 
a.entity_name,a.crn_entity,a.aus_crn ,a.account_no,
(select TO_CHAR(end_timestamp,'DD-MM-YYYY') from tb_btc_prc_grp_disp tbpgd 
          where tbpgd.object_pri_key_1 =t.object_pri_key_1 
           and process_group ='ACCOUNT'and prc_grp_disp ='SUCCESS') as account_opening_date,
object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE' as CRN_MANDATE,
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'SIGNATURE') as SIGNATURE,
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'FATCA Handoff') as FATCA_HANDOFF,
((select case when (a.constitution_type = 'Sole Properitor' or a.constitution_type = 'SP') and av.process_group='GSTIN'
then av.prc_grp_disp else 'NA' END
from tb_btc_prc_grp_disp av join tb_cop_metadata_txn tcmt 
on av.object_pri_key_1 = t.object_pri_key_1 and av.object_pri_key_1 = tcmt.object_pri_key_1
and av.process_group='GSTIN')
union 
(select 'NA' from tb_cop_metadata_txn tcmt where a.lead_id like '%IN%')) as GSTIN,
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'CERSAI') as CERSAI,
(select av.prc_grp_disp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = t.object_pri_key_1 and av.process_group  = 'FILENET') as FILENET,
((select case when tcmt.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE' <> '' and (a.constitution_type = 'Sole Properitor' or a.constitution_type = 'SP')
then av.prc_grp_disp else 'NA' end from tb_btc_prc_grp_disp av,tb_cop_metadata_txn tcmt 
where av.object_pri_key_1 = t.object_pri_key_1 and av.object_pri_key_1 = tcmt.object_pri_key_1 and av.process_group  = 'ACCOUNTMAN')
union 
(select 'NA' from tb_cop_metadata_txn tcmt where a.lead_id like '%IN%')) as Mandate_Addition_API
from tb_cop_metadata_txn a, tb_btc_prc_grp_disp t
where a.object_pri_key_1 = t.object_pri_key_1 and t.process_group='ACCOUNT' and t.prc_grp_disp='SUCCESS' and a.is_active ='Y'
--and case when v_account_active_date <> '' or v_account_active_date is not null or v_account_active_date !='' then 
--(select av.end_timestamp from tb_btc_prc_grp_disp av where av.object_pri_key_1 = a.object_pri_key_1
--and av.process_group='ACCOUNT' and av.prc_grp_disp='SUCCESS') 
--and to_char(av.end_timestamp,'YYYY-MM-DD') = v_account_active_date)
--else null end  
and case when V_FROM_DATE <> '' and v_to_date <> ''     
          then cast(a.device_create_timestamp as date) between cast(V_FROM_DATE as date) and  cast(V_TO_DATE as date)
         else null 
     END
and case  when v_constitution_type is not null then (a.object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE') = v_constitution_type
          else  null END
group by a.caseid,a.lead_id,a.entity_name ,a.crn,a.aus_crn ,a.crn_entity,a.account_no,t.prc_grp_disp,t.object_pri_key_1,a.constitution_type,
a.object_data::JSON->'AOF'->'CA'->'CPV1'->>'DATE',a.device_create_timestamp,
a.id_name_add,t.process_group,
a.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE',t.created_timestamp;
	return p_msg;
end if;

end;
$function$
;

CREATE OR REPLACE FUNCTION public.random_between(low integer, high integer)
 RETURNS integer
 LANGUAGE plpgsql
 STRICT
AS $function$
BEGIN
   RETURN floor(random()* (high-low + 1) + low);
END;
$function$
;

CREATE OR REPLACE FUNCTION public.report_lead_status(x_org_id character varying, x_emp_id character varying, x_role character varying, x_header character varying, x_process_date character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
  X_RESULT REFCURSOR := 'cur';

BEGIN

OPEN X_RESULT FOR 
select 
	meta.lead_id as "Lead_ID",
	meta.aus_crn as "CRN_OF_INDIVIDUAL_AUTHORISED_SIG",
	meta.id_name_add as "CUSTOMER_NAME",
	coalesce(meta.crn_entity, 'NA') as "Entity_CRN",
	coalesce(meta.entity_name, 'NA') as "ENTITY_NAME",
	coalesce(cop.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADD_MHOLDER'->>'VALUE', 'NA') as "MANDATE_HOLDER",
	coalesce(cop.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE', 'NA') as "MANDATE_HOLDER_CRN",
    coalesce(cop.object_data::JSON->'AOF'->'WORK_VARIABLES'->'MH'->>'ID_NAME_ADD','NA') as "MANDATE_HOLDER_NAME",
   	meta.account_no as "ACCOUNT_NUMBER",
   	cop.object_data::JSON->'AOF'->'CA'->>'CHQ_AMOUNT' as "IP_AMOUNT",
   	meta.constitution_type as "CONSTITUTION",
   	cop.object_data::JSON->'AOF'->'CA'->'DEBIT_CARD_TYPE'->>'VALUE' as "DEBIT_CARD",
   	cop.device_create_timestamp as "LEAD_CREATED_DATE",
   	cop.login_id as "LEAD_CREATED_BY_LC",
   	cop.object_data::JSON->'AOF'->>'RM_CODE' as "RM_CODE",        
   		(Select first_name || ' ' || last_name from tb_emp_hrms teh
                where teh.employee_number= cop.login_id ) as "LC_NAME",
                 cop.object_data::JSON->'AOF'->>'LG_CODE' as "LG_CODE",
   (Select first_name || ' ' || last_name from tb_emp_hrms teh
       where teh.employee_number= cop.login_id ) as "RM_NAME",
       (cop.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'CODE') || ' - '||
    (cop.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE') as "PRODUCT_CODE",
        (select process_name from tb_process_group_nomenclature tpgn
          where cop.text_1 = tpgn.text_1 ) AS"LEAD_STATUS",
          	cop.modify_emp_id as "LAST_MODIFIED_BY",
	(select distinct tfrm.default_system_role_code from tb_emp_hrms tehh ,
           tb_function_roles_mst tfrm , tb_cop_buss_obj_txn tcbot
	where tehh."role" = tfrm.role_name
 	and  tcbot.modify_emp_id = tehh.employee_number
	and tcbot.object_pri_key_1 =cop.object_pri_key_1 limit 1 ) as "LAST_MODIFIED_BY_ROLE",
  cop.device_modify_timestamp as "LAST_MODIFIED_DATE",
(select TO_CHAR(end_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_btc_prc_grp_disp tbpgd
          where tbpgd.object_pri_key_1 = cop.object_pri_key_1
           and process_group ='ACCOUNT'and prc_grp_disp ='SUCCESS') as "ACCOUNT_OPENED_DATE",
	coalesce(cop.object_data::JSON->'AOF'->'PROMO'->>'VALUE','NA') as "PROMO_CODE",
    coalesce(cop.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value','NA') as "CLASSIFICATION_SELECTED_BY_DVU",
    cop.object_data::JSON->'AOF'->'LOB'->>'VALUE' as "LOB",
    cop.object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE' as "BRANCH_CODE",
    cop.object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "BRANCH_NAME",
       (select CONCAT(TEH.first_name ,' ',TEH.last_name )
       from  tb_btc_accesscontrol tssh ,
        tb_emp_hrms teh , tb_function_roles_mst tfrm
       where TSSH.object_pri_key_1 =cop.object_pri_key_1
       and TEH."role" =TFRM.role_name
       and TEH.employee_number = TSSH.emp_hierarchy_id
       and tssh.system_role ='DVU'  
       and tssh.emp_hierarchy_id !=''
      order by tssh.created_timestamp DESC  limit 1)  
      as "DVU_FIRST_ASSIGNED_USER_NAME", 
meta.program_option as "PRIVY_NON_PRIVY",
case when (cop.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' is not null AND
            cop.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' !='')
      then cop.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value'
      when (cop.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' is null OR
            cop.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' ='')
      then cop.object_data::JSON->'AOF'->'CA'->>'PRIVY_PRO_CLASSIFICATION'
      else 'NA' END as "FINAL_CLASSIFICATION_IN_BCIF",
        cop.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_PAN_NO' as "PAN Number_Individual",
    meta.contact_mobile as "Mobile Number_Individual",
    cop.object_data::JSON->'AOF'->'CA'->'KIT_TYPE'->>'VALUE' as "KIT_TYPE",
	 case when (select TSSH.modified_by
       from  tb_btc_accesscontrol_hist tssh  
       where TSSH.object_pri_key_1 =COP.object_pri_key_1
       and tssh.system_role ='DVU'
       and modified_by ='reassign_proc'
       order by tssh.log_time  LIMIT 1) ='reassign_proc'
     then (select TO_CHAR(TSSH.log_time,'YYYY-MM-DD HH24:MI:SS')
      from  tb_btc_accesscontrol_hist tssh , tb_emp_hrms teh , tb_function_roles_mst tfrm
       where TSSH.object_pri_key_1 =COP.object_pri_key_1
       and TEH."role" =TFRM.role_name
            and tssh.system_role ='DVU'
            and TEH.employee_number = TSSH.emp_hierarchy_id
       and tssh.modified_by ='reassign_proc'
       and tssh.log_action  ='UPDATE'
       order by tssh.log_time  LIMIT 1)
     else
     (select TO_CHAR(TSSH.created_timestamp,'YYYY-MM-DD HH24:MI:SS')
       from  tb_btc_accesscontrol tssh ,
        tb_emp_hrms teh , tb_function_roles_mst tfrm
       where TSSH.object_pri_key_1 =COP.object_pri_key_1
       and TEH."role" =TFRM.role_name
       and TEH.employee_number = TSSH.emp_hierarchy_id
       and tssh.system_role ='DVU'  
       and tssh.emp_hierarchy_id !=''
      order by tssh.created_timestamp DESC  limit 1)
      end as "DVU_FIRST_ASSIGNED_DATE",
      cop.object_data::JSON->'AOF'->'BUS_DATA'->'NAT_OF_INDUSTRY'->>'VALUE' as "INDUSTRY_DESCRIPTION",    
              coalesce(cop.object_data::JSON->'AOF'->'BUS_DATA'->'NAT_OF_BUSSINESS'->>'VALUE','NA') as "NATURE_OF_BUSINESS",    
(select CONCAT(TEH.first_name ,' ',TEH.last_name )
       from  tb_btc_accesscontrol tssh ,
        tb_emp_hrms teh , tb_function_roles_mst tfrm
       where TSSH.object_pri_key_1 =cop.object_pri_key_1
       and TEH."role" =TFRM.role_name
       and TEH.employee_number = TSSH.emp_hierarchy_id
       and tssh.system_role ='DVU'  
       and tssh.emp_hierarchy_id !=''
      order by tssh.created_timestamp DESC  limit 1) as "DVU_CURRENT_ASSIGNED_USER_NAME",
      (select TEH.employee_number
       from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS,
             tb_emp_hrms teh , tb_function_roles_mst tfrm
       where DIS.object_pri_key_1 =cop.object_pri_key_1
       and DIS.object_pri_key_1 =tssh.object_pri_key_1
       and TEH."role" =TFRM.role_name
       and TEH.employee_number = TSSH.emp_hierarchy_id
       and tssh.system_role ='DVU'
       and tssh.emp_hierarchy_id !=''
      order by tssh.log_time DESC limit 1) as "DVU_CURRENT_ASSIGNED_USER_ID",
            CASE
            WHEN cop.text_1::text = 'DVU_ASSIGNED'::text THEN ( SELECT concat(CURRENT_DATE - to_char(disp.start_timestamp, 'YYYY-MM-DD'::text)::date, ' days') AS concat
               FROM tb_btc_accesscontrol_hist tssh,
                tb_btc_prc_grp_disp_hist disp,
                tb_emp_hrms teh,
                tb_function_roles_mst tfrm
              WHERE disp.object_pri_key_1::text = cop.object_pri_key_1::text AND disp.object_pri_key_1::text = tssh.object_pri_key_1::text AND teh.role::text = tfrm.role_name::text AND teh.employee_number::text = tssh.emp_id::text AND tssh.system_role::text = 'DVU'::text AND disp.process_group::text = 'DVU'::text AND disp.prc_grp_disp::text = 'WIP'::text AND tssh.object_pri_key_1::text = disp.object_pri_key_1::text AND tssh.emp_id::text <> ''::text
              ORDER BY tssh.log_time
             LIMIT 1)
            ELSE NULL::text
        END AS "DVU_PENDING_SINCE",
         (select TO_CHAR(DIS.created_timestamp ,'YYYY-MM-DD HH24:MI:SS')  
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS
	        where  DIS.object_pri_key_1 =COP.object_pri_key_1   
	        and tssh.system_role ='DVU' and DIS.process_group ='DVU' and prc_grp_disp ='USERWAIT'
	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 and tssh.emp_id !='' 
	        order by tssh.log_time ASC 
	       limit 1) as "SENT_TO_DVU_DATE"
from
	tb_cop_metadata_txn meta
join 
	tb_cop_buss_obj_txn cop 
	on meta.object_pri_key_1 = cop.object_pri_key_1
where 
	meta.account_no is not null and 
	cop.device_modify_timestamp > (NOW()::date - interval '03 months');
       RETURN x_result;
     

END;
$function$
;

CREATE OR REPLACE FUNCTION public.report_lead_status_old(x_org_id character varying, x_emp_id character varying, x_role character varying, x_header character varying, x_process_date character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
  X_RESULT REFCURSOR := 'cur';

BEGIN

OPEN X_RESULT FOR 

SELECT LEAD_ID, "CUSTOMER_NAME"
, "CRN_OF_INDIVIDUAL_AUTHORISED_SIG", "ENTITY_NAME", "Entity_CRN",
"MANDATE_HOLDER", "MANDATE_HOLDER_NAME", "ACCOUNT_NUMBER", "KIT_TYPE", "FundingMode", "IP_AMOUNT", 
constitution, "ReOpenedLead", "SEGMENT", "LEAD_ORIGINATION", "FINAL_CLASSIFICATION_IN_BCIF", "INDUSTRY_DESCRIPTION", 
"DEBIT_CARD", "EXISTING_CREDIT_FACILITY", "TYPE_OF_FACILITY", LEAD_CREATED_DATE, "LG_CODE", "RM_CODE", "MANDATE_HOLDER_CRN", 
"RM_NAME", "LC_NAME", "PRODUCT_CODE", "LeadStatus", "PROMO_CODE", "LOB", "BRANCH_CODE", "BRANCH_NAME", "COCO", "RISK", "NATURE_OF_BUSINESS", 
"ACTIVE_MONEY", "ADDRESS_PROOF", "IDENTITY_TYPE", "PAN_STATUS", "PAN_AADHAR_LINKING_STATUS", "PRIVY_NON_PRIVY", "ENTITY_DOC_1", "ENTITY_DOC_2", 
"LEAD_CREATED_BY_LC", "LEAD_STATUS_1", "LAST_MODIFIED_BY", "LAST_MODIFIED_BY_ROLE", "LAST_MODIFIED_DATE", "ACCOUNT_OPENED_DATE", "SOURCING_RM_SUPERVISOR_NAME",
"SENT_TO_MID_OFFICE_DATE", "SENT_TO_DVU_DATE", "DVU_ASSIGNED_DATE", "MID_OFFICE_ASSIGNED_DATE", "DVU_ASSIGNED_USER_NAME", "MID_OFFICE_ASSIGNED_USER_NAME",
"DVU_REASSIGNED_USER_NAME", "DVU_REASSIGNED_USER_ID", "MID_OFFICE_PENDING_DATE", "DVU_PENDING_DATE", "DVU_REWORK_REASON1", "DVU_REWORK_REASON2", 
"DVU_REWORK_REASON3", "DVU_REWORK_REMARK1", "DVU_REWORK_REMARK2", "DVU_REWORK_REMARK3", "DVU_REWORK_DATE1", "DVU_REWORK_DATE2", "DVU_REWORK_DATE3", 
"DVU_REWORK_USER1", "DVU_REWORK_USER2", "DVU_REWORK_USER3", "RM_REWORK_REMARK1", "RM_REWORK_REMARK2", "RM_REWORK_REMARK3", "RM_REWORK_REVERT_DATE1", 
"RM_REWORK_REVERT_DATE2", "RM_REWORK_REVERT_DATE3", "LAST_ACTION_RM"
, privy_option, emp_hierarchy_id, emp_supervisor_id, "DATE", 
"constitution_code"    from public.tb_lead_status_data;
       RETURN x_result;
     

END;
$function$
;

CREATE OR REPLACE FUNCTION public.set_consent_data(x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_consent_type character varying, x_consent_sub_type character varying, x_request_sent_timestamp character varying, x_request_expiry_timestamp character varying, x_request_url character varying, x_request_sent_to_mobile_no character varying, x_requert_sent_to_email character varying, x_request_status character varying, x_status_source character varying, x_status_update_timestamp character varying, x_status_update_lat character varying, x_status_update_long character varying, x_status_update_address character varying, x_final_status character varying, x_final_status_change_allowed character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
DECLARE
X_RESULT refcursor:= 'cur_access';
V_COUNT INT;
x_count INT;
V_ERR            VARCHAR(4000);
V_SYSTIME_VAR  timestamp;
v_cc INT;
v_time timestamp;
begin

--select count(*) into v_cc from tb_consent_data
-- where request_sent_timestamp = x_request_sent_timestamp
-- and object_pri_key_1 =x_object_pri_key_1;
 
  SELECT to_timestamp( TRUNC( CAST( x_request_sent_timestamp AS bigint ) / 1000 ) )+ interval '10 minute' into v_time;
--   from tb_consent_data
--   where request_sent_timestamp= x_request_sent_timestamp
--    and object_pri_key_1 =x_object_pri_key_1;

   raise notice 'VCC %','v_cc';

  if 
--  v_cc > 0 AND 
(v_time >NOW() )then 
 
  select count(1)  into x_count from tb_cop_buss_obj_txn txn
	join tb_btc_prc_grp_disp prc  on txn.object_pri_key_1 = prc.object_pri_key_1 
	 where txn.object_pri_key_1 =x_object_pri_key_1
	 and  coalesce(txn.object_pri_key_2,'NA') = coalesce(x_object_pri_key_2,'NA')
	 and  coalesce(txn.object_pri_key_3,'NA') = coalesce(x_object_pri_key_3,'NA');
	
	select count(1) into V_COUNT from tb_consent_data tcd 
  	 --join public.tb_btc_prc_grp_disp prc on prc.object_pri_key_1 =  tcd.object_pri_key_1 
	 where coalesce(trim(tcd.object_pri_key_1), 'NA') = coalesce(trim(x_object_pri_key_1), 'NA') ;	
--	  and  coalesce(tcd.object_pri_key_2,'NA') = coalesce(x_object_pri_key_2,'NA')
--	  and  coalesce(tcd.object_pri_key_3,'NA') = coalesce(x_object_pri_key_3,'NA');

--	raise notice 'X %',x_count;
raise notice 'V %',V_count;

if  v_count = 0 then 
  INSERT INTO public.tb_consent_data(
  object_type, 
  object_pri_key_1, 
  object_pri_key_2, 
  object_pri_key_3, 
  consent_type, 
  consent_sub_type, 
  request_sent_timestamp, 
  request_expiry_timestamp, 
  request_url, 
  request_sent_to_mobile_no, 
  requert_sent_to_email, 
  request_status, 
  status_source, 
  status_update_timestamp, 
  status_update_lat, 
  status_update_long, 
  status_update_address, 
  final_status, 
  final_status_change_allowed)
 VALUES(
 x_object_type, 
 x_object_pri_key_1, 
 coalesce(x_object_pri_key_2,'NA'), 
 coalesce(x_object_pri_key_3,'NA'), 
 x_consent_type, 
 x_consent_sub_type,  
 x_request_sent_timestamp,
 --CAST(TO_CHAR(TO_TIMESTAMP(x_request_sent_timestamp, 'YYYY-MM-DDT HH24:MI:SS.MS'),'YYYY-MM-DD HH24:MI:SS')AS TIMESTAMP),
 x_request_expiry_timestamp,
-- case when (x_request_expiry_timestamp = '' or x_request_expiry_timestamp is null)
--      then  '0000-00-00 00:00:00'
--      else 
--CAST(TO_CHAR(TO_TIMESTAMP(x_request_expiry_timestamp, 'YYYY-MM-DDT HH24:MI:SS.MS'),'YYYY-MM-DD HH24:MI:SS')AS TIMESTAMP) end ,
x_request_url, 
x_request_sent_to_mobile_no, 
x_requert_sent_to_email, 
x_request_status, 
x_status_source,  
x_status_update_timestamp,
--CAST(TO_CHAR(TO_TIMESTAMP(x_status_update_timestamp, 'YYYY-MM-DDT HH24:MI:SS.MS'),'YYYY-MM-DD HH24:MI:SS')AS TIMESTAMP),
x_status_update_lat, 
x_status_update_long, 
x_status_update_address, 
x_final_status, 
x_final_status_change_allowed);

	  
elsif V_COUNT > 0 then 
 update tb_consent_data tcd
 set object_type =x_object_type ,
	object_pri_key_1 = x_object_pri_key_1,
	object_pri_key_2 = coalesce(x_object_pri_key_2,'NA'),
	object_pri_key_3 =coalesce(x_object_pri_key_3,'NA'),
	consent_type = x_consent_type,
	consent_sub_type =x_consent_sub_type, 
	request_sent_timestamp  = x_request_sent_timestamp,--CAST(TO_CHAR(TO_TIMESTAMP(x_request_sent_timestamp, 'YYYY-MM-DDT HH24:MI:SS.MS'),'YYYY-MM-DD HH24:MI:SS')AS TIMESTAMP),
	request_expiry_timestamp =x_request_expiry_timestamp,  
	request_url = x_request_url,
	request_sent_to_mobile_no = x_request_sent_to_mobile_no,
	requert_sent_to_email = x_requert_sent_to_email,
	request_status = x_request_status,
	status_source = x_status_source,
	status_update_timestamp =x_status_update_timestamp, -- CAST(TO_CHAR(TO_TIMESTAMP(x_status_update_timestamp, 'YYYY-MM-DDT HH24:MI:SS.MS'),'YYYY-MM-DD HH24:MI:SS')AS TIMESTAMP),
	status_update_lat = x_status_update_lat,
	status_update_long = x_status_update_long,
	status_update_address = x_status_update_address,
	final_status = x_final_status,
	final_status_change_allowed  = x_final_status_change_allowed
	 where coalesce(trim(object_pri_key_1),'NA') = coalesce(trim(x_object_pri_key_1),'NA');
--	  and  coalesce(tcd.object_pri_key_2,'NA')   = coalesce(x_object_pri_key_2,'NA')
--	  and  coalesce(tcd.object_pri_key_3,'NA')   = coalesce(x_object_pri_key_3,'NA');
	
	 raise notice 'Json%',x_status_update_address;
	  
	  
  END IF;
  else 
    OPEN X_RESULT FOR 
        SELECT 'EXPIRED' as "ISSUCCESSFUL",
               'This link has been expired, please generate a new link.' as "ERROR_REMARKS";
  return X_RESULT;
 end if;
  OPEN X_RESULT FOR 
        SELECT 'SUCCESS' as "ISSUCCESSFUL",
                          '' as "ERROR_REMARKS",
                          X_OBJECT_PRI_KEY_1 as "PRIMARY_KEY_VALUE",
                          TO_CHAR(V_SYSTIME_VAR,'YYYY-MM-DD hh24:mi:SS') as "LAST_SYNC_TIMESTAMP",
                          'tb_consent_data' as "TABLENAME",
                  		  '' as "ACTION";
  return X_RESULT;

/*
   EXCEPTION
   WHEN NO_DATA_FOUND THEN 
    OPEN X_RESULT FOR 
        SELECT 'FAILURE' as "ISSUCCESSFUL",
                          '' as "ERROR_REMARKS",
                          X_OBJECT_PRI_KEY_1 as "PRIMARY_KEY_VALUE",
                          TO_CHAR(V_SYSTIME_VAR,'YYYY-MM-DD hh24:mi:SS') as "LAST_SYNC_TIMESTAMP",
                          'tb_consent_data' as "TABLENAME",
                  		  '' as "ACTION";
                        
  WHEN OTHERS THEN 
                OPEN X_RESULT FOR 
        SELECT 'FAILURE' as "ISSUCCESSFUL",
                          '' as "ERROR_REMARKS",
                          X_OBJECT_PRI_KEY_1 as "PRIMARY_KEY_VALUE",
                          TO_CHAR(V_SYSTIME_VAR,'YYYY-MM-DD hh24:mi:SS') as "LAST_SYNC_TIMESTAMP",
                          'tb_consent_data' as "TABLENAME",
                  		  '' as "ACTION";
                       return X_RESULT; 
      */
END;
$function$
;

CREATE OR REPLACE FUNCTION public.set_get_rework_lead_remarks(x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_login_id character varying, x_platform character varying, x_section character varying, x_que_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ declare 
V_ERR VARCHAR(4000);
V_SYSTIME_VAR timestamp;
X_RESULT refcursor := 'cur';
i integer;
v_count int;
v_count1 int;
v_count2 int;
V_INT INT;
P_STRING TEXT;
V_TEXT2 VARCHAR(2000);
V_TEXT_1 VARCHAR(100);
V_WORKFLOW VARCHAR(100);
begin 
	

select count(*) into v_count from tb_cop_buss_obj_txn tcbot 
 where object_pri_key_1 =x_object_pri_key_1;

select text_1, object_data::JSON->'AOF'->>'WORKFLOW' into V_TEXT_1 , V_WORKFLOW
from tb_cop_buss_obj_txn tcbot 
  where object_pri_key_1 =x_object_pri_key_1;

  select COUNT(1) into V_COUNT2 from tb_section_status
	 where rework_status ='N'
	 and object_pri_key_1 =X_object_pri_key_1
	 and role = x_login_id;
 
 ---------------------PROD SUPERVISOR AND BSG (RM_SE APPROVER BUCKET)---------------------
If v_count > 0 and x_platform = 'WEB' AND (X_SECTION ='' OR X_SECTION IS NULL)
and x_login_id in (select teh.employee_number from tb_emp_hrms teh , tb_function_roles_mst fun 
                    where teh."role" =fun.role_name 
                    and fun.default_system_role_code in ('Product Supervisor','BSG'))
and x_que_id in ('RMSE','APPROVER')then 

SELECT
      jsonb_agg(row_to_json(T)) INTO P_STRING FROM (
select tss.screen_name as "SCREEN_NAME",
         tss.status_remarks as "STATUS_REMARKS",
    (select employee_number || ' - ' || first_name || ' '|| last_name from tb_emp_hrms teh 
	    join tb_function_roles_mst FUN on FUN.role_name = TEH."role" 
               where employee_number in (select role from tb_section_status tss2 
               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
               and TSS.section_id =tss2.section_id 
               and FUN.default_system_role_code ='Approver'))  as "RAISED_BY",
	     to_char(tss.status_timetstamp, 'DD-MM-YYYY HH24:MI:SS' ) as "RAISED_ON",
   (select role from tb_emp_hrms teh 
        join tb_function_roles_mst FUN on FUN.role_name = TEH."role" 
               where employee_number in (select role from tb_section_status tss2 
               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
               and TSS.section_id =tss2.section_id 
               and FUN.default_system_role_code ='Approver'
               --and tss2.status ='W'
               )) as "ROLE",
          case when cop.text_1 in ('BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED') 
                 and TSS.rework_status ='Y'
               then 'RESOLVED'
              ELSE 'PENDING'
               end as "REWORK_STATUS",
          case when cop.text_1 in ('BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED') 
                   and TSS.rework_status ='Y'
               then  (select employee_number || ' - ' || first_name || ' '|| last_name from tb_emp_hrms teh where employee_number in (ACC.emp_id ))
               else '' END as "RESOLVED_BY",      
          case when cop.text_1 in ('BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED') 
                  and TSS.rework_status ='Y'
               then to_char(cop.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )
               else '' end as "MODIFIED_ON",
          case when cop.text_1 in ('BOM_REWORK_APPROVED', 'BOM_DVU_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REWORK')and TSS.rework_status ='Y'
               then TEXT_2 
               else '' end  as "RM_REMARKS"
         from tb_section_status tss
         join tb_cop_buss_obj_txn COP on COP.object_pri_key_1 =tss.object_pri_key_1 
         join tb_btc_accesscontrol ACC on ACC.object_pri_key_1 =COP.object_pri_key_1 
         and ACC.system_role ='RM'         
       where tss.object_pri_key_1 =x_object_pri_key_1
	   and tss.status ='N'
	   and TSS.role in (select HRMS.employee_number from tb_function_roles_mst tfrm 
	                     join tb_emp_hrms hrms on hrms."role" = tfrm.role_name 
	                     WHERE TFRM.default_system_role_code ='Approver')
)T;

---------------------PROD SUPERVISOR AND BSG (DVU BUCKET)---------------------
ELSIf v_count > 0 and x_platform = 'WEB' AND (X_SECTION ='' OR X_SECTION IS NULL)
and x_login_id in (select teh.employee_number from tb_emp_hrms teh , tb_function_roles_mst fun 
                    where teh."role" =fun.role_name 
                    and fun.default_system_role_code in ('Product Supervisor','BSG'))
and x_que_id ='DVU'then 

SELECT
      jsonb_agg(row_to_json(T)) INTO P_STRING FROM (
select tss.screen_name as "SCREEN_NAME",
         tss.status_remarks as "STATUS_REMARKS",
    (select employee_number || ' - ' || first_name || ' '|| last_name from tb_emp_hrms teh 
	    join tb_function_roles_mst FUN on FUN.role_name = TEH."role" 
               where employee_number in (select role from tb_section_status tss2 
               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
               and TSS.section_id =tss2.section_id 
               and FUN.default_system_role_code ='DVU'))  as "RAISED_BY",
	     to_char(tss.status_timetstamp, 'DD-MM-YYYY HH24:MI:SS' ) as "RAISED_ON",
   (select role from tb_emp_hrms teh 
        join tb_function_roles_mst FUN on FUN.role_name = TEH."role" 
               where employee_number in (select role from tb_section_status tss2 
               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
               and TSS.section_id =tss2.section_id 
               and FUN.default_system_role_code ='DVU'
               --and tss2.status ='W'
               )) as "ROLE",
          case when cop.text_1 in ('BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED') 
--                 and TSS.rework_status ='Y'
               then 'RESOLVED'
              ELSE 'PENDING'
               end as "REWORK_STATUS",
          case when cop.text_1 in ('BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED') 
--                   and TSS.rework_status ='Y'
               then  (select employee_number || ' - ' || first_name || ' '|| last_name from tb_emp_hrms teh where employee_number in (ACC.emp_id ))
               else '' END as "RESOLVED_BY",      
          case when cop.text_1 in ('BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED') 
--                  and TSS.rework_status ='Y'
               then to_char(cop.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )
               else '' end as "MODIFIED_ON",
          case when cop.text_1 in ('BOM_DVU_REWORK_APPROVED', 'BOM_DVU_REWORK_APPROVED','DVU_REWORK_APPROVED')
--          and TSS.rework_status ='Y'
               then TEXT_2 
               else '' end  as "RM_REMARKS"
         from tb_section_status tss
         join tb_cop_buss_obj_txn COP on COP.object_pri_key_1 =tss.object_pri_key_1 
         join tb_btc_accesscontrol ACC on ACC.object_pri_key_1 =COP.object_pri_key_1 
         and ACC.system_role ='RM'         
       where tss.object_pri_key_1 =x_object_pri_key_1
	   and tss.status ='N'
	   and TSS.role in (select HRMS.employee_number from tb_function_roles_mst tfrm 
	                     join tb_emp_hrms hrms on hrms."role" = tfrm.role_name 
	                     WHERE TFRM.default_system_role_code ='DVU')
)T;

---------------------PROD SUPERVISOR AND BSG (RCU BUCKET)---------------------
ELSIf v_count > 0 and x_platform = 'WEB' AND (X_SECTION ='' OR X_SECTION IS NULL)
and x_login_id in (select teh.employee_number from tb_emp_hrms teh , tb_function_roles_mst fun 
                    where teh."role" =fun.role_name 
                    and fun.default_system_role_code in ('Product Supervisor','BSG'))
and x_que_id in ('RCU','RCU_CORRECTOR')then 

SELECT
      jsonb_agg(row_to_json(T)) INTO P_STRING FROM (
select tss.screen_name as "SCREEN_NAME",
         tss.status_remarks as "STATUS_REMARKS",
    (select employee_number || ' - ' || first_name || ' '|| last_name from tb_emp_hrms teh 
	    join tb_function_roles_mst FUN on FUN.role_name = TEH."role" 
               where employee_number in (select role from tb_section_status tss2 
               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
               and TSS.section_id =tss2.section_id 
               and FUN.default_system_role_code ='RCU'))  as "RAISED_BY",
	     to_char(tss.status_timetstamp, 'DD-MM-YYYY HH24:MI:SS' ) as "RAISED_ON",
   (select role from tb_emp_hrms teh 
        join tb_function_roles_mst FUN on FUN.role_name = TEH."role" 
               where employee_number in (select role from tb_section_status tss2 
               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
               and TSS.section_id =tss2.section_id 
               and FUN.default_system_role_code ='RCU'
               --and tss2.status ='W'
               )) as "ROLE",
          case when cop.text_1 in ('BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','RCU_REWORK_APPROVED') 
--                 and TSS.rework_status ='Y'
               then 'RESOLVED'
              ELSE 'PENDING'
               end as "REWORK_STATUS",
          case when cop.text_1 in ('BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','RCU_REWORK_APPROVED') 
               then  (select employee_number || ' - ' || first_name || ' '|| last_name 
                          from tb_emp_hrms teh , tb_btc_accesscontrol tba 
                          where employee_number =tba.emp_id 
                          and TBA.object_pri_key_1 =ACC.object_pri_key_1 
                          and tba.system_role ='RCU_Correcter')
               else '' END as "RESOLVED_BY",        
          case when cop.text_1 in ('BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','RCU_REWORK_APPROVED') 
  --                and TSS.rework_status ='Y'
               then to_char(cop.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )
               else '' end as "MODIFIED_ON",
          case when cop.text_1 in ('BOM_DVU_REWORK_APPROVED', 'BOM_DVU_REWORK_APPROVED','DVU_REWORK_APPROVED')
--          and TSS.rework_status ='Y'
               then TEXT_2 
               else '' end  as "RM_REMARKS"
         from tb_section_status tss
         join tb_cop_buss_obj_txn COP on COP.object_pri_key_1 =tss.object_pri_key_1 
         join tb_btc_accesscontrol ACC on ACC.object_pri_key_1 =COP.object_pri_key_1 
         and ACC.system_role ='RM'         
       where tss.object_pri_key_1 =x_object_pri_key_1
	   and tss.status ='N'
	   and TSS.role in (select HRMS.employee_number from tb_function_roles_mst tfrm 
	                     join tb_emp_hrms hrms on hrms."role" = tfrm.role_name 
	                     WHERE TFRM.default_system_role_code ='RCU')
	      )T;

ELSif v_count > 0 and x_platform = 'WEB' 
  AND (X_SECTION ='' OR X_SECTION IS  NULL)
  and V_TEXT_1 IN ('DVU_REWORK_APPROVED') --AND V_WORKFLOW = 'CA'
  then 

  if (select count(fm.default_system_role_code) 
       from tb_emp_hrms teh ,tb_function_roles_mst fm
       where TEH."role" =FM.role_name 
       and TEH.employee_number =x_login_id
       and fm.default_system_role_code ='Approver')>0 then 
       
       
SELECT
      jsonb_agg(row_to_json(T)) INTO P_STRING FROM (
     select tss.status_remarks as "STATUS_REMARKS",
	     tss.screen_name as "SCREEN_NAME",
         case when V_COUNT2 > 0 
              then (select employee_number || ' - ' || first_name || ' '|| last_name from tb_emp_hrms teh 
	                     join tb_function_roles_mst FUN on FUN.role_name = TEH."role" 
					     where employee_number in (select role from tb_section_status tss2 
										               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
										               and TSS.section_id =tss2.section_id 
										               and FUN.default_system_role_code ='Approver'))  
             else (select employee_number || ' - ' || first_name || ' '|| last_name from tb_emp_hrms teh 
	                  join tb_function_roles_mst FUN on FUN.role_name = TEH."role" 
					  where employee_number in (select role from tb_section_status tss2 
									               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
									               and TSS.section_id =tss2.section_id 
									               and FUN.default_system_role_code ='DVU'))
			 end as "RAISED_BY",
	       to_char(tss.status_timetstamp, 'DD-MM-YYYY HH24:MI:SS' ) as "RAISED_ON",
        case when V_COUNT2 > 0 
             then (select role from tb_emp_hrms teh 
			        join tb_function_roles_mst FUN on FUN.role_name = TEH."role" 
			               where employee_number in (select role from tb_section_status tss2 
			                                          where tss2.object_pri_key_1 = TSS.object_pri_key_1 
										               and TSS.section_id =tss2.section_id 
										               and FUN.default_system_role_code ='Approver')) 
             else (select role from tb_emp_hrms teh 
			        join tb_function_roles_mst FUN on FUN.role_name = TEH."role" 
			               where employee_number in (select role from tb_section_status tss2 
			                                          where tss2.object_pri_key_1 = TSS.object_pri_key_1 
										               and TSS.section_id =tss2.section_id 
										               and FUN.default_system_role_code ='DVU'))
             end as "ROLE",
          case when cop.text_1 ='DVU_REWORK_APPROVED' and V_COUNT2 =0
               then 'RESOLVED'
               ELSE 'PENDING' 
               end as "REWORK_STATUS",
          case when cop.text_1 ='DVU_REWORK_APPROVED' and V_COUNT2 =0
               then  (select employee_number || ' - ' || first_name || ' '|| last_name 
                       from tb_emp_hrms teh where employee_number in (ACC.emp_id ))
               --ACC.emp_id 
               else '' END as "RESOLVED_BY",      
          case when cop.text_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','RCU_REWORK_APPROVED') 
               then to_char(cop.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )
               else '' end as "MODIFIED_ON",
        (case when cop.text_1 ='DVU_REWORK_APPROVED'and V_COUNT2 >0 
              then ''
              else COP.text_2 end)  as "RM_REMARKS"
         from tb_section_status tss
         join tb_cop_buss_obj_txn COP on COP.object_pri_key_1 =tss.object_pri_key_1 
         join tb_btc_accesscontrol ACC on ACC.object_pri_key_1 =COP.object_pri_key_1 
         and ACC.system_role ='RM'
       where cop.object_pri_key_1 =x_object_pri_key_1
       and tss.status not in ('W','Y','R')
       and TSS.role = x_login_id 
      order by "RAISED_ON"desc)T;

elsif (select count(fm.default_system_role_code) 
       from tb_emp_hrms teh ,tb_function_roles_mst fm
       where TEH."role" =FM.role_name 
       and TEH.employee_number =x_login_id
       and fm.default_system_role_code ='DVU')>0 THEN

  select jsonb_agg(row_to_json(T)) INTO P_STRING FROM (
     select tss.status_remarks as "STATUS_REMARKS",
	     tss.screen_name as "SCREEN_NAME",
              (select employee_number || ' - ' || first_name || ' '|| last_name from tb_emp_hrms teh 
	                  join tb_function_roles_mst FUN on FUN.role_name = TEH."role" 
					  where employee_number in (select role from tb_section_status tss2 
									               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
									               and TSS.section_id =tss2.section_id 
									               and FUN.default_system_role_code ='DVU'))
			 as "RAISED_BY",
	       to_char(tss.status_timetstamp, 'DD-MM-YYYY HH24:MI:SS' ) as "RAISED_ON",
         (select role from tb_emp_hrms teh 
			        join tb_function_roles_mst FUN on FUN.role_name = TEH."role" 
			               where employee_number in (select role from tb_section_status tss2 
			                                          where tss2.object_pri_key_1 = TSS.object_pri_key_1 
										               and TSS.section_id =tss2.section_id 
										               and FUN.default_system_role_code ='DVU')) 
              as "ROLE",
          case when cop.text_1 ='DVU_REWORK_APPROVED' --and V_COUNT2 =0
               then 'RESOLVED'
               ELSE 'PENDING' 
               end as "REWORK_STATUS",
          case when cop.text_1 ='DVU_REWORK_APPROVED' --and V_COUNT2 =0
               then  (select employee_number || ' - ' || first_name || ' '|| last_name 
                       from tb_emp_hrms teh where employee_number in (ACC.emp_id ))
               --ACC.emp_id 
               else '' END as "RESOLVED_BY",      
          case when cop.text_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','RCU_REWORK_APPROVED') 
               then to_char(cop.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )
               else '' end as "MODIFIED_ON",
        (case when cop.text_1 !='DVU_REWORK_APPROVED'--and V_COUNT2 >0 
              then ''
              else COP.text_2 end)  as "RM_REMARKS"
         from tb_section_status tss
         join tb_cop_buss_obj_txn COP on COP.object_pri_key_1 =tss.object_pri_key_1 
         join tb_btc_accesscontrol ACC on ACC.object_pri_key_1 =COP.object_pri_key_1 
         and ACC.system_role ='RM'
       where cop.object_pri_key_1 =x_object_pri_key_1
       and tss.status not in ('W','Y','R')
       and TSS.role = x_login_id 
      order by "RAISED_ON"desc)T;
     
end if;
     
--ELSif v_count > 0 and x_platform = 'WEB' AND (X_SECTION ='' OR X_SECTION IS  NULL)
-- and V_TEXT_1 IN ('DVU_REWORK_APPROVED') AND V_WORKFLOW = 'CADIY'then 
--
-- select COUNT(1) into V_COUNT1 from tb_section_status
--	 where section_id ='VKYC'
--	 and object_pri_key_1 =X_object_pri_key_1
--	 and status !='R'; 
----	 and role = x_login_id;
-- 
-- select jsonb_agg(row_to_json(T)) INTO P_STRING FROM (
--     select tss.status_remarks as "STATUS_REMARKS",
--	     tss.screen_name as "SCREEN_NAME",
--    (select employee_number || ' - ' || first_name || ' '|| last_name from tb_emp_hrms teh 
--	    join tb_function_roles_mst FUN on FUN.role_name = TEH."role" 
--               where employee_number in (select role from tb_section_status tss2 
--               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
--               and TSS.section_id =tss2.section_id 
----               and FUN.default_system_role_code ='DVU'
--               and case when V_COUNT1 =0 --and V_COUNT2>0 
--                        then FUN.default_system_role_code ='DVU'
--                        else 
--                        FUN.default_system_role_code ='Approver'
--                        end
--               ))  as "RAISED_BY",
--	     to_char(tss.status_timetstamp, 'DD-MM-YYYY HH24:MI:SS' ) as "RAISED_ON",
--   (select role from tb_emp_hrms teh 
--        join tb_function_roles_mst FUN on FUN.role_name = TEH."role" 
--               where employee_number in (select role from tb_section_status tss2 
--               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
--               and TSS.section_id =tss2.section_id 
----               and FUN.default_system_role_code ='DVU'
--               and case when V_COUNT1 =0 --and V_COUNT2>0 
--                        then FUN.default_system_role_code ='DVU'
--                        else 
--                        FUN.default_system_role_code ='Approver'
--                        end
--               )) as "ROLE",
--          case when cop.text_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','RCU_REWORK_APPROVED') 
--                   and V_COUNT1 =0 
--               then 'RESOLVED'
--              ELSE 'PENDING'
--               end as "REWORK_STATUS",
--          case when cop.text_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED') and V_COUNT1 =0 
--               then  (select employee_number || ' - ' || first_name || ' '|| last_name 
--                       from tb_emp_hrms teh where employee_number in (ACC.emp_id ))
--               else '' END as "RESOLVED_BY",      
--          case when cop.text_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','RCU_REWORK_APPROVED') 
--               then to_char(cop.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )
--               else '' end as "MODIFIED_ON",
--        (case when cop.text_1 in ('DVU_REWORK','BOM_REWORK','RCU_REWORK') 
--              then ''
--              else COP.text_2 end)  as "RM_REMARKS"
--         from tb_section_status tss
--         join tb_cop_buss_obj_txn COP on COP.object_pri_key_1 =tss.object_pri_key_1 
--         join tb_btc_accesscontrol ACC on ACC.object_pri_key_1 =COP.object_pri_key_1 
--         and ACC.system_role ='RM'
--       where cop.object_pri_key_1 =x_object_pri_key_1
--       and tss.status not in ('W','Y','R')
--       and TSS.role = x_login_id 
--      order by "RAISED_ON"desc)T;
   
elsif v_count > 0 and x_platform = 'WEB' AND (X_SECTION ='' OR X_SECTION IS  NULL)
 and V_TEXT_1 in   ('BOM_REWORK','SUBMITTED','DVU_ASSIGNED',
                    'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') then 
 
  if (select count(fm.default_system_role_code) 
       from tb_emp_hrms teh ,tb_function_roles_mst fm
       where TEH."role" =FM.role_name 
       and TEH.employee_number =x_login_id
       and fm.default_system_role_code ='Approver')>0 then 
       
SELECT
      jsonb_agg(row_to_json(T)) INTO P_STRING FROM (
     select tss.status_remarks as "STATUS_REMARKS",
	     tss.screen_name as "SCREEN_NAME",
	    (select employee_number || ' - ' || first_name || ' '|| last_name from tb_emp_hrms teh 
               where employee_number in (select role from tb_section_status tss2 
               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
               and TSS.section_id =tss2.section_id 
               and tss2.status ='N'
               and TSS2."role" =X_LOGIN_ID ))  as "RAISED_BY",
	     --(select first_name from tb_emp_hrms teh where first_name =x_login_id)as "RAISED_BY", 
	     to_char(tss.status_timetstamp, 'DD-MM-YYYY HH24:MI:SS' ) as "RAISED_ON",
        (select role from tb_emp_hrms teh 
               where employee_number in (select role from tb_section_status tss2 
               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
               and TSS.section_id =tss2.section_id 
               and tss2.status ='N'
               and TSS2."role" =X_LOGIN_ID)) as "ROLE",
          case when cop.text_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','RCU_REWORK_APPROVED')  then 'RESOLVED'
              ELSE 'PENDING'
               end as "REWORK_STATUS",
          case when cop.text_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED')--,'RCU_REWORK_APPROVED') 
               then  (select employee_number || ' - ' || first_name || ' '|| last_name 
                       from tb_emp_hrms teh
--                       join tb_btc_accesscontrol ACC on teh.employee_number = ACC.emp_id 
--                       where employee_number in (ACC.emp_id ))
                        where exists (select 1 from tb_btc_accesscontrol ACC
                                       where teh.employee_number = ACC.emp_id
--                                         and employee_number in (ACC.emp_id )
                                         )) 
               when COP.text_1 in ('RCU_REWORK')
               then ''
               when COP.text_1 in ('RCU_REWORK_APPROVED','BOM_REWORK_APPROVED')
               then COP.modify_emp_id  
               else '' END as "RESOLVED_BY",
          case when cop.text_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','RCU_REWORK_APPROVED') 
               then to_char(cop.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )
               else '' end as "MODIFIED_ON",
        (case when cop.text_1 in ('DVU_REWORK','RCU_REWORK','BOM_REWORK','DVU_ASSIGNED','RCU_ASSIGNED','RCU_REWORK_APPROVED') then ''
        else TEXT_2 end)  as "RM_REMARKS"
         from tb_section_status tss
         join tb_cop_buss_obj_txn COP on COP.object_pri_key_1 =tss.object_pri_key_1 
--         join tb_btc_accesscontrol ACC on ACC.object_pri_key_1 =COP.object_pri_key_1 
      --   and ACC.system_role ='RM'
       where cop.object_pri_key_1 =x_object_pri_key_1
       and tss.status not in ('W','Y','R')
       and TSS."role" =X_LOGIN_ID
       and case when cop.text_1 = 'RCU_REWORK' 
                then  TSS."role" IN (select EMP_ID from tb_btc_accesscontrol tba 
                                       where object_pri_key_1 =X_object_pri_key_1
                            			and system_role ='RCU')
         else TSS."role" = X_LOGIN_ID end 
      order by "RAISED_ON"desc)T;
     
elsif (select count(fm.default_system_role_code) 
       from tb_emp_hrms teh ,tb_function_roles_mst fm
       where TEH."role" =FM.role_name 
       and TEH.employee_number =x_login_id
       and fm.default_system_role_code ='DVU')>0 then 
       

SELECT
      jsonb_agg(row_to_json(T)) INTO P_STRING FROM (
     select tss.status_remarks as "STATUS_REMARKS",
	     tss.screen_name as "SCREEN_NAME",
	    (select employee_number || ' - ' || first_name || ' '|| last_name from tb_emp_hrms teh 
               where employee_number in (select role from tb_section_status tss2 
               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
               and TSS.section_id =tss2.section_id 
               and tss2.status ='N'
               and TSS2."role" ='DVU7' ))  as "RAISED_BY",
	     --(select first_name from tb_emp_hrms teh where first_name =DVU7)as "RAISED_BY", 
	     to_char(tss.status_timetstamp, 'DD-MM-YYYY HH24:MI:SS' ) as "RAISED_ON",
        (select role from tb_emp_hrms teh 
               where employee_number in (select role from tb_section_status tss2 
               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
               and TSS.section_id =tss2.section_id 
               and tss2.status ='N'
               and TSS2."role" ='DVU7')) as "ROLE",
          case when cop.text_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REWORK','RCU_REWORK_APPROVED')  then 'RESOLVED'
              ELSE 'PENDING'
               end as "REWORK_STATUS",  -- 
          case when cop.text_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REWORK')--,'RCU_REWORK_APPROVED') 
               then  (select employee_number || ' - ' || first_name || ' '|| last_name 
                       from tb_emp_hrms teh
--                       join tb_btc_accesscontrol ACC on teh.employee_number = ACC.emp_id 
--                       where employee_number in (ACC.emp_id ))
                        where exists (select 1 from tb_btc_accesscontrol ACC
                                       where teh.employee_number = ACC.emp_id
                                         and ACC.system_role ='RM'
                                         and object_pri_key_1 =x_object_pri_key_1 
                                         )) 
               when COP.text_1 in ('RCU_REWORK')
               then ''
               when COP.text_1 in ('RCU_REWORK_APPROVED','BOM_REWORK_APPROVED')
               then COP.modify_emp_id  
               else '' END as "RESOLVED_BY",
          case when cop.text_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','RCU_REWORK_APPROVED','BOM_REWORK') 
               then to_char(cop.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )
               else '' end as "MODIFIED_ON",
        (case when cop.text_1 in ('DVU_REWORK','RCU_REWORK','DVU_ASSIGNED','RCU_ASSIGNED','RCU_REWORK_APPROVED') then ''
        else TEXT_2 end)  as "RM_REMARKS"
         from tb_section_status tss
         join tb_cop_buss_obj_txn COP on COP.object_pri_key_1 =tss.object_pri_key_1 
--         join tb_btc_accesscontrol ACC on ACC.object_pri_key_1 =COP.object_pri_key_1 
      --   and ACC.system_role ='RM'
       where cop.object_pri_key_1 =x_object_pri_key_1
       and tss.status not in ('W','Y','R')
       and TSS."role" =X_LOGIN_ID
       and case when cop.text_1 = 'RCU_REWORK' 
                then  TSS."role" IN (select EMP_ID from tb_btc_accesscontrol tba 
                                       where object_pri_key_1 =X_object_pri_key_1
                            			and system_role ='RCU')
         else TSS."role" = X_LOGIN_ID end 
      order by "RAISED_ON"desc)T;
     
else 

SELECT
      jsonb_agg(row_to_json(T)) INTO P_STRING FROM (
     select tss.status_remarks as "STATUS_REMARKS",
	     tss.screen_name as "SCREEN_NAME",
	    (select employee_number || ' - ' || first_name || ' '|| last_name from tb_emp_hrms teh 
               where employee_number in (select role from tb_section_status tss2 
               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
               and TSS.section_id =tss2.section_id 
               and tss2.status ='N'
--               and TSS2."role" ='DVU7'
               ))  as "RAISED_BY",
	     --(select first_name from tb_emp_hrms teh where first_name =DVU7)as "RAISED_BY", 
	     to_char(tss.status_timetstamp, 'DD-MM-YYYY HH24:MI:SS' ) as "RAISED_ON",
        (select role from tb_emp_hrms teh 
               where employee_number in (select role from tb_section_status tss2 
               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
               and TSS.section_id =tss2.section_id 
               and tss2.status ='N'
--               and TSS2."role" ='DVU7'
               )) as "ROLE",
          case when cop.text_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REWORK','RCU_REWORK_APPROVED')  then 'RESOLVED'
              ELSE 'PENDING'
               end as "REWORK_STATUS",  -- 
          case when cop.text_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REWORK')--,'RCU_REWORK_APPROVED') 
               then  (select employee_number || ' - ' || first_name || ' '|| last_name 
                       from tb_emp_hrms teh
--                       join tb_btc_accesscontrol ACC on teh.employee_number = ACC.emp_id 
--                       where employee_number in (ACC.emp_id ))
                        where exists (select 1 from tb_btc_accesscontrol ACC
                                       where teh.employee_number = ACC.emp_id
                                         and ACC.system_role ='RM'
                                         and object_pri_key_1 =x_object_pri_key_1 
                                         )) 
               when COP.text_1 in ('RCU_REWORK')
               then ''
               when COP.text_1 in ('RCU_REWORK_APPROVED','BOM_REWORK_APPROVED')
               then COP.modify_emp_id  
               else '' END as "RESOLVED_BY",
          case when cop.text_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','RCU_REWORK_APPROVED','BOM_REWORK') 
               then to_char(cop.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )
               else '' end as "MODIFIED_ON",
        (case when cop.text_1 in ('DVU_REWORK','RCU_REWORK','DVU_ASSIGNED','RCU_ASSIGNED','RCU_REWORK_APPROVED') then ''
        else TEXT_2 end)  as "RM_REMARKS"
         from tb_section_status tss
         join tb_cop_buss_obj_txn COP on COP.object_pri_key_1 =tss.object_pri_key_1 
--         join tb_btc_accesscontrol ACC on ACC.object_pri_key_1 =COP.object_pri_key_1 
      --   and ACC.system_role ='RM'
       where cop.object_pri_key_1 =x_object_pri_key_1
       and tss.status not in ('W','Y','R')
--       and TSS."role" =X_LOGIN_ID
       and case when cop.text_1 = 'RCU_REWORK' 
                then  TSS."role" IN (select EMP_ID from tb_btc_accesscontrol tba 
                                       where object_pri_key_1 =X_object_pri_key_1
                            			and system_role ='RCU')
         else TSS."role" = X_LOGIN_ID end 
      order by "RAISED_ON"desc)T;
     
end if;
     
elsif v_count > 0 and x_platform = 'WEB' AND (X_SECTION ='' OR X_SECTION IS  NULL)
 and V_TEXT_1  = 'BOM_REWORK_APPROVED' then 
 
SELECT
      jsonb_agg(row_to_json(T)) INTO P_STRING FROM (
     select tss.status_remarks as "STATUS_REMARKS",
	     tss.screen_name as "SCREEN_NAME",
	    (select employee_number || ' - ' || first_name || ' '|| last_name from tb_emp_hrms teh 
               where employee_number in (select role from tb_section_status tss2 
               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
               and TSS.section_id =tss2.section_id 
               and tss2.status ='N'
               and tss2."role"=x_login_id))  as "RAISED_BY",
	     --(select first_name from tb_emp_hrms teh where first_name =x_login_id)as "RAISED_BY", 
	     to_char(tss.status_timetstamp, 'DD-MM-YYYY HH24:MI:SS' ) as "RAISED_ON",
        (select role from tb_emp_hrms teh 
               where employee_number in (select role from tb_section_status tss2 
               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
               and TSS.section_id =tss2.section_id 
               and tss2.status ='N'
               and tss2."role"=x_login_id)) as "ROLE",
          case when cop.text_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','RCU_REWORK_APPROVED') and TSS.rework_status ='Y' then 'RESOLVED'
              ELSE 'PENDING'
               end as "REWORK_STATUS",
          case when cop.text_1 in ('BOM_REWORK_APPROVED') and TSS.rework_status ='Y'--,'RCU_REWORK_APPROVED') 
               then  (select employee_number || ' - ' || first_name || ' '|| last_name from tb_emp_hrms teh where employee_number in (ACC.emp_id ))
               else '' END as "RESOLVED_BY",      
          case when cop.text_1 in ('BOM_REWORK_APPROVED')and TSS.rework_status ='Y' 
               then to_char(cop.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )
               else '' end as "MODIFIED_ON",
        case when cop.text_1 in ('BOM_REWORK_APPROVED')and TSS.rework_status ='Y'
               then TEXT_2
        else '' end  as "RM_REMARKS"
         from tb_section_status tss
         join tb_cop_buss_obj_txn COP on COP.object_pri_key_1 =tss.object_pri_key_1 
         join tb_btc_accesscontrol ACC on ACC.object_pri_key_1 =COP.object_pri_key_1 
         and ACC.system_role ='RM'
       where cop.object_pri_key_1 =x_object_pri_key_1
       and tss.status not in ('W','Y','R')
       and TSS."role" =X_LOGIN_ID
      order by "RAISED_ON"desc)T;     
     
ELSIf v_count > 0 and x_platform = 'WEB' AND (X_SECTION ='' OR X_SECTION IS NULL)
and V_TEXT_1 in ('BOM_DVU_REWORK_APPROVED','DVU_REWORK') then 

 SELECT
      jsonb_agg(row_to_json(T)) INTO P_STRING FROM (
--     select * from (
select tss.screen_name as "SCREEN_NAME",
         tss.status_remarks as "STATUS_REMARKS",
    (select employee_number || ' - ' || first_name || ' '|| last_name from tb_emp_hrms teh 
	    join tb_function_roles_mst FUN on FUN.role_name = TEH."role" 
               where employee_number in (select role from tb_section_status tss2 
               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
               and TSS.section_id =tss2.section_id 
               --and tss2.status ='W'
               and FUN.default_system_role_code ='DVU'))  as "RAISED_BY",
	     to_char(tss.status_timetstamp, 'DD-MM-YYYY HH24:MI:SS' ) as "RAISED_ON",
   (select role from tb_emp_hrms teh 
        join tb_function_roles_mst FUN on FUN.role_name = TEH."role" 
               where employee_number in (select role from tb_section_status tss2 
               where tss2.object_pri_key_1 = TSS.object_pri_key_1 
               and TSS.section_id =tss2.section_id 
               and FUN.default_system_role_code ='DVU'
               --and tss2.status ='W'
               )) as "ROLE",
          case when cop.text_1 in ('BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','RCU_REWORK_APPROVED') 
                 and TSS.rework_status ='Y'
               then 'RESOLVED'
              ELSE 'PENDING'
               end as "REWORK_STATUS",
          case when cop.text_1 in ('BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','RCU_REWORK_APPROVED') 
                   and TSS.rework_status ='Y'
               then  (select employee_number || ' - ' || first_name || ' '|| last_name from tb_emp_hrms teh where employee_number in (ACC.emp_id ))
               else '' END as "RESOLVED_BY",      
          case when cop.text_1 in ('BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','RCU_REWORK_APPROVED') 
                  and TSS.rework_status ='Y'
               then to_char(cop.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )
               else '' end as "MODIFIED_ON",
          case when cop.text_1 in ('DVU_REWORK', 'BOM_DVU_REWORK_APPROVED')and TSS.rework_status ='Y'
               then TEXT_2
               else '' end  as "RM_REMARKS"
--          ROW_NUMBER() OVER(PARTITION BY 
--                               SCREEN_NAME,STATUS_REMARKS,role
--           ORDER BY SCREEN_NAME
--           ) AS rn
         from tb_section_status tss
         join tb_cop_buss_obj_txn COP on COP.object_pri_key_1 =tss.object_pri_key_1 
         join tb_btc_accesscontrol ACC on ACC.object_pri_key_1 =COP.object_pri_key_1 
         and ACC.system_role ='RM'         
       where tss.object_pri_key_1 =x_object_pri_key_1
	   and tss.status ='N'
--	   and TSS.role in (select HRMS.employee_number from tb_function_roles_mst tfrm 
--	                     join tb_emp_hrms hrms on hrms."role" = tfrm.role_name 
--	                     WHERE TFRM.default_system_role_code ='DVU') -- added on 9/11/22
--	   (select FIRST_NAME from tb_emp_hrms teh2 
--	                     where role = 'DVU')
	      and TSS.role = x_login_id  -- NEED TO UNCOMMENT
--	      )A
--      where rn > 1
)T;


elsif v_count > 0 and x_platform = 'MOBILE' then 

SELECT REPLACE(CONCAT('{"object_data": ', ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(T))), '}'),'},[{','},{') INTO P_STRING
      FROM (   
    	select screen_name  as "CODE" , status_remarks as "VALUE"
		from tb_section_status 
		 where status = 'N'
		 and section_id !='VKYC'
		 and object_pri_key_1 =x_object_pri_key_1
		 and role in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =x_object_pri_key_1
--					and fm.default_system_role_code ='Approver'
                    and case when (select COUNT(1) from tb_section_status tss 
										 where object_pri_key_1 =X_object_pri_key_1
										   and role in (select TEH.employee_number from tb_emp_hrms teh , 
														                     tb_function_roles_mst fm , tb_section_status tss 
																			where teh."role" = fm.role_name 
																			and tss."role" =teh.employee_number 
																			and tss.object_pri_key_1 =X_object_pri_key_1
																			and fm.default_system_role_code ='Approver')
								)>0 then 	fm.default_system_role_code in  ('Approver')										
					      else 
					        fm.default_system_role_code in  ('DVU')									
						      end 
					order by TSS.role
				))t; 
	
  SELECT COUNT(*) INTO V_INT 	from tb_section_status 
		 where status = 'N'
		 and object_pri_key_1 =x_object_pri_key_1
		 and section_id !='VKYC'
		   and role in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =x_object_pri_key_1
--					and fm.default_system_role_code ='Approver'
                    and case when (select COUNT(1) from tb_section_status tss 
										 where object_pri_key_1 =X_object_pri_key_1
										   and role in (select TEH.employee_number from tb_emp_hrms teh , 
														                     tb_function_roles_mst fm , tb_section_status tss 
																			where teh."role" = fm.role_name 
																			and tss."role" =teh.employee_number 
																			and tss.object_pri_key_1 =X_object_pri_key_1
																			and fm.default_system_role_code ='Approver')
								)>0 then 	fm.default_system_role_code in  ('Approver')										
					      else 
					        fm.default_system_role_code in  ('DVU')									
						      end 
					order by TSS.role
				);
 
select TEXT_2 into V_TEXT2	from tb_cop_buss_obj_txn tcbot 
  where object_pri_key_1 =x_object_pri_key_1;
		 
	end if;	 

  IF P_STRING = ''then 
     P_STRING := NULL;
  END IF;
	 
 OPEN X_RESULT FOR
  SELECT
    P_STRING AS "OBJECT",
	V_INT AS "COUNT",
V_TEXT2 as "FINAL_REMARKS";
 RETURN X_RESULT;
	 
/*
EXCEPTION WHEN OTHERS THEN

V_ERR:=SQLERRM;
OPEN ref FOR SELECT '' as "UNSUCCESSFUL",
'In-correct data. Some error has Occured' as "ERROR_REMARKS",
                         'tb_client_master' as "TABLENAME",
                '' as "ACTION";

return ref;                                    
*/
END;
 
 $function$
;

CREATE OR REPLACE FUNCTION public.set_object(x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_object_data text, x_version_no character varying, x_modification_no character varying, x_login_id character varying, x_text_1 character varying, x_text_2 character varying, x_text_3 character varying, x_text_4 character varying, x_text_5 character varying, x_text_6 character varying, x_text_7 character varying, x_text_8 character varying, x_text_9 character varying, x_text_10 character varying, x_is_active character varying, x_pw_session_id character varying, x_device_create_timestamp character varying, x_device_modify_timestamp character varying, x_process_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ declare 
V_ERR VARCHAR(4000);
V_SYSTIME_VAR timestamp;
X_RESULT refcursor := 'cur';
i integer;
v_count int;
v_ref_input1 text;
v_state text;
v_msg text;
v_detail text;
v_hint text;
v_context text;
x_workflow_group_id_attr text := '->''LAF''->>''WORKFLOW_GROUP_ID''';
x_object_pri_key_1_attr text := '->''LAF''->>''LAF_ID''';
x_object_pri_key_2_attr text := '->''LAF''->''ENTITY_DATA''->''COAPPLICANT''#>''{[*],->>''COAPPLICANT_ID''}''';
--x_object_pri_key_3_attr text:='->''LAF''->''ENTITY_DATA''->''COAPPLICANT''#>''{[*],->>''COAPPLICANT_ID''}''';--'->''LAF''->''ENTITY_DATA''->''FIN_DOCS''->''FINANCIAL_DOCUMENT''#>''{[*],->>''DOC_ID''}''';
 x_object_pri_key_3_attr text := '->''LAF''->''ENTITY_DATA''->''FIN_DOCS''->''FINANCIAL_DOCUMENT''#>''{[*],->>''DOC_ID''}''';
x_object_pri_key_2_attr_doc text := '->''LAF''->''ENTITY_DATA''->''FIN_DOCS''->''FINANCIAL_DOCUMENT''#>''{[*],->''COAPPLICANT''->>''CODE''}''';
x_object_pri_key_3_attr_doc text := '->''LAF''->''ENTITY_DATA''->''FIN_DOCS''->''FINANCIAL_DOCUMENT''#>''{[*],->>''DOC_PDF_BUNDLE''}''';
x_object_pri_key_2_attr_doc_app_coapp text := '->''LAF''->''ENTITY_DATA''->''APP_COAPP''#>''{[*],->''COAPPLICANT''->>''CODE''}''';
x_object_pri_key_3_attr_doc_app_coapp text := 'NA';
--'->''LAF''->''ENTITY_DATA''->''APP_COAPP''#>''{[*],->>''DOC_ID''}''';
 v_WORKFLOW_GROUP_ID varchar(100);
v_created_by_dsa varchar(100);
v_cp_code varchar(100);
v_hierarchy_id varchar(100);
v_chk_seq_cnt INT;
v_seq_name varchar(100);
v_seq_str varchar(2000);
v_unique_no varchar(100);
v_unique_ref_no varchar(100);
v_OBJECT_DATA text;
v_final_object_data text;
V_TEXT1 varchar(100);
V_TEXT2 varchar(100);
v_status varchar(100);
v_supervisor_number varchar(100);
v_section INT;
----------------------------
v_applicant_name varchar(500);
v_journey_type varchar(50);
v_loan_amount varchar(50);
v_variable_json text;
v_org_id varchar(500) := 'DECIMAL-CGT6BYPRBI';
v_app_id varchar(500):= 'KOTAK_CA-269EW37XAL';
v_current_timestamp varchar(100);
V_mobile_no varchar(20);
v_user_name varchar(200);
v_run_flag varchar(1) := 'Y';
v_access_count int;
v_cnt_chk int;
v_prc_fos_pending_cnt int;
v_cop_fos_pending_status varchar(200);
v_obj_data text;
v_laf_version varchar(5);
v_text_3 varchar(5);
v_object_pri_key_2 varchar(20);
v_final_remarks varchar(2000);
V_STATUS_1 varchar(200);
V_TEXT_1 varchar(200);
------------------------------------------------------
cur_out_sms refcursor := 'cur_event';
rec_column_sms RECORD;
v_cur_out_sms_response_code varchar(10);
v_cur_out_sms_response_message varchar(1000);
v_cur_out_sms_response_type varchar(10);

V_APPROVER_ID varchar(100);
v_access_type varchar(100);

begin 
	
--	 select access_type into v_access_type  from public.tb_btc_accesscontrol tba where  object_pri_key_1 =x_object_pri_key_1
 --   and system_role  = 'RM' and emp_id = X_LOGIN_ID;
     
    
 --   if coalesce(v_access_type,'W') = 'W' then
    
	--v_workflow_group_id:='CA';
			select
			           CAST(X_OBJECT_DATA AS JSON)->'LAF'->'WORKFLOW_STATUS'#>>'{0,CREATED_BY}' AS CREATED_BY_DSA into v_created_by_dsa;
			   select  X_OBJECT_DATA::json -> 'AOF'->> 'WORKFLOW_STATUS',
			           x_object_data::json->'AOF'->>'WORKFLOW_JOURNEY',
			           x_object_data::json-> 'AOF'->'WORK_VARIABLES'->'REWORK'->>'FINAL_REMARK',
			           x_object_data::json->'AOF'->>'WORKFLOW'
			          into v_status, v_journey_type, v_final_remarks,v_workflow_group_id;
			         
			     select CONCAT(v_journey_type,to_char(NOW(), 'ddmmyyhh24missSS')) into v_object_pri_key_2;
			     
			    select APPROVER_ID into V_APPROVER_ID from tb_se_app_mapping
			    where se_id = x_login_id;
			
			 select count(1) into v_count
			    from TB_COP_BUSS_OBJ_TXN txn
			    where txn.OBJECT_TYPE = X_OBJECT_TYPE
				 and txn.object_pri_key_1 =x_object_pri_key_1
				 and  coalesce(txn.object_pri_key_2,'NA') = coalesce(x_object_pri_key_2,'NA')
				 and  coalesce(txn.object_pri_key_3,'NA') = coalesce(x_object_pri_key_3,'NA');
			
			v_count := coalesce(v_count, 0);
		--------------------------------------------------------------------------------------	
			 select OBJECT_DATA::json -> 'AOF'->> 'WORKFLOW_STATUS' into V_STATUS_1 
			   from tb_cop_buss_obj_txn tcbot 
			     where object_pri_key_1 =X_OBJECT_PRI_KEY_1;
			----------------------------------------------------------------------------------
			select supervisor_emp_no into v_supervisor_number from tb_emp_hrms teh 
			 where employee_number = x_login_id;
			   
			V_SYSTIME_VAR := current_timestamp;
			 if v_count = 0 then 
			
			 insert into TB_COP_BUSS_OBJ_TXN ( 
			    OBJECT_TYPE,
				OBJECT_PRI_KEY_1,
				OBJECT_PRI_KEY_2,
				OBJECT_PRI_KEY_3,
				OBJECT_DATA,
				--SERVER_VERSION_NUMBER,
				--DEVICE_MODIFICATION_NUMBER,
				LOGIN_ID,
				modify_emp_id,
				CREATE_PW_SESSION_ID,
				IS_ACTIVE,
				DEACTIVATED_BY,
				--DEACTIVATED_BY_PRC,	
				DEACTIVATED_TIMESTAMP,
				TEXT_1,
				TEXT_2,
				TEXT_3,
				TEXT_4,
				TEXT_5,
				TEXT_6,
				TEXT_7,
				TEXT_8,
				TEXT_9,
				TEXT_10,
				CREATED_TIMESTAMP,
				--CREATED_BY,
				create_user_hierarchy_id,
				DEVICE_CREATE_TIMESTAMP,
				lead_journey)
				values
				( X_OBJECT_TYPE,
				X_OBJECT_PRI_KEY_1,
				COALESCE(X_OBJECT_PRI_KEY_2,'NA'),
				COALESCE(X_OBJECT_PRI_KEY_3,'NA'),
				cast(x_object_data as jsonb),
				--TO_NUMBER(X_VERSION_NO, '999999999.99') + 1,
				--TO_NUMBER(X_MODIFICATION_NO, '999999999.99'),
				X_LOGIN_ID,
				X_LOGIN_ID,
				X_PW_SESSION_ID,
				X_IS_ACTIVE,
				(case when X_IS_ACTIVE = 'N' then X_LOGIN_ID else null end),
			--	(case when X_IS_ACTIVE = 'N' then X_PROCESS_ID else null end),
				(case when X_IS_ACTIVE = 'N' then CURRENT_TIMESTAMP else null end),
				v_status, 
				 X_TEXT_2,
				X_TEXT_3,
				X_TEXT_4,
				X_TEXT_5,
				X_TEXT_6,
				X_TEXT_7,
				X_TEXT_8,
				X_TEXT_9,
				'0',
				CURRENT_TIMESTAMP,
				--X_PROCESS_ID,
				'CREATE_USER_HIERARCHY_ID' ,
				to_timestamp(X_DEVICE_CREATE_TIMESTAMP, 'yyyy-mm-dd hh24:mi:ss'),
			      'Assisted');
			
			INSERT INTO public.tb_cop_metadata_txn
			(
			object_pri_key_1,
			object_pri_key_2,
			object_pri_key_3,
		  crn,
			account_no,
			contact_mobile,
			id_name_add,
			entity_name,
			scheme_code,
			stat, stat1,
			crn_entity, aus_crn, privy, caseid, lead_id, opening_branch,
			constitution_type, region_name, device_create_timestamp,
			device_modify_timestamp, assigned_user_id,
			assigned_rm,
			current_workstep,
			--assigned_to,
			login_id,
			modify_emp_id, text_1, text_2, text_3, text_4,
			text_5, text_6, text_7, text_8, text_9, text_10, created_timestamp,
			modified_timestamp, modified_by, create_user_hierarchy_id, is_active,workflow_status,program_option,object_data,lead_journey)
			values
			(X_OBJECT_PRI_KEY_1,
			COALESCE(X_OBJECT_PRI_KEY_2,'NA'),
			COALESCE(X_OBJECT_PRI_KEY_3,'NA'),
			x_object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY',
			x_object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO',
			x_object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE',
			x_object_data::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD',
			x_object_data::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1',
			x_object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE',
			X_TEXT_9,
			X_TEXT_9,
			x_object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY',
			x_object_data::JSON->'AOF'->'CA'->>'CRN_AUS',
			x_object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE',
			x_object_data::JSON->'AOF'->>'LEAD_ID',
			x_object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID',
			x_object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE',
			x_object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE',
			x_object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE',
			to_timestamp(X_DEVICE_CREATE_TIMESTAMP, 'yyyy-mm-dd hh24:mi:ss'),
			to_timestamp(X_DEVICE_MODIFY_TIMESTAMP, 'yyyy-mm-dd hh24:mi:ss'),
			X_LOGIN_ID,
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = X_LOGIN_ID),
			  '',
			 -- ACC.update_login_id,
			  X_LOGIN_ID,
			  X_LOGIN_ID,
			  v_status,
			 X_TEXT_2, X_TEXT_3, X_TEXT_4, X_TEXT_5, X_TEXT_6, X_TEXT_7, X_TEXT_8, X_TEXT_9,'0',
			CURRENT_TIMESTAMP,
			CURRENT_TIMESTAMP,
			X_PROCESS_ID,
			'CREATE_USER_HIERARCHY_ID',
			X_IS_ACTIVE,
			v_status,
			x_object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE',
			cast(x_object_data as jsonb),
			'Assisted'
			);
			
			else
		/*	if v_count > 0 and  --commented on 08/07 by arpit
			  ((v_status = 'BOM_REWORK_APPROVED' and v_status_1 != 'DVU_REWORK')OR       
			     (v_status = 'SUBMITTED' and v_status_1 not in ('BOM_REWORK'))or
			     (v_status = 'ASSIGNED' and v_status_1 not in ('SUBMITTED'))or
			     (v_status = 'DVU_REWORK_APPROVED' and v_status_1 != 'BOM_REWORK')or
			     (v_status = 'BOM_APPROVED' and v_status_1 != 'BOM_REWORK_APPROVED'))
			 or  v_status not in ('DVU_REWORK_APPROVED','BOM_REWORK_APPROVED','SUBMITTED',
			                       'BOM_REJECT','BOM_APPROVED','DVU_ASSIGNED','DVU_APPROVED',
			                       'RCU_ASSIGNED','RCU_REWORK','RCU_APPROVED','RCU_REJECT','ASSIGNED')   			    
			then   */
			
			select text_1  into V_TEXT_1 from tb_cop_buss_obj_txn 
            where OBJECT_PRI_KEY_1 = X_OBJECT_PRI_KEY_1;
        
            
        if V_TEXT_1 in ('ASSIGNED', 'BOM_REWORK', 'DVU_REWORK','MOVETOASSISTED')
        THEN     
			
			
			update TB_COP_BUSS_OBJ_TXN cop
				set 
					OBJECT_DATA = cast(x_object_data as jsonb),
					--SERVER_VERSION_NUMBER = TO_NUMBER(X_VERSION_NO, '999999999.99') + 1,
					--DEVICE_MODIFICATION_NUMBER = TO_NUMBER(X_MODIFICATION_NO, '999999999.99'),
					TEXT_1 =v_status,
					TEXT_2=  (case when v_status in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED')
                                --and v_final_remarks is not null or v_final_remarks!=''
					               then v_final_remarks else text_2 
					               end),
				    TEXT_3 = X_TEXT_3,
					TEXT_4 = X_TEXT_4,
					TEXT_5 = X_TEXT_5,
					TEXT_6 = X_TEXT_6,
					TEXT_7 = X_TEXT_7,
					TEXT_8 = X_TEXT_8,
					TEXT_9 = X_TEXT_9,
					TEXT_10 = '0',
					IS_ACTIVE = X_IS_ACTIVE,
					LOGIN_ID = X_LOGIN_ID,
					--current_user_hierarchy_id = v_hierarchy_id,
					DEACTIVATED_BY =(case when X_IS_ACTIVE = 'N' then X_LOGIN_ID else null end),
					DEACTIVATED_BY_PRC =(case when X_IS_ACTIVE = 'N' then X_PROCESS_ID else null end),
					DEACTIVATED_TIMESTAMP =(case when X_IS_ACTIVE = 'N' then CURRENT_TIMESTAMP else null end),
					LAST_PW_SESSION_ID = X_PW_SESSION_ID,
					MODIFIED_TIMESTAMP = CURRENT_TIMESTAMP,
					MODIFIED_BY = X_PROCESS_ID,
					DEVICE_MODIFY_TIMESTAMP = to_timestamp(X_DEVICE_MODIFY_TIMESTAMP, 'yyyy-mm-dd hh24:mi:ss')
				where OBJECT_TYPE = X_OBJECT_TYPE
				 and OBJECT_PRI_KEY_1 = X_OBJECT_PRI_KEY_1;
				
		--		insert into table_1 values(X_OBJECT_PRI_KEY_1);     
				
				update tb_cop_metadata_txn met
					set
					object_data  = cast(x_object_data as jsonb),
					object_pri_key_1 = X_OBJECT_PRI_KEY_1,
					object_pri_key_2 = X_OBJECT_PRI_KEY_2,
					object_pri_key_3 = X_OBJECT_PRI_KEY_3,
					crn = x_object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY',
					account_no  = x_object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO',
					contact_mobile  = x_object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE',
					id_name_add = x_object_data::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD',
					entity_name =  x_object_data::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1',
					scheme_code   = x_object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE',
					stat =X_TEXT_9,
					stat1  = X_TEXT_9,
					crn_entity = x_object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY',
					aus_crn = x_object_data::JSON->'AOF'->'CA'->>'CRN_AUS',
					privy = x_object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE',
					caseid =x_object_data::JSON->'AOF'->>'LEAD_ID',
					lead_id = x_object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID',
					opening_branch=x_object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE',
					constitution_type = object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE',
					region_name  = x_object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE',
					device_create_timestamp =to_timestamp(X_DEVICE_CREATE_TIMESTAMP, 'yyyy-mm-dd hh24:mi:ss'),
					device_modify_timestamp = to_timestamp(X_DEVICE_MODIFY_TIMESTAMP, 'yyyy-mm-dd hh24:mi:ss'),
					assigned_user_id =X_LOGIN_ID,
					assigned_rm =(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = X_LOGIN_ID),
					current_workstep ='',
					--assigned_to =
					login_id =X_LOGIN_ID,
					modify_emp_id=X_LOGIN_ID,
					text_1= v_status,
					TEXT_2=  (case when v_status in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED')
                                --and v_final_remarks is not null or v_final_remarks!=''
					               then v_final_remarks else text_2 
					               end),
					--X_TEXT_2,
					text_3= X_TEXT_3,
					text_4= X_TEXT_4,
					text_5= X_TEXT_5,
					text_6= X_TEXT_6,
					text_7= X_TEXT_7,
					text_8= X_TEXT_8,
					text_9= X_TEXT_9,
					text_10= '0',
--					created_timestamp=CURRENT_TIMESTAMP,
					modified_timestamp=CURRENT_TIMESTAMP,
					modified_by=X_PROCESS_ID,
					create_user_hierarchy_id='CREATE_USER_HIERARCHY_ID',
					is_active = x_is_active,
					workflow_status = v_status,
					program_option = x_object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				where OBJECT_PRI_KEY_1 = X_OBJECT_PRI_KEY_1;
			
				
				
			end if;
		end if;
		
			perform sp_btc_prc_grp_disp (v_workflow_group_id ,X_OBJECT_PRI_KEY_1 ,'','',null ,null ,null ,null ,'AOF' ,'MBRMAOFUPD' ,v_status,'NA' ,x_object_data,X_LOGIN_ID ,'' ,'' ,'' ,'' ,'' ,'' ,'');
			
			
			
			if v_status = 'ASSIGNED' and (v_status = 'ASSIGNED' and v_status_1 != 'SUBMITTED')then
			 perform sp_btc_prc_grp_disp (v_workflow_group_id ,X_OBJECT_PRI_KEY_1 ,'','',null ,null ,null ,null ,'AOF' ,'SYSLEDASN' ,'ASSIGN','NA' ,x_object_data,X_LOGIN_ID ,'' ,'' ,'' ,'' ,'' ,'' ,'');
			
			end if ;
			
			if v_status = 'SUBMITTED' then 
			perform sp_btc_prc_grp_disp (v_workflow_group_id ,X_OBJECT_PRI_KEY_1 ,'','',null ,null ,null ,null ,'AOF' ,'MBRMAOFUPD' ,'SUBMITTED','NA' ,x_object_data,X_LOGIN_ID ,'' ,'' ,'SUBMITTED' ,'' ,'' ,'' ,'');
			end if ;
		
		
			select count(*) into v_section from tb_section_status tss 
			  where object_pri_key_1 =X_OBJECT_PRI_KEY_1;
			
			if v_status = 'SUBMITTED' and v_section = 0 and (v_status = 'SUBMITTED' and v_status_1 != 'BOM_REWORK')then 
			perform public.sp_insert_section_for_user(x_object_type,x_object_pri_key_1,'','',x_object_data,x_login_id);
			end if ;
			
			--end--
			if v_status = 'REJECTED' then 
			perform sp_btc_prc_grp_disp (v_workflow_group_id ,X_OBJECT_PRI_KEY_1 ,'','',null ,null ,null ,null ,'AOF' ,'MBRMAOFUPD' ,'REJECT','NA' ,x_object_data,X_LOGIN_ID ,'' ,'' ,'REJECTED' ,'' ,'' ,'' ,'');
			end if ;
				
		
			
			if v_status = 'REWORK' then 
			perform sp_btc_prc_grp_disp (v_workflow_group_id ,X_OBJECT_PRI_KEY_1 ,'','',null ,null ,null ,null ,'AOF' ,'PRBOMAOFUPD' ,'REWORK','NA' ,x_object_data,X_LOGIN_ID ,'' ,'' ,'REWORK' ,'' ,'' ,'' ,'');
			end if ;
			
			    
			if ((v_status = 'BOM_REWORK_APPROVED' and v_status_1 != 'DVU_REWORK') OR       
			    (v_status = 'SUBMITTED' and v_status_1 not in ( 'BOM_REWORK','ASSIGNED','SUBMITTED'))or 
			--    (v_status = 'SUBMITTED' and v_status_1 != 'BOM_REWORK')or
			    (v_status = 'BOM_REWORK' and v_status_1 != 'BOM_REWORK_APPROVED')or
			    (v_status = 'BOM_APPROVED' and v_status_1 != 'BOM_REWORK_APPROVED')or
			    (v_status = 'BOM_APPROVED' and v_status_1 != 'SUBMITTED')or
			     (v_status = 'BOM_DVU_REWORK_APPROVED' and v_status_1 != 'BOM_APPROVED')
			    ) then
			     
			perform sp_btc_prc_grp_disp (v_workflow_group_id ,X_OBJECT_PRI_KEY_1 ,'','',null ,null ,null ,null ,'AOF' ,'PRRMSEAOFUPD' ,'REWORK','NA' ,x_object_data,X_LOGIN_ID ,'' ,'' ,'BOM_REWORK_APPROVED' ,'' ,'' ,'' ,'');
		--	if ( v_status = 'BOM_REWORK_APPROVED' ) then
		    perform  public.sp_insert_rework_lead_details(x_object_type,x_object_pri_key_1,x_object_pri_key_2,x_object_pri_key_3,x_login_id,v_status,v_final_remarks);
				
				
				update tb_section_status 
				 set rework_status ='Y',
				    modified_by ='set_object1'
				where object_pri_key_1 =X_OBJECT_PRI_KEY_1
				 and role in (select TEH.employee_number from tb_emp_hrms teh , 
				                     tb_function_roles_mst fm , tb_section_status tss 
									where teh."role" = fm.role_name 
									and tss."role" =teh.employee_number 
									and tss.object_pri_key_1 =X_OBJECT_PRI_KEY_1
									and fm.default_system_role_code ='Approver'
								)
				and status ='N';
			
		/*		update tb_section_status 
				 set role = V_APPROVER_ID,
				   modified_by ='set_object2'
				where object_pri_key_1 =X_OBJECT_PRI_KEY_1
				 and role in (select TEH.employee_number from tb_emp_hrms teh , 
				                     tb_function_roles_mst fm , tb_section_status tss 
									where teh."role" = fm.role_name 
									and tss."role" =teh.employee_number 
									and tss.object_pri_key_1 =X_OBJECT_PRI_KEY_1
									and fm.default_system_role_code ='Approver'
								)
				--and role != V_APPROVER_ID
				;     */
			
			end IF;
			
			if ((v_status = 'DVU_REWORK_APPROVED' and v_status_1 != 'BOM_REWORK')or
			    (v_status = 'DVU_REWORK_APPROVED' and v_status_1 != 'BOM_DVU_REWORK_APPROVED')or
			    (v_status = 'DVU_APPROVED' and v_status_1 != 'DVU_REWORK_APPROVED')or -- ADDING ON 27 JAN
			    (v_status = 'DVU_APPROVED' and v_status_1 != 'BOM_REWORK_APPROVED')or -- ADDING ON 27 JAN
			    (v_status = 'DVU_APPROVED' and v_status_1 != 'SUBMITTED'))  -- ADDING ON 27 JAN
			    then 
			perform sp_btc_prc_grp_disp (v_workflow_group_id ,X_OBJECT_PRI_KEY_1 ,'','',null ,null ,null ,null ,'AOF' ,'PRRMSEDAOFUPD' ,'REWORK','NA' ,x_object_data,X_LOGIN_ID ,'' ,'' ,'DVU_REWORK_APPROVED' ,'' ,'' ,'' ,'');
			perform  public.sp_insert_rework_lead_details(x_object_type,x_object_pri_key_1,x_object_pri_key_2,x_object_pri_key_3,x_login_id,v_status,v_final_remarks);
			
		--	if v_status = 'BOM_DVU_REWORK_APPROVED' then
				update tb_section_status 
				 set rework_status ='Y',
				 modified_by ='set_object3'
				where object_pri_key_1 =X_OBJECT_PRI_KEY_1
				 and role in (select TEH.employee_number from tb_emp_hrms teh , 
				                     tb_function_roles_mst fm , tb_section_status tss 
									where teh."role" = fm.role_name 
									and tss."role" =teh.employee_number 
									and tss.object_pri_key_1 =X_OBJECT_PRI_KEY_1
									and fm.default_system_role_code ='DVU'
								)
				and status ='N';
				
				update tb_section_status 
				 set role = V_APPROVER_ID,
				 modified_by ='set_object4'
				where object_pri_key_1 =X_OBJECT_PRI_KEY_1
				 and role in (select TEH.employee_number from tb_emp_hrms teh , 
				                     tb_function_roles_mst fm , tb_section_status tss 
									where teh."role" = fm.role_name 
									and tss."role" =teh.employee_number 
									and tss.object_pri_key_1 =X_OBJECT_PRI_KEY_1
									and fm.default_system_role_code ='Approver'
								)
				--and role != V_APPROVER_ID
			;
			end IF;
			
			if v_status = 'REJECTED' then 
				perform  public.sp_set_rm_reject_lead_data(x_object_type,x_object_pri_key_1,x_object_pri_key_2,x_object_pri_key_3,x_object_data);
			end if;
		
		open X_RESULT for
		SELECT 'SUCCESS' as "ISSUCCESSFUL",
		                          '' as "ERROR_REMARKS",
		                          X_OBJECT_TYPE||X_OBJECT_PRI_KEY_1 as "PRIMARY_KEY_VALUE",
		                          'OBJECT_TYPE||OBJECT_PRI_KEY_1' as "PRIMARY_KEY_COLUMN_NAME",
		                          TO_CHAR(V_SYSTIME_VAR,'YYYY-MM-DD hh24:mi:SS') as "LAST_SYNC_TIMESTAMP",
		                          'tb_bussiness_data_obj' as "TABLENAME",
		                  		  '' as "ACTION";

 /*else
		open X_RESULT for
		SELECT 'SUCCESS' as "ISSUCCESSFUL",
		                          'Record update - permission denied' as "ERROR_REMARKS",
		                          X_OBJECT_TYPE||X_OBJECT_PRI_KEY_1 as "PRIMARY_KEY_VALUE",
		                          'OBJECT_TYPE||OBJECT_PRI_KEY_1' as "PRIMARY_KEY_COLUMN_NAME",
		                          TO_CHAR(V_SYSTIME_VAR,'YYYY-MM-DD hh24:mi:SS') as "LAST_SYNC_TIMESTAMP",
		                          'tb_bussiness_data_obj' as "TABLENAME",
		                  		  '' as "ACTION";   */

--end if;

return X_RESULT;

exception
		when others then get stacked diagnostics v_state = returned_sqlstate,
		v_msg = message_text,
		v_detail = pg_exception_detail,
		v_hint = pg_exception_hint,
		v_context = pg_exception_context;


perform sp_ins_db_exception_log( 'DECIMAL-CGT6BYPRBI',
 'KOTAK_CA-269EW37XAL',
 x_process_id,
 x_process_id,
 x_pw_session_id,
 x_login_id,
 x_object_pri_key_1,
 x_object_pri_key_2,
--'object_pri_key_2',
 x_object_pri_key_3,
--'object_pri_key_3',
 x_object_type,
--'object_type',
 v_state,
--'err_state',
 v_msg,
--'err_msg',
 v_detail,
--'err_detail',
 v_hint,
--'err_hint',
 v_context,
--'err_context',
 x_version_no,
--'ref_data_1',
 x_modification_no,
--'ref_data_2',
 x_text_1,
--'ref_data_3',
 x_text_2,
--'ref_data_4',
 x_text_3,
--'ref_data_5',
 x_text_4,
--'ref_data_6',
 x_text_5,
--'ref_data_7',
 'N',
--'is_processed_1',
 'N',
--'is_processed_2',
 null,
--'is_processed_1_timestamp',
 null,
--'is_processed_1_timestamp',
 ''
--'developer_remarks'
);

open X_RESULT for
select
	'00' as "RESPONSE_CODE",
	err_detail "RESPONSE_MESSAGE",
	'E' "RESPONSE_TYPE",
	err_state ,
	err_msg,
	err_detail,
	err_hint,
	err_context
from
	tb_db_exception_log
where
	pw_request_id = x_pw_session_id;

return X_RESULT;

end;

$function$
;

CREATE OR REPLACE FUNCTION public.set_section_for_leads(x_object_type character varying, x_object_pri_key_1 character varying, x_role character varying, x_object character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
  X_RESULT REFCURSOR := 'cur';
  V_DATA TEXT;
  V_ROLE VARCHAR(100);
 NUM_ROWS INT;
 V_COUNT INT;
v_status VARCHAR(100);
cur_a CURSOR for SELECT json_data.key AS key1,
					json_data.value AS value1
					FROM 
					json_each_text(cast(x_object as json))
					AS json_data;
BEGIN
/*
  FOR i IN cur_a LOOP
  
  SELECT COUNT(section_id) INTO V_COUNT FROM tb_section_status 
   WHERE section_id = i.key1
  and object_pri_key_1 =x_object_pri_key_1;
--raise notice 'value of sections :%',i.key1;
--raise notice 'value of sections :%',V_COUNT;
     IF V_COUNT =0 THEN 
INSERT INTO public.tb_section_status
	(object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, object_data,"role", section_id, status, status_update_user, status_timetstamp, created_by)
	
	VALUES(x_object_type, 
	       X_OBJECT_PRI_KEY_1,
		   '',
			'',	
         	'{"descr": "", "discrepancy": {"code": 1, "value": "Yes"}}',
			x_role, 
			i.key1,
			'Y', 
			x_role, 
			CURRENT_TIMESTAMP, 
			'setleadssectionststus');

--v_status:='SUCCESS';		
 
GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
       v_status ='SUCCESS';
	ELSE 
        v_status ='FAILURE';
	END IF;

ELSIF V_COUNT >0 THEN 
  UPDATE tb_section_status
   SET     status = 'Y',
             role = x_role,
status_update_user= x_role,
status_timetstamp = CURRENT_TIMESTAMP,
       created_by = 'updleadssectionststus'
    where object_pri_key_1 = X_OBJECT_PRI_KEY_1
	 and  section_id = i.key1;

GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
       v_status ='UPDATE SUCCESS';
	ELSE 
        v_status ='FAILURE';
	END IF;
 
end if;  
 
END LOOP;
 
  OPEN X_RESULT FOR

  SELECT
    v_status AS "OBJECT";
  RETURN X_RESULT;

    EXCEPTION WHEN OTHERS THEN


          OPEN X_RESULT FOR SELECT
            '' AS "UNSUCCESSFUL",
            'In-correct data. Some error has Occured' AS "ERROR_REMARKS";

          RETURN X_RESULT;
*/
  END;
  $function$
;

CREATE OR REPLACE FUNCTION public.set_section_status_dvu(x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_login_id character varying, x_object_data character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ declare 
V_ERR VARCHAR(4000);
V_SYSTIME_VAR timestamp;
NUM_ROWS INT;
X_RESULT refcursor := 'cur1';
i integer;
V_RESULT text;
v_count int;
v_state text;
v_msg text;
v_detail text;
v_hint text;
v_context text;
cpv_count INT;
v_dvu_count int;
begin 
	
	select count(1) into v_dvu_count from tb_section_status where "role"=x_login_id and object_pri_key_1  = x_object_pri_key_1;
	

 if v_dvu_count = 0 THEN 
 INSERT INTO public.tb_section_status
	(object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, object_data,"role", 
	 section_id, status, screen_name, status_update_user, status_timetstamp, created_by)	
	select object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, cast(x_object_data as jsonb), x_login_id, 
	 section_id, 'W', screen_name,x_login_id, CURRENT_TIMESTAMP,'setsectionstatusdvu'
	from public.tb_section_status where object_pri_key_1  = x_object_pri_key_1;
	
		
   GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'SUCCESS';
	ELSE 
    V_RESULT = 'FAILURE';
	END IF;
		
 update tb_cop_buss_obj_txn 
 set text_10 =0,
 DEVICE_MODIFY_TIMESTAMP =current_timestamp
  where object_pri_key_1 =X_OBJECT_PRI_KEY_1;


 
elsE 
 update public.tb_section_status
 set  
	--  object_data        = cast(x_object_data as jsonb),
	  status             = 'W',
      rework_status      = null,
      status_remarks =     null,
	  status_timetstamp  = CURRENT_TIMESTAMP,
	  modified_by        = 'setsectionstatusdvu',
	  modified_timestamp = CURRENT_TIMESTAMP
   where object_pri_key_1 = x_object_pri_key_1
	and role             = x_login_id;

   GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'SUCCESS';
	ELSE 
    V_RESULT = 'FAILURE';
	END IF;


update tb_cop_buss_obj_txn 
 set text_10 =0,
 DEVICE_MODIFY_TIMESTAMP =current_timestamp
  where object_pri_key_1 =X_OBJECT_PRI_KEY_1;
 
end if;
open X_RESULT for
SELECT V_RESULT as "STATUS",
       'FUNCTIONALITY EXECUTED SUCCESSFULLY' as "RESPONSE_MESSAGE";

return X_RESULT;

EXCEPTION WHEN OTHERS THEN

OPEN X_RESULT FOR SELECT 'FAILURE' as "STATUS",
       'FUNCTIONALITY FAILED' as "RESPONSE_MESSAGE";


return X_RESULT;                                    

end;

$function$
;

CREATE OR REPLACE FUNCTION public.set_section_ststus(x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_role character varying, x_section_id character varying, x_status character varying, x_status_update_user character varying, x_status_remarks character varying, x_object_data character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ declare 
V_ERR VARCHAR(4000);
V_SYSTIME_VAR timestamp;
NUM_ROWS INT;
X_RESULT refcursor := 'cur';
i integer;
V_RESULT text;
v_count int;
v_state text;
v_msg text;
v_detail text;
v_hint text;
v_context text;
begin 

 select count(1) into v_count
    from tb_section_status
    where object_pri_key_1  = x_object_pri_key_1
	and role             = x_role
	and section_id       = x_section_id ;

 if v_count = 0 THEN 
 INSERT INTO public.tb_section_status
	(object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, object_data,"role", 
	 section_id, status, rework_status,status_remarks,screen_name, status_update_user, status_timetstamp, created_by)	
	VALUES(x_object_type, 
	       X_OBJECT_PRI_KEY_1,
		   COALESCE(X_OBJECT_PRI_KEY_2,'NA'),
			COALESCE(X_OBJECT_PRI_KEY_3,'NA'),          	
         	cast(x_object_data as jsonb),
			x_role, 
			x_section_id, 
			x_status, 
			x_status,
			x_status_remarks,
			x_section_id,
			X_status_update_user, 
			CURRENT_TIMESTAMP, 
			'setsectionststus');
		
   GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'SUCCESS';
	ELSE 
    V_RESULT = 'FAILURE';
	END IF;
		
 update tb_cop_buss_obj_txn 
 set text_10 =0,
 DEVICE_MODIFY_TIMESTAMP =current_timestamp
  where object_pri_key_1 =X_OBJECT_PRI_KEY_1;
 
--  GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
--	IF NUM_ROWS  > 0 THEN
--         V_RESULT = 'SUCCESS';
--	ELSE 
--    V_RESULT = 'FAILURE2';
--	END IF;

 
elsE 
 update public.tb_section_status
 set  OBJECT_PRI_KEY_2   = COALESCE(X_OBJECT_PRI_KEY_2,'NA'),
	  OBJECT_PRI_KEY_3   = COALESCE(X_OBJECT_PRI_KEY_3,'NA'),
	  role               = x_role,
	  object_data        = cast(x_object_data as jsonb),
	  section_id         = x_section_id,
      status             = x_status,
      rework_status      = x_status,
	  status_remarks     = x_status_remarks,
	  screen_name        = x_section_id,
	  status_update_user = x_status_update_user,
	  status_timetstamp  = CURRENT_TIMESTAMP,
	  modified_by        = 'setsectionststus',
	  modified_timestamp = CURRENT_TIMESTAMP
   where object_pri_key_1 = x_object_pri_key_1
	and role             = x_role
	and section_id       = x_section_id ;

   GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'SUCCESS';
	ELSE 
    V_RESULT = 'FAILURE';
	END IF;


update tb_cop_buss_obj_txn 
 set text_10 =0,
 DEVICE_MODIFY_TIMESTAMP =current_timestamp
  where object_pri_key_1 =X_OBJECT_PRI_KEY_1;
 
end if;
open X_RESULT for
SELECT V_RESULT as "STATUS",
       'FUNCTIONALITY EXECUTED SUCCESSFULLY' as "RESPONSE_MESSAGE";

return X_RESULT;

EXCEPTION WHEN OTHERS THEN

OPEN X_RESULT FOR SELECT 'FAILURE' as "STATUS",
       'FUNCTIONALITY FAILED' as "RESPONSE_MESSAGE";


return X_RESULT;                                    

end;

$function$
;

CREATE OR REPLACE FUNCTION public.set_service_payload(x_request_id character varying, x_ref_id character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_object_type character varying, x_process_group character varying, x_prc_grp_disp character varying, x_created_timestamp character varying, x_modified_timestamp character varying, x_request_payload character varying, x_response_payload character varying, x_exception_payload character varying, x_status character varying, x_is_active character varying, x_text_1 character varying, x_text_2 character varying, x_text_3 character varying, x_text_4 character varying, x_text_5 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare
X_RESULT refcursor:= 'cur_access';

BEGIN
 
 INSERT INTO public.tb_service_audit
(request_id, ref_id, object_pri_key_1, object_pri_key_2, object_pri_key_3, object_type, process_group, prc_grp_disp, created_timestamp, modified_timestamp, request_payload, response_payload, exception_payload, status, is_active, text_1, text_2, text_3, text_4, text_5)
VALUES(x_request_id, x_ref_id, x_object_pri_key_1, x_object_pri_key_2, x_object_pri_key_3, x_object_type, x_process_group, x_prc_grp_disp, x_created_timestamp, x_modified_timestamp, x_request_payload, x_response_payload, x_exception_payload, x_status, x_is_active, x_text_1, x_text_2, x_text_3, x_text_4, x_text_5);

OPEN X_RESULT for
select 'SUCCESS' as status;
return x_result;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_account_success_email_detail(x_object_pri_key character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT REFCURSOR := 'cur';
v_employee_name varchar(100);
v_reciever_email_id varchar(100);
v_modified_lead_id varchar(100);
v_object_pri_key_1 varchar(100);
BEGIN
  select concat(teh.first_name,' ',teh.middle_names,' ', teh.last_name) ,
       teh.email_address ,
       cop.object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' , cop.object_pri_key_1
	   into v_employee_name , v_reciever_email_id , v_modified_lead_id, v_object_pri_key_1
	from tb_btc_accesscontrol tba , tb_cop_buss_obj_txn COP , tb_emp_hrms teh 
	where TBA.object_pri_key_1 = COP.object_pri_key_1 
	and TEH.employee_number =tba.EMP_ID
	and tba.system_role ='RM'
	and COP.object_pri_key_1= x_object_pri_key;

if (v_object_pri_key_1 is not null and v_object_pri_key_1 != '' AND v_employee_name is not null and v_employee_name != ''
 AND v_reciever_email_id is not null and v_reciever_email_id != '' )then 
	OPEN X_RESULT for 
	select v_employee_name as "employee_name", v_reciever_email_id as "reciever_email_id", v_modified_lead_id as "modified_lead_id", 'SUCCESS' as "STATUS";
	return X_RESULT;
else 
	OPEN X_RESULT for 
	select '' as "employee_name", '' as "reciever_email_id", '' as "modified_lead_id", 'FAILURE' AS "STATUS";
	return X_RESULT;
  
 end if;
END;
  $function$
;

CREATE OR REPLACE FUNCTION public.sp_branch_region(x_branch_code character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
DECLARE 
X_RESULT refcursor:='cur';
v_string_tab TEXT;
P_STRING_FINAL   TEXT;
BEGIN
SELECT array_to_json(array_agg(row_to_json(t)))  INTO v_string_tab
    FROM (   
    	select bbh  as "code",new_region as "value"
		from tb_branch_mst
	where branch_code_as_per_newgen=x_branch_code)t;
   P_STRING_FINAL :=  CONCAT ('{  "object_data" : ', v_string_tab, '}');

   OPEN X_RESULT FOR SELECT P_STRING_FINAL;
   RETURN X_RESULT;
END; $function$
;

CREATE OR REPLACE FUNCTION public.sp_btc_auto_start_with_p(x_workflow_group_id character varying, x_process_group character varying, x_prc_grp_disp character varying, x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_text_1 character varying, x_text_2 character varying, x_text_3 character varying, x_text_4 character varying, x_text_5 character varying, x_process_remarks character varying, x_login_id character varying, x_config_id character varying, x_ref_object text, x_condition_function character varying, x_br_id character varying)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
v_prc_grp_disp_category  varchar(50);
v_parent_process_group  varchar(50);
v_iteration_count int4;
v_last_updated_timestamp varchar(50);
v_prc_grp_applicability varchar(1);
v_state   TEXT;
v_msg     TEXT;
v_detail  TEXT;
v_hint    TEXT;
v_context TEXT;
v_PW_SESSION_ID VARCHAR(500);
v_result refcursor;
cur_rec_prc_grp_disp_dtl cursor 
    is
      select  pgdc.config_id,pgdc.workflow_group_id,pgdc.event_process,
              pgdc.ref_input_1,pgdc.ref_input_2,pgdc.br_id,pgdc.condition_function,
              pgdc.process_group,pgdc.prc_grp_disp,--pgdc.level,
              pgdc.remarks,
              pgdc.notification_grp_id,pgdc.ref_batch_job,
              pgm.parent_process_group,pgm.is_auto_start_with_p,pgm.auto_start_disp
        from public.tb_btc_prc_grp_disp_cfg pgdc
        join public.tb_btc_prc_grp_mst pgm on pgm.process_group =pgdc.process_group
        join public.tb_btc_prc_grp_disp_mst dispmst on dispmst.process_group=pgm.process_group
        where  pgm.parent_process_group=x_process_group and is_auto_start_with_p='y';
--type tp_rec_prc_grp_disp is table of cur_rec_prc_grp_disp%rowtype;
--prc_grp_disp tp_rec_prc_grp_disp;   

begin
      --dbms_output.put_line('a '); 
      --open cur_rec_prc_grp_disp;
        --fetch cur_rec_prc_grp_disp into prc_grp_disp;
      --close cur_rec_prc_grp_disp; 
     
      
      --for i in 1..prc_grp_disp.count loop
        for rec in cur_rec_prc_grp_disp_dtl
       loop
        select public.sp_btc_prc_grp_disp_dtl (rec.workflow_group_id,rec.process_group ,rec.auto_start_disp ,
                                              x_object_type ,x_object_pri_key_1 ,x_object_pri_key_2 ,x_object_pri_key_3 ,x_text_1  ,
                                              x_text_2  ,x_text_3  ,x_text_4  ,x_text_5  ,x_process_remarks  ,x_login_id  ,rec.config_id ,x_ref_object,rec.condition_function,rec.br_id,'n');      --v_prc_grp_applicability         
          
        
        end loop;
       
       
     EXCEPTION
            WHEN OTHERS THEN
                  get stacked diagnostics
       v_state   = returned_sqlstate,
       v_msg     = message_text,
       v_detail  = pg_exception_detail,
       v_hint    = pg_exception_hint,
       v_context = pg_exception_context;
       select  cast(nextval('public.seq_pw_req_id') as VARCHAR) into v_PW_SESSION_ID ;  
                  perform public.sp_ins_db_exception_log(
		'DECIMAL-LDKJW5D1R2',--'org_id',
		'SAARATHI-0MY7TA7QRA',--'app_id',
		'sp_btc_auto_start_with_p',--'service_name',
		'sp_btc_auto_start_with_p',--'object_name',
		 v_PW_SESSION_ID,--'pw_request_id',
		 x_login_id,--'login_id',
		 x_object_pri_key_1,--'object_pri_key_1',
		 x_object_pri_key_2,--'object_pri_key_2',
		 x_object_pri_key_3,--'object_pri_key_3',
		 x_object_type,--'object_type',
		 v_state,--'err_state',
	     v_msg,--'err_msg',
	     v_detail,--'err_detail',
	     v_hint,--'err_hint',
	     v_context,--'err_context',
		 x_workflow_group_id,--'ref_data_1',
		 x_process_group,--'ref_data_2',
		 x_prc_grp_disp,--'ref_data_3',
		 '',--'ref_data_4',
		 '',--'ref_data_5',
		 '',--'ref_data_6',
		 '',--'ref_data_7',
		 'N',--'is_processed_1',
		 'N',--'is_processed_2',
		  NULL,--'is_processed_1_timestamp',
		  NULL,--'is_processed_1_timestamp',
		  ''--'developer_remarks'
			  );  
			
			  
      
end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_btc_get_ac_emp_loc_ag(x_workflow_group_id character varying, x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_process_group character varying, x_prc_grp_disp character varying, x_login_id character varying, x_final_system_role character varying, x_ac_location character varying, x_ac_emp_id character varying, x_ac_access_group character varying, x_ac_location_function character varying, x_ac_access_group_function character varying, t_ac_emp_function character varying, x_text_1 character varying, x_text_2 character varying, x_text_3 character varying, x_text_4 character varying, x_text_5 character varying, x_process_remarks character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare
X_RESULT refcursor:= 'cur_access';
v_PW_SESSION_ID VARCHAR(500);
v_state   TEXT;
v_msg     TEXT;
v_detail  TEXT;
v_hint    TEXT;
v_context TEXT;
v_ref_object text;
x_ac_emp_function varchar(50);
v_access_group varchar(50);
v_current_location varchar(50) default 'D';
v_current_system_role varchar(50) default 'D';
v_current_emp_id varchar(50) default 'D';
--v_create_timestamp timestamp;
--v_created_by varchar(50);
v_print varchar(500);
x_sql varchar(2000);
v_current_emp_hierarchy_id text:='';
v_current_location_hierarchy_id text:='';
v_create_timestamp timestamp;
v_created_by varchar(500):='';
v_final_emp text:='';
v_final_location text:='';
v_final_access_group text:='';

begin
	
  begin
       x_ac_emp_function := coalesce(trim(t_ac_emp_function),'sp_btc_get_acl_gen');
       select access_group,location,system_role,emp_id,emp_hierarchy_id,
              location_hierarchy_id,created_timestamp,created_by
         into v_access_group,v_current_location,v_current_system_role,v_current_emp_id,v_current_emp_hierarchy_id,
              v_current_location_hierarchy_id,v_create_timestamp,v_created_by
       from public.tb_btc_accesscontrol 
      where system_role = x_final_system_role 
        and workflow_group_id=x_workflow_group_id
        and object_pri_key_1=x_object_pri_key_1
        and object_pri_key_2=x_object_pri_key_2
        and object_pri_key_3=x_object_pri_key_3;
         raise notice 'd0';
   exception
     when others then
     --continue; 
     raise notice 'd000';
     null;
 end;
       
  raise notice 'd1';             
            
           /***************** get emp id ******************/
            if x_ac_emp_id is not null then
           
              if x_ac_emp_id like '%$.%' then
                execute 'select cast('''||v_ref_object||''' as json)'||x_ac_emp_id into v_final_emp;
                  --v_final_emp :=json_value(v_ref_object,x_ac_emp_id);
              elsif x_ac_emp_id = 'NO_CHANGE' then    
                  v_final_emp :=v_current_emp_id;
              elsif x_ac_emp_id = 'LOGIN_USER' then    
                  v_final_emp :=x_login_id; 
                   if x_ac_location is null then
                      begin
                          select coalesce(branch_code,'NF'),emp_hierarchy_id,emp_branch_hierarchy_id x_sub_disp
                            into v_final_location,v_current_emp_hierarchy_id,v_current_location_hierarchy_id  
                            from PUBLIC.vw_user_loc_branch_map 
                           where user_id=v_final_emp 
                            limit 1;
                           
                       exception
	                      when others then
	                      null;
                       end;
                   end if; 
                raise notice 'd2';    
              elsif x_ac_emp_id = 'ACL' then    
                      
                    x_sql:= 'begin '
                             ||x_ac_emp_function 
                             || '(''' || x_workflow_group_id ||''' ,'
                             || '''' ||  x_object_pri_key_1 ||''' ,'
                             || '''' ||  x_object_pri_key_2 ||''' ,'
                             || '''' ||  x_object_pri_key_3 ||''' ,'
                             || '''' ||  x_object_type ||''' ,'
                             || '''' ||  x_final_system_role || ''',:v_final_location,:v_access_group ,:v_final_emp); end;';

                  execute x_sql 
                  using out  v_final_location, out v_access_group, out v_final_emp;
              
              else
                  v_final_emp :=x_ac_emp_id;             
              end if;
              raise notice 'd3';
             
           elsif x_ac_emp_id is null and x_ac_emp_function is not null then

                 execute 'select '|| x_ac_emp_function 
                                    || '(''' || x_workflow_group_id ||''' ,'
                                    || '''' ||  x_process_group ||''' ,'
                                    || '''' ||  x_prc_grp_disp ||''' ,'
                                    || '''' ||  x_object_type ||''' ,'
                                    || '''' ||  x_object_pri_key_1 ||''' ,'
                                    || '''' ||  x_object_pri_key_2 ||''' ,'
                                    || '''' ||  x_object_pri_key_3 ||''' ,'
                                    || '''' ||  x_text_1 ||''' ,'
                                    || '''' ||  x_text_2 ||''' ,'
                                    || '''' ||  x_text_3 ||''' ,'
                                    || '''' ||  x_text_4 ||''' ,'
                                    || '''' ||  x_text_5 ||''' ,'
                                    || '''' ||  x_process_remarks ||''','''
                                   ||x_login_id ||''')' || ' ' into v_final_emp;
               
           end if ;
             raise notice 'd4';
           /***************** get location ******************/
          if x_ac_location is not null then
           
              if x_ac_location like '%$.%' then
                  
                execute 'select cast('''||v_ref_object||''' as json)'||x_ac_location into v_final_location;
                 --v_final_location := json_value(v_ref_object,x_ac_location);
              elsif x_ac_location = 'NO_CHANGE' then    
                  v_final_location :=v_current_location;
              elsif x_ac_location = 'LOGIN_USER_LOCATION'  then    
                  --v_final_location :=''; -- use function of view vw_emp_mst
                  /*select coalesce(loc_code,'nf'),emp_branch_hierarchy_id,emp_hierarchy_id 
                    into v_final_location,v_current_location_hierarchy_id,v_current_emp_hierarchy_id  
                  from vw_emp_mst where employee_number =v_final_emp and rownum =1;*/
                  select coalesce(branch_code,'nf'),emp_hierarchy_id,emp_branch_hierarchy_id 
                    into v_final_location,v_current_emp_hierarchy_id,v_current_location_hierarchy_id  
                    from public.vw_user_loc_branch_map where user_id=v_final_emp limit 1;
              elsif x_ac_location = 'ACL' and X_AC_EMP_ID  <> 'ACL' then    
                  --v_final_location :='';  --call sp
                  null;
              else
                  v_final_location :=x_ac_location;             
              end if;
              
                raise notice 'd5';
           elsif x_ac_location is null and x_ac_location_function is not null then
                  --v_final_location :=''; -- call location_function;  
                  execute  'select '|| x_ac_location_function || '(''' || x_workflow_group_id || 
                                     ''' ,'|| '''' ||  x_process_group ||
                                     ''' ,'|| '''' ||  x_prc_grp_disp || 
                                     ''' ,'|| '''' ||  x_object_type || 
                                     ''' ,'|| '''' ||  x_object_pri_key_1 ||
                                     ''' ,'|| '''' ||  x_object_pri_key_2 ||
                                     ''' ,'|| '''' ||  x_object_pri_key_3 ||
                                     ''' ,'|| '''' ||  x_text_1 || 
                                     ''' ,'|| '''' ||  x_text_2 ||
                                     ''' ,'|| '''' ||  x_text_3 ||
                                     ''' ,'|| '''' ||  x_text_4 ||
                                     ''' ,'|| '''' ||  x_text_5 ||
                                     ''' ,'|| '''' ||  x_process_remarks ||
                                     ''',''' ||x_login_id ||''')' || ' ' into v_final_location;
           
           end if ;
           
           /************** v_access_group ****************************/
          if x_ac_emp_id is not null and x_ac_access_group is not null then
           
              if x_ac_access_group like '%$.%' then
               --execute 'select cast('''||v_ref_object||''' as json)'||x_ac_access_group into v_final_access_group;
                  v_final_access_group :=''; -- get value from json path
              elsif x_ac_access_group = 'NO_CHANGE' then    
                  v_final_access_group :=v_access_group;
              elsif x_ac_access_group = 'ACL' and x_ac_emp_id <> 'ACL' then    
                  v_final_access_group :='';  --call sp       v_final_emp
              else
                  v_final_access_group :=x_ac_access_group;             
              end if;
                raise notice 'd6';
           elsif x_ac_emp_id is not null and x_ac_access_group is null and x_ac_access_group_function is not null then
                --v_final_access_group :=''; -- call access_group function;  
                execute  'select '|| x_ac_access_group_function || '(''' || x_workflow_group_id || 
                                     ''' ,'|| '''' ||  x_process_group ||
                                     ''' ,'|| '''' ||  x_prc_grp_disp || 
                                     ''' ,'|| '''' ||  x_object_type || 
                                     ''' ,'|| '''' ||  x_object_pri_key_1 ||
                                     ''' ,'|| '''' ||  x_object_pri_key_2 ||
                                     ''' ,'|| '''' ||  x_object_pri_key_3 ||
                                     ''' ,'|| '''' ||  x_text_1 || 
                                     ''' ,'|| '''' ||  x_text_2 ||
                                     ''' ,'|| '''' ||  x_text_3 ||
                                     ''' ,'|| '''' ||  x_text_4 ||
                                     ''' ,'|| '''' ||  x_text_5 ||
                                     ''' ,'|| '''' ||  x_process_remarks ||
                                     ''',''' ||x_login_id ||''')' || ' ' into v_final_access_group;
           end if ;
           
--           insert into public.test(timestamp,v_data,v_clob)
--            values(x_object_pri_key_1,
--                   x_final_system_role||','||x_ac_emp_id||','||x_ac_location,
--                  'finallocation1--'|| v_final_location);  
              
                  
           if v_final_location is null then
           --or v_current_emp_hierarchy_id is  null or v_current_location_hierarchy_id is null then
                raise notice 'd7';
              /*select coalesce(loc_code,'nf'),emp_branch_hierarchy_id,emp_hierarchy_id into 
              v_final_location,v_current_location_hierarchy_id,v_current_emp_hierarchy_id
              from vw_emp_mst where employee_number =v_final_emp  and rownum =1;*/
              begin
              
	              select coalesce(branch_code,'NF'),emp_hierarchy_id,emp_branch_hierarchy_id 
	                into v_final_location,v_current_emp_hierarchy_id,v_current_location_hierarchy_id  
	                from PUBLIC.vw_user_loc_branch_map where user_id=v_final_emp limit 1;
	                  
--	               insert into public.test(timestamp,v_data,v_clob)
--	                 values(x_object_pri_key_1,
--	                        x_final_system_role||','||x_ac_emp_id,
--	                        'finallocation2--'|| v_final_location);  
                raise notice 'd8';
              exception
	              when others then
		              v_final_location :='NA';
		              v_current_emp_hierarchy_id :='NA';
		              v_current_location_hierarchy_id :='NA';
              end;
              
              else
            v_final_location := coalesce(v_final_location,'NA'); 
           end if;   
           
                                     
        -- v_final_emp_id  :=  coalesce(v_final_emp_id,'na'); 
        
--        insert into public.test(timestamp,v_data,v_clob)
--         values(x_object_pri_key_1,
--                x_final_system_role||','||x_ac_emp_id||','||x_ac_location,
--                'finallocation3--'|| v_final_location);  
  raise notice 'd9';
--, OUT v_final_emp character varying, OUT v_final_location character varying, OUT v_final_access_group character varying, OUT v_current_emp_hierarchy_id character varying, OUT v_current_location_hierarchy_id character varying, OUT v_create_timestamp character varying, OUT v_created_by character varying
       open x_result for
         select v_final_emp as final_emp, 
                v_final_location as final_location,
                v_final_access_group as final_access_group,
                v_current_emp_hierarchy_id as current_emp_hierarchy_id, 
                v_current_location_hierarchy_id as current_location_hierarchy_id,
                v_create_timestamp as create_timestamp,
                v_created_by as created_by;
      
      return X_RESULT ;      
     
      EXCEPTION
            WHEN OTHERS then
            raise notice 'd11';
           
               get stacked diagnostics
			       v_state   = returned_sqlstate,
			       v_msg     = message_text,
			       v_detail  = pg_exception_detail,
			       v_hint    = pg_exception_hint,
			       v_context = pg_exception_context;
  
			      raise notice 'v_state: %', v_state;
			     raise notice 'v_msg: %', v_msg;
			    raise notice 'v_detail: %', v_detail;
			   raise notice 'v_hint: %', v_hint;
			  raise notice 'v_context: %', v_context;
       select  cast(nextval('public.seq_pw_req_id') as VARCHAR) into v_PW_SESSION_ID ;  
      
      perform PUBLIC.sp_ins_db_exception_log(
				 'DECIMAL-LDKJW5D1R2',--'org_id',
				 'public-0MY7TA7QRA',--'app_id',
				 'sp_btc_get_ac_emp_loc_ag',--'service_name',
				 'sp_btc_get_ac_emp_loc_ag',--'object_name',
				 v_PW_SESSION_ID,--'pw_request_id',
				 x_login_id,--'login_id',
				 x_object_pri_key_1,--'object_pri_key_1',
				 x_object_pri_key_2,--'object_pri_key_2',
				 x_object_pri_key_3,--'object_pri_key_3',
				 x_object_type,--'object_type',
				 v_state,--'err_state',
			     v_msg,--'err_msg',
			     v_detail,--'err_detail',
			     v_hint,--'err_hint',
			     v_context,--'err_context',
				 x_workflow_group_id,--'ref_data_1',
				 x_process_group,--'ref_data_2',
				 x_prc_grp_disp,--'ref_data_3',
				 x_final_system_role,--'ref_data_4',
				 v_final_emp,--'ref_data_5',
				 x_ac_emp_id,--'ref_data_6',
				 x_ac_access_group,--'ref_data_7',
				 'N',--'is_processed_1',
				 'N',--'is_processed_2',
				  NULL,--'is_processed_1_timestamp',
				  NULL,--'is_processed_1_timestamp',
				  ''--'developer_remarks'
			  ); 
 
	 OPEN X_RESULT FOR
         SELECT '00' as "RESPONSE_CODE",
                 err_detail "RESPONSE_MESSAGE",
                   'E' "RESPONSE_TYPE",
                   err_state ,
                   err_msg,
                   err_detail,
                   err_hint,
                   err_context         
          from public.tb_db_exception_log
          where pw_request_id = v_PW_SESSION_ID;
         
    RETURN X_RESULT;
			 
                                    
end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_btc_is_auto_end_with_p(x_workflow_group_id character varying, x_process_group character varying, x_prc_grp_disp character varying, x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_text_1 character varying, x_text_2 character varying, x_text_3 character varying, x_text_4 character varying, x_text_5 character varying, x_process_remarks character varying, x_login_id character varying, x_config_id character varying, x_ref_object text, x_condition_function character varying, x_br_id character varying, x_prc_grp_disp_category character varying)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
v_state   TEXT;
v_msg     TEXT;
v_detail  TEXT;
v_hint    TEXT;
v_context TEXT;
v_PW_SESSION_ID VARCHAR(500);
v_prc_grp_disp_category  varchar(50);
v_parent_process_group  varchar(50);
v_iteration_count int4;
v_last_updated_timestamp varchar(50);
v_prc_grp_applicability varchar(1);
v_result refcursor;

cur_rec_prc_grp_disp_end_p cursor
    is
      select  pgdc.config_id,pgdc.workflow_group_id,pgdc.event_process,
              pgdc.ref_input_1,pgdc.ref_input_2,pgdc.br_id,pgdc.condition_function,
              pgdc.process_group,pgdc.prc_grp_disp,--pgdc.level,
              pgdc.remarks,
              pgdc.notification_grp_id,pgdc.ref_batch_job,
              pgm.parent_process_group,pgm.is_auto_end_with_p,pgm.auto_end_success_disp,
              pgm.auto_end_fail_disp
        from public.tb_btc_prc_grp_disp_cfg pgdc
        join public.tb_btc_prc_grp_mst pgm on pgm.process_group =pgdc.process_group
        join public.tb_btc_prc_grp_disp_mst dispmst on dispmst.process_group=pgm.process_group
        where  pgm.parent_process_group=x_process_group and is_auto_end_with_p='y';
--type tp_rec_prc_grp_disp is table of cur_rec_prc_grp_disp%rowtype;
--prc_grp_disp tp_rec_prc_grp_disp;
begin
     
--        open cur_rec_prc_grp_disp;
--        fetch cur_rec_prc_grp_disp bulk collect into prc_grp_disp;
--        close cur_rec_prc_grp_disp;
       
--        for i in 1..prc_grp_disp.count loop
         for rec in cur_rec_prc_grp_disp_end_p
         loop
       
             perform  public.sp_btc_prc_grp_disp_dtl (rec.workflow_group_id,rec.process_group ,
              (case when x_prc_grp_disp_category ='s' then rec.auto_end_success_disp
              when x_prc_grp_disp_category ='f' then  rec.auto_end_fail_disp end),
              x_object_type ,x_object_pri_key_1 ,x_object_pri_key_2 ,x_object_pri_key_3 ,x_text_1  ,
              x_text_2  ,x_text_3  ,x_text_4  ,x_text_5  ,x_process_remarks  ,x_login_id  ,rec.config_id ,
              x_ref_object,rec.condition_function,rec.br_id,'n',v_prc_grp_applicability);              
       
       
        end loop;
       
       
      EXCEPTION
            WHEN OTHERS THEN
                  get stacked diagnostics
       v_state   = returned_sqlstate,
       v_msg     = message_text,
       v_detail  = pg_exception_detail,
       v_hint    = pg_exception_hint,
       v_context = pg_exception_context;
       select  cast(nextval('public.seq_pw_req_id') as VARCHAR) into v_PW_SESSION_ID ;    
                  perform public.sp_ins_db_exception_log(
		 'DECIMAL-LDKJW5D1R2',--'org_id',
		 'SAARATHI-0MY7TA7QRA',--'app_id',
		 'sp_btc_is_auto_end_with_p',--'service_name',
		 'sp_btc_is_auto_end_with_p',--'object_name',
		 v_PW_SESSION_ID,--'pw_request_id',
		 x_login_id,--'login_id',
		 x_object_pri_key_1,--'object_pri_key_1',
		 x_object_pri_key_2,--'object_pri_key_2',
		 x_object_pri_key_3,--'object_pri_key_3',
		 x_object_type,--'object_type',
		 v_state,--'err_state',
	     v_msg,--'err_msg',
	     v_detail,--'err_detail',
	     v_hint,--'err_hint',
	     v_context,--'err_context',
		 workflow_group_id,--'ref_data_1',
		 x_process_group,--'ref_data_2',
		 x_prc_grp_disp,--'ref_data_3',
		 x_process_remarks,--'ref_data_4',
		 x_config_id,--'ref_data_5',
		 x_ref_object,--'ref_data_6',
		 x_br_id,--'ref_data_7',
		 'N',--'is_processed_1',
		 'N',--'is_processed_2',
		  NULL,--'is_processed_1_timestamp',
		  NULL,--'is_processed_1_timestamp',
		  ''--'developer_remarks'
			  ); 
 

      
     
end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_btc_prc_grp_disp(x_workflow_group_id character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_workflow_group_id_attr character varying, x_object_pri_key_1_attr character varying, x_object_pri_key_2_attr character varying, x_object_pri_key_3_attr character varying, x_object_type character varying, x_event_process character varying, x_ref_input_1 character varying, x_ref_input_2 character varying, x_ref_object text, x_login_id character varying, x_platware_request_id character varying, x_process_remarks character varying, x_text_1 character varying, x_text_2 character varying, x_text_3 character varying, x_text_4 character varying, x_text_5 character varying)
 RETURNS void
 LANGUAGE plpgsql
AS $function$ declare v_state text;

v_msg text;
v_detail text;
v_hint text;
v_context text;
v_PW_SESSION_ID VARCHAR(500);
v_workflow_group_id varchar(100);
v_object_pri_key_1 varchar(100);
v_object_pri_key_2 varchar(100);
v_object_pri_key_3 varchar(100);
v_object_type varchar(50);
v_iteration_count int4;
v_last_updated_timestamp varchar(50);
v_is_validated varchar(1);
v_is_prc_disp_eligible varchar(1);
v_prc_grp_disp_category varchar(50);
x_prc_grp_disp varchar(50);
v_process_group varchar(50);
v_count int4;
v_coapp_count int4;
v_end_disp_all_success_cnt int4;
v_p_end_disp_1_fail_cnt int4;
v_result_l1 refcursor;
v_result_l2 refcursor;
v_result_l3 refcursor;
v_loop_count int4;
v_prc_grp_applicability text;
v_check_exec_level_flag varchar(1) default 'Y';
x_result refcursor;
--:= 'cur';
 v_test varchar(10);

cur_rec_prc_grp_disp cursor is
select
	distinct cast(pgdc.config_id as VARCHAR)config_id,
	pgdc.workflow_group_id,
	pgdc.event_process,
	pgdc.ref_input_1,
	pgdc.ref_input_2,
	pgdc.br_id,
	pgdc.condition_function,
	pgdc.process_group,
	pgdc.prc_grp_disp,
	pgdc.exec_level,
	pgdc.remarks,
	pgdc.notification_grp_id,
	pgdc.ref_batch_job,
	pgm.parent_process_group,
	pgm.is_auto_start_with_p,
	pgm.auto_start_disp,
	pgm.does_p_autp_start,
	pgm.parent_auto_start_disp,
	pgm.is_auto_end_with_p,
	pgm.auto_end_success_disp,
	pgm.auto_end_fail_disp,
	pgm.does_p_auto_end,
	pgm.p_auto_end_s_disp,
	pgm.p_auto_end_f_disp,
	pgm.p_auto_end_with_all_c,
	pgm.p_end_disp_all_success,
	pgm.p_end_disp_1_fail,
	dispmst.prc_grp_disp_category,
	pgdc.message_id
from
	public.tb_btc_prc_grp_disp_cfg pgdc
join public.tb_btc_prc_grp_mst pgm on
	pgm.process_group = pgdc.process_group
join public.tb_btc_prc_grp_disp_mst dispmst on
	dispmst.process_group = pgm.process_group
	and dispmst.prc_grp_disp = pgdc.prc_grp_disp
where
	pgdc.workflow_group_id = coalesce(x_workflow_group_id, 'SME')
	and pgdc.event_process = x_event_process
	and pgdc.ref_input_1 = x_ref_input_1
	and coalesce(trim(pgdc.ref_input_2), 'NA') = coalesce(trim(x_ref_input_2), 'NA') ;
--and pgm.parent_process_group is null;
 v_cur_pri_key_l3 text := ' select  distinct workflow_group_id,object_pri_key_1, object_pri_key_2,
 object_pri_key_3, object_type from gtt_btc_pri_key_mngmnt where object_pri_key_2 <> ''NA'' and  object_pri_key_3 <> ''NA''
 ';
--cur_pri_key_l3 cursor
--    is
-- select  distinct workflow_group_id,object_pri_key_1, object_pri_key_2,
-- object_pri_key_3, object_type from gtt_btc_pri_key_mngmnt where object_pri_key_2 <> 'NA' and  object_pri_key_3 <> 'NA';
 v_cur_pri_key_l2 text := ' select  distinct workflow_group_id,object_pri_key_1, object_pri_key_2,
 object_pri_key_3, object_type from gtt_btc_pri_key_mngmnt where object_pri_key_2 <> ''NA''
 ';
--cur_pri_key_l2 cursor
--    is
-- select  distinct workflow_group_id,object_pri_key_1, object_pri_key_2,
-- 'NA' object_pri_key_3, object_type from gtt_btc_pri_key_mngmnt where object_pri_key_2 <> 'NA';
 v_cur_pri_key_l1 text := ' select  distinct workflow_group_id,object_pri_key_1, ''NA'' object_pri_key_2,
 ''NA'' object_pri_key_3, object_type from gtt_btc_pri_key_mngmnt
';
--cur_pri_key_l1 cursor
--    is
-- select  distinct workflow_group_id,object_pri_key_1, 'NA' object_pri_key_2,
-- 'NA' object_pri_key_3, object_type from gtt_btc_pri_key_mngmnt;
 v_cur_pri_key_l1l2 text := 'select  distinct workflow_group_id,object_pri_key_1, ''NA'' object_pri_key_2,
 ''NA'' object_pri_key_3, object_type from gtt_btc_pri_key_mngmnt
 union
 select  distinct workflow_group_id,object_pri_key_1, object_pri_key_2,
 ''NA'' object_pri_key_3, object_type from gtt_btc_pri_key_mngmnt where object_pri_key_2 <> ''NA'' ';
--cur_pri_key_l1l2 cursor
--    is
-- select  distinct workflow_group_id,object_pri_key_1, 'NA' object_pri_key_2,
-- 'NA' object_pri_key_3, object_type from gtt_btc_pri_key_mngmnt
-- union
-- select  distinct workflow_group_id,object_pri_key_1, object_pri_key_2,
-- 'NA' object_pri_key_3, object_type from gtt_btc_pri_key_mngmnt where object_pri_key_2 <> 'NA';
 v_cur_pri_key_wolvl text := ' select  
 distinct ''' || x_workflow_group_id || ''' workflow_group_id,
 ''' || x_object_pri_key_1 || ''' object_pri_key_1,
 coalesce(''' || x_object_pri_key_2 || ''',''NA'') object_pri_key_2,
 coalesce(''' || x_object_pri_key_3 || ''',''NA'') object_pri_key_3,
 ''' || x_object_type || ''' object_type ';
--
--cur_pri_key_wolvl cursor
--    is
-- select  
-- distinct x_workflow_group_id workflow_group_id,
-- x_object_pri_key_1 object_pri_key_1,
-- coalesce(x_object_pri_key_2,'NA') object_pri_key_2,
-- coalesce(x_object_pri_key_3,'NA') object_pri_key_3,
-- x_object_type object_type ;
 vkey_proc text := '';

v_prc_grp_applicability1 VARCHAR(100);

V_DISP_DTL text := '';

v_sp_dp_comm_notification VARCHAR(100);

begin 
raise notice 'V_DISP_DTL: %','1';

	if (x_workflow_group_id_attr is not null
and (x_object_pri_key_1_attr !='' )) then v_check_exec_level_flag := 'Y';
else v_check_exec_level_flag := 'N';
end if;

raise notice 'v_check_exec_level_flag: %',v_check_exec_level_flag;
--     delete from gtt_btc_pri_key_mngmnt;
--delete from public.gtt_btc_laf_object;
 create temporary table if not exists gtt_btc_pri_key_mngmnt( workflow_group_id varchar(50) null,
object_pri_key_1 varchar(50) null,
object_pri_key_2 varchar(50) null,
object_pri_key_3 varchar(50) null,
object_type varchar(1000) null);

create temporary table if not exists gtt_btc_laf_object( object_data jsonb null);

insert
	into
	gtt_btc_laf_object
values (cast(x_ref_object as jsonb));
--if x_workflow_group_id is not null and x_object_pri_key_1 is not null then
 vkey_proc := ' perform sp_btc_pri_key_extraction(''' || coalesce(x_workflow_group_id, 'null')|| ''',''' || coalesce(x_object_pri_key_1, 'null')|| ''',''' || coalesce(x_object_pri_key_2, 'null')|| ''',''' || coalesce(x_object_pri_key_3, 'null')|| ''',''' || coalesce(x_workflow_group_id_attr, 'null')|| ''',''' || coalesce(x_object_pri_key_1_attr, 'null')|| ''',''' || coalesce(x_object_pri_key_2_attr, 'null')|| ''',''' || coalesce(x_object_pri_key_3_attr, 'null')|| ''',''' || coalesce(x_object_type, 'null')|| ''',''' || coalesce(x_event_process, 'null')|| ''',''' || coalesce(x_ref_input_1, 'null')|| ''',''' || coalesce(x_ref_input_2, 'null')|| ''',''' || 'x_ref_object' || ''',''' || coalesce(x_login_id, 'null') || ''',''' || coalesce(x_platware_request_id , 'null')|| ''',''' || coalesce(x_process_remarks, 'null') || ''',''' || coalesce(x_text_1, 'null')|| ''',''' || coalesce(x_text_2, 'null')|| ''',''' || coalesce(x_text_3, 'null')|| ''',''' || coalesce(x_text_4, 'null')|| ''',''' || coalesce(x_text_5, 'null')|| ''')';
--,v_result_l2,v_result_l1);
 perform public.sp_btc_pri_key_extraction(x_workflow_group_id,
x_object_pri_key_1,
x_object_pri_key_2,
x_object_pri_key_3,
x_workflow_group_id_attr,
x_object_pri_key_1_attr,
x_object_pri_key_2_attr,
x_object_pri_key_3_attr,
x_object_type,
x_event_process,
x_ref_input_1,
x_ref_input_2,
x_ref_object ,
x_login_id ,
x_platware_request_id ,
x_process_remarks ,
x_text_1,
x_text_2,
x_text_3,
x_text_4,
x_text_5);
--,v_result_l2,v_result_l1);
--end if;
--   for i in 1..tp_prc_grp_disp.count loop  
 for rec in cur_rec_prc_grp_disp loop if v_check_exec_level_flag = 'N' then open x_result for execute v_cur_pri_key_wolvl;

elsif rec.exec_level = 'L3' then open x_result for execute v_cur_pri_key_l3;

elsif rec.exec_level = 'L2' then open x_result for execute v_cur_pri_key_l2;

elsif rec.exec_level = 'L1' then open x_result for execute v_cur_pri_key_l1;

elsif rec.exec_level = 'L1L2' then open x_result for execute v_cur_pri_key_l1l2;
end if;

loop fetch x_result
into
	v_workflow_group_id,
	v_object_pri_key_1,
	v_object_pri_key_2,
	v_object_pri_key_3,
	v_object_type;

exit
when not found;

V_DISP_DTL := 'select public.sp_btc_prc_grp_disp_dtl(''' || coalesce(rec.workflow_group_id, '')|| ''',''' || coalesce(rec.process_group, '')|| ''',''' || coalesce(rec.prc_grp_disp, '')|| ''',''' || coalesce(x_object_type, '')|| ''',''' || coalesce(v_object_pri_key_1 , '')|| ''',''' || coalesce(v_object_pri_key_2, '')|| ''',''' || coalesce(v_object_pri_key_3, '')|| ''',''' || coalesce(x_text_1 , '')|| ''',''' || coalesce(x_text_2 , '')|| ''',''' || coalesce(x_text_3 , '')|| ''',''' || coalesce(x_text_4 , '')|| ''',''' || coalesce(x_text_5 , '')|| ''',''' || coalesce(x_process_remarks , '')|| ''',''' || coalesce(x_login_id , '')|| ''',''' || coalesce(rec.config_id , '')|| ''',''' || coalesce('x_ref_object', '')|| ''',''' || coalesce(rec.condition_function, '')|| ''',''' || coalesce(rec.br_id, '')|| ''',''' || 'Y' || ''')';

raise notice 'V_DISP_DTL: %','1';

select
	public.sp_btc_prc_grp_disp_dtl(rec.workflow_group_id,
	rec.process_group ,
	rec.prc_grp_disp ,
	v_object_type ,
	v_object_pri_key_1 ,
	v_object_pri_key_2 ,
	v_object_pri_key_3 ,
	x_text_1 ,
	x_text_2 ,
	x_text_3 ,
	x_text_4 ,
	x_text_5 ,
	x_process_remarks ,
	x_login_id ,
	rec.config_id ,
	x_ref_object,
	rec.condition_function,
	rec.br_id,
	'Y')
into
	v_prc_grp_applicability ;

--v_prc_grp_applicability:='Y';
--                   INSERT into public.SATISH_TEST  VALUES(rec.notification_grp_id||'-@-'||v_prc_grp_applicability ||'-@-'||
--                                                     v_object_pri_key_1 );
 raise notice 'v_prc_grp_applicability %',v_prc_grp_applicability ;

/*
if v_prc_grp_applicability = 'Y' then if rec.notification_grp_id is not null
and rec.notification_grp_id <> 'YES' then
--                                  INSERT into public.SATISH_TEST  VALUES(rec.workflow_group_id||'-@-'||rec.process_group ||'-@-'||
--                                  rec.prc_grp_disp ||'-@-'||
--                                         x_object_type ||'-@-'||v_object_pri_key_1 ||'-@-'||v_object_pri_key_2 ||'-@-'||v_object_pri_key_3 ||'-@-'||
--                                         x_process_remarks  ||'-@-'||rec.config_id  ||'-@-'||x_login_id ||'-@-'||rec.notification_grp_id); 
 perform public.sp_btc_prc_grp_push_not (rec.workflow_group_id,
rec.process_group ,
rec.prc_grp_disp ,
x_object_type ,
v_object_pri_key_1 ,
v_object_pri_key_2 ,
v_object_pri_key_3 ,
x_process_remarks ,
rec.config_id ,
x_login_id ,
rec.notification_grp_id);
end if;

if rec.message_id is not null then perform public.sp_btc_prc_grp_sms (rec.workflow_group_id,
rec.process_group ,
rec.prc_grp_disp ,
x_object_type ,
v_object_pri_key_1 ,
v_object_pri_key_2 ,
v_object_pri_key_3 ,
x_process_remarks ,
rec.config_id ,
x_login_id ,
rec.message_id);
--                                    v_sp_dp_comm_notification:= '';
end if;    */
--                                   if rec.ref_batch_job is not null and rec.ref_batch_job <> 'YES' then
--                                     perform sp_btc_prc_grp_sms
--                                        (rec.workflow_group_id,rec.process_group ,rec.prc_grp_disp ,
--                                         x_object_type ,v_object_pri_key_1 ,v_object_pri_key_2 ,v_object_pri_key_3 ,
--                                         x_process_remarks  ,rec.config_id  ,x_login_id ,rec.ref_batch_job);
--                                  end if;
 raise notice 'rec.prc_grp_disp_category %',
rec.prc_grp_disp_category;

if rec.prc_grp_disp_category = 'O' then
-- is_auto_start_with_p  ='Y' and
 perform public.sp_btc_auto_start_with_p(rec.workflow_group_id,
rec.process_group ,
rec.prc_grp_disp ,
x_object_type ,
v_object_pri_key_1 ,
v_object_pri_key_2 ,
v_object_pri_key_3 ,
x_text_1 ,
x_text_2 ,
x_text_3 ,
x_text_4 ,
x_text_5 ,
x_process_remarks ,
x_login_id ,
rec.config_id ,
x_ref_object,
rec.condition_function,
rec.br_id);
end if;

raise notice 'rec.workflow_group_id%',
rec.workflow_group_id;

raise notice 'rec.parent_process_group%',
rec.parent_process_group;

raise notice 'rec.parent_auto_start_disp %',
rec.parent_auto_start_disp ;

raise notice 'x_object_type%',
x_object_type;

raise notice 'v_object_pri_key_1%',
v_object_pri_key_1;

raise notice 'v_object_pri_key_2%',
v_object_pri_key_2;

raise notice 'v_object_pri_key_3%',
v_object_pri_key_3;

raise notice 'x_ref_object%',
x_ref_object;

raise notice 'rec.does_p_autp_start%',
rec.does_p_autp_start;

raise notice 'rec.prc_grp_disp_category %',
rec.prc_grp_disp_category ;

if rec.does_p_autp_start = 'Y'
and rec.prc_grp_disp_category = 'O' then perform public.sp_btc_prc_grp_disp_dtl (rec.workflow_group_id,
rec.parent_process_group ,
rec.parent_auto_start_disp ,
x_object_type ,
v_object_pri_key_1 ,
v_object_pri_key_2 ,
v_object_pri_key_3 ,
x_text_1 ,
x_text_2 ,
x_text_3 ,
x_text_4 ,
x_text_5 ,
x_process_remarks ,
x_login_id ,
rec.config_id ,
x_ref_object,
null,
null,
'N');
end if;

if rec.prc_grp_disp_category in ('S', 'F') then
-- is_auto_end_with_p='Y' and
 perform public.sp_btc_is_auto_end_with_p(rec.workflow_group_id,
rec.process_group ,
rec.prc_grp_disp ,
x_object_type ,
v_object_pri_key_1 ,
v_object_pri_key_2 ,
v_object_pri_key_3 ,
x_text_1 ,
x_text_2 ,
x_text_3 ,
x_text_4 ,
x_text_5 ,
x_process_remarks ,
x_login_id ,
rec.config_id ,
x_ref_object,
rec.condition_function,
rec.br_id,
rec.prc_grp_disp_category);
end if;

if rec.does_p_auto_end = 'Y'
and rec.prc_grp_disp_category in ('S', 'F') then
select
	public.sp_btc_prc_grp_disp_dtl (rec.workflow_group_id,
	rec.parent_process_group ,
	(case
		when rec.prc_grp_disp_category = 'S' then rec.auto_end_success_disp
		when rec.prc_grp_disp_category = 'F' then rec.auto_end_fail_disp
	end ),
	x_object_type ,
	v_object_pri_key_1 ,
	v_object_pri_key_2 ,
	v_object_pri_key_3 ,
	x_text_1 ,
	x_text_2 ,
	x_text_3 ,
	x_text_4 ,
	x_text_5 ,
	x_process_remarks ,
	x_login_id ,
	rec.config_id ,
	x_ref_object,
	null,
	null,
	'N')
into
	v_prc_grp_applicability1;
--,v_prc_grp_applicability
end if;

if rec.p_auto_end_with_all_c = 'Y'
and rec.prc_grp_disp_category in ('S', 'F') then
--                                     perform public.get_btc_end_disp_all_success_cnt(v_workflow_group_id,v_process_group,v_object_pri_key_1,
--                                     v_object_pri_key_2,v_object_pri_key_3) into  v_end_disp_all_success_cnt from dual;
--             
--                                     perform public.get_btc_end_disp_1_fail_cnt(v_workflow_group_id,v_process_group,v_object_pri_key_1,
--                                     v_object_pri_key_2,v_object_pri_key_3) into  v_p_end_disp_1_fail_cnt from dual;
 if v_count > 0 then
select
	public.sp_btc_prc_grp_disp_dtl(rec.workflow_group_id,
	rec.parent_process_group ,
	(case
		when v_end_disp_all_success_cnt >0 then rec.p_end_disp_all_success
		when v_p_end_disp_1_fail_cnt >0 then rec.p_end_disp_1_fail
	end ),
	x_object_type ,
	v_object_pri_key_1 ,
	v_object_pri_key_2 ,
	v_object_pri_key_3 ,
	x_text_1 ,
	x_text_2 ,
	x_text_3 ,
	x_text_4 ,
	x_text_5 ,
	x_process_remarks ,
	x_login_id ,
	rec.config_id ,
	x_ref_object,
	null,
	null,
	'N')
into
	v_prc_grp_applicability1;
end if;
end if;
--end if;
end loop;
--		          if v_check_exec_level_flag ='N' then
--			         --v_test:='t';
--			           close cur_pri_key_wolvl;
--			      elsif rec.exec_level ='L3'  then
--			           close cur_pri_key_l3;	       
--			       elsif rec.exec_level ='L2' then
--			          close cur_pri_key_l2;
--			       elsif rec.exec_level ='L1' then
--			           close cur_pri_key_l1;	         
--			       elsif rec.exec_level ='L1L2' then
--			            close cur_pri_key_l1l2;	         
--			       end if;
 close x_result;
end loop;

truncate
	table gtt_btc_pri_key_mngmnt;

truncate
	table gtt_btc_laf_object;

/*exception
when others then
rollback;
sp_ins_db_exception_log('sp_btc_prc_grp_disp','sp_btc_prc_grp_disp', 'sp', x_login_id,
                                    x_object_pri_key_1, x_object_pri_key_2, x_object_pri_key_3, x_event_process,  x_ref_input_1,x_ref_input_2,'',
                                    '',  sqlerrm, 'no data found');*/
--insert into gtt_btc_pri_key_mngmnt_exc
--select pri.*,systimestamp,x_platware_request_id from gtt_btc_pri_key_mngmnt pri;
--commit;
 
exception
when others then get stacked diagnostics v_state = returned_sqlstate,
v_msg = message_text,
v_detail = pg_exception_detail,
v_hint = pg_exception_hint,
v_context = pg_exception_context;

raise notice 'procedure name:-%',
'sp_btc_prc_grp_disp' ;

raise notice 'v_state:-%',
v_state ;

raise notice 'v_msg:-%',
v_msg ;

raise notice 'v_detail:-%',
v_detail ;

raise notice 'v_hint:-%',
v_hint ;

raise notice 'v_context:-%',
v_context ;

select
	cast(nextval('public.seq_pw_req_id') as VARCHAR)
into
	v_PW_SESSION_ID ;

perform public.sp_ins_db_exception_log( 'DECIMAL-LDKJW5D1R2',
--'org_id',
 'KOTAK_CA-269EW37XAL',
--'app_id',
 'sp_btc_prc_grp_disp',
--'service_name',
 'sp_btc_prc_grp_disp',
--'object_name',
 v_PW_SESSION_ID,
--'pw_request_id',
 x_login_id,
--'login_id',
 x_object_pri_key_1,
--'object_pri_key_1',
 x_object_pri_key_2,
--'object_pri_key_2',
 x_object_pri_key_3,
--'object_pri_key_3',
 x_object_type,
--'object_type',
 v_state,
--'err_state',
 v_msg,
--'err_msg',
 v_detail,
--'err_detail',
 v_hint,
--'err_hint',
 v_context,
--'err_context',
 x_workflow_group_id_attr,
--'ref_data_1',
 x_object_pri_key_1_attr,
--'ref_data_2',
 x_object_pri_key_2_attr,
--'ref_data_3',
 x_object_pri_key_3_attr,
--'ref_data_4',
 x_event_process,
--'ref_data_5',
 x_ref_input_1,
--'ref_data_6',
 x_process_remarks,
--'ref_data_7',
 'N',
--'is_processed_1',
 'N',
--'is_processed_2',
 null,
--'is_processed_1_timestamp',
 null,
--'is_processed_1_timestamp',
 ''
--'developer_remarks'
);
--commit;
end;

$function$
;

CREATE OR REPLACE FUNCTION public.sp_btc_prc_grp_disp_dtl(x_workflow_group_id character varying, x_process_group character varying, x_prc_grp_disp character varying, v_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_text_1 character varying, x_text_2 character varying, x_text_3 character varying, x_text_4 character varying, x_text_5 character varying, x_process_remarks character varying, x_login_id character varying, x_config_id character varying, x_ref_object text, x_condition_function character varying, x_br_id character varying, x_update_allowed character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$ declare v_prc_grp_disp_category varchar(50);

v_parent_process_group varchar(50);

v_iteration_count int4;

v_last_updated_timestamp varchar(50);

v_start_timestamp timestamp;

v_state text;

v_msg text;

v_detail text;

v_hint text;

v_context text;

v_PW_SESSION_ID VARCHAR(500);

v_end_timestamp timestamp;
--v_prc_grp_applicability varchar(10);
 v_err varchar(4000);

v_clob text;

v_result refcursor;

v_rec_exist varchar(1) default 'N';

v_tat_in_working_hrs int4;

x_object_type varchar(100);

v_start_final_timestamp timestamp:=CURRENT_TIMESTAMP;

v_end_final_timestamp timestamp;

v_prc_grp_applicability varchar default 'Y';

V_FUN_STR text;

begin x_object_type := coalesce(v_object_type, 'LAF');
/*
if x_condition_function is not null then 
               /*v_prc_grp_applicability := get_prc_grp_applicability_v2 (x_workflow_group_id , x_process_group, x_prc_grp_disp , x_object_type ,
                 x_object_pri_key_1 ,x_object_pri_key_2 , x_object_pri_key_3,x_text_1 ,x_text_2 ,x_text_3 ,x_text_4 ,x_text_5 ,
                 x_process_remarks,x_login_id ,x_config_id ,x_condition_function,x_ref_object );*/
*/
/*
V_FUN_STR := 'SELECT public.' || x_condition_function || '(''' || x_workflow_group_id || ''' ,' || '''' || x_process_group || ''' ,' || '''' || x_prc_grp_disp || ''' ,' || '''' || x_object_type || ''' ,' || '''' || x_object_pri_key_1 || ''' ,' || '''' || x_object_pri_key_2 || ''' ,' || '''' || x_object_pri_key_3 || ''' ,' || '''' || x_text_1 || ''' ,' || '''' || x_text_2 || ''' ,' || '''' || x_text_3 || ''' ,' || '''' || x_text_4 || ''' ,' || '''' || x_text_5 || ''' ,' || '''' || x_process_remarks ||
--''' ,'|| '''' ||  'x_ref_object' ||
 ''',''' || x_login_id || ''')';
   raise notice 'V_FUN_STR: %', V_FUN_STR;
  execute V_FUN_STR
     into
	v_prc_grp_applicability;
else v_prc_grp_applicability := 'Y';
end if;
*/
 if v_prc_grp_applicability = 'Y' then
 
select prc_grp_disp_category into v_prc_grp_disp_category
    from public.tb_btc_prc_grp_disp_mst
    where workflow_group_id = x_workflow_group_id
	and process_group = x_process_group
	and prc_grp_disp = x_prc_grp_disp ;
--			            begin
 select
	coalesce(process_iteration_count, 0),modified_timestamp,start_timestamp,
	end_timestamp ,'Y'
	into v_iteration_count,	v_last_updated_timestamp, v_start_timestamp, v_end_timestamp,
	v_rec_exist
	-- iteration count increase if s
	-- start and end time update based on open closed and fail
	from public.tb_btc_prc_grp_disp
where
	object_pri_key_1 = x_object_pri_key_1
	and object_pri_key_2 = x_object_pri_key_2
	and object_pri_key_3 = x_object_pri_key_3
	and process_group = x_process_group
	and object_type = x_object_type;
--			            exception
--			            when others then
--			            	v_rec_exist :='N';
--			            end;
 if x_update_allowed = 'Y' then
--			               insert into public.tb_btc_prc_grp_disp_hist
--			                    select prc.* from public.tb_btc_prc_grp_disp prc where --CURRENT_TIMESTAMP
--			                    object_pri_key_1=x_object_pri_key_1 and object_pri_key_2=x_object_pri_key_2 and 

--			                    object_pri_key_3=x_object_pri_key_3 and process_group = x_process_group and object_type=x_object_type;
-- insert into test values (x_process_group, v_iteration_count );
 delete
from
	public.tb_btc_prc_grp_disp
where
	object_pri_key_1 = x_object_pri_key_1
	and object_pri_key_2 = x_object_pri_key_2
	and object_pri_key_3 = x_object_pri_key_3
	and process_group = x_process_group
	and object_type = x_object_type;
end if;

begin 
	if (x_update_allowed = 'N' 	and v_rec_exist = 'N')
        or x_update_allowed = 'Y' then 
     v_start_final_timestamp :=
    case when v_prc_grp_disp_category = 'O' 
         then CURRENT_TIMESTAMP
	    else coalesce(v_start_timestamp, v_end_timestamp) end;

v_end_final_timestamp := case when v_prc_grp_disp_category in ('S', 'F') 
                              then CURRENT_TIMESTAMP 
                              else v_end_timestamp
                              end;
raise NOTICE'FGHCHG%  :','12345';
 insert
	into
	public.tb_btc_prc_grp_disp ( workflow_group_id,
	object_pri_key_1,
	object_pri_key_2,
	object_pri_key_3,
	object_type,
	process_group,
	prc_grp_disp,
	start_timestamp,
	end_timestamp,
	last_updated_timestamp,
	prc_grp_disp_category,
	process_iteration_count,
	process_remarks,
	config_id,
	login_id,
	lob,
	text_1,
	text_2,
	text_3,
	text_4,
	text_5,
	created_timestamp,
	created_by,
	modified_timestamp,
	modified_by,
	tat_in_working_hrs )
values ( x_workflow_group_id,
x_object_pri_key_1,
x_object_pri_key_2,
x_object_pri_key_3,
x_object_type,
x_process_group,
x_prc_grp_disp,
coalesce(v_start_final_timestamp, v_end_final_timestamp),
v_end_final_timestamp,
null,
--v_last_updated_timestamp,
 v_prc_grp_disp_category,
coalesce(v_iteration_count, 0)+ 1,
x_process_remarks,
x_config_id,
x_login_id,
null,
x_text_1,
x_text_2,
x_text_3,
x_text_4,
x_text_5,
CURRENT_TIMESTAMP,
'sp_btc_prc_grp_disp',
CURRENT_TIMESTAMP,
'sp_btc_prc_grp_disp',
v_tat_in_working_hrs );
end if;
-- return v_prc_grp_applicability;  
--          exception          
--          when others then
--            v_err:=sqlerrm;
end;
end if;

return v_prc_grp_applicability;

exception
when others then get stacked diagnostics v_state = returned_sqlstate,
v_msg = message_text,
v_detail = pg_exception_detail,
v_hint = pg_exception_hint,
v_context = pg_exception_context;

raise notice 'procedure name:-%',
'sp_btc_prc_grp_disp_dtl' ;

raise notice 'v_state:-%',
v_state ;

raise notice 'v_msg:-%',
v_msg ;

raise notice 'v_detail:-%',
v_detail ;

raise notice 'v_hint:-%',
v_hint ;

raise notice 'v_context:-%',
v_context ;

--select
--	cast(nextval('public.seq_pw_req_id') as VARCHAR)
--into
--	v_PW_SESSION_ID ;

perform public.sp_ins_db_exception_log( 'DECIMAL-LDKJW5D1R2',
--'org_id',
 'KOTAK_CA-269EW37XAL',
--'app_id',
 'sp_btc_prc_grp_disp_dtl',
--'service_name',
 'sp_btc_prc_grp_disp_dtl',
--'object_name',
 v_PW_SESSION_ID,
--'pw_request_id',
 x_login_id,
--'login_id',
 x_object_pri_key_1,
--'object_pri_key_1',
 x_object_pri_key_2,
--'object_pri_key_2',
 x_object_pri_key_3,
--'object_pri_key_3',
 v_object_type,
--'object_type',
 v_state,
--'err_state',
 v_msg,
--'err_msg',
 v_detail,
--'err_detail',
 v_hint,
--'err_hint',
 v_context,
--'err_context',
 x_workflow_group_id,
--'ref_data_1',
 x_process_group,
--'ref_data_2',
 x_prc_grp_disp,
--'ref_data_3',
 x_process_remarks,
--'ref_data_4',
 x_br_id,
--'ref_data_5',
 x_config_id,
--'ref_data_6',
 x_ref_object,
--'ref_data_7',
 'N',
--'is_processed_1',
 'N',
--'is_processed_2',
 null,
--'is_processed_1_timestamp',
 null,
--'is_processed_1_timestamp',
 ''
--'developer_remarks'
);

return v_detail;
--commit;
end;

$function$
;

CREATE OR REPLACE FUNCTION public.sp_btc_prc_grp_push_not(x_workflow_group_id character varying, x_process_group character varying, x_prc_grp_disp character varying, x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_process_remarks character varying, x_config_id character varying, x_login_id character varying, x_notification_grp_id character varying)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE  
v_state   TEXT;
v_msg     TEXT;
v_detail  TEXT;
v_hint    TEXT;
v_context TEXT;
v_PW_SESSION_ID VARCHAR(500);
v_err varchar(4000);
v_notification_content varchar(200);
v_title varchar(500);
----------------------------------
v_object_data text;
v_org_id varchar(500) :='DECIMAL-LDKJW5D1R2';
v_app_id varchar(500):='SAARATHI-0MY7TA7QRA';
v_pw_service_name varchar(500):='sp_btc_prc_grp_push_not';
v_varible_json text :='';
v_user_name  varchar(500);
v_cp_code varchar(500);
V_CK_COMPANY_NAME varchar(500);
v_user_id varchar(500);
v_current_timestamp text;
v_applicant_name varchar(300);
v_journey_type varchar(100); 
v_loan_amount varchar(100);
v_name varchar(100);
v_pan varchar(100);
v_email varchar(100);
v_dob varchar(100);
v_mobile varchar(100);
v_father_name varchar(100); 
v_address varchar(100);
v_entity_type varchar(100);
v_product varchar(100);
v_doc_owner varchar(100);
v_doc_year varchar(100);
v_to_year varchar(100);

----------------------------------

cur_out_sms refcursor:= 'cur_sms';
rec_column_sms   RECORD;
v_cur_out_sms_response_code varchar(10);
v_cur_out_sms_response_message varchar(1000);
v_cur_out_sms_response_type varchar(10);
begin
		perform public.sp_set_search_schema_path(x_login_id,'',x_object_pri_key_1);
	
    v_current_timestamp := current_timestamp;
	select  cast(nextval('seq_pw_req_id') as VARCHAR) into v_PW_SESSION_ID ; 
	
	select object_data into v_object_data 
	  from tb_cop_buss_obj_txn
	 where object_pri_key_1=x_object_pri_key_1
       and object_type=x_object_type;
 --- refer access for login id  
     SELECT emp_id into v_user_id
            FROM tb_btc_accesscontrol
				where
				workflow_group_id=x_workflow_group_id
				and object_pri_key_1=x_object_pri_key_1
				and object_pri_key_2='NA'
				and object_pri_key_3='NA'
				and object_type=x_object_type
				and system_role='DSA';
 --    select substring(x_object_pri_key_1,4,10) into v_user_id;  
  
   if x_process_group ='CPSUMMARYCAM' and x_prc_grp_disp='APPFORMREADY' then
  raise notice '1: %',1;
		  select user_name,cp_code into v_user_name,v_cp_code
		      from tb_cp_user_mst
		      where user_id=v_user_id;

--		     
--		   select cp_name into V_CK_COMPANY_NAME
--		      from tb_cp_mst
--		      where cp_code=v_cp_code;  
		 select cast (v_object_data AS JSON)->'LAF'->'ENTITY_DATA'->>'CK_COMPANY_NAME'
		 	into V_CK_COMPANY_NAME;      


		v_user_name := coalesce(v_user_name,'User');
        V_CK_COMPANY_NAME := coalesce(V_CK_COMPANY_NAME,'Company');		
       
      v_title :='SAARATHI'; 
      v_varible_json := '{"v_user_name":"'||v_user_name||'","v_ck_company_name":"'||V_CK_COMPANY_NAME||'"}';   

 -----------------------------------------------------------------------------------------------
   elsif x_process_group ='FORM16' and x_prc_grp_disp='OCRFAILURE' then
    raise notice '2: %',1;
   			select user_name into v_user_name
		      from tb_cp_user_mst
		      where user_id=v_user_id;

		 	select 
            	cast (v_object_data AS JSON)->'LAF'->'ENTITY_DATA'->>'JOURNEY_TYPE',
	        	cast (v_object_data AS JSON)->'LAF'->'ENTITY_DATA'->>'PD_LOAN_AMOUNT',
	        	cast (v_object_data AS JSON)->'LAF'->'ENTITY_DATA'->'PD_PRODUCT'->>'VALUE'
		 	into v_journey_type,v_loan_amount,v_product;   
		     -- v_user_id:=x_login_id;
		     
			select DOC_YEAR
				   into v_doc_year
				 from (     
      	select CAST(JSON_ARRAY_ELEMENTS(CAST(V_OBJECT_DATA AS JSON)->'LAF'->'ENTITY_DATA'->'FIN_DOCS'->'FINANCIAL_DOCUMENT') AS JSON)->>'FIN_YEAR_FROM_DATE' as DOC_YEAR,
             CAST(JSON_ARRAY_ELEMENTS(CAST(V_OBJECT_DATA AS JSON)->'LAF'->'ENTITY_DATA'->'FIN_DOCS'->'FINANCIAL_DOCUMENT') AS JSON)->>'DOC_PDF_BUNDLE' as DOC_PDF_BUNDLE) as TBL
          	where  DOC_PDF_BUNDLE = x_object_pri_key_3;
		 
		if x_object_pri_key_1 is not null and coalesce(x_object_pri_key_2,'NA')='NA' then
    
		 	select cast (v_object_data AS JSON)->'LAF'->'ENTITY_DATA'->>'CK_COMPANY_NAME'
		 	into v_applicant_name;  
		
	   elsif x_object_pri_key_1 is not null and coalesce(x_object_pri_key_2,'NA')!='NA'  then
			  select NAME1
				   into v_applicant_name
				 from (
				 	select cast(JSON_ARRAY_ELEMENTS(CAST(v_object_data AS JSON)->'LAF'->'ENTITY_DATA'->'COAPPLICANT') AS JSON)->>'PAN_NAME' as NAME1
						 	,CAST(JSON_ARRAY_ELEMENTS(CAST(V_OBJECT_DATA AS JSON)->'LAF'->'ENTITY_DATA'->'COAPPLICANT') AS JSON)->>'COAPPLICANT_ID' AS COAPPLICANT_ID) as TBL
				where COAPPLICANT_ID=x_object_pri_key_2;
						 
		end if;
           v_applicant_name := coalesce(v_applicant_name,'applicant_name');
		   v_loan_amount := coalesce(v_loan_amount,'loan_amount');
		   v_user_name := coalesce(v_user_name,'User');  
		   v_product := coalesce(v_product,'Product');
		   v_doc_owner := coalesce(v_applicant_name,'owner');
		   v_doc_year := coalesce(v_doc_year,'year');
		  
		   v_varible_json := '{"v_applicant_name":"'||v_applicant_name||'","v_loan_amount":"'||v_loan_amount||'","v_user_name":"'||v_user_name||'","v_product":"'||v_product||'","v_doc_owner":"'||v_doc_owner||'","v_doc_year":"'||v_doc_year||'"}';  

 			raise notice 'v_varible_json: %',v_varible_json;
-------------------------------------------------------------------------------------------
     
     elsif x_process_group ='ITRV' and x_prc_grp_disp='OCRFAILURE' then
     raise notice '3: %',1;
       			select user_name into v_user_name
		      from tb_cp_user_mst
		      where user_id=v_user_id;
		        
		 	select 
            	cast (v_object_data AS JSON)->'LAF'->'ENTITY_DATA'->>'JOURNEY_TYPE',
	        	cast (v_object_data AS JSON)->'LAF'->'ENTITY_DATA'->>'PD_LOAN_AMOUNT',
	        	cast (v_object_data AS JSON)->'LAF'->'ENTITY_DATA'->'PD_PRODUCT'->>'VALUE'
                into v_journey_type,v_loan_amount,v_product;   
		     -- v_user_id:=x_login_id;
		     
			select DOC_YEAR
				   into v_doc_year
				 from (     
      	select CAST(JSON_ARRAY_ELEMENTS(CAST(V_OBJECT_DATA AS JSON)->'LAF'->'ENTITY_DATA'->'FIN_DOCS'->'FINANCIAL_DOCUMENT') AS JSON)->>'FIN_YEAR_FROM_DATE' as DOC_YEAR,
             CAST(JSON_ARRAY_ELEMENTS(CAST(V_OBJECT_DATA AS JSON)->'LAF'->'ENTITY_DATA'->'FIN_DOCS'->'FINANCIAL_DOCUMENT') AS JSON)->>'DOC_PDF_BUNDLE' as DOC_PDF_BUNDLE) as TBL
          	where  DOC_PDF_BUNDLE = x_object_pri_key_3;


		     
		if x_object_pri_key_1 is not null and  x_object_pri_key_2=x_object_pri_key_1 then --and ((v_entity_type='IND' or v_entity_type='IN') 
    
		 	select cast (v_object_data AS JSON)->'LAF'->'ENTITY_DATA'->>'CK_COMPANY_NAME'
		 	into v_applicant_name;  
		 
		
			  elsif x_object_pri_key_1 is not null and coalesce(x_object_pri_key_2,'NA')!='NA' then
			  
			  select NAME1
				   into v_applicant_name
				 from (
				 	select cast(JSON_ARRAY_ELEMENTS(CAST(v_object_data AS JSON)->'LAF'->'ENTITY_DATA'->'COAPPLICANT') AS JSON)->>'PAN_NAME' as NAME1
						 	,CAST(JSON_ARRAY_ELEMENTS(CAST(V_OBJECT_DATA AS JSON)->'LAF'->'ENTITY_DATA'->'COAPPLICANT') AS JSON)->>'COAPPLICANT_ID' AS COAPPLICANT_ID) as TBL
						where COAPPLICANT_ID=x_object_pri_key_2;

		end if;
           v_applicant_name := coalesce(v_applicant_name,'applicant_name');
		   v_loan_amount := coalesce(v_loan_amount,'loan_amount');
		   v_user_name := coalesce(v_user_name,'User');  
		   v_product := coalesce(v_product,'Product');
		   v_doc_owner := coalesce(v_applicant_name,'owner');
		   v_doc_year := coalesce(v_doc_year,'year');
		  
		   v_varible_json := '{"v_applicant_name":"'||v_applicant_name||'","v_loan_amount":"'||v_loan_amount||'","v_user_name":"'||v_user_name||'","v_product":"'||v_product||'","v_doc_owner":"'||v_doc_owner||'","v_doc_year":"'||v_doc_year||'"}';  

------------------------------------------------------------------------------------------    
     
		  elsif x_process_group ='BUREAUIND' and x_prc_grp_disp='FAILURE' then
       		 
      raise notice '4: %',1;
           select user_name into v_user_name
		      from tb_cp_user_mst
		      where user_id=v_user_id;
		        
		 	select 
            	cast (v_object_data AS JSON)->'LAF'->'ENTITY_DATA'->>'JOURNEY_TYPE',
	        	cast (v_object_data AS JSON)->'LAF'->'ENTITY_DATA'->>'PD_LOAN_AMOUNT',
	        	cast (v_object_data AS JSON)->'LAF'->'ENTITY_DATA'->'PD_PRODUCT'->>'VALUE'
		 	into v_journey_type,v_loan_amount,v_product;   
	
		     
		if x_object_pri_key_1 is not null and coalesce(x_object_pri_key_2,'NA')='NA' then --and ((v_entity_type='IND' or v_entity_type='IN') 
    
		 	select cast (v_object_data AS JSON)->'LAF'->'ENTITY_DATA'->>'CK_COMPANY_NAME'
		 	into v_applicant_name;  
		 
		
			  elsif x_object_pri_key_1 is not null and coalesce(x_object_pri_key_2,'NA')!='NA'  then
			  select NAME1
				   into v_applicant_name
				 from (
				 	select cast(JSON_ARRAY_ELEMENTS(CAST(v_object_data AS JSON)->'LAF'->'ENTITY_DATA'->'COAPPLICANT') AS JSON)->>'PAN_NAME' as NAME1
						 	,CAST(JSON_ARRAY_ELEMENTS(CAST(V_OBJECT_DATA AS JSON)->'LAF'->'ENTITY_DATA'->'COAPPLICANT') AS JSON)->>'COAPPLICANT_ID' AS COAPPLICANT_ID) as TBL
					where COAPPLICANT_ID=x_object_pri_key_2;

		end if;
           v_applicant_name := coalesce(v_applicant_name,'applicant_name');
		   v_loan_amount := coalesce(v_loan_amount,'loan_amount');
		   v_user_name := coalesce(v_user_name,'User');  
		   v_product := coalesce(v_product,'Product');
		   v_doc_owner := coalesce(v_applicant_name,'owner');
		   
		  
		   v_varible_json := '{"v_applicant_name":"'||v_applicant_name||'","v_loan_amount":"'||v_loan_amount||'","v_user_name":"'||v_user_name||'","v_product":"'||v_product||'","v_doc_owner":"'||v_doc_owner||'"}';  
---	---------------------------------------------------------------------------------------	  
   elsif x_process_group ='BANKSTMT_UPLD' and x_prc_grp_disp='FAILURE' then
   			select user_name into v_user_name
		      from tb_cp_user_mst
		      where user_id=v_user_id;

		 	select 
	        	cast (v_object_data AS JSON)->'LAF'->'ENTITY_DATA'->'PD_PRODUCT'->>'VALUE'
		 	into v_product;   
		     
			select FROM_YEAR,TO_YEAR
				   into v_doc_year,v_to_year
				 from (     
      	select CAST(JSON_ARRAY_ELEMENTS(CAST(V_OBJECT_DATA AS JSON)->'LAF'->'ENTITY_DATA'->'FIN_DOCS'->'FINANCIAL_DOCUMENT') AS JSON)->>'FROM_DATE' as FROM_YEAR,
      	      CAST(JSON_ARRAY_ELEMENTS(CAST(V_OBJECT_DATA AS JSON)->'LAF'->'ENTITY_DATA'->'FIN_DOCS'->'FINANCIAL_DOCUMENT') AS JSON)->>'TO_DATE' as TO_YEAR,
              CAST(JSON_ARRAY_ELEMENTS(CAST(V_OBJECT_DATA AS JSON)->'LAF'->'ENTITY_DATA'->'FIN_DOCS'->'FINANCIAL_DOCUMENT') AS JSON)->>'DOC_PDF_BUNDLE' as DOC_PDF_BUNDLE) as TBL
          	where  DOC_PDF_BUNDLE = x_object_pri_key_3;
		 
		if x_object_pri_key_1 is not null and x_object_pri_key_2=x_object_pri_key_1 then
    
		 	select cast (v_object_data AS JSON)->'LAF'->'ENTITY_DATA'->>'CK_COMPANY_NAME'
		 	into v_applicant_name;  
		
	   elsif x_object_pri_key_1 is not null and coalesce(x_object_pri_key_2,'NA')!='NA'  then
			  select NAME1
				   into v_applicant_name
				 from (
				 	select cast(JSON_ARRAY_ELEMENTS(CAST(v_object_data AS JSON)->'LAF'->'ENTITY_DATA'->'COAPPLICANT') AS JSON)->>'PAN_NAME' as NAME1
						 	,CAST(JSON_ARRAY_ELEMENTS(CAST(V_OBJECT_DATA AS JSON)->'LAF'->'ENTITY_DATA'->'COAPPLICANT') AS JSON)->>'COAPPLICANT_ID' AS COAPPLICANT_ID) as TBL
				where COAPPLICANT_ID=x_object_pri_key_2;
						 
		end if;
           v_applicant_name := coalesce(v_applicant_name,'applicant_name');
		   v_user_name := coalesce(v_user_name,'User');  
		   v_product := coalesce(v_product,'Product');
		   v_doc_owner := coalesce(v_applicant_name,'owner');
		   v_doc_year := concat(v_doc_year,' ','to',' ',v_to_year);
		  
		   v_varible_json := '{"v_applicant_name":"'||v_applicant_name||'","v_user_name":"'||v_user_name||'","v_product":"'||v_product||'","v_doc_owner":"'||v_doc_owner||'","v_doc_year":"'||v_doc_year||'"}';  

 			raise notice 'v_varible_json: %',v_varible_json;
  
 
end if;
  
raise notice 'v_user_id: %',v_user_id;
raise notice 'v_doc_year: %',v_doc_year;
raise notice 'v_applicant_name: %',v_applicant_name;
raise notice 'v_varible_json: %',v_varible_json;
raise notice '5: %',1;

	  begin
	 
	     PERFORM  sp_sr_notification
	             (x_notification_grp_id,v_user_id,v_user_id,v_varible_json,
				  v_current_timestamp,Null,null,'push',
				  v_org_id,v_app_id,v_pw_service_name,v_PW_SESSION_ID,x_login_id);
	 
				--OPEN cur_out_sms;
				 LOOP
						FETCH cur_out_sms INTO rec_column_sms;
						EXIT WHEN NOT FOUND;
						v_cur_out_sms_response_code := rec_column_sms."RESPONSE_CODE" ;
						v_cur_out_sms_response_message := rec_column_sms."RESPONSE_MESSAGE" ;
						v_cur_out_sms_response_type := rec_column_sms."RESPONSE_TYPE" ;	  	
					END LOOP;
				    CLOSE cur_out_sms;
		  
	 
	   end;         


           EXCEPTION
            WHEN OTHERS THEN
                  get stacked diagnostics
       v_state   = returned_sqlstate,
       v_msg     = message_text,
       v_detail  = pg_exception_detail,
       v_hint    = pg_exception_hint,
       v_context = pg_exception_context;
       raise notice 'procedure name:-%','sp_btc_prc_grp_push_not' ;
       raise notice 'v_state:-%',v_state ;
       raise notice 'v_msg:-%',v_msg ;
       raise notice 'v_detail:-%',v_detail ;
       raise notice 'v_hint:-%',v_hint ;
       raise notice 'v_context:-%',v_context ;
       select  cast(nextval('seq_pw_req_id') as VARCHAR) into v_PW_SESSION_ID ; 
                  perform sp_ins_db_exception_log(
		 'DECIMAL-LDKJW5D1R2',--'org_id',
		 'SAARATHI-0MY7TA7QRA',--'app_id',
		 'sp_btc_prc_grp_push_not',--'service_name',
		 'sp_btc_prc_grp_push_not',--'object_name',
		 v_PW_SESSION_ID,--'pw_request_id',
		 x_login_id,--'login_id',
		 x_object_pri_key_1,--'object_pri_key_1',
		 x_object_pri_key_2,--'object_pri_key_2',
		 x_object_pri_key_3,--'object_pri_key_3',
		 x_object_type,--'object_type',
		 v_state,--'err_state',
	     v_msg,--'err_msg',
	     v_detail,--'err_detail',
	     v_hint,--'err_hint',
	     v_context,--'err_context',
		 x_workflow_group_id,--'ref_data_1',
		 x_process_group,--'ref_data_2',
		 x_prc_grp_disp,--'ref_data_3',
		 x_process_remarks,--'ref_data_4',
		 x_config_id,--'ref_data_5',
		 x_notification_grp_id,--'ref_data_6',
		 '',--'ref_data_7',
		 'N',--'is_processed_1',
		 'N',--'is_processed_2',
		  NULL,--'is_processed_1_timestamp',
		  NULL,--'is_processed_1_timestamp',
		  ''--'developer_remarks'
			  ); 
                                  
 
end ;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_btc_pri_key_extraction(x_workflow_group_id character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_workflow_group_id_attr character varying, x_object_pri_key_1_attr character varying, x_object_pri_key_2_attr character varying, x_object_pri_key_3_attr character varying, x_object_type character varying, x_event_process character varying, x_ref_input_1 character varying, x_ref_input_2 character varying, x_ref_object text, x_login_id character varying, x_platware_request_id character varying, x_process_remarks character varying, x_text_1 character varying, x_text_2 character varying, x_text_3 character varying, x_text_4 character varying, x_text_5 character varying)
 RETURNS void
 LANGUAGE plpgsql
AS $function$ declare
--v_cnt number;
 /*declare  type col_primary_keys is table of number index by varchar(64);
workflow_group_id col_primary_keys;
object_pri_key_1 col_primary_keys;
object_pri_key_2 col_primary_keys;
object_pri_key_3 col_primary_keys;*/
v_state text;

v_msg text;

v_detail text;

v_hint text;

v_context text;

v_PW_SESSION_ID VARCHAR(500);

v_count int4;

v_object_pri_key_1 text;
--varchar(2000); 
 v_object_pri_key_2 text;
--varchar(2000); 
 v_object_pri_key_3 text;
--varchar(2000); 
 v_object_pri_key_3_1 text;
--varchar(2000);  
 v_object_pri_key_3_2 text;
--varchar(2000);  
 i int4 ;

j int4 ;

v_pk_2 varchar(200);

v_pk_3 varchar(200);

x_result_pk2 refcursor;
--:= 'cur';
 x_result_pk3 refcursor;
--:= 'cur';
 v_object_pri_key_1_attr text := '';

v_object_pri_key_2_attr text := '';

v_object_pri_key_3_attr text := '';

v_object_pri_key_1_str text := '';

v_pri_cnt int;

begin if x_workflow_group_id is not null
and x_object_pri_key_1 is not null then
--and x_object_pri_key_2 is not null   and x_object_pri_key_3 is not null 
 insert
	into
	gtt_btc_pri_key_mngmnt
values (x_workflow_group_id,
x_object_pri_key_1,
coalesce(x_object_pri_key_2, 'NA'),
coalesce(x_object_pri_key_3, 'NA'),
x_object_type);

elsif x_workflow_group_id_attr is not null
and x_object_pri_key_1_attr is not null then
-- and   x_object_pri_key_2_attr is not null and x_object_pri_key_3_attr is not null
--v_object_pri_key_1 :=  json_value(x_ref_object,x_object_pri_key_1_attr);                  
 execute 'select cast(''' || x_ref_object || ''' as json)' || x_object_pri_key_1_attr
into
	v_object_pri_key_1;
--json_value(x_ref_object,x_object_pri_key_1_attr);
--v_object_pri_key_1_str := 'select cast('''||x_ref_object||''' as json)'||x_object_pri_key_1_attr;
--execute v_object_pri_key_1_str into v_object_pri_key_1;  --json_value(x_ref_object,x_object_pri_key_1_attr);
--v_object_pri_key_3_1 := substr(x_object_pri_key_3,1,instr('$.laf.coapplicant[*].captured_docs[*].doc_bundle_id','[*].')+3);
--v_object_pri_key_3_2 := substr(x_object_pri_key_3,instr('$.laf.coapplicant[*].captured_docs[*].doc_bundle_id','[*].')+4);
-- v_object_pri_key_3_1 := substr(x_object_pri_key_3_attr,1,strpos(x_object_pri_key_3_attr,'[*].')+3);
-- v_object_pri_key_3_2 := substr(x_object_pri_key_3_attr,strpos(x_object_pri_key_3_attr,'[*].')+4);
 if x_object_pri_key_2_attr is null then
insert
	into
	gtt_btc_pri_key_mngmnt
values (x_workflow_group_id,
v_object_pri_key_1,
'NA',
'NA',
x_object_type);

elsif x_object_pri_key_2_attr is not null
and x_object_pri_key_2_attr != '' then if strpos(x_object_pri_key_2_attr, '[') > 0 then v_object_pri_key_2_attr := 'select pk2_id from(select distinct
		               cast(json_array_elements(cast(''' || x_ref_object || ''' as json)' || substring(x_object_pri_key_2_attr, 1, strpos(x_object_pri_key_2_attr, '#')-1)|| ') as json) ' || substring(x_object_pri_key_2_attr, strpos(x_object_pri_key_2_attr, ',')+ 1, strpos(substring(x_object_pri_key_2_attr, strpos(x_object_pri_key_2_attr, ',')+ 1), '}')-1)|| ' as pk2_id )tbl where pk2_id is not null';
else if x_object_pri_key_2_attr = 'NA' then v_object_pri_key_2_attr := 'SELECT ''NA'' as pk2_id';
else v_object_pri_key_2_attr := 'select pk2_id from(SELECT cast(''' || x_ref_object || ''' as json)' || v_object_pri_key_2_attr || ' as pk2_id)tbl where pk2_id is not null';
end if;
end if;

raise notice 'v_object_pri_key_2_attr: %',
v_object_pri_key_2_attr;

open x_result_pk2 for execute v_object_pri_key_2_attr;

loop fetch x_result_pk2
into
	v_pk_2;

exit
when not found;
--v_pk_2 := rec_pk2_id.pk2_id;
 if x_object_pri_key_3_attr is not null
and x_object_pri_key_3_attr != '' then if strpos(x_object_pri_key_3_attr, '[') > 0 then
--			               v_object_pri_key_3_attr :='select 
--					               cast(json_array_elements(cast('||x_ref_object||' as json)'||substring(x_object_pri_key_3_attr,1,strpos(x_object_pri_key_3_attr,'#')-1)||') as json)->> '''
--					               ||substring(x_object_pri_key_3_attr,strpos(x_object_pri_key_3_attr,',')+1,
--					                strpos(substring(x_object_pri_key_3_attr,strpos(x_object_pri_key_3_attr,',')+1),'}')-1)||''' as pk3_id';
 v_object_pri_key_3_attr := 'select distinct pk3_id from(select 
								     cast(json_array_elements(cast(''' || x_ref_object || ''' as json)' || substring(x_object_pri_key_3_attr, 1, strpos(x_object_pri_key_3_attr, '#')-1)|| ') as json)' || substring(x_object_pri_key_3_attr, strpos(x_object_pri_key_3_attr, ',')+ 1, strpos(substring(x_object_pri_key_3_attr, strpos(x_object_pri_key_3_attr, ',')+ 1), '}')-1)|| ' as pk3_id, 
								     cast(json_array_elements(cast(''' || x_ref_object || ''' as json)' || substring(x_object_pri_key_2_attr, 1, strpos(x_object_pri_key_2_attr, '#')-1)|| ') as json)' || substring(x_object_pri_key_2_attr, strpos(x_object_pri_key_2_attr, ',')+ 1, strpos(substring(x_object_pri_key_2_attr, strpos(x_object_pri_key_2_attr, ',')+ 1), '}')-1)|| ' as pk2_id) 
								        as tbl where pk2_id = ''' || v_pk_2 || ''' and pk3_id is not null' ;

raise notice 'sssssss1: %',
v_object_pri_key_3_attr;

raise notice 'ccccv_pk_2: %',
v_pk_2;

raise notice 'ccccv_pk_2: %',
v_object_pri_key_2_attr;
else if x_object_pri_key_3_attr = 'NA' then v_object_pri_key_3_attr := 'SELECT ''NA'' as pk3_id';
else v_object_pri_key_3_attr := 'SELECT cast(''' || x_ref_object || ''' as json)' || v_object_pri_key_3_attr || ' as pk3_id';

raise notice 'sssssss2: %',
v_object_pri_key_3_attr;
end if;

raise notice 'sssssss3: %',
v_object_pri_key_3_attr;
end if;

raise notice 'v_object_pri_key_3_attr4: %',
v_object_pri_key_3_attr;

open x_result_pk3 for execute v_object_pri_key_3_attr;

loop fetch x_result_pk3
into
	v_pk_3;

exit
when not found;
--v_pk_3 := rec_pk3_id.pk3_id;

-- v_object_pri_key_1||'-'||v_pk_2||'-'||v_pk_3||'-'||x_object_type;
 insert
	into
	gtt_btc_pri_key_mngmnt
values (x_workflow_group_id,
v_object_pri_key_1,
v_pk_2,
v_pk_3,
x_object_type);

select
	count(1)
into
	v_pri_cnt
from
	gtt_btc_pri_key_mngmnt;

raise notice 'ccccv_pri_cnt: %',
v_pri_cnt;
end loop;

close x_result_pk3;

elsif x_object_pri_key_3_attr is null then
insert
	into
	gtt_btc_pri_key_mngmnt
values (x_workflow_group_id,
v_object_pri_key_1,
v_pk_2,
'NA',
x_object_type);
end if;
end loop;

close x_result_pk2;
--              for i in 0 .. 50 loop        
--                      v_pk_2 := json_value(x_ref_object,replace(x_object_pri_key_2_attr,'[*]','['||i||']'));
--                       
--                      if v_pk_2 is null then
--                          exit;
--                      end if;
--                     
--                      if x_object_pri_key_3_attr like '%[%' then
--                          for j in 0 .. 50 loop                
--                                v_pk_3 := json_value(x_ref_object,replace(v_object_pri_key_3_1,'[*]','['||i||']')|| replace(v_object_pri_key_3_2,'[*]','['||j||']'));
--                                if v_pk_3 is null then
--                                    exit;
--                                end if;                        
--                              insert into gtt_btc_pri_key_mngmnt
--                              values (x_workflow_group_id,v_object_pri_key_1,v_pk_2,v_pk_3,x_object_type);
--                              v_pk_3 := null;
--              			  end loop;
--                      elsif x_object_pri_key_3_attr is not null then
--                          v_object_pri_key_3 :=  json_value(x_ref_object,x_object_pri_key_3_attr);
--                          insert into gtt_btc_pri_key_mngmnt
--                          values (x_workflow_group_id,v_object_pri_key_1,v_pk_2,v_object_pri_key_3,x_object_type);
--                        
--                    elsif x_object_pri_key_3_attr is null then
--                          insert into gtt_btc_pri_key_mngmnt
--                          values (x_workflow_group_id,v_object_pri_key_1,v_pk_2,'NA',x_object_type);
--                    end if;
--                end loop; 
--        else  
--            v_object_pri_key_2 :=  json_value(x_ref_object,x_object_pri_key_2_attr);
--            insert into gtt_btc_pri_key_mngmnt
--            values (x_workflow_group_id,v_object_pri_key_1,v_object_pri_key_2,v_object_pri_key_2,x_object_type);
--                                
end if;
end if;
--commit;
 select
	count(1)
into
	v_count
from
	gtt_btc_pri_key_mngmnt;

raise notice 'gtt_btc_pri_key_mngmnt: %',
v_count;

/*open  x_result_l3 for
 select  workflow_group_id,object_pri_key_1, object_pri_key_2,
 object_pri_key_3, object_type from gtt_btc_pri_key_mngmnt;
 
 open  x_result_l2 for
 select  distinct workflow_group_id,object_pri_key_1, object_pri_key_2,
 '', object_type from gtt_btc_pri_key_mngmnt;
 
  open  x_result_l1 for
 select  distinct workflow_group_id,object_pri_key_1, '',
 '', object_type from gtt_btc_pri_key_mngmnt;*/
exception
when others then get stacked diagnostics v_state = returned_sqlstate,
v_msg = message_text,
v_detail = pg_exception_detail,
v_hint = pg_exception_hint,
v_context = pg_exception_context;

raise notice 'procedure name:-%',
'sp_btc_pri_key_extraction' ;

raise notice 'v_state:-%',
v_state ;

raise notice 'v_msg:-%',
v_msg ;

raise notice 'v_detail:-%',
v_detail ;

raise notice 'v_hint:-%',
v_hint ;

raise notice 'v_context:-%',
v_context ;

select
	cast(nextval('public.seq_pw_req_id') as VARCHAR)
into
	v_PW_SESSION_ID ;

perform public.sp_ins_db_exception_log( 'DECIMAL-CGT6BYPRBI',
--'org_id',
 'KOTAK_CA-269EW37XAL',
--'app_id',
 'sp_btc_pri_key_extraction',
--'service_name',
 'sp_btc_pri_key_extraction',
--'object_name',
 v_PW_SESSION_ID,
--'pw_request_id',
 x_login_id,
--'login_id',
 x_object_pri_key_1,
--'object_pri_key_1',
 x_object_pri_key_2,
--'object_pri_key_2',
 x_object_pri_key_3,
--'object_pri_key_3',
 x_object_type,
--'object_type',
 v_state,
--'err_state',
 v_msg,
--'err_msg',
 v_detail,
--'err_detail',
 v_hint,
--'err_hint',
 v_context,
--'err_context',
 x_workflow_group_id,
--'ref_data_1',
 x_workflow_group_id_attr,
--'ref_data_2',
 x_object_pri_key_1_attr,
--'ref_data_3',
 x_object_pri_key_2_attr,
--'ref_data_4',
 x_object_pri_key_3_attr,
--'ref_data_5',
 x_event_process,
--'ref_data_6',
 x_ref_input_1,
--'ref_data_7',
 'N',
--'is_processed_1',
 'N',
--'is_processed_2',
 null,
--'is_processed_1_timestamp',
 null,
--'is_processed_1_timestamp',
 ''
--'developer_remarks'
);
end;

$function$
;

CREATE OR REPLACE FUNCTION public.sp_check_credit_facility(x_ccodotherbank character varying, x_kotakccodexposure character varying, x_nonccodotherbank character varying, x_kotaknonccodexposure character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
DECLARE
   V_REMARK_LEVEL   VARCHAR (100);
   p_string     TEXT;
  	X_result    refcursor ='cur';
  V_non bigint;
BEGIN
select x_nonccodOtherBank into V_non;
	if (V_non = '0') THEN 
    p_string  = '{"object": [{"code": "01","value": "CURRENT ACCOUNT"},{"code": "02","value": "OD ACCOUNT"}]}';
   
 elsif V_non < 50000000  THEN 

 p_string  = '{"object": [{"code": "01","value": "CURRENT ACCOUNT"},{"code": "02","value": "OD ACCOUNT"}]}';
 
--elsif (cast(TO_NUMBER(x_nonccodOtherBank ,'FM999999999999999')as bigint) >= cast(TO_NUMBER(500000000 ,'FM999999999999999')as bigint))THEN
elsif V_non  >= 50000000 THEN

   p_string  = '{"object":[{"code":"02","value":"OD ACCOUNT"}]}';
 
  else 
   p_string  = '{"object":[{"code":"00","value":"No facility available"}]}';
 END IF;
 

  OPEN X_result FOR 
  SELECT p_string;
 --insert into test_as values(p_string);
return X_result;


END ;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_check_duplicate_consent(x_object_pri_key_1 character varying, x_requert_sent_to_email character varying, x_request_sent_to_mobile_no character varying)
 RETURNS text
 LANGUAGE plpgsql
AS $function$ 
      DECLARE 
 ref refcursor;
v_count int ;
begin

 select count(1) into v_count from tb_consent_data
  where object_pri_key_1 =x_object_pri_key_1
  and requert_sent_to_email =x_requert_sent_to_email
  and request_sent_to_mobile_no =x_request_sent_to_mobile_no;

if v_count > 0 then 
        return 'Y';
else 
        return 'N';
commit;
end if ;		
		
--  if x_acc_num in (select acc_number from tb_complete_field_mis_solecantb ) then  
--       if (x_lead_id in (select newcase_id from tb_complete_field_mis_solecantb tcfms where acc_number =x_acc_num)) then
--         if (select count(acc_number ) from tb_complete_field_mis_solecantb where acc_number =x_acc_num)=1
--           then 
--          return 'N';
--          else
--        return 'Y';
--		  end if;
--        else
--        return 'Y';
--end if;
--  --OPEN ref for select 'Y' as "STATUS";
-- 
--  else 
--
--	return 'N';
--	commit;
--end  if;

 EXCEPTION WHEN OTHERS THEN

  return 'X';

 
end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_check_rework_section_validation(x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_login_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare X_RESULT refcursor:='cur';
P_SYSTEM_ROLE varchar(30);
--X_ROLE VARCHAR(100);
P_STRING text;
v_count int;
V_JOURNEY_TYPE varchar(30);
V_MANDATE VARCHAR(200);
  V_CPV VARCHAR(200);
  REWORK_STATUS VARCHAR(200);
 W_COUNT INT;
N_COUNT INT;
Y_COUNT INT;
s_count INT;
V_ROLE VARCHAR(50);
V_WORKFLOW_STATUS VARCHAR(100);
V_WORKFLOW VARCHAR(100);
V_VKYC_STATUS VARCHAR(100);
n_section_id_1 int;
n_section_id_2 INT;
n_section_id int;
v_WORK_VARIABLES VARCHAR(100);
V_LEAD_JOURNEY VARCHAR(100);
V_LOB_CODE varchar;
V_SCHEME_CODE1 VARCHAR(100);
V_MOVE varchar;
v_RM_CODE varchar;
v_group varchar;
r_count int;
V_CODE INT;
V_SCHEME_CODE int;
v_ca_lob_code int;

begin
select  CAST(OBJECT_DATA AS JSON)->'AOF'->>'WORKFLOW_JOURNEY' as  "WORKFLOW_JOURNEY",
         CAST(OBJECT_DATA AS JSON)->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADD_MHOLDER'->>'CODE' as "MANDATE",
          CAST(OBJECT_DATA AS JSON)->'AOF'->'BUS_DATA'->'EP2_FLAG'->>'CODE' as "CPV",
          cast(object_data as JSON)->'AOF'->>'WORKFLOW_STATUS' as "WORKFLOW_STATUS",
          CAST(OBJECT_DATA AS JSON)->'AOF'->>'WORKFLOW' as "LEAD_JOURNEY",
          CAST(OBJECT_DATA AS JSON)->'AOF'->>'VKYC_STATUS' as "VKYC_STATUS",
      --    CAST(OBJECT_DATA AS JSON)->'AOF'->'CA'->'SCHEME_CODE'->>'CODE',
          cast(object_data as JSON)->'AOF'->>'WORKFLOW' as "WORKFLOW",
          cast(OBJECT_DATA as JSON)->'AOF'->'WORK_VARIABLES'->>'IP_CHQ_FLAG' as "WORK_VARIABLES",
          cast(object_data as JSON)->'AOF'->'LOB' ->>'CODE' as "LOB_CODE",
          cast(object_data as JSON)->'AOF'->'CA'->'SCHEME_CODE'->>'CODE' as "SCHEME_CODE",
          cast(object_data as JSON)->'AOF'->>'MOVE_TO_ASSISTED' as "MOVE_TO_ASSISTED",
          cast(object_data as JSON)->'AOF'->>'RM_CODE' as "RM_CODE"
          INTO  v_journey_type, V_MANDATE, V_CPV, V_WORKFLOW_STATUS, V_LEAD_JOURNEY,  V_VKYC_STATUS,V_WORKFLOW,v_WORK_VARIABLES,
          V_LOB_CODE, V_SCHEME_CODE1,V_MOVE,v_RM_CODE 
         from tb_cop_buss_obj_txn
		 where object_pri_key_1= x_object_pri_key_1
		  and object_type =x_object_type;
        
        select count(value_code) into V_CODE from tb_lov_mst tlm where text_1 ='WBG' and value_code=V_LOB_CODE;
        select count(scheme_code) into V_SCHEME_CODE from tb_product_master tlm 
        where (text_2 ='WBG' OR ((text_1 IN ('CC','OD')))) and scheme_code=V_SCHEME_CODE1;
       
      --  select lob_code into vv_lob_code from tb_emp_hrms teh where employee_number= x_login_id;
       
      
       
       
       select count(1) into v_ca_lob_code from tb_lov_mst tlm where text_1 ='WBG' and value_code=
         (select lob_code from tb_emp_hrms teh where employee_number= v_RM_CODE);
       

        
		 
		 
		 
if v_journey_type = 'IN' and V_WORKFLOW = 'CA' and v_ca_lob_code =0 and V_WORKFLOW_STATUS <> 'CPVAPPROVED' then
v_group := 'Group_1';
elsif v_journey_type = 'IN' and V_WORKFLOW = 'CA' and v_ca_lob_code >0 and V_WORKFLOW_STATUS <> 'CPVAPPROVED' then
v_group := 'Group_2';
elsif v_journey_type = 'IN' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE =0  then
v_group := 'Group_14';
elsif v_journey_type = 'IN' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE >0  then
v_group := 'Group_15';

elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code =0 and V_CPV in ('1') and V_MANDATE in ('1') then
v_group := 'Group_3';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code =0 AND V_CPV !='1' and V_MANDATE !='1' then
v_group := 'Group_9';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code =0 AND V_MANDATE !='1' and V_CPV ='1' then
v_group := 'Group_8';        -- Not MANDATE
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code =0 AND V_MANDATE ='1' and V_CPV !='1' then
v_group := 'Group_7';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code >0 AND V_MANDATE !='1' and V_CPV !='1' then
v_group := 'Group_6';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code >0 AND V_MANDATE ='1' and V_CPV !='1' then
v_group := 'Group_4';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code >0 AND V_MANDATE !='1' and V_CPV ='1' then
v_group := 'Group_5';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code >0 AND V_MANDATE ='1' and V_CPV ='1' then
v_group := 'Group_23';

elsif v_journey_type = 'SP' and V_WORKFLOW =  'CADIY' and V_MOVE = 'Y' and V_CODE =0 and V_CPV ='1' and V_MANDATE ='1' then
v_group := 'Group_16';
elsif v_journey_type = 'SP' and V_WORKFLOW =  'CADIY' and V_MOVE = 'Y' and V_CODE =0 AND V_CPV !='1' and V_MANDATE !='1' then
v_group := 'Group_17';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE =0 AND V_MANDATE !='1' and V_CPV ='1' then
v_group := 'Group_18';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE =0 AND V_MANDATE ='1' and V_CPV !='1' then
v_group := 'Group_19';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE >0 AND V_MANDATE !='1' and V_CPV !='1' then
v_group := 'Group_20';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE >0 AND V_MANDATE ='1' and V_CPV !='1' then
v_group := 'Group_21';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE >0 AND V_MANDATE !='1' and V_CPV ='1' then
v_group := 'Group_22';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE >0 AND V_MANDATE ='1' and V_CPV ='1' then
v_group := 'Group_24';

elsif v_journey_type = 'IN' and V_WORKFLOW = 'CADIY' and V_MOVE = 'N' and V_SCHEME_CODE>0 then
v_group := 'Group_11';
elsif v_journey_type = 'IN' and V_WORKFLOW = 'CADIY' and V_MOVE = 'N' and V_SCHEME_CODE=0 then
v_group := 'Group_10';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'N' and V_SCHEME_CODE>0 then
v_group := 'Group_13';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'N' and  V_SCHEME_CODE=0 then
v_group := 'Group_12';
end if;
		  
raise notice 'v_group123:%',v_group;

		select count(1) into r_count  from tb_section_screen_mapping tssm where group_name = v_group;
		 
		 /* select COUNT(*) into Y_COUNT from tb_section_screen_mapping tssm join tb_section_status tss 
		  on tssm.section_id =tss.section_id where tss.object_pri_key_1 = x_object_pri_key_1 
		 and tss.status ='Y' and tssm.constitution_type = v_journey_type and tssm.workflow_group_id=V_WORKFLOW and 
		tss."role" =(SELECT role FROM tb_emp_hrms teh where employee_number = x_login_id);
		
			 select COUNT(*) into W_COUNT from tb_section_screen_mapping tssm join tb_section_status tss 
		 on tssm.section_id =tss.section_id where tss.object_pri_key_1 = x_object_pri_key_1 
		 and tss.status ='W' and tssm.constitution_type = v_journey_type and tssm.workflow_group_id=V_WORKFLOW and 
		tss."role" =(SELECT role FROM tb_emp_hrms teh where employee_number = x_login_id);
		
			 select COUNT(*) into N_COUNT from tb_section_screen_mapping tssm join tb_section_status tss 
		 on tssm.section_id =tss.section_id where tss.object_pri_key_1 = x_object_pri_key_1 
		 and tss.status ='N' and tssm.constitution_type = v_journey_type and tssm.workflow_group_id=V_WORKFLOW and 
		tss."role" = (SELECT role FROM tb_emp_hrms teh where employee_number = x_login_id);   */
		
		select COUNT(*) into Y_COUNT from  tb_section_status tss 
		  where tss.object_pri_key_1 = x_object_pri_key_1 
		 and tss.status ='Y' and tss."role" = x_login_id;
		
			 select COUNT(*) into W_COUNT from  tb_section_status tss 
		  where tss.object_pri_key_1 = x_object_pri_key_1 
		 and tss.status ='W' and tss."role" =x_login_id;
		
			select COUNT(*) into N_COUNT from  tb_section_status tss 
		  where tss.object_pri_key_1 = x_object_pri_key_1 
		 and tss.status ='N' and tss."role" =x_login_id;
				 
--		select SUM(COUNT) into n_section_id_1 FROM
--		(select count(1) from  tb_section_status tss 
--		  where tss.object_pri_key_1 = x_object_pri_key_1 and tss."role" =x_login_id
--		 union 
--		select count(1)  from  tb_section_status tss 
--		  where tss.object_pri_key_1 = x_object_pri_key_1 and section_id ='VKYC' and status ='R')T;
		
	select COUNT(1) into n_section_id_1 from tb_section_status tss 
		  where tss.object_pri_key_1 = x_object_pri_key_1 and tss."role" =x_login_id
		   and status !='R';
		
		 raise notice 'Y_COUNT %',Y_COUNT; 
	     raise notice 'W_COUNT %',W_COUNT; 
	     raise notice 'N_COUNT %',N_COUNT;
	    raise notice 'n_section_id_1 %',n_section_id_1;
	    raise notice 'v_group %',v_group;
	   raise notice 'V_SCHEME_CODE %',V_SCHEME_CODE;
	  raise notice 'r_count %',r_count; 
	   
		
		if w_count = 0 and n_count >0 and r_count=n_section_id_1 then 
		REWORK_STATUS = 'Y';
	
--	elsif n_count > = 1 and w_count = 0  then
--	REWORK_STATUS = 'Y';
--elsif w_count <> 0 and n_count = 0 then 
--REWORK_STATUS = 'N';
	else 
	REWORK_STATUS = 'N';
end if;
--		if Y_COUNT >=0 and W_COUNT <>0 and N_COUNT<>0 then 
--		 REWORK_STATUS = 'Y';
--		else 
--		  REWORK_STATUS = 'N';
--		 end if;
		
		open X_RESULT for
select
	REWORK_STATUS as "REWORK_STATUS";

return X_RESULT;
END;
 $function$
;

CREATE OR REPLACE FUNCTION public.sp_check_section_validation(x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_login_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare X_RESULT refcursor:='cur';
P_SYSTEM_ROLE varchar(30);
--X_ROLE VARCHAR(100);
P_STRING text;
v_count int;
r_count int;
V_JOURNEY_TYPE varchar(30);
V_MANDATE VARCHAR(1000);
  V_CPV VARCHAR(100);
  V_STATUS VARCHAR(100);
 V_WORKFLOW_STATUS VARCHAR(100);
 V_LEAD_JOURNEY VARCHAR(100);
 s_count int;
V_VKYC_STATUS VARCHAR(100);
V_SCHEME_CODE INT;
V_WORKFLOW VARCHAR(100);
v_WORK_VARIABLES VARCHAR(100);
V_CODE INT;
V_LOB_CODE varchar;
V_SCHEME_CODE1 VARCHAR(100);
v_group varchar;
V_MOVE varchar;
vv_lob_code varchar;
v_vkyc_count int;
v_vkyc_count1 int;
v_ca_lob_code int;
v_RM_CODE varchar;
begin
select  CAST(OBJECT_DATA AS JSON)->'AOF'->>'WORKFLOW_JOURNEY' ,
         CAST(OBJECT_DATA AS JSON)->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADD_MHOLDER'->>'CODE' ,
          CAST(OBJECT_DATA AS JSON)->'AOF'->'BUS_DATA'->'EP2_FLAG'->>'CODE' ,
          cast(object_data as JSON)->'AOF'->>'WORKFLOW_STATUS',
          CAST(OBJECT_DATA AS JSON)->'AOF'->>'WORKFLOW',
          CAST(OBJECT_DATA AS JSON)->'AOF'->>'VKYC_STATUS',
      --    CAST(OBJECT_DATA AS JSON)->'AOF'->'CA'->'SCHEME_CODE'->>'CODE',
          cast(object_data as JSON)->'AOF'->>'WORKFLOW',
          cast(OBJECT_DATA as JSON)->'AOF'->'WORK_VARIABLES'->>'IP_CHQ_FLAG',
          cast(object_data as JSON)->'AOF'->'LOB' ->>'CODE',
          cast(object_data as JSON)->'AOF'->'CA'->'SCHEME_CODE'->>'CODE',
          cast(object_data as JSON)->'AOF'->>'MOVE_TO_ASSISTED',
          cast(object_data as JSON)->'AOF'->>'RM_CODE'
          INTO  v_journey_type, V_MANDATE, V_CPV, V_WORKFLOW_STATUS, V_LEAD_JOURNEY,  V_VKYC_STATUS,V_WORKFLOW,v_WORK_VARIABLES,
          V_LOB_CODE, V_SCHEME_CODE1,V_MOVE,v_RM_CODE 
         from tb_cop_buss_obj_txn
		 where object_pri_key_1= x_object_pri_key_1
		  and object_type =x_object_type;
        
        select count(value_code) into V_CODE from tb_lov_mst tlm where text_1 ='WBG' and value_code=V_LOB_CODE;
        select count(scheme_code) into V_SCHEME_CODE from tb_product_master tlm 
        where (text_2 ='WBG' OR ((text_1 IN ('CC','OD')))) and scheme_code=V_SCHEME_CODE1;
       
      --  select lob_code into vv_lob_code from tb_emp_hrms teh where employee_number= x_login_id;
       
      
       
       
       select count(1) into v_ca_lob_code from tb_lov_mst tlm where text_1 ='WBG' and value_code=
         (select lob_code from tb_emp_hrms teh where employee_number= v_RM_CODE);
       

        
		 
		 
		 
if v_journey_type = 'IN' and V_WORKFLOW = 'CA' and v_ca_lob_code =0 and V_WORKFLOW_STATUS <> 'CPVAPPROVED' then
v_group := 'Group_1';
elsif v_journey_type = 'IN' and V_WORKFLOW = 'CA' and v_ca_lob_code >0 and V_WORKFLOW_STATUS <> 'CPVAPPROVED' then
v_group := 'Group_2';
elsif v_journey_type = 'IN' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE =0  then
v_group := 'Group_14';
elsif v_journey_type = 'IN' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE >0  then
v_group := 'Group_15';

elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code =0 and V_CPV ='1' and V_MANDATE ='1' then
v_group := 'Group_3';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code =0 AND V_CPV !='1' and V_MANDATE !='1' then
v_group := 'Group_9';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code =0 AND V_MANDATE !='1' and V_CPV ='1' then
v_group := 'Group_8';        -- Not MANDATE
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code =0 AND V_MANDATE ='1' and V_CPV !='1' then
v_group := 'Group_7';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code >0 AND V_MANDATE !='1' and V_CPV !='1' then
v_group := 'Group_6';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code >0 AND V_MANDATE ='1' and V_CPV !='1' then
v_group := 'Group_4';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code >0 AND V_MANDATE !='1' and V_CPV ='1' then
v_group := 'Group_5';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code >0 AND V_MANDATE ='1' and V_CPV ='1' then
v_group := 'Group_23';

elsif v_journey_type = 'SP' and V_WORKFLOW =  'CADIY' and V_MOVE = 'Y' and V_CODE =0 and V_CPV ='1' and V_MANDATE ='1' then
v_group := 'Group_16';
elsif v_journey_type = 'SP' and V_WORKFLOW =  'CADIY' and V_MOVE = 'Y' and V_CODE =0 AND V_CPV !='1' and V_MANDATE !='1' then
v_group := 'Group_17';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE =0 AND V_MANDATE !='1' and V_CPV ='1' then
v_group := 'Group_18';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE =0 AND V_MANDATE ='1' and V_CPV !='1' then
v_group := 'Group_19';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE >0 AND V_MANDATE !='1' and V_CPV !='1' then
v_group := 'Group_20';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE >0 AND V_MANDATE ='1' and V_CPV !='1' then
v_group := 'Group_21';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE >0 AND V_MANDATE !='1' and V_CPV ='1' then
v_group := 'Group_22';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE >0 AND V_MANDATE ='1' and V_CPV ='1' then
v_group := 'Group_24';

elsif v_journey_type = 'IN' and V_WORKFLOW = 'CADIY' and V_MOVE = 'N' and V_SCHEME_CODE>0 then
v_group := 'Group_11';
elsif v_journey_type = 'IN' and V_WORKFLOW = 'CADIY' and V_MOVE = 'N' and V_SCHEME_CODE=0 then
v_group := 'Group_10';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'N' and V_SCHEME_CODE>0 then
v_group := 'Group_13';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'N' and  V_SCHEME_CODE=0 then
v_group := 'Group_12';
end if;
		  
select COUNT(1) into v_vkyc_count from tb_btc_prc_grp_disp_hist tbpgdh 
where process_group ='DVU' and prc_grp_disp ='REWORK' and workflow_group_id ='CADIY'
and object_pri_key_1 =x_object_pri_key_1;

select COUNT(1) into v_vkyc_count1 from tb_btc_prc_grp_disp_hist tbpgdh 
where prc_grp_disp ='MOVETOASSISTED' and workflow_group_id ='CADIY'
and object_pri_key_1 =x_object_pri_key_1;

if v_vkyc_count>0 or v_vkyc_count1>0 then
    
     update tb_section_status set status='R' where section_id ='VKYC' and object_pri_key_1 =x_object_pri_key_1;
    
    end if;

		 select count(1) into v_count from tb_section_status 
		 where object_pri_key_1 = x_object_pri_key_1 and status ='Y'  
		and role = x_login_id;
		
		select count(1) into r_count  from tb_section_screen_mapping tssm where group_name = v_group;
	
	
	
	/* select count(1) into r_count  from tb_section_screen_mapping tssm join tb_section_status tss 
		 on tssm.section_id =tss.section_id 
		 where tss.object_pri_key_1 =x_object_pri_key_1 
		  and tssm.constitution_type = v_journey_type 
	    and tssm.workflow_group_id=V_WORKFLOW;
	 --  and tss.role = x_login_id and tssm.workflow_status=v_WORK_VARIABLES ;     */
		 
	    raise notice 'v_count %',v_count; 
	    raise notice 'r_count %',r_count; 
	     raise notice 'v_group %',v_group; 
	    raise notice 'v_vkyc_count %',v_vkyc_count;
		
			if v_count = r_count then 
		 V_STATUS = 'Y';
		else 
		  V_STATUS = 'N';
		 end if;
		 
		
		open X_RESULT for
select
	V_STATUS as "STATUS";

return X_RESULT;

END;
 $function$
;

CREATE OR REPLACE FUNCTION public.sp_clear_blank_lead_job()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
v_object text;
v_count smallint;
BEGIN

DELETE  from tb_cop_buss_obj_txn tcbot 
where ((object_data::json->'AOF'->'CA'->>'HOME_BRANCH'      ='' or object_data::json->'AOF'->'CA'->>'HOME_BRANCH'      is null)
		or (object_data::json->'AOF'->>'PRIMARY_CONTACT_MOBILE' ='' or object_data::json->'AOF'->>'PRIMARY_CONTACT_MOBILE' is null)
		or (object_data::json->'AOF'->>'PRIMARY_CONTACT_EMAIL'  ='' or object_data::json->'AOF'->>'PRIMARY_CONTACT_EMAIL'  is NULL)
		or (object_data::json->'AOF'->'BUS_DATA'->>'ORG_PAN_NO' ='' or object_data::json->'AOF'->'BUS_DATA'->>'ORG_PAN_NO' is NULL))
  and CURRENT_DATE - cast(TO_CHAR(coalesce(tcbot.device_modify_timestamp,tcbot.created_timestamp),'YYYY-MM-DD')as DATE)>2
;	

update tb_cop_buss_obj_txn tcbot
set is_active ='N'
where created_timestamp + interval '90 day'< current_timestamp
-- and object_pri_key_1 ='SP141221024354222'
--and object_pri_key_1 in ('SP031221101056759','SP131221115056946','SP120122041506138')
and is_active ='Y'
and text_1 in ('REJECTED','BOM_REJECT','RCU_REJECT','ACCOUNT_ACTIVATED');

end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_dms_json_update(x_object_pri_key_1 character varying, x_json_obj text, x_api_job_processor character varying, x_updated_path character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare
X_RESULT refcursor:='cur';
begin
	update tb_cop_buss_obj_txn set object_data = cast(x_json_obj as json) 
	where object_pri_key_1  = x_object_pri_key_1 ; 
	
	insert into tb_dms_json_update_1 
	values
	(x_object_pri_key_1,cast(x_json_obj as json),now(),x_api_job_processor,x_updated_path);

open x_result for select 'Values has been successfully updated and inserted' as res_msg;

return x_result;
--exception when others then 
--open x_result for select 'Failed to update the values' as res_msg;
--return x_result;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_dp_get_user_session(x_org_id character varying, x_app_id character varying, x_user_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
V_BRANCH_LIST varchar;
V_COMPANY_LIST varchar;
x_result refcursor:= 'cur';
v_count  int;
v_data text;
begin
/*
	SELECT count(1) into v_count  from tb_emp_hrms teh 
	RIGHT join tb_user_system_role_mapping usrm on usrm.user_id = teh.first_name 
	 where teh.first_name =x_user_id
	and CURRENT_DATE between usrm.from_date and USRM.to_date;
	
 IF v_count > 0 THEN 
	  
    SELECT jsonb_agg(row_to_json(t)) into v_data  from 
         (SELECT system_role    AS"value" ,
       usrm.user_id AS "code"   
      from tb_emp_hrms teh 
	  RIGHT join tb_user_system_role_mapping usrm on usrm.user_id = teh.first_name 
	  where teh.first_name =x_user_id
union 
    select teh.role  AS"value" , 
         teh.first_name  as "code" from tb_emp_hrms teh 
	  where teh.first_name = x_user_id)t;
*/

 select count(*) into v_count from tb_emp_hrms teh 
  join tb_function_roles_mst FUN on fun.role_name = teh."role" 
  where employee_number =x_user_id;
		 
IF v_count > 0 THEN 
   select jsonb_agg(json_build_object('code',teh.employee_number,
                            'value',fun.role_alias ,--fun.default_system_role_code,
                            'role_alias',fun.role_alias 
                           )
                           )
      into v_data
     from tb_emp_hrms teh 
     join tb_function_roles_mst fun on fun.role_name = teh."role" 
    where employee_number =x_user_id
    and fun.default_system_role_code not in ('Sales Executive');

-- SELECT jsonb_agg(row_to_json(t)) into v_data  from 
-- (select teh.employee_number as "code", fun.default_system_role_code as "value" from tb_emp_hrms teh 
--        join tb_function_roles_mst fun on fun.role_name = teh."role" 
--         where employee_number =x_user_id
--         and fun.default_system_role_code not in ('Sales Executive')
----  union 
---- select employee_number as "code", role as "value" from tb_emp_hrms teh 
----     where employee_number =x_user_id  -- commented to get only role from function_master not form hrms role
--    )t;

/*SELECT jsonb_agg(row_to_json(t)) into v_data  from 
 (select teh.role as "value", teh.first_name as "code" from tb_user_mst tum 
    join tb_emp_hrms teh on TEH.first_name =TUM.user_id 
    where first_name =x_user_id
union
 select role_name , role_code from tb_function_roles_mst tfrm 
  where role_code = x_user_id)t;*/

/*SELECT jsonb_agg(row_to_json(t)) into v_data  from 
	      (select distinct frm.default_system_role_code as "value" ,frm.role_code as "code"
	         from  tb_function_roles_mst FRM 
	         where  frm.role_name in (select frm.role_name AS"value" 
    	                           from tb_emp_hrms teh 
							       join tb_function_roles_mst frm on frm.default_system_role_code = teh."role" 
							        where teh.first_name = x_user_id)
union 
   select TEH.role, TEH.first_name  from tb_user_mst tum 
							          join  tb_emp_hrms teh on TEH.first_name =TUM.user_id 
							          where first_name =x_user_id)t;*/
	
 else  	
	v_data = '[{"code":"1","value":"No Supporting Role Exist"}]';
 end if;
if (v_data  ='' or v_data is null)then

		select jsonb_agg(
		          json_build_object('code',teh.employee_number,
		                            'value','No Supporting Role Exist' ,
		                            'role_alias','No Supporting Role Exist' 
		                           ))
         into v_data                  
         from tb_emp_hrms teh 
         join tb_function_roles_mst fun on fun.role_name = teh."role" 
        where employee_number = x_user_id;

--SELECT jsonb_agg(row_to_json(t)) into v_data  from 
-- (select teh.employee_number as "code", 'No Supporting Role Exist' as "value" from tb_emp_hrms teh 
--        join tb_function_roles_mst fun on fun.role_name = teh."role" 
--         where employee_number =x_user_id)t;
         
--and fun.default_system_role_code not in ('Sales Executive'))t;
--v_data = '[{"code":"1","value":"No Supporting Role Exist"}]';

end if;
--	v_data = '[{"code":"1","value":"Approver"},{"code":"2","value":"DVU"},{"code":"3","value":"RCU"},{"code":"4","value":"RCU Correcter"},{"code":"5","value":"OPS --CA"},{"code":"6","value":"Auditor"},{"code":"7","value":"BSG"},{"code":"10","value":"Product Supervisor"},{"code":"8","value":"Sales Supervisor"},{"code":"9","value":"Approver --Supervisor"},{"code":"10","value":"DVU Supervisorr"},{"code":"9","value":"RCU Supervisor"},{"code":"9","value":"RCU Correcter Supervisor"}]';
open X_RESULT for
select v_data as "OBJECT";
return X_RESULT;


	end;$function$
;

CREATE OR REPLACE FUNCTION public.sp_email()
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
p_msg refcursor = 'cur';

cur_1 cursor is 
select te.object_pri_key_1 from tb_escalation_data_object_final_bkp te join tb_cop_buss_obj_txn tc on te.object_pri_key_1 = tc.object_pri_key_1 
join tb_holiday_temp th on th.holiday_date  = te.created_timestamp::date;

begin
	for x in cur_1 loop
		update tb_escalation_data_object_final_bkp set created_timestamp = created_timestamp + interval '01 days' 
		where object_pri_key_1  = x.object_pri_key_1;
	end loop;
	
	if count(cur_1) > 0 then 
	perform sp_email(); 
	end if;
open p_msg for select 'Updated' as res_msg;
return p_msg;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_email_escalation()
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
p_msg refcursor = 'cur';
v_report_id int;
total_rows int;
NUM INT;
P_STRING json;
xr_report_id int;
v_json json;
zr_report_id int;
v_state text;
x_count int;
v_count int;
cur_1 cursor is 
select distinct(a.object_pri_key_1) as lead_id,a.created_timestamp::date as created_timestamp ,tba.emp_id as RM, tsam.approver_id as Supervisor1 , teh.supervisor_emp_no as Supervisor2
,teh.email_address as Supervisor_1_email,teh.first_name  as Supervisor_1_name,a.process_group,a.prc_grp_disp  
from tb_btc_prc_grp_disp a , tb_btc_accesscontrol tba, tb_se_app_mapping tsam ,tb_emp_hrms teh
where tba.emp_id =tsam.se_id and tsam.approver_id = teh.employee_number  
and a.object_pri_key_1 = tba.object_pri_key_1 
and tba.system_role ='RM'  
and  a.process_group ='RM_SE' and (a.prc_grp_disp ='ASSIGNED' and a.prc_grp_disp <> 'SUBMITTED')
and a.created_timestamp  < NOW() - INTERVAL '03 days'
group by a.object_pri_key_1,a.created_timestamp,tba.emp_id, tsam.approver_id,teh.supervisor_emp_no,teh.email_address,Supervisor_1_name,
a.process_group,a.prc_grp_disp
union  
select distinct(a.object_pri_key_1) as lead_id,a.created_timestamp as created_timestamp ,tba.emp_id as RM, tsam.approver_id as Supervisor1 , teh.supervisor_emp_no as Supervisor2
,teh.email_address as Supervisor_1_email,teh.first_name  as Supervisor_1_name,a.process_group,a.prc_grp_disp
from tb_btc_prc_grp_disp a , tb_btc_accesscontrol tba, tb_se_app_mapping tsam ,tb_emp_hrms teh 
where tba.emp_id =tsam.se_id and tsam.approver_id = teh.employee_number 
and a.object_pri_key_1 = tba.object_pri_key_1  
and  a.process_group ='BOM_APPROVER'
and (a.prc_grp_disp ='USERWAIT' or a.prc_grp_disp = 'REWORK') and a.prc_grp_disp <>'APPROVE'
and a.created_timestamp  < NOW() - INTERVAL '03 days' --and a.object_pri_key_1 ='SP290422123251235'
group by a.object_pri_key_1,a.created_timestamp,tba.emp_id, tsam.approver_id ,teh.supervisor_emp_no,teh.email_address,a.process_group,
a.prc_grp_disp,teh.first_name  
union 
select distinct(a.object_pri_key_1) as lead_id,a.created_timestamp as created_timestamp ,tba.emp_id as RM, tsam.approver_id as Supervisor1 , teh.supervisor_emp_no as Supervisor2
,teh.email_address as Supervisor_1_email,teh.first_name  as Supervisor_1_name,a.process_group,a.prc_grp_disp
from tb_btc_prc_grp_disp a , tb_btc_accesscontrol tba, tb_se_app_mapping tsam ,tb_emp_hrms teh 
where tba.emp_id =tsam.se_id and tsam.approver_id = teh.employee_number 
and a.object_pri_key_1 = tba.object_pri_key_1 
and  a.process_group ='DVU'
and (a.prc_grp_disp ='WIP' or a.prc_grp_disp = 'REWORK') and a.prc_grp_disp <>'APPROVE'
and a.created_timestamp  < NOW() - INTERVAL '03 days'
group by a.object_pri_key_1,a.created_timestamp,tba.emp_id, tsam.approver_id ,teh.supervisor_emp_no,teh.email_address,a.process_group
,a.prc_grp_disp,teh.first_name
union 
select distinct(a.object_pri_key_1) as lead_id,a.created_timestamp as created_timestamp ,tba.emp_id as RM, tsam.approver_id as Supervisor1 , teh.supervisor_emp_no as Supervisor2
,teh.email_address as Supervisor_1_email,teh.first_name  as Supervisor_1_name,a.process_group,a.prc_grp_disp
from tb_btc_prc_grp_disp a , tb_btc_accesscontrol tba, tb_se_app_mapping tsam ,tb_emp_hrms teh 
where tba.emp_id =tsam.se_id and tsam.approver_id = teh.employee_number 
and a.object_pri_key_1 = tba.object_pri_key_1 
and  a.process_group ='RCU'
and (a.prc_grp_disp ='WIP' or a.prc_grp_disp = 'REWORK') and a.prc_grp_disp <>'APPROVE'
and a.created_timestamp  < NOW() - INTERVAL '03 days'
group by a.object_pri_key_1,a.created_timestamp,tba.emp_id, tsam.approver_id ,teh.supervisor_emp_no,teh.email_address,a.process_group
,a.prc_grp_disp,teh.first_name 
union 
select distinct(a.object_pri_key_1) as lead_id,a.created_timestamp as created_timestamp ,tba.emp_id as RM, tsam.approver_id as Supervisor1 , teh.supervisor_emp_no as Supervisor2
,teh.email_address as Supervisor_1_email,teh.first_name  as Supervisor_1_name,a.process_group,a.prc_grp_disp
from tb_btc_prc_grp_disp a , tb_btc_accesscontrol tba, tb_se_app_mapping tsam ,tb_emp_hrms teh 
where tba.emp_id =tsam.se_id and tsam.approver_id = teh.employee_number 
and a.object_pri_key_1 = tba.object_pri_key_1 
and  a.process_group ='RU'
and a.prc_grp_disp ='RU_ASSIGN' and a.prc_grp_disp <>'RU_SUBMITTED'
and a.created_timestamp  < NOW() - INTERVAL '03 days'
group by a.object_pri_key_1,a.created_timestamp,tba.emp_id, tsam.approver_id ,teh.supervisor_emp_no,teh.email_address,a.process_group
,a.prc_grp_disp,teh.first_name;
--
cur_2 cursor is 
select distinct(a.object_pri_key_1) as lead_id,a.created_timestamp as created_timestamp ,tba.emp_id as RM, tsam.approver_id as Supervisor1 , teh.supervisor_emp_no as Supervisor2
,teh.email_address as Supervisor_1_email,
(select tp.email_address from tb_emp_hrms tp where employee_number = teh.supervisor_emp_no ) as Super2email,
(select tp.first_name from tb_emp_hrms tp where employee_number = teh.supervisor_emp_no ) as Super2name,
a.process_group,a.prc_grp_disp 
from tb_btc_prc_grp_disp a , tb_btc_accesscontrol tba, tb_se_app_mapping tsam ,tb_emp_hrms teh
where tba.emp_id =tsam.se_id and tsam.approver_id = teh.employee_number  
and a.object_pri_key_1 = tba.object_pri_key_1 
and tba.system_role ='RM'  
and  a.process_group ='RM_SE' and (a.prc_grp_disp ='ASSIGNED' and a.prc_grp_disp <> 'SUBMITTED')
and a.created_timestamp  < NOW() - INTERVAL '04 days'
group by a.object_pri_key_1,a.created_timestamp,tba.emp_id, tsam.approver_id,teh.supervisor_emp_no,teh.email_address,a.process_group
,a.prc_grp_disp,Super2name
union  
select distinct(a.object_pri_key_1) as lead_id,a.created_timestamp as created_timestamp ,tba.emp_id as RM, tsam.approver_id as Supervisor1 , teh.supervisor_emp_no as Supervisor2
,teh.email_address as Supervisor_1_email,
(select tp.email_address from tb_emp_hrms tp where employee_number = teh.supervisor_emp_no ) as Super2email,
(select tp.first_name from tb_emp_hrms tp where employee_number = teh.supervisor_emp_no ) as Super2name,
a.process_group,a.prc_grp_disp
from tb_btc_prc_grp_disp a , tb_btc_accesscontrol tba, tb_se_app_mapping tsam ,tb_emp_hrms teh 
where tba.emp_id =tsam.se_id and tsam.approver_id = teh.employee_number 
and a.object_pri_key_1 = tba.object_pri_key_1  
and  a.process_group ='BOM_APPROVER'
and (a.prc_grp_disp ='USERWAIT' or a.prc_grp_disp = 'REWORK') and a.prc_grp_disp <>'APPROVE'
and a.created_timestamp  < NOW() - INTERVAL '04 days' 
group by a.object_pri_key_1,a.created_timestamp,tba.emp_id, tsam.approver_id ,teh.supervisor_emp_no,teh.email_address,a.process_group
,a.prc_grp_disp,Super2name
union 
select distinct(a.object_pri_key_1) as lead_id,a.created_timestamp as created_timestamp ,tba.emp_id as RM, tsam.approver_id as Supervisor1 , teh.supervisor_emp_no as Supervisor2
,teh.email_address as Supervisor_1_email,
(select tp.email_address from tb_emp_hrms tp where employee_number = teh.supervisor_emp_no ) as Super2email,
(select tp.first_name from tb_emp_hrms tp where employee_number = teh.supervisor_emp_no ) as Super2name,
a.process_group,a.prc_grp_disp
from tb_btc_prc_grp_disp a , tb_btc_accesscontrol tba, tb_se_app_mapping tsam ,tb_emp_hrms teh 
where tba.emp_id =tsam.se_id and tsam.approver_id = teh.employee_number 
and a.object_pri_key_1 = tba.object_pri_key_1 
--and tba.system_role ='DVU'  
and  a.process_group ='DVU'
and (a.prc_grp_disp ='WIP' or a.prc_grp_disp = 'REWORK') and a.prc_grp_disp <>'APPROVE'
and a.created_timestamp  < NOW() - INTERVAL '04 days'
group by a.object_pri_key_1,a.created_timestamp,tba.emp_id, tsam.approver_id ,teh.supervisor_emp_no,teh.email_address,a.process_group
,a.prc_grp_disp,Super2name
union 
select distinct(a.object_pri_key_1) as lead_id,a.created_timestamp as created_timestamp ,tba.emp_id as RM, tsam.approver_id as Supervisor1 , teh.supervisor_emp_no as Supervisor2
,teh.email_address as Supervisor_1_email,
(select tp.email_address from tb_emp_hrms tp where employee_number = teh.supervisor_emp_no ) as Super2email,
(select tp.first_name from tb_emp_hrms tp where employee_number = teh.supervisor_emp_no ) as Super2name,
a.process_group,a.prc_grp_disp
from tb_btc_prc_grp_disp a , tb_btc_accesscontrol tba, tb_se_app_mapping tsam ,tb_emp_hrms teh 
where tba.emp_id =tsam.se_id and tsam.approver_id = teh.employee_number 
and a.object_pri_key_1 = tba.object_pri_key_1 
and  a.process_group ='RCU'
and (a.prc_grp_disp ='WIP' or a.prc_grp_disp = 'REWORK') and a.prc_grp_disp <>'APPROVE'
and a.created_timestamp  < NOW() - INTERVAL '04 days'
group by a.object_pri_key_1,a.created_timestamp,tba.emp_id, tsam.approver_id ,teh.supervisor_emp_no,teh.email_address,a.process_group
,a.prc_grp_disp,Super2name
union 
select distinct(a.object_pri_key_1) as lead_id,a.created_timestamp as created_timestamp ,tba.emp_id as RM, tsam.approver_id as Supervisor1 , teh.supervisor_emp_no as Supervisor2
,teh.email_address as Supervisor_1_email,
(select tp.email_address from tb_emp_hrms tp where tp.employee_number = teh.supervisor_emp_no) as Super2email,
(select tp.first_name from tb_emp_hrms tp where employee_number = teh.supervisor_emp_no ) as Super2name,
a.process_group,a.prc_grp_disp
from tb_btc_prc_grp_disp a , tb_btc_accesscontrol tba, tb_se_app_mapping tsam ,tb_emp_hrms teh 
where tba.emp_id =tsam.se_id and tsam.approver_id = teh.employee_number 
and a.object_pri_key_1 = tba.object_pri_key_1 
and  a.process_group ='RU'
and a.prc_grp_disp ='RU_ASSIGN' and a.prc_grp_disp <>'RU_SUBMITTED'
and a.created_timestamp  < NOW() - INTERVAL '04 days'
group by a.object_pri_key_1,a.created_timestamp,tba.emp_id, tsam.approver_id ,teh.supervisor_emp_no,teh.email_address,a.process_group
,a.prc_grp_disp,Super2name;

cur_3 cursor is
select distinct(a.object_pri_key_1) as lead_id,a.created_timestamp ,tba.emp_id as RM, tsam.approver_id as Supervisor1 , teh.supervisor_emp_no as "Supervisor2"
,teh.email_address as Supervisor_1_email,teh1.supervisor_emp_no as Supervisor_3_id,
(select tp.email_address from tb_emp_hrms tp where employee_number = teh.supervisor_emp_no ) as Super2email,
(select tp1.email_address from tb_emp_hrms tp1 where tp1.employee_number = teh1.supervisor_emp_no ) as Supervisor_3_email,
(select tp1.first_name from tb_emp_hrms tp1 where tp1.employee_number = teh1.supervisor_emp_no ) as Supervisor_3_name,
a.process_group,a.prc_grp_disp
from tb_btc_prc_grp_disp a , tb_btc_accesscontrol tba, tb_se_app_mapping tsam ,tb_emp_hrms teh,tb_emp_hrms teh1
where tba.emp_id =tsam.se_id and tsam.approver_id = teh.employee_number and teh1.employee_number = tsam.approver_id 
and a.object_pri_key_1 = tba.object_pri_key_1
and  a.process_group ='RM_SE'
and a.prc_grp_disp ='ASSIGNED' and a.prc_grp_disp <> 'SUBMITTED'
and a.created_timestamp  < NOW() - INTERVAL '06 days'
group by a.object_pri_key_1,a.created_timestamp,tba.emp_id, tsam.approver_id ,teh.supervisor_emp_no,teh.email_address,a.process_group,
a.prc_grp_disp,teh1.supervisor_emp_no,Super2email,Supervisor_3_email,Supervisor_3_name
union
select distinct(a.object_pri_key_1) as lead_id,a.created_timestamp ,tba.emp_id as RM, tsam.approver_id as Supervisor1 , teh.supervisor_emp_no as "Supervisor2"
,teh.email_address as Supervisor_1_email,
teh1.supervisor_emp_no as Supervisor_3_id,
(select tp.email_address from tb_emp_hrms tp where employee_number = teh.supervisor_emp_no ) as Super2email,
(select tp1.email_address from tb_emp_hrms tp1 where tp1.employee_number = teh1.supervisor_emp_no ) as Supervisor_3_email,
(select tp1.first_name from tb_emp_hrms tp1 where tp1.employee_number = teh1.supervisor_emp_no ) as Supervisor_3_name,
a.process_group,a.prc_grp_disp
from tb_btc_prc_grp_disp a , tb_btc_accesscontrol tba, tb_se_app_mapping tsam ,tb_emp_hrms teh,tb_emp_hrms teh1
where tba.emp_id =tsam.se_id and tsam.approver_id = teh.employee_number and teh1.employee_number = tsam.approver_id
and a.object_pri_key_1 = tba.object_pri_key_1
and  a.process_group ='BOM_APPROVER'
and (a.prc_grp_disp ='USERWAIT' or a.prc_grp_disp = 'REWORK') and a.prc_grp_disp <>'APPROVE'
and a.created_timestamp  < NOW() - INTERVAL '06 days'
group by a.object_pri_key_1,a.created_timestamp,tba.emp_id, tsam.approver_id ,teh.supervisor_emp_no,teh.email_address,
a.process_group,a.prc_grp_disp,teh1.supervisor_emp_no,Super2email,Supervisor_3_email,Supervisor_3_name
union
select distinct(a.object_pri_key_1) as lead_id,a.created_timestamp ,tba.emp_id as RM, tsam.approver_id as Supervisor1 , teh.supervisor_emp_no as "Supervisor2"
,teh.email_address as Supervisor_1_email,
teh1.supervisor_emp_no as Supervisor_3_id,
(select tp.email_address from tb_emp_hrms tp where employee_number = teh.supervisor_emp_no ) as Super2email,
(select tp1.email_address from tb_emp_hrms tp1 where tp1.employee_number = teh1.supervisor_emp_no ) as Supervisor_3_email,
(select tp1.first_name from tb_emp_hrms tp1 where tp1.employee_number = teh1.supervisor_emp_no ) as Supervisor_3_name,
a.process_group,a.prc_grp_disp
from tb_btc_prc_grp_disp a , tb_btc_accesscontrol tba, tb_se_app_mapping tsam ,tb_emp_hrms teh,tb_emp_hrms teh1
where tba.emp_id =tsam.se_id and tsam.approver_id = teh.employee_number and teh1.employee_number =tsam.approver_id 
and a.object_pri_key_1 = tba.object_pri_key_1
and  a.process_group ='DVU'
and (a.prc_grp_disp ='WIP' or a.prc_grp_disp = 'REWORK') and a.prc_grp_disp <>'APPROVE'
and a.created_timestamp  < NOW() - INTERVAL '06 days'
group by a.object_pri_key_1,a.created_timestamp,tba.emp_id, tsam.approver_id ,teh.supervisor_emp_no,teh.email_address,
a.process_group,a.prc_grp_disp,teh1.supervisor_emp_no,Super2email,Supervisor_3_email,Supervisor_3_name
union
select distinct(a.object_pri_key_1) as lead_id,a.created_timestamp ,tba.emp_id as RM, tsam.approver_id as Supervisor1 , teh.supervisor_emp_no as "Supervisor2"
,teh.email_address as Supervisor_1_email,
teh1.supervisor_emp_no as Supervisor_3_id,
(select tp.email_address from tb_emp_hrms tp where employee_number = teh.supervisor_emp_no ) as Super2email,
(select tp1.email_address from tb_emp_hrms tp1 where tp1.employee_number = teh1.supervisor_emp_no ) as Supervisor_3_email,
(select tp1.first_name from tb_emp_hrms tp1 where tp1.employee_number = teh1.supervisor_emp_no ) as Supervisor_3_name,
a.process_group,a.prc_grp_disp
from tb_btc_prc_grp_disp a , tb_btc_accesscontrol tba, tb_se_app_mapping tsam ,tb_emp_hrms teh,tb_emp_hrms teh1
where tba.emp_id =tsam.se_id and tsam.approver_id = teh.employee_number and teh1.employee_number = tsam.approver_id 
and a.object_pri_key_1 = tba.object_pri_key_1
and  a.process_group ='RCU'
and (a.prc_grp_disp ='WIP' or a.prc_grp_disp = 'REWORK') and a.prc_grp_disp <>'APPROVE'
and a.created_timestamp  < NOW() - INTERVAL '06 days'
group by a.object_pri_key_1,a.created_timestamp,tba.emp_id, tsam.approver_id ,teh.supervisor_emp_no,teh.email_address,
a.process_group,a.prc_grp_disp,teh1.supervisor_emp_no,Super2email,Supervisor_3_email,Supervisor_3_name
union
select distinct(a.object_pri_key_1) as lead_id,a.created_timestamp ,tba.emp_id as RM, tsam.approver_id as Supervisor1 , teh.supervisor_emp_no as "Supervisor2"
,teh.email_address as Supervisor_1_email,
teh1.supervisor_emp_no as Supervisor_3_id,
(select tp.email_address from tb_emp_hrms tp where employee_number = teh.supervisor_emp_no ) as Super2email,
(select tp1.email_address from tb_emp_hrms tp1 where tp1.employee_number = teh1.supervisor_emp_no ) as Supervisor_3_email,
(select tp1.first_name from tb_emp_hrms tp1 where tp1.employee_number = teh1.supervisor_emp_no ) as Supervisor_3_name,
a.process_group,a.prc_grp_disp
from tb_btc_prc_grp_disp a , tb_btc_accesscontrol tba, tb_se_app_mapping tsam ,tb_emp_hrms teh,tb_emp_hrms teh1
where tba.emp_id =tsam.se_id and tsam.approver_id = teh.employee_number and teh1.employee_number = tsam.approver_id 
and a.object_pri_key_1 = tba.object_pri_key_1
and a.process_group ='RU' and a.prc_grp_disp ='RU_ASSIGN' and a.prc_grp_disp <>'RU_SUBMITTED'
and a.created_timestamp  < NOW() - INTERVAL '06 days'
group by a.object_pri_key_1,a.created_timestamp,tba.emp_id, tsam.approver_id ,teh.supervisor_emp_no,teh.email_address,
a.process_group,a.prc_grp_disp,teh1.supervisor_emp_no,Super2email,Supervisor_3_email,Supervisor_3_name;

begin
	
	v_report_id :='0';
for x in cur_1 loop
		v_report_id:=v_report_id + 1;

	insert into tb_escalation_data_object_final_bkp 
	select v_report_id,x.lead_id,null,null,x.RM,x.Supervisor1,'1',null,x.created_timestamp,null,null,x.supervisor_1_email,null,null,x.Supervisor_1_name,null,null
		where x.process_group is not null and x.prc_grp_disp is not null;
end loop;

--select row_to_json(T) from (select object_pri_key_1,emp_id,supervisor_id,escalation_lvl from tb_escalation_data_object_final_bkp)T
--into v_json;


select max(v_report_id) into xr_report_id from tb_escalation_data_object_final_bkp;

for y in cur_2 loop
	xr_report_id:=xr_report_id + 1;
	insert into tb_escalation_data_object_final_bkp 
	select xr_report_id,y.lead_id,null,null,y.RM,y.Supervisor2,'2',null,y.created_timestamp,null,null,null,y.Super2email,null,null,y.Super2name,null
		where y.process_group is not null and y.prc_grp_disp is not null;
end loop;

--insert into temp_escalation_json_data
--select row_to_json(T) from (select object_pri_key_1,emp_id,supervisor_id,escalation_lvl from tb_escalation_data_object_final_bkp)T;

--update tb_escalation_data_object_final_bkp set request_data = (select details from temp_escalation_json_data);
select max(xr_report_id) into zr_report_id from tb_escalation_data_object_final_bkp;
for z in cur_3 loop
	zr_report_id := zr_report_id + 1;
insert into tb_escalation_data_object_final_bkp 
	select zr_report_id,z.lead_id,null,null,z.RM,z.Supervisor_3_id,'3',null,z.created_timestamp,null,null,null,null,z.Supervisor_3_email,null,null,z.Supervisor_3_name
		where z.process_group is not null and z.prc_grp_disp is not null;
end loop;

insert into tb_escalation_data_object_final
select 
request_id,object_pri_key_1,object_pri_key_2,object_pri_key_3,emp_id,supervisor_id,escalation_lvl,request_data,
case when escalation_lvl = '1' then 
created_timestamp + 1 when escalation_lvl ='2' then created_timestamp + 2 when escalation_lvl ='3' then created_timestamp + 4
end as created_timestamp, 
process_group,prc_grp_disp,supervisor_1_email,supervisor_2_email,supervisor_3_email,supervisor_1_name,supervisor_2_name,supervisor_3_name
from tb_escalation_data_object_final_bkp where created_timestamp::date in (select s::date as date_par
FROM generate_series('2021-01-01', '2022-12-31', '1 day'::interval) s where extract(DOW from s) in (1,2,3));--only weekday created date data--

insert into tb_escalation_data_object_final_temp
select 
request_id,object_pri_key_1,object_pri_key_2,object_pri_key_3,emp_id,supervisor_id,escalation_lvl,request_data,
created_timestamp, 
process_group,prc_grp_disp,supervisor_1_email,supervisor_2_email,supervisor_3_email,supervisor_1_name,supervisor_2_name,supervisor_3_name
from tb_escalation_data_object_final_bkp where created_timestamp::date in (select s::date as date_par
FROM generate_series('2021-01-01', '2022-12-31', '1 day'::interval) s where extract(DOW from s) in (4));

insert into tb_escalation_data_object_final_temp
select 
request_id,object_pri_key_1,object_pri_key_2,object_pri_key_3,emp_id,supervisor_id,escalation_lvl,request_data,
created_timestamp, 
process_group,prc_grp_disp,supervisor_1_email,supervisor_2_email,supervisor_3_email,supervisor_1_name,supervisor_2_name,supervisor_3_name
from tb_escalation_data_object_final_bkp where created_timestamp::date in (select s::date as date_par
FROM generate_series('2021-01-01', '2022-12-31', '1 day'::interval) s where extract(DOW from s) in (5));

insert into tb_escalation_data_object_final_temp
select 
request_id,object_pri_key_1,object_pri_key_2,object_pri_key_3,emp_id,supervisor_id,escalation_lvl,request_data,
created_timestamp, 
process_group,prc_grp_disp,supervisor_1_email,supervisor_2_email,supervisor_3_email,supervisor_1_name,supervisor_2_name,supervisor_3_name
from tb_escalation_data_object_final_bkp where created_timestamp::date in (select s::date as date_par
FROM generate_series('2021-01-01', '2022-12-31', '1 day'::interval) s where extract(DOW from s) in (6)); --only saturday data--

insert into tb_escalation_data_object_final_temp
select 
request_id,object_pri_key_1,object_pri_key_2,object_pri_key_3,emp_id,supervisor_id,escalation_lvl,request_data,
case when escalation_lvl = '1' then 
created_timestamp + 1 when escalation_lvl ='2' then created_timestamp + 2 when escalation_lvl ='3' then created_timestamp + 4 end as created_timestamp, 
process_group,prc_grp_disp,supervisor_1_email,supervisor_2_email,supervisor_3_email,supervisor_1_name,supervisor_2_name,supervisor_3_name
from tb_escalation_data_object_final_bkp where created_timestamp::date in (select s::date as date_par
FROM generate_series('2021-01-01', '2022-12-31', '1 day'::interval) s where extract(DOW from s) in (0));--only sunday data--

insert into tb_escalation_data_object_final
select 
request_id,object_pri_key_1,object_pri_key_2,object_pri_key_3,emp_id,supervisor_id,escalation_lvl,request_data,
case when escalation_lvl = '1' then 
created_timestamp + 3 when escalation_lvl ='2' then created_timestamp + 4 when escalation_lvl ='3' then created_timestamp + 6 end as created_timestamp, 
process_group,prc_grp_disp,supervisor_1_email,supervisor_2_email,supervisor_3_email,supervisor_1_name,supervisor_2_name,supervisor_3_name
from tb_escalation_data_object_final_temp where created_timestamp::date in (select s::date as date_par
FROM generate_series('2021-01-01', '2022-12-31', '1 day'::interval) s where extract(DOW from s) in (4));

insert into tb_escalation_data_object_final
select 
request_id,object_pri_key_1,object_pri_key_2,object_pri_key_3,emp_id,supervisor_id,escalation_lvl,request_data,
case when escalation_lvl = '1' then 
created_timestamp + 3 when escalation_lvl ='2' then created_timestamp + 4 when escalation_lvl ='3' then created_timestamp + 6 end as created_timestamp, 
process_group,prc_grp_disp,supervisor_1_email,supervisor_2_email,supervisor_3_email,supervisor_1_name,supervisor_2_name,supervisor_3_name
from tb_escalation_data_object_final_temp where created_timestamp::date in (select s::date as date_par
FROM generate_series('2021-01-01', '2022-12-31', '1 day'::interval) s where extract(DOW from s) in (5));

insert into tb_escalation_data_object_final
select 
request_id,object_pri_key_1,object_pri_key_2,object_pri_key_3,emp_id,supervisor_id,escalation_lvl,request_data,
case when escalation_lvl = '1' then 
created_timestamp + 1 when escalation_lvl ='2' then created_timestamp + 2 when escalation_lvl ='3' then created_timestamp + 4 end as created_timestamp, 
process_group,prc_grp_disp,supervisor_1_email,supervisor_2_email,supervisor_3_email,supervisor_1_name,supervisor_2_name,supervisor_3_name
from tb_escalation_data_object_final_bkp where created_timestamp::date in (select s::date as date_par
FROM generate_series('2021-01-01', '2022-12-31', '1 day'::interval) s where extract(DOW from s) in (6));

insert into tb_escalation_data_object_final
select 
request_id,object_pri_key_1,object_pri_key_2,object_pri_key_3,emp_id,supervisor_id,escalation_lvl,request_data,
case when escalation_lvl  = '1' then  created_timestamp  + 3
when escalation_lvl  = '2' then  created_timestamp + 4
when escalation_lvl  = '3' then created_timestamp + 6 end ,
process_group,prc_grp_disp,supervisor_1_email,supervisor_2_email,supervisor_3_email,supervisor_1_name,supervisor_2_name,supervisor_3_name
from tb_escalation_data_object_final_temp where created_timestamp::date in (select s::date as date_par
FROM generate_series('2021-01-01', '2022-12-31', '1 day'::interval) s where extract(DOW from s) in (0));
--
--update tb_escalation_data_object_final set created_timestamp = created_timestamp + 1 
--where created_timestamp::date in (select s::date as date_par
--FROM generate_series('2021-01-01', '2022-12-31', '1 day'::interval) s where extract(DOW from s) in (0));
--
--update tb_escalation_data_object_final set created_timestamp = created_timestamp + 2 
--where created_timestamp::date in (select s::date as date_par
--FROM generate_series('2021-01-01', '2022-12-31', '1 day'::interval) s where extract(DOW from s) in (6));
--
--update tb_escalation_data_object_final set created_timestamp = created_timestamp + 3 
--where created_timestamp::date in (select s::date as date_par
--FROM generate_series('2021-01-01', '2022-12-31', '1 day'::interval) s where extract(DOW from s) in (5));

--if not found then 
--	raise notice 'no records inserted';	
--	elsif found then 
--	get diagnostics total_rows := ROW_COUNT;
--	--RAISE NOTICE 'Rows Found : total_rows: %', total_rows;

--added by utkarsh as temporary table inserting multiple entries in final table
--truncate tb_escalation_data_object_final_temp;
--truncate tb_escalation_data_object_final_bkp;

open p_msg for select 'done';
--open p_msg for select P_string as res_msg;
return p_msg;

end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_gen_lov_json(x_org_id character varying, x_app_id character varying, x_lov_property character varying)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
v_object text;
v_count smallint;
cur CURSOR FOR
        SELECT DISTINCT APP_ID as APP_ID ,ORG_ID as ORG_ID, PROPERTY  as PROPERTY
FROM public.TB_LOV_MST
 WHERE ORG_ID = X_ORG_ID
   AND APP_ID = X_APP_ID
   AND PROPERTY LIKE COALESCE(X_LOV_PROPERTY,'%');
BEGIN

/***************LOV Master*******************/

-- select JSON_AGG(JSON_BUILD_OBJECT(
-- 'code', code,
-- 'value', name,
-- 'sequence', sort_sequence
-- ))
--from tb_bank_master

FOR REC IN cur LOOP

  select JSON_AGG(row_to_json((SELECT t FROM (SELECT VALUE_CODE as code, 
                                                     VALUE_DESC as value, 
											      SORT_SEQUENCE as sequence) t))order by SORT_SEQUENCE)
    into v_object
  FROM public.TB_LOV_MST
  WHERE ORG_ID = REC.ORG_ID
    AND APP_ID = REC.APP_ID
    AND PROPERTY = REC.PROPERTY;

  select count(1) into v_count from public.TB_MASTER_DATA_OBJS
   where ORG_ID=X_ORG_ID
     and APP_ID=X_APP_ID
     AND MASTER_TYPE = REC.PROPERTY
     AND GROUP_ID= X_APP_ID
     ;

  if v_count =0 then
   
 
    insert into public.TB_MASTER_DATA_OBJS
    (GROUP_ID,CHANNEL,LOCATION,EMP_ID,MASTER_TYPE,DATA_OBJECT,VERSION,ORG_ID,APP_ID) values
    (X_APP_ID,null,null,null,REC.PROPERTY,v_object,1,X_ORG_ID,X_APP_ID);

  else
    
    update public.TB_MASTER_DATA_OBJS
      set DATA_OBJECT=v_object, VERSION=VERSION+0.1
    where ORG_ID=X_ORG_ID
     and APP_ID=X_APP_ID
     AND MASTER_TYPE = REC.PROPERTY
     AND GROUP_ID= X_APP_ID;
 
  end if;
   
 
 
 END LOOP;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_aadhaar_property()
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
 DECLARE 
 X_RESULT refcursor;
 BEGIN

	OPEN X_RESULT FOR 
		SELECT WADH_VERSION as "WADH_VERSION", 
			   AADHAR_ENVIRONMENT as "AADHAR_ENVIRONMENT", 
			   DEVICE_TYPE as "DEVICE_TYPE", 
			   AADHAR_URL as "AADHAR_URL",
			  STR_VERSION as "STR_VERSION",
			  AADHAAR_VERSION as "AADHAAR_VERSION" ,
			  ftype as "F_TYPE"
      FROM TB_DO_CTRL_AADHAR_PROPERTY;
     
 

RETURN X_RESULT;
    
  
END;$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_adhar_version_report(x_login_id character varying, x_role character varying, x_param character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_role varchar(100);
V_PARAM varchar(100);
begin
 select TFRM.default_system_role_code into V_ROLE from tb_emp_hrms teh , tb_function_roles_mst tfrm 
  where teh."role" =tfrm.role_name 
  and tfrm.default_system_role_code in ('Product Supervisor','BSG')
 and TEH.employee_number =x_login_id;

if V_ROLE in ('Product Supervisor','BSG') then 

--select case when x_param = 'OBJECT' then ''
--          else x_param end into V_PARAM;

select json_agg(row_to_json(t)) into v_data from
 (select "version" as "VERSION",
 approval_number as "APPROVAL_NUMBER",
 approval_status as "APPROVAL_STATUS",
 TO_CHAR(created_on,'DD-MM-YYYY') as "CREATED_ON",
 subject as "SUBJECT",
 verbiage as "VERBIAGE",
 approval_submitter  as "APPROVAL_SUBMITTER",
 approval_checker as "approval_checker",
 active_flag as "ACTIVE_STATUS",
 inactive_date as "inactive_date" 
 from tb_aadhaar_version
  where case when x_param = 'OBJECT'
             then cast(TO_CHAR(created_on,'YYYY-MM-DD')as DATE) < CURRENT_DATE
              when x_param = ''
             then cast(TO_CHAR(created_on,'YYYY-MM-DD')as DATE) <= CURRENT_DATE
             else cast(TO_CHAR(created_on,'YYYY-MM-DD')as DATE) = cast(x_param as DATE)
--             when V_PARAM <>'' 
--             then cast(TO_CHAR(created_on ,'YYYY-MM-DD')as DATE) between cast(x_param as DATE)and CURRENT_DATE
 end)t;	
end if;

if (v_data = '' or v_data is null)
then --v_data := '';
null;
END IF;
 OPEN x_result FOR SELECT 
            v_data  AS    "OBJECT";
              return x_result;     
            
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_audio_lang_url(x_language character varying, x_audio_type character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT refcursor;
v_url varchar(2000);
 begin
 		 
    select url into v_url
      FROM tb_audio_language_master
      where upper(language) = upper(x_language) 
        and upper(audio_type) =upper(x_audio_type);
     
     if v_url is null or v_url ='' then 
      v_url :='NA';
     end if;
     
     OPEN X_RESULT for
        select v_url as url;
       
  RETURN X_RESULT;  
 
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_branch_bo(x_login_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
DECLARE 
X_RESULT refcursor:='cur';
v_string_tab TEXT;
P_STRING_FINAL   TEXT;
BEGIN
SELECT array_to_json(array_agg(row_to_json(t)))  INTO v_string_tab
    FROM (   
    	select branch_cd  as "CODE" ,branch_cd||  '-' ||ldesc as "VALUE"
    	--branch_code_as_per_newgen|| '-' ||branch_name as "VALUE"
		from tb_branch_mst)t;
   P_STRING_FINAL :=  CONCAT ('{  "object_data" : ', v_string_tab, '}');

   OPEN X_RESULT FOR SELECT P_STRING_FINAL as "DATA";
   RETURN X_RESULT;
END; $function$
;

CREATE OR REPLACE FUNCTION public.sp_get_coco_code_bo(x_login_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
DECLARE 
X_RESULT refcursor:='cur';
v_string_tab TEXT;
P_STRING_FINAL   TEXT;
begin
	
  	      SELECT
        REPLACE(CONCAT('{"object": ', ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(T))), '}'),'},[{','},{') into P_STRING_FINAL
--        REPLACE(cast(ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(T)))as varchar),'},[{','},{') into P_STRING_FINAL
      FROM (  select value_desc   as "CODE" , value_code as "VALUE"
		from tb_lov_mst
		where property ='COCO_CODE')t;	
	

--   P_STRING_FINAL :=  CONCAT ('{  "object_data" : ', v_string_tab, '}');

   OPEN X_RESULT FOR SELECT P_STRING_FINAL as "DATA";
   RETURN X_RESULT;
END; $function$
;

CREATE OR REPLACE FUNCTION public.sp_get_consent_details(x_object_pri_key_1 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare 
X_RESULT refcursor:='cur';
v_count int;
v_consent_flag varchar;
begin
	
select count(1) into v_count FROM tb_cop_buss_obj_txn tcbot
 where object_pri_key_1 = x_object_pri_key_1;

if v_count >0 then 

  select object_data::json->'AOF'->'WORK_VARIABLES'->>'CONSENT_FLAG' into v_consent_flag
    FROM tb_cop_buss_obj_txn tcbot
    where object_pri_key_1 = x_object_pri_key_1;

  if v_consent_flag in ('REVIEW','CUST') then 

 open X_RESULT for 

   SELECT  OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' AS "MOBILE_NO",
		OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_EMAIL' AS "EMAIL",
		OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ORG_PAN_NO' AS "PAN",
		case when object_data::json->'AOF'->>'WORKFLOW_JOURNEY'='SP'
		then 'I/We hereby agree to the Terms and Conditions and authorize Kotak Mahindra Bank Ltd to verify my/our entity (including GST if available) and individual KYC details'
		 when object_data::json->'AOF'->>'WORKFLOW_JOURNEY'='IN'
		 then 'I hereby agree to the Terms and Conditions and authorize Kotak Mahindra Bank Ltd to verify my KYC details'
		 end  as "JOURNEY_TYPE",
		'SUCCESS' as "RESPONSE_MESSAGE"
   FROM tb_cop_buss_obj_txn tcbot
   where object_pri_key_1 = x_object_pri_key_1;
  --order by "EMAIL" DESC NULLS last;
 --ORDER BY 1;
return X_RESULT;
  

  elsif v_consent_flag in ('MAND') then
   open X_RESULT for 
	 SELECT 
		cast(json_array_elements(cast(object_data as json)->'AOF'->'INDIVIDUAL_STAKEHOLDERS') as json)->> 'SH_PRI_MOBILE' as "MOBILE_NO",
		cast(json_array_elements(cast(object_data as json)->'AOF'->'INDIVIDUAL_STAKEHOLDERS') as json)->> 'SH_PRI_EMAIL' as "EMAIL",
		cast(json_array_elements(cast(object_data as json)->'AOF'->'INDIVIDUAL_STAKEHOLDERS') as json)->> 'PAN' as "PAN",
--		case when object_data::json->'AOF'->>'WORKFLOW_JOURNEY'='SP'
--		then 'I/We hereby agree to the Terms and Conditions and authorize Kotak Mahindra Bank Ltd to verify my/our entity (including GST if available) and individual KYC details'
--		 when object_data::json->'AOF'->>'WORKFLOW_JOURNEY'='IN'
--		 then 
		 'I hereby agree to the Terms and Conditions and authorize Kotak Mahindra Bank Ltd to verify my KYC details'
--		 end
		 as "JOURNEY_TYPE",
		'SUCCESS' as "RESPONSE_MESSAGE"
		from tb_cop_buss_obj_txn tcbot 
		 where object_pri_key_1 = x_object_pri_key_1
	   order by "EMAIL" DESC NULLS last;
 --ORDER BY 1;
return X_RESULT;

else 
open X_RESULT for
       select 'No Lead ID exist' as "error_message",
        'FAILURE' as "RESPONSE_MESSAGE";

return X_RESULT;

  end if;
else 
open X_RESULT for
       select 'No Lead ID exist' as "error_message",
        'FAILURE' as "RESPONSE_MESSAGE";
return X_RESULT;

end if;
end;


$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_custom_message(x_object_pri_key_1 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
DECLARE   
   p_string     TEXT;
   v_scheme_code TEXT;
   v_lang varchar;
  v_count int;
  	X_result    refcursor ='cur';
BEGIN
select count(*) into v_count from tb_cop_buss_obj_txn tcbot2 
 where object_pri_key_1 = x_object_pri_key_1;

 if v_count>0 is not null then
	
    select object_data::json->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE',
		object_data::json->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'PREFERRED_LANGUAGE'->>'VALUE'
		into v_scheme_code, v_lang
    from tb_cop_buss_obj_txn tcbot 
     WHERE object_pri_key_1 = x_object_pri_key_1;
 
  if v_scheme_code is not null and v_lang is not null then  
 
-- raise notice '1 code%',v_scheme_code;
-- raise notice '2 lang %',v_lang;

 select  ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(T))) INTO p_string from(
  select '01' as "CODE",
   'I confirm that the bank executive has explained to me all the product features and important terms and conditions of the Kotak '
	|| v_scheme_code ||
	' account in my preferred language ' 
	|| v_lang  || '.'||
	' I prefer to open the account with the bank and the details have been understood and agreed by me.' as "VALUE" 
	from tb_cop_buss_obj_txn tcbot 
	 where object_pri_key_1 =x_object_pri_key_1)t;
	elsif (v_scheme_code is null or v_scheme_code = '') then  
	p_string ='{"object": [{"CODE":"00","VALUE": "Please provide valid Scheme code"}]}';
	elsif (v_lang is null or v_lang = '') then
	p_string ='{"object": [{"CODE":"00","VALUE": "Please provide valid Language"}]}';

 end if;
else 
    p_string ='{"object": [{"CODE":"00","VALUE": "Please provide valid Id"}]}';
end if ;
  OPEN X_result FOR 
  SELECT p_string as "DATA";
 --insert into test_as values(p_string);
return X_result;


END ;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_customer_ip(x_object_pri_key1 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
x_result refcursor := 'cur';

v_data text;

v_customer_ip varchar(500);

v_status_update_address varchar(500);

begin
select
	status_update_address
into
	v_status_update_address
from
	tb_consent_data tcd
where
	object_pri_key_1 = x_object_pri_key1;

if v_status_update_address is not null
	then
select
	json_array_elements(cast(v_status_update_address as json)) ->> 'Customer_IP'
into
	v_customer_ip;

if v_customer_ip is null
then
open X_RESULT for
select
	'NO DATA EXISTS' as "OBJECT";
else
	open X_RESULT for
select
	v_customer_ip as "OBJECT";
end if;
else
open X_RESULT for
select
	'NO DATA EXISTS' as "OBJECT";
end if;

return X_RESULT;
end;

$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_date_diff(x_date character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
 DECLARE    
  k_status  varchar(10):='E';
  X_RESULT refcursor :='cur';
BEGIN
	--if  x_date > CURRENT_DATE 
--	if TO_CHAR(CAST((x_date)as DATE), 'YYYY-MM-DD')> CURRENT_DATE
	if cast(TO_CHAR(to_timestamp(x_date, 'YYYY-MM-DD'),'YYYY-MM-DD')as TIMESTAMP) <now()  then  
   k_status :='Y';

open X_RESULT for 
 	select  k_status AS "status";
  
 return X_RESULT;
	ELSE 
k_status :='N';

open X_RESULT for 
	select  k_status AS "status";
return X_RESULT;
	END IF;

--	
exception when others then
open X_RESULT for 
SELECT k_status AS "status";

return X_RESULT;
----  
 
END;$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_dedupe(x_mobile_number character varying, x_constitution_type character varying, x_pan_card character varying, x_object_pri_key_1 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
  x_result REFCURSOR := 'cur';
  V_MOB_COUNT INT := '0';
  v_prog_count INT := '0';
  V_PAN_COUNT INT := '0';
  v_result VARCHAR(1) := 'N';
  v_constitution varchar(20);
  V_DCOUNT INT;
  V_PROGRESS VARCHAR(1) := 'N';
  V_AOF_ID VARCHAR(30);
 V_COUNT INT; 
BEGIN
 IF (x_pan_card != '' OR x_pan_card IS NOT NULL)THEN
      SELECT COUNT(1) INTO V_PAN_COUNT
      FROM PUBLIC.tb_cop_buss_obj_txn tcbot
      WHERE OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ORG_PAN_NO' = x_pan_card
	  AND OBJECT_PRI_KEY_1 != x_object_pri_key_1;
  END IF;
  
  IF (x_mobile_number != '' OR x_mobile_number IS NOT NULL)THEN
      SELECT COUNT(1) INTO V_MOB_COUNT
      FROM PUBLIC.tb_cop_buss_obj_txn tcbot
      WHERE OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' = x_mobile_number
      AND OBJECT_PRI_KEY_1 != x_object_pri_key_1;
	  END IF;


    if V_PAN_COUNT > 0 then 
    
	  select COUNT(*) into V_COUNT
	  --OBJECT_DATA::JSON->'AOF'->>'WORKFLOW_JOURNEY' 
      FROM PUBLIC.tb_cop_buss_obj_txn tcbot
      WHERE OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ORG_PAN_NO' = x_pan_card
	  AND OBJECT_PRI_KEY_1 != x_object_pri_key_1
	 and OBJECT_DATA::JSON->'AOF'->>'WORKFLOW_JOURNEY' = x_constitution_type;
   
--	 raise notice 'VALUE1  %',v_constitution;
   
	   if V_COUNT >0 
	   --v_constitution in (x_constitution_type) 
	   then 
	    
		SELECT COUNT(*) INTO V_DCOUNT from tb_cop_buss_obj_txn tcbot
		 WHERE object_data::JSON->'AOF'->>'WORKFLOW_STATUS' ='ASSIGNED'
		 AND OBJECT_PRI_KEY_1 != x_object_pri_key_1;
        
         IF V_DCOUNT > 0 THEN 
		 
		   SELECT OBJECT_PRI_KEY_1 INTO V_AOF_ID
			  FROM PUBLIC.tb_cop_buss_obj_txn tcbot
			  WHERE OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ORG_PAN_NO' = x_pan_card
			  AND OBJECT_PRI_KEY_1 != x_object_pri_key_1;

            v_result = 'Y';
             V_PROGRESS	= 'Y';
			 
         else
         SELECT OBJECT_PRI_KEY_1 INTO V_AOF_ID
			  FROM PUBLIC.tb_cop_buss_obj_txn tcbot
			  WHERE OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ORG_PAN_NO' = x_pan_card
			  AND OBJECT_PRI_KEY_1 != x_object_pri_key_1;
			 
            v_result = 'Y';
             V_PROGRESS	= 'N';
             
		END IF;
		END IF;

ELSIF V_PAN_COUNT = 0 AND V_MOB_COUNT > 0 then 	
  
      select COUNT(*) into V_COUNT
	  --OBJECT_DATA::JSON->'AOF'->>'WORKFLOW_JOURNEY' 
      FROM PUBLIC.tb_cop_buss_obj_txn tcbot
      WHERE OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ORG_PAN_NO' = x_pan_card
	  AND OBJECT_PRI_KEY_1 != x_object_pri_key_1
	 and OBJECT_DATA::JSON->'AOF'->>'WORKFLOW_JOURNEY' = x_constitution_type;
     
	 
	   if V_COUNT >0 
	   --v_constitution in (x_constitution_type) 
	   then 
	    
		SELECT COUNT(*) INTO V_DCOUNT from tb_cop_buss_obj_txn tcbot
		 WHERE object_data::JSON->'AOF'->>'WORKFLOW_STATUS' ='ASSIGNED'
		 AND OBJECT_PRI_KEY_1 != x_object_pri_key_1;
        
         IF V_DCOUNT > 0 THEN 
		 
		   SELECT OBJECT_PRI_KEY_1 INTO V_AOF_ID
			  FROM PUBLIC.tb_cop_buss_obj_txn tcbot
			  WHERE OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' = x_mobile_number
			  AND OBJECT_PRI_KEY_1 != x_object_pri_key_1;

            v_result = 'Y';
             V_PROGRESS	= 'Y';
			 
         ELSE 
		   SELECT OBJECT_PRI_KEY_1 INTO V_AOF_ID
			  FROM PUBLIC.tb_cop_buss_obj_txn tcbot
			  WHERE OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' = x_mobile_number
			  AND OBJECT_PRI_KEY_1 != x_object_pri_key_1;
         
            v_result = 'Y';
             V_PROGRESS	= 'N';
             
		END IF;
		END IF;

ELSIF V_PAN_COUNT = 0 AND V_MOB_COUNT = 0 then 
	
	v_result = 'N';
    V_PROGRESS	= 'N';
	
  END IF;
	  
      OPEN x_result FOR
      SELECT
        v_result AS "RESULT",
		V_PROGRESS AS "INPROGRESS",
		V_AOF_ID AS "LEAD_ID";
    
  RETURN X_RESULT;

  EXCEPTION WHEN OTHERS THEN

        OPEN X_RESULT FOR SELECT
          '' AS "UNSUCCESSFUL",
          'In-correct data. Some error has Occured' AS "ERROR_REMARKS";

        RETURN X_RESULT;

END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_dedupe_new(x_mobile_number character varying, x_constitution_type character varying, x_pan_card character varying, x_object_pri_key_1 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
  x_result REFCURSOR := 'cur';
  V_MOB_COUNT INT := '0';
  v_prog_count INT := '0';
  V_PAN_COUNT INT := '0';
  v_result VARCHAR(1) := 'N';
  v_constitution varchar(20);
  V_DCOUNT INT;
  V_PROGRESS VARCHAR(1) := 'N';
  V_AOF_ID VARCHAR(40);
 V_first_name VARCHAR(40);
V_employee_number VARCHAR(40);
V_email_address  VARCHAR(100);
 V_COUNT INT; 
 d_count INT;
t_login_id VARCHAR(20);
v_status varchar;
BEGIN
 IF (x_pan_card != '' OR x_pan_card IS NOT NULL) and (x_mobile_number != '' OR x_mobile_number IS NOT NULL) THEN
      SELECT COUNT(1) INTO v_count  
      FROM PUBLIC.tb_cop_buss_obj_txn tcbot
      WHERE OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ORG_PAN_NO' = x_pan_card
	  and OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' = x_mobile_number
	  and OBJECT_DATA::JSON->'AOF'->>'WORKFLOW_JOURNEY' = x_constitution_type
	  AND OBJECT_PRI_KEY_1 != x_object_pri_key_1;
	--  and object_data::JSON->'AOF'->>'WORKFLOW_STATUS' in('ASSIGNED');
  END IF;
  
 if   v_count > 0 then     
--  raise notice '1%','1';
   SELECT COUNT(1) INTO d_count  
      FROM PUBLIC.tb_cop_buss_obj_txn tcbot
      WHERE OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ORG_PAN_NO' = x_pan_card
	  and OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' = x_mobile_number
	  and OBJECT_DATA::JSON->'AOF'->>'WORKFLOW_JOURNEY' = x_constitution_type
	  AND OBJECT_PRI_KEY_1 != x_object_pri_key_1
	  and text_1 in ('ASSIGNED','MOVETOASSISTED','WIP','VKYC_UNABLE','PENDING');
	 --object_data::JSON->'AOF'->>'WORKFLOW_STATUS' in('ASSIGNED');
	   
--	    raise notice '3%',d_count;
select login_id into t_login_id from tb_cop_buss_obj_txn tcbot where object_pri_key_1 != x_object_pri_key_1 and OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ORG_PAN_NO' = x_pan_card and OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' = x_mobile_number and OBJECT_DATA::JSON->'AOF'->>'WORKFLOW_JOURNEY' = x_constitution_type; 
	
  		   if t_login_id is null or t_login_id = '' then 
	 	
	 	SELECT OBJECT_PRI_KEY_1,tcbot.text_1 INTO V_AOF_ID,v_status
			  FROM PUBLIC.tb_cop_buss_obj_txn tcbot 
			  WHERE OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' = x_mobile_number
			   and OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ORG_PAN_NO' = x_pan_card
			  AND OBJECT_PRI_KEY_1 != x_object_pri_key_1;
			 
			 else
  		   SELECT OBJECT_PRI_KEY_1 , 
  		          HRMS.first_name ,
                  HRMS.employee_number,
                  HRMS.email_address,
                  tcbot.text_1 INTO V_AOF_ID, V_first_name, V_employee_number, V_email_address,v_status
			  FROM PUBLIC.tb_cop_buss_obj_txn tcbot
			  join tb_emp_hrms HRMS on HRMS.employee_number = TCBOT.login_id 
			  WHERE OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' = x_mobile_number
			   and OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ORG_PAN_NO' = x_pan_card
			  AND OBJECT_PRI_KEY_1 != x_object_pri_key_1;
			 
			 end if;
--	raise notice '2%',V_AOF_ID;		  
		if 	  d_count > 0 then 
             v_result = 'Y';
             V_PROGRESS	= 'Y';
  
         else
		     v_result = 'Y';
             V_PROGRESS	= 'N';
		END IF;	 
 else 		 
         SELECT OBJECT_PRI_KEY_1,text_1 INTO V_AOF_ID,v_status
			  FROM PUBLIC.tb_cop_buss_obj_txn tcbot
			  WHERE OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' = x_mobile_number
			  and OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ORG_PAN_NO' = x_pan_card
			  and OBJECT_DATA::JSON->'AOF'->>'WORKFLOW_JOURNEY' = x_constitution_type
			  AND OBJECT_PRI_KEY_1 != x_object_pri_key_1;
			 
            v_result = 'N';
             V_PROGRESS	= 'N';
             
 END IF;
	  
      OPEN x_result FOR
      SELECT
        v_result AS "RESULT",
		V_PROGRESS AS "INPROGRESS",
		V_AOF_ID AS "LEAD_ID",
	V_first_name as "RM_FIRST_NAME", V_employee_number as "EMPLOYEE_NUMBER", V_email_address as "EMAIL_ADDRESS",v_status as "FLAG";
    
  RETURN X_RESULT;

  EXCEPTION WHEN OTHERS THEN

        OPEN X_RESULT FOR SELECT
          '' AS "UNSUCCESSFUL",
          'In-correct data. Some error has Occured' AS "ERROR_REMARKS";

        RETURN X_RESULT;

END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_dob_date_diff(x_date character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
 DECLARE    
  k_status  varchar(10);
  X_RESULT refcursor :='cur';
  v_int int:='12';
BEGIN

	  select DATE_PART('year', AGE(NOW(), cast(x_date as date))) into v_int; 
    
	 raise notice '0 :%',x_date;
	
	 raise notice '1 :%',v_int;
	
     if v_int < 17 then 
       k_status = 'N';
     else 
       k_status = 'Y';
     end if;
    
  open X_RESULT for 
 	select  k_status AS "status";
 return X_RESULT;
--	
exception when others then
open X_RESULT for 
SELECT k_status AS "status";

return X_RESULT;
----  
 
END;$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_dvu_report(x_login_id character varying, x_role character varying, x_param character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_role varchar(100);
v_count int;
v_prc_grp VARCHAR(100);
v_prc_grp_disp VARCHAR(100);
V_FROM_DATE VARCHAR(100);
V_TO_DATE VARCHAR(100);
V_CONSTITUTION VARCHAR(100);
V_PRIVY_OPTION VARCHAR(100);
begin
   if x_param = 'OBJECT' then 
     V_FROM_DATE :='';
     V_TO_DATE :='';
     V_CONSTITUTION :='';
     V_PRIVY_OPTION :='';	
   else 
		select json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_FROM_DATE',
		       json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_TO_DATE',
		      case when (select json_array_elements(cast(x_param as json)) ->'CONSTITUTION'->> 'code') is null 
		           then '' 
		           else (select json_array_elements(cast(x_param as json)) ->'CONSTITUTION'->> 'code')
		           end ,
		       case when (select json_array_elements(cast(x_param as json)) ->'PRIVY_OPTION'->> 'value') is null 
		            then ''
		            else (select json_array_elements(cast(x_param as json)) ->'PRIVY_OPTION'->> 'value') END 
		       into V_FROM_DATE , V_TO_DATE , V_CONSTITUTION, V_PRIVY_OPTION;

   end if;
     
if x_role = 'DVU'  and x_login_id is not null then 

with T2 as (select 	object_pri_key_1,
        MAX(RM_REWORK_REVERT_DATE1) "RM_REWORK_REVERT_DATE1",
        MAX(RM_REWORK_REVERT_DATE2) "RM_REWORK_REVERT_DATE2",
        MAX(RM_REWORK_REVERT_DATE3) "RM_REWORK_REVERT_DATE3",
        MAX(RM_REWORK_REMARK1) "RM_REWORK_REMARK1",
        MAX(RM_REWORK_REMARK2) "RM_REWORK_REMARK2",
        MAX(RM_REWORK_REMARK3) "RM_REWORK_REMARK3",
        MAX(DVU_REWORK_USER1) "DVU_REWORK_USER1",
        MAX(DVU_REWORK_USER2) "DVU_REWORK_USER2",
        MAX(DVU_REWORK_USER3) "DVU_REWORK_USER3",
        MAX(DVU_REWORK_DATE1) "DVU_REWORK_DATE1",
        MAX(DVU_REWORK_DATE2) "DVU_REWORK_DATE2",
        MAX(DVU_REWORK_DATE3) "DVU_REWORK_DATE3" , 
        MAX(DVU_REWORK_REMARK1) "DVU_REWORK_REMARK1",
        MAX(DVU_REWORK_REMARK2) "DVU_REWORK_REMARK2",
        MAX(DVU_REWORK_REMARK3) "DVU_REWORK_REMARK3",
        MAX(DVU_REWORK_REASON1) "DVU_REWORK_REASON1",
        MAX(DVU_REWORK_REASON2) "DVU_REWORK_REASON2",
        MAX(DVU_REWORK_REASON3) "DVU_REWORK_REASON3" 
FROM(							
	select object_pri_key_1,rework_iteration, 
	(case when rework_iteration =1 and RN1 = 1 then TO_CHAR(rm_se_date,'YYYY-MM-DD HH24:MI:SS') 
	  else null end) RM_REWORK_REVERT_DATE1,
	(case when rework_iteration =2 and RN1 = 1 then TO_CHAR(rm_se_date,'YYYY-MM-DD HH24:MI:SS') 
	  else null end) RM_REWORK_REVERT_DATE2,
	(case when rework_iteration =3 and RN1 = 1 then TO_CHAR(rm_se_date,'YYYY-MM-DD HH24:MI:SS')
	  else null end) RM_REWORK_REVERT_DATE3,
    (case when rework_iteration =1 and RN1 = 1 then rm_se_remarks 
	  else null end) RM_REWORK_REMARK1,
	(case when rework_iteration =2 and RN1 = 1 then rm_se_remarks 
	  else null end) RM_REWORK_REMARK2,
	(case when rework_iteration =3 and RN1 = 1 then rm_se_remarks
	  else null end) RM_REWORK_REMARK3,	  
    (case when rework_iteration =1 and RN1 = 1 then EMP_ID 
	  else null end) DVU_REWORK_USER1,
	(case when rework_iteration =2 and RN1 = 1 then EMP_ID 
	  else null end) DVU_REWORK_USER2,
	(case when rework_iteration =3 and RN1 = 1 then EMP_ID
	  else null end) DVU_REWORK_USER3,
    (case when rework_iteration =1 and RN1 = 1 then TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') 
	  else null end) DVU_REWORK_DATE1,
	(case when rework_iteration =2 and RN1 = 1 then TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') 
	  else null end) DVU_REWORK_DATE2,
	(case when rework_iteration =3 and RN1 = 1 then TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS')
	  else null end) DVU_REWORK_DATE3,
    (case when rework_iteration =1 and RN1 = 1 then lead_remarks 
	  else null end) DVU_REWORK_REMARK1,
	(case when rework_iteration =2 and RN1 = 1 then lead_remarks 
	  else null end) DVU_REWORK_REMARK2,
	(case when rework_iteration =3 and RN1 = 1 then lead_remarks
	  else null end) DVU_REWORK_REMARK3	,
    (case when rework_iteration =1 and RN1 = 1 then DVU_REWORK_REASON 
	  else null end) DVU_REWORK_REASON1,
	(case when rework_iteration =2 and RN1 = 1 then DVU_REWORK_REASON 
	  else null end) DVU_REWORK_REASON2,
	(case when rework_iteration =3 and RN1 = 1 then DVU_REWORK_REASON
	  else null end) DVU_REWORK_REASON3		  
	FROM(
	select object_pri_key_1, rework_iteration ,
		       rm_se_date,rm_se_remarks,
		       EMP_ID, created_timestamp,
		       lead_remarks,
		       DVU_REWORK_REASON,
		       ROW_NUMBER() OVER( PARTITION BY object_pri_key_1, rework_iteration 
		                         ORDER BY rework_iteration DESC ,TO_CHAR(rm_se_date,'YYYY-MM-DD HH24:MI:SS') DESC) RN1
       FROM(
			select L.object_pri_key_1, L.rework_iteration ,
		       L.rm_se_date,L.rm_se_remarks,
		       L.EMP_ID, L.created_timestamp,
		       lead_remarks,
		       STRING_AGG( L.section_id|| ' - ' || L.status_remarks ,' , ' ) DVU_REWORK_REASON
   		       --L.section_id|| ' - ' || L.status_remarks  DVU_REWORK_REASON,
--		       ROW_NUMBER() OVER( PARTITION BY L.object_pri_key_1, L.rework_iteration 
--		                         ORDER BY L.rework_iteration DESC ,TO_CHAR(L.rm_se_date,'YYYY-MM-DD HH24:MI:SS') DESC) RN1
		  from tb_lead_rework_details L
		 where 1=1--L.object_pri_key_1 = 'SP010422104824620'--disp.object_pri_key_1 
		    and EXISTS  (select --1TEH.employee_number 
		                     from tb_emp_hrms teh , 
		                          tb_function_roles_mst fm , 
		                          tb_section_status tss 
							where teh."role" = fm.role_name 
							  and teh.employee_number = tss."role"
							  and tss.object_pri_key_1 =L.object_pri_key_1 
							  and fm.default_system_role_code ='DVU'
							  and TEH.employee_number = L.emp_id)
		group by L.object_pri_key_1,L.rework_iteration ,
		       L.rm_se_date,L.rm_se_remarks,
		       L.EMP_ID, L.created_timestamp,
		       lead_remarks 
		)T1
	    )TBL
	    )TBL_RM_REWORK_REVERT
      group by object_pri_key_1 ) --- with clause end
select json_agg(row_to_json(t)) into v_data 
from(
   select 
         COP.object_data::JSON->'AOF'->>'LEAD_ID' as "LEAD_ID" ,
         COP.object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID" ,
         COP.lead_journey as "LEAD_ORIGINATION",
         Cop.object_data::JSON->'AOF'->>'PARTNER_CODE' as "PARTNER_CODE",
         TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD HH24:MI:SS') as "LEAD_CREATED_DATE",
         COP.object_data::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "CUSTOMER_NAME" ,
         COP.object_data::JSON->'AOF'->'CA'->>'CRN_AUS' as "CRN_of_Individual_Authorised_Sig",
         'R' as "INDIVIDUAL_AUTHORISED_SIG_IT_TYPE",
         case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN' then 'GENUINE'
              when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP' then 'RELA_CORP'  
              else 'NA' 
          end as "OVERRIDE_TYPE_INDIVIDUAL_AUTHORISED_SIG", 
         coalesce(COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY','NA') as "RELATED_TO_CORP_FOR_AUTHORISED_SIG",      
         coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
         coalesce(COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY','NA') as "Entity_CRN",
         COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' as "ENTITY_IT_TYPE",
         case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN' then 
                'GENUINE'
              when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP' then 
                'RELA_CORP' 
           end as "OVERRIDE_TYPE_ENTITY",          
         coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADD_MHOLDER'->>'VALUE','NA') as "MANDATE_HOLDER",
         coalesce(COP.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE','NA') as "CRN_MANDATE",
         coalesce(COP.object_data::JSON->'AOF'->'WORK_VARIABLES'->'MH'->>'ID_NAME_ADD','NA') as "MANDATE_HOLDER_NAME",
         case when COP.object_data::JSON->'AOF'->>'WORKFLOW' = 'CADIY' 
              then 'NA'
              else 'R' end as "Mandate holder IT type",
--         'R' as "Mandate holder IT type",
         case when COP.object_data::JSON->'AOF'->>'WORKFLOW' = 'CADIY' 
              then 'NA'
              else 'MANDATE' end as "OVERRIDE_TYPE_MANDATE_HOLDER",
--         'MANDATE' as "OVERRIDE_TYPE_MANDATE_HOLDER",         
         coalesce(COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY','NA') as "RELATED_TO_CORP_FOR_MANDATE",
         COP.object_data::JSON->'AOF'->'CA'->'KIT_TYPE'->>'VALUE' as "KIT_TYPE",
         case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN' then 
               'Individual'
              when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP' then 
               'Sole Proprietor' 
         end  as "CONSTITUTION",
         coalesce((object_data::JSON->'AOF'->'BUS_DATA'->'NAT_OF_INDUSTRY'->>'CODE') || ' - '||
         (object_data::JSON->'AOF'->'BUS_DATA'->'NAT_OF_INDUSTRY'->>'VALUE'),'NA') as "INDUSTRY_CODE",
         COP.object_data::JSON->'AOF'->'RISK_PROFILE'->>'VALUE' as "RISK_PROFILE",
         (select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') 
            from tb_btc_prc_grp_disp tbpgd 
           where tbpgd.object_pri_key_1 =COP.object_pri_key_1 
             and process_group ='ACCOUNT'
             and prc_grp_disp ='SUCCESS') as "ACCOUNT_OPENED_DATE", 
         (COP.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'CODE') || ' - '||
         (COP.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE') as "PRODUCT_CODE",
       -----------------------------------------------
         (case when (select TSSH.modified_by 
	                 from  tb_btc_accesscontrol_hist tssh  
			        where TSSH.object_pri_key_1 =COP.object_pri_key_1 
			          and tssh.system_role ='DVU' 
			          and modified_by ='reassign_proc'
			         order by tssh.log_time  LIMIT 1) ='reassign_proc' then 
			      (select CONCAT(TEH.first_name ,' ',TEH.last_name )
			         from  tb_btc_accesscontrol_hist tssh , tb_emp_hrms teh , tb_function_roles_mst tfrm 
			        where TSSH.object_pri_key_1 =cop.object_pri_key_1 
			          and TEH."role" =TFRM.role_name 
		              and tssh.system_role ='DVU' 
		              and TEH.employee_number = TSSH.emp_hierarchy_id 
			          and tssh.modified_by ='reassign_proc'
			          and tssh.log_action  ='UPDATE'
			        order by tssh.log_time  LIMIT 1) 
             else 
			      (select CONCAT(TEH.first_name ,' ',TEH.last_name ) 
			         from tb_btc_accesscontrol tssh , 
			              tb_emp_hrms teh , 
			              tb_function_roles_mst tfrm 
			        where TSSH.object_pri_key_1 =cop.object_pri_key_1
			        and TEH."role" =TFRM.role_name 
			        and TEH.employee_number = TSSH.emp_hierarchy_id 
			        and tssh.system_role ='DVU'  
			        and tssh.emp_hierarchy_id !=''
			       order by tssh.created_timestamp DESC  limit 1)
	     END) as "DVU_FIRST_ASSIGNED_USER_NAME",
	     -----------------------------------------------
         (select TO_CHAR(TSSH.log_time,'YYYY-MM-DD HH24:MI:SS') 
	        from tb_btc_accesscontrol_hist tssh , 
	             tb_btc_prc_grp_disp_hist DIS, 
	             tb_emp_hrms teh , 
	             tb_function_roles_mst tfrm 
	       where DIS.object_pri_key_1 =cop.object_pri_key_1
	         and DIS.object_pri_key_1 =tssh.object_pri_key_1 
	         and TEH."role" =TFRM.role_name 
	         and TEH.employee_number = TSSH.emp_hierarchy_id 
	         and tssh.system_role ='DVU' 
	         and DIS.process_group ='DVU' and prc_grp_disp ='WIP'
	         and TSSH.object_pri_key_1 =DIS.object_pri_key_1 
	         and tssh.emp_hierarchy_id !='' 
	        order by tssh.log_time ASC 
	       limit 1) as "DVU_CURRENT_ASSIGNED_DATE",
---------------------------------------------------------	       
         (select CONCAT(TEH.first_name ,' ',TEH.last_name ) 
	        from tb_btc_accesscontrol tssh , 
	             tb_emp_hrms teh , 
	             tb_function_roles_mst tfrm 
	        where TSSH.object_pri_key_1 =cop.object_pri_key_1
	         and TEH."role" =TFRM.role_name 
	         and TEH.employee_number = TSSH.emp_hierarchy_id 
	         and tssh.system_role ='DVU'  
	         and tssh.emp_hierarchy_id !=''
	       order by tssh.created_timestamp DESC  limit 1) as "DVU_CURRENT_ASSIGNED_USER_NAME",
---------------------------------------------------------	       
	     (case when (select TSSH.modified_by 
	                   from tb_btc_accesscontrol_hist tssh  
	                  where TSSH.object_pri_key_1 =COP.object_pri_key_1 
	                    and tssh.system_role ='DVU' 
	                    and modified_by ='reassign_proc'
	                  order by tssh.log_time  LIMIT 1) ='reassign_proc' then 
	               (select TO_CHAR(TSSH.log_time,'YYYY-MM-DD HH24:MI:SS')
				      from tb_btc_accesscontrol_hist tssh , tb_emp_hrms teh , tb_function_roles_mst tfrm 
				     where TSSH.object_pri_key_1 =cop.object_pri_key_1 
				       and TEH."role" =TFRM.role_name 
			           and tssh.system_role ='DVU' 
			           and TEH.employee_number = TSSH.emp_hierarchy_id 
			           and tssh.modified_by ='reassign_proc'
			           and tssh.log_action  ='UPDATE'
		            order by tssh.log_time  LIMIT 1) 
         else 
			     (select TO_CHAR(TSSH.created_timestamp,'YYYY-MM-DD HH24:MI:SS') 
				    from tb_btc_accesscontrol tssh , 
				         tb_emp_hrms teh , 
				         tb_function_roles_mst tfrm 
			       where TSSH.object_pri_key_1 =cop.object_pri_key_1
			         and TEH."role" =TFRM.role_name 
			         and TEH.employee_number = TSSH.emp_hierarchy_id 
			         and tssh.system_role ='DVU'  
			         and tssh.emp_hierarchy_id !=''
			       order by tssh.created_timestamp DESC  limit 1)
	       END) as "DVU_FIRST_ASSIGNED_DATE",
---------------------------------------------------------	       
           (select TO_CHAR(TSSH.log_time,'YYYY-MM-DD HH24:MI:SS') 
	          from tb_btc_accesscontrol_hist tssh , 
	               tb_btc_prc_grp_disp_hist DIS, 
	               tb_emp_hrms teh , 
	               tb_function_roles_mst tfrm 
	          where DIS.object_pri_key_1 =cop.object_pri_key_1
	            and DIS.object_pri_key_1 =tssh.object_pri_key_1 
	            and TEH."role" =TFRM.role_name 
		        and TEH.employee_number = TSSH.emp_id 
		        and tssh.system_role ='RCU' 
		        and DIS.process_group ='RCU' and prc_grp_disp ='APPROVE'
		        and tssh.EMP_ID !=''
		       order by tssh.log_time DESC limit 1) as "RCU_APPROVAL_DATE",
---------------------------------------------------------		       
           (select tcboth.text_2 
              from tb_cop_buss_obj_txn_hist tcboth , 
                   tb_btc_prc_grp_disp tbpgd2 
             where tbpgd2.object_pri_key_1 =TCBOTH.object_pri_key_1 
               and tcboth.text_1 = 'RCU_REJECT'
               AND tbpgd2.prc_grp_disp  ='REJECT'
               and tbpgd2.process_group ='RCU'
               and tbpgd2.object_pri_key_1=cop.object_pri_key_1
             order by device_modify_timestamp 
              limit 1) as "RCU_REJECT_REASON",
---------------------------------------------------------              
           (select TO_CHAR(tcboth.device_modify_timestamp,'YYYY-MM-DD HH24:MI:SS') 
              from tb_cop_buss_obj_txn_hist tcboth , 
                   tb_btc_prc_grp_disp tbpgd2 
             where tbpgd2.object_pri_key_1 =TCBOTH.object_pri_key_1 
               and tcboth.text_1 = 'RCU_REJECT'
	           AND tbpgd2.prc_grp_disp  ='REJECT'
	           and tbpgd2.process_group ='RCU'
	           and tbpgd2.object_pri_key_1=cop.object_pri_key_1
	         order by device_modify_timestamp
             limit 1) as "RCU_REJECT_DATE",
-----------------------------------------------------------     
            (select process_name 
               from tb_process_group_nomenclature tpgn 
              where tpgn.text_1 = COP.text_1 ) AS"LEAD_STATUS",
---------------------------------------------------------              
		    COP.object_data::JSON->'AOF'->'CA'->'DEBIT_CARD_TYPE'->>'VALUE' as "DEBIT_CARD",
		    COP.object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "LEAD_BRANCH",
--		    'Assisted Journey' as "LEAD_ORIGINATION",
     case when cop.object_data::json->'AOF'->>'WORKFLOW'= 'CA'
          then 'Assisted Journey'
          when cop.object_data::json->'AOF'->>'WORKFLOW'= 'CADIY'
          then 'DIY Journey'
          end as "LEAD_ORIGINATION",
		    coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP1_DOCTYPE'->>'VALUE','NA') as "Entity_doc_1_name",
           (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L1')||
               case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L1' !='' ) then ',' 
                    else  '' end || 
           (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L2')|| 
               case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L2' !='' ) then ',' 
                    else  '' end || 
	       (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L3')||
	           case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L3' !='' ) then ',' 
	                else  '' end || 
		   (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_PINCODE')|| 
		       case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_PINCODE' !='' ) then ',' 
		            else  '' end || 
		   (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_CITY')|| 
		 	   case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_CITY' !='' ) then ',' 
		 	        else  '' end || 
		   (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_STATE')as "ENTITY_DOC1_ADDRESS",
---------------------------------------------------------		   
		   coalesce((COP.object_data::JSON->'AOF'->'BUS_DATA'->>'PAN_GSTIN_REG_ADD_L1') ||' '||
		   coalesce((COP.object_data::JSON->'AOF'->'BUS_DATA'->>'PAN_GSTIN_REG_ADD_L2') ,'') ||' '||
		   coalesce((COP.object_data::JSON->'AOF'->'BUS_DATA'->>'PAN_GSTIN_REG_ADD_L3') ,''),'NA') as "GSTIN_ADDRESS",            
---------------------------------------------------------    
           (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN1')||
                case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN1' !='' ) 
                   then ',' else  '' end || 
           (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN2')|| 
                case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN2' !='' )
                      then ',' else  '' end || 
	       (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN3')||
	            case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN3' !='' )
                      then ',' else  '' end || 
		   (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'PIN')|| 
		        case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'PIN' !='' )
                      then ',' else  '' end || 
		   (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'CITY')|| 
		 		case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'CITY' !='' )
                      then ',' else  '' end || 
		   (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'STATE')as "OCR_ADDRESS",            
---------------------------------------------------------		   
           coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'AADHAAR'->>'ADDRESS','NA') as "AADHAAR_BIOMETRIC_ADDRESS",		  
---------------------------------------------------------           
           (case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN' then 
                   COP.object_data::JSON->'AOF'->'CA'->'CPV1'->>'COMM_ADD'
                when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP' then 
                  (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L1')||
                    case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L1' !='' )
                      then ',' else  '' end || 
                  (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L2')|| 
                    case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L2' !='' )
                      then ',' else  '' end || 
	              (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L3')||
	                case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L3' !='' )
                      then ',' else  '' end || 
		          (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_PINCODE')|| 
		            case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_PINCODE' !='' )
                      then ',' else  '' end || 
		          (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_CITY')|| 
		 		    case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_CITY' !='' )
                      then ',' else  '' end || 
		           (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_STATE')
              else 'NA' END) as "ADDRESS_OF_COMMUNICATION",
---------------------------------------------------------              
           (case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADHAAR_CONSENT'->>'VALUE' is not null 
                    or COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADHAAR_CONSENT'->>'VALUE'!='') then 
                      'V1'
                 else 'NA' END) as "AADHAR_CONSENT_VERSION1",
---------------------------------------------------------
           coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP2_DOCTYPE'->>'VALUE','NA') as "Entity_doc_2_name",
---------------------------------------------------------          
		   (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L1')||
			          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L1' !='' )
			                      then ',' else  '' end || 
		   (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L2')|| 
			                  case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L2' !='' )
			                      then ',' else  '' end || 
			(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L3')||
				              case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L3' !='' )
			                      then ',' else  '' end || 
			(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_PINCODE')|| 
					          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_PINCODE' !='' )
			                      then ',' else  '' end || 
			(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_CITY')|| 
					 		   case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_CITY' !='' )
			                      then ',' else  '' end || 
			(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_STATE')as "ENTITY_DOC2_ADDRESS",
---------------------------------------------------------		 
		    (case when (COP.object_data::JSON->'AOF'->'CA'->>'CUSTOMER_DECLARATION' is not null and 
		               COP.object_data::JSON->'AOF'->'CA'->>'CUSTOMER_DECLARATION' !='')
		         then 'Yes'
		         else 'No' END)  as "CUSTOMER_DECLARATION",
---------------------------------------------------------         
		    (case when (COP.object_data::JSON->'AOF'->'CA'->>'GROUPING_CONSENT' is not null and 
		              COP.object_data::JSON->'AOF'->'CA'->>'GROUPING_CONSENT' !='')
		         then 'Yes'
		         else 'No' END)  as "GROUPING_CONSENT",
---------------------------------------------------------         
            coalesce(COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value','NA') as "CLASSIFICATION_SELECTED_BY_DVU" ,           
---------------------------------------------------------            
        	(CASE when (COP.text_2 is not null OR COP.text_2 !='') then 'No' else 'Yes' END) as "FIRST_PASS",
---------------------------------------------------------        	
   		    (case when (COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' is not null AND 
			            COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' !='') then 
			          COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value'
			      when (COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' is null OR 
			            COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' ='')  THEN
			          COP.object_data::JSON->'AOF'->'CA'->>'PRIVY_PRO_CLASSIFICATION'
			      else 'NA' END) as "FINAL_CLASSIFICATION_IN_BCIF",
---------------------------------------------------------			      
        	COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "Privy_Non_privy",
        	COP.object_data::JSON->'AOF'->>'VKYC_STATUS' as "VKYC_STATUS",
         COP.object_data::JSON->'AOF'->>'VKYC_AGENT_REMARK' as "VKYC_AGENT_REMARK",
         COP.object_data::JSON->'AOF'->>'VKYC_AUDITOR_REMARK' as "VKYC_AUDITOR_REMARK"
---------------------------------------------------------       
from tb_cop_buss_obj_txn cop
 left join T2 on  T2.object_pri_key_1 = cop.object_pri_key_1                             
    where 
     (
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_ASSIGNED' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_APPROVED' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'DVU_APPROVED' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'BOM_APPROVED' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'DVU_ASSIGNED' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'DVU_REWORK' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'DVU_REWORK_APPROVED' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_REWORK' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_REJECT' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'BOM_DVU_REWORK_APPROVED' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_REWORK_APPROVED' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'BOM_REWORK' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'BOM_REWORK_APPROVED' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'ACCOUNT_ACTIVATED'
     )
    and exists (select 1 from tb_btc_prc_grp_disp disp 
                 where  cop.object_pri_key_1 = disp.object_pri_key_1 
	               and (disp.process_group ='DVU'or disp.process_group ='RCU') 
	               and (disp.prc_grp_disp = 'WIP' or disp.prc_grp_disp ='REWORK' or disp.prc_grp_disp ='APPROVE')
               )
    and exists (select 1 from tb_btc_accesscontrol acc 
                 where cop.object_pri_key_1 = acc.object_pri_key_1 
                  and (acc.system_role = 'DVU' or acc.system_role = 'RCU')
				  and acc.emp_hierarchy_id = x_login_id                              
               )           
and case when V_CONSTITUTION = '' then '1' 
      else COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' end = 
       case when V_CONSTITUTION = '' then '1' 
      else V_CONSTITUTION end  
and case when V_PRIVY_OPTION = '' then '1' 
      else upper(COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE') end = 
       case when V_PRIVY_OPTION = '' then '1' 
      else V_PRIVY_OPTION end
 and case when V_FROM_DATE <>'' and V_TO_DATE <>''
          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) between cast(V_FROM_DATE as DATE) and  CAST(V_TO_DATE as DATE)
          when V_FROM_DATE ='' and V_TO_DATE <> ''
          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) < cast(V_TO_DATE as DATE)
          when V_FROM_DATE <>'' and V_TO_DATE = ''
          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) between cast(V_FROM_DATE as DATE)and CURRENT_DATE
          when V_FROM_DATE = '' and V_TO_DATE = ''
          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) <= CURRENT_DATE
     END
          )t;	      
 
--select json_agg(row_to_json(t)) into v_data from
--(select distinct 
--         COP.object_data::JSON->'AOF'->>'LEAD_ID' as "LEAD_ID" ,
--         COP.object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID" ,
--         TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD HH24:MI:SS') as "LEAD_CREATED_DATE",
--         COP.object_data::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "CUSTOMER_NAME" ,
--         COP.object_data::JSON->'AOF'->'CA'->>'CRN_AUS' as "CRN_of_Individual_Authorised_Sig",
--       'R' as "INDIVIDUAL_AUTHORISED_SIG_IT_TYPE",
-- case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--      then 'GENUINE'
--      when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--      then 'RELA_CORP'  else 'NA' end as "OVERRIDE_TYPE_INDIVIDUAL_AUTHORISED_SIG",   
--         coalesce(COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY','NA') as "RELATED_TO_CORP_FOR_AUTHORISED_SIG",      
--         coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--         coalesce(COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY','NA') as "Entity_CRN",
--         'SP' as "ENTITY_IT_TYPE",
-- case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--      then 'GENUINE'
--      when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--      then 'RELA_CORP' end as "OVERRIDE_TYPE_ENTITY",          
--         coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADD_MHOLDER'->>'VALUE','NA') as "MANDATE_HOLDER",
--         coalesce(COP.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE','NA') as "CRN_MANDATE",
--         coalesce(COP.object_data::JSON->'AOF'->'WORK_VARIABLES'->'MH'->>'ID_NAME_ADD','NA') as "MANDATE_HOLDER_NAME",
--         'R' as "Mandate holder IT type",
--         'MANDATE' as "OVERRIDE_TYPE_MANDATE_HOLDER",         
--         coalesce(COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY','NA') as "RELATED_TO_CORP_FOR_MANDATE",
--         COP.object_data::JSON->'AOF'->'CA'->'KIT_TYPE'->>'VALUE' as "KIT_TYPE",
--  case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--       then 'Individual'
--       when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--       then 'Sole Proprietor' end  as "CONSTITUTION",
--        coalesce((object_data::JSON->'AOF'->'BUS_DATA'->'NAT_OF_INDUSTRY'->>'CODE') || ' - '||
--(object_data::JSON->'AOF'->'BUS_DATA'->'NAT_OF_INDUSTRY'->>'VALUE'),'NA') as "INDUSTRY_CODE",
--        COP.object_data::JSON->'AOF'->'RISK_PROFILE'->>'VALUE' as "RISK_PROFILE",
--       (select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_btc_prc_grp_disp tbpgd 
--          where tbpgd.object_pri_key_1 =COP.object_pri_key_1 
--           and process_group ='ACCOUNT'and prc_grp_disp ='SUCCESS') as "ACCOUNT_OPENED_DATE", 
--               (COP.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'CODE') || ' - '|| 
--        (COP.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE') as "PRODUCT_CODE",
----     (select CONCAT(TEH.first_name ,' ',TEH.last_name ) 
----	        from  tb_btc_accesscontrol_hist tssh , 
----	         tb_emp_hrms teh , tb_function_roles_mst tfrm 
----	        where TSSH.object_pri_key_1 =ACC.object_pri_key_1
----	        and TEH."role" =TFRM.role_name 
----	        and TEH.employee_number = TSSH.emp_hierarchy_id 
----	        and tssh.system_role ='DVU'  
----	        and tssh.emp_hierarchy_id !=''
----	        and tssh.modified_by ='reassign_proc'
----	       order by tssh.log_time  limit 1)as "DVU_ASSIGNED_USER_NAME",
--   case when (select TSSH.modified_by 
--	        from  tb_btc_accesscontrol_hist tssh  
--	        where TSSH.object_pri_key_1 =COP.object_pri_key_1 
--	        and tssh.system_role ='DVU' 
--	        and modified_by ='reassign_proc'
--	        order by tssh.log_time  LIMIT 1) ='reassign_proc' 
--     then (select CONCAT(TEH.first_name ,' ',TEH.last_name )
--	       from  tb_btc_accesscontrol_hist tssh , tb_emp_hrms teh , tb_function_roles_mst tfrm 
--	        where TSSH.object_pri_key_1 =ACC.object_pri_key_1 
--	        and TEH."role" =TFRM.role_name 
--            and tssh.system_role ='DVU' 
--            and TEH.employee_number = TSSH.emp_hierarchy_id 
--	        and tssh.modified_by ='reassign_proc'
--	        and tssh.log_action  ='UPDATE'
--	        order by tssh.log_time  LIMIT 1) 
--     else 
--     (select CONCAT(TEH.first_name ,' ',TEH.last_name ) 
--	        from  tb_btc_accesscontrol tssh , 
--	         tb_emp_hrms teh , tb_function_roles_mst tfrm 
--	        where TSSH.object_pri_key_1 =ACC.object_pri_key_1
--	        and TEH."role" =TFRM.role_name 
--	        and TEH.employee_number = TSSH.emp_hierarchy_id 
--	        and tssh.system_role ='DVU'  
--	        and tssh.emp_hierarchy_id !=''
--	       order by tssh.created_timestamp DESC  limit 1)
--	       end as "DVU_FIRST_ASSIGNED_USER_NAME",
--    (select TO_CHAR(TSSH.log_time,'YYYY-MM-DD HH24:MI:SS') 
--	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS, tb_emp_hrms teh , tb_function_roles_mst tfrm 
--	        where  DIS.object_pri_key_1 =ACC.object_pri_key_1
--	        and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
--	        and TEH."role" =TFRM.role_name 
--	        and TEH.employee_number = TSSH.emp_hierarchy_id 
--	        and tssh.system_role ='DVU' 
--	        and DIS.process_group ='DVU' and prc_grp_disp ='WIP'
--	       and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 
--	        and tssh.emp_hierarchy_id !='' 
--	        order by tssh.log_time ASC 
--	       limit 1) as "DVU_CURRENT_ASSIGNED_DATE",
----	       (select CONCAT(TEH.first_name ,' ',TEH.last_name ) 
----	        from  tb_btc_accesscontrol_hist tssh , 
----	        tb_emp_hrms teh , tb_function_roles_mst tfrm 
----	        where TSSH.object_pri_key_1 =ACC.object_pri_key_1 
----	        and TEH."role" =TFRM.role_name 
----	        and TEH.employee_number = TSSH.emp_hierarchy_id 
----	        and tssh.system_role ='DVU' 
----	        and tssh.emp_hierarchy_id !=''
----	       order by tssh.log_time DESC  limit 1)as "DVU_REASSIGNED_USER_NAME" ,
--      (select CONCAT(TEH.first_name ,' ',TEH.last_name ) 
--	        from  tb_btc_accesscontrol tssh , 
--	         tb_emp_hrms teh , tb_function_roles_mst tfrm 
--	        where TSSH.object_pri_key_1 =ACC.object_pri_key_1
--	        and TEH."role" =TFRM.role_name 
--	        and TEH.employee_number = TSSH.emp_hierarchy_id 
--	        and tssh.system_role ='DVU'  
--	        and tssh.emp_hierarchy_id !=''
--	       order by tssh.created_timestamp DESC  limit 1) as "DVU_CURRENT_ASSIGNED_USER_NAME",
--	case when (select TSSH.modified_by 
--	        from  tb_btc_accesscontrol_hist tssh  
--	        where TSSH.object_pri_key_1 =COP.object_pri_key_1 
--	        and tssh.system_role ='DVU' 
--	        and modified_by ='reassign_proc'
--	        order by tssh.log_time  LIMIT 1) ='reassign_proc' 
--     then (select TO_CHAR(TSSH.log_time,'YYYY-MM-DD HH24:MI:SS')
--	       from  tb_btc_accesscontrol_hist tssh , tb_emp_hrms teh , tb_function_roles_mst tfrm 
--	        where TSSH.object_pri_key_1 =ACC.object_pri_key_1 
--	        and TEH."role" =TFRM.role_name 
--            and tssh.system_role ='DVU' 
--            and TEH.employee_number = TSSH.emp_hierarchy_id 
--	        and tssh.modified_by ='reassign_proc'
--	        and tssh.log_action  ='UPDATE'
--	        order by tssh.log_time  LIMIT 1) 
--     else 
--     (select TO_CHAR(TSSH.created_timestamp,'YYYY-MM-DD HH24:MI:SS') 
--	        from  tb_btc_accesscontrol tssh , 
--	         tb_emp_hrms teh , tb_function_roles_mst tfrm 
--	        where TSSH.object_pri_key_1 =ACC.object_pri_key_1
--	        and TEH."role" =TFRM.role_name 
--	        and TEH.employee_number = TSSH.emp_hierarchy_id 
--	        and tssh.system_role ='DVU'  
--	        and tssh.emp_hierarchy_id !=''
--	       order by tssh.created_timestamp DESC  limit 1)
--	       end as "DVU_FIRST_ASSIGNED_DATE",
--    (select TO_CHAR(TSSH.log_time,'YYYY-MM-DD HH24:MI:SS') 
--	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS, tb_emp_hrms teh , tb_function_roles_mst tfrm 
--	        where DIS.object_pri_key_1 =ACC.object_pri_key_1
--	        and DIS.object_pri_key_1 =tssh.object_pri_key_1 
--	        and TEH."role" =TFRM.role_name 
--	        and TEH.employee_number = TSSH.emp_id 
--	        and tssh.system_role ='RCU' 
--	        and DIS.process_group ='RCU' and prc_grp_disp ='APPROVE'
--	        and tssh.EMP_ID !=''
--	       order by tssh.log_time DESC limit 1) as "RCU_APPROVAL_DATE",
--    (select tcboth.text_2 from tb_cop_buss_obj_txn_hist tcboth , tb_btc_prc_grp_disp tbpgd2 
--                                   where tbpgd2.object_pri_key_1 =TCBOTH.object_pri_key_1 
--                                    and tcboth.text_1 = 'RCU_REJECT'
--                                    AND tbpgd2.prc_grp_disp  ='REJECT'
--                                    and tbpgd2.process_group ='RCU'
--                                   and tbpgd2.object_pri_key_1=cop.object_pri_key_1
--                                   order by device_modify_timestamp 
--                                              limit 1) as "RCU_REJECT_REASON",
--    (select TO_CHAR(tcboth.device_modify_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_cop_buss_obj_txn_hist tcboth , tb_btc_prc_grp_disp tbpgd2 
--                                   where tbpgd2.object_pri_key_1 =TCBOTH.object_pri_key_1 
--                                    and tcboth.text_1 = 'RCU_REJECT'
--                                    AND tbpgd2.prc_grp_disp  ='REJECT'
--                                    and tbpgd2.process_group ='RCU'
--                                   and tbpgd2.object_pri_key_1=cop.object_pri_key_1
--                                   order by device_modify_timestamp
--                                              limit 1) as "RCU_REJECT_DATE",
----     COP.text_1 as "LEAD_STATUS",     
--              (select process_name from tb_process_group_nomenclature tpgn 
--          where COP.text_1 = tpgn.text_1 ) AS"LEAD_STATUS",
--     COP.object_data::JSON->'AOF'->'CA'->'DEBIT_CARD_TYPE'->>'VALUE' as "DEBIT_CARD",
--     COP.object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "LEAD_BRANCH",
--     'Assisted Journey' as "LEAD_ORIGINATION",
--  coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP1_DOCTYPE'->>'VALUE','NA') as "Entity_doc_1_name",
--(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L1')||
--          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L1' !='' )
--                      then ',' else  '' end || 
--         (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L2')|| 
--                  case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L2' !='' )
--                      then ',' else  '' end || 
--	     (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L3')||
--	              case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L3' !='' )
--                      then ',' else  '' end || 
--		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_PINCODE')|| 
--		          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_PINCODE' !='' )
--                      then ',' else  '' end || 
--		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_CITY')|| 
--		 		   case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_CITY' !='' )
--                      then ',' else  '' end || 
--		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_STATE')as "ENTITY_DOC1_ADDRESS",
--    coalesce((COP.object_data::JSON->'AOF'->'BUS_DATA'->>'PAN_GSTIN_REG_ADD_L1') ||' '||
--    coalesce((COP.object_data::JSON->'AOF'->'BUS_DATA'->>'PAN_GSTIN_REG_ADD_L2') ,'') ||' '||
--    coalesce((COP.object_data::JSON->'AOF'->'BUS_DATA'->>'PAN_GSTIN_REG_ADD_L3') ,''),'NA') as "GSTIN_ADDRESS",            
--(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN1')||
--          case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN1' !='' )
--                      then ',' else  '' end || 
--         (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN2')|| 
--                  case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN2' !='' )
--                      then ',' else  '' end || 
--	     (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN3')||
--	              case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN3' !='' )
--                      then ',' else  '' end || 
--		 (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'PIN')|| 
--		          case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'PIN' !='' )
--                      then ',' else  '' end || 
--		 (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'CITY')|| 
--		 		   case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'CITY' !='' )
--                      then ',' else  '' end || 
--		 (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'STATE')as "OCR_ADDRESS",            
-- coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'AADHAAR'->>'ADDRESS','NA') as "AADHAAR_BIOMETRIC_ADDRESS",		  
--     case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--      then COP.object_data::JSON->'AOF'->'CA'->'CPV1'->>'COMM_ADD'
--      when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--      then  (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L1')||
--          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L1' !='' )
--                      then ',' else  '' end || 
--         (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L2')|| 
--                  case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L2' !='' )
--                      then ',' else  '' end || 
--	     (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L3')||
--	              case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L3' !='' )
--                      then ',' else  '' end || 
--		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_PINCODE')|| 
--		          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_PINCODE' !='' )
--                      then ',' else  '' end || 
--		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_CITY')|| 
--		 		   case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_CITY' !='' )
--                      then ',' else  '' end || 
--		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_STATE')
--      else 'NA' end as "ADDRESS_OF_COMMUNICATION",
--case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADHAAR_CONSENT'->>'VALUE' is not null or 
--             COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADHAAR_CONSENT'->>'VALUE'!='')
--             then 'V1'
--             else 'NA' end as "AADHAR_CONSENT_VERSION1",
---- 'V1' as "AADHAR_CONSENT_VERSION",
-- coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP2_DOCTYPE'->>'VALUE','NA') as "Entity_doc_2_name",
--(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L1')||
--          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L1' !='' )
--                      then ',' else  '' end || 
--         (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L2')|| 
--                  case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L2' !='' )
--                      then ',' else  '' end || 
--	     (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L3')||
--	              case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L3' !='' )
--                      then ',' else  '' end || 
--		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_PINCODE')|| 
--		          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_PINCODE' !='' )
--                      then ',' else  '' end || 
--		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_CITY')|| 
--		 		   case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_CITY' !='' )
--                      then ',' else  '' end || 
--		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_STATE')as "ENTITY_DOC2_ADDRESS",
--    case when (COP.object_data::JSON->'AOF'->'CA'->>'CUSTOMER_DECLARATION' is not null and 
--               COP.object_data::JSON->'AOF'->'CA'->>'CUSTOMER_DECLARATION' !='')
--         then 'Yes'
--         else 'No' end  as "CUSTOMER_DECLARATION",
--    case when (COP.object_data::JSON->'AOF'->'CA'->>'GROUPING_CONSENT' is not null and 
--              COP.object_data::JSON->'AOF'->'CA'->>'GROUPING_CONSENT' !='')
--         then 'Yes'
--         else 'No' end  as "GROUPING_CONSENT",
-- coalesce(COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value','NA') as "CLASSIFICATION_SELECTED_BY_DVU" ,           
--        CASE when (COP.text_2 is not null OR COP.text_2 !='') then 'No'
--            else 'Yes' end as "FIRST_PASS",
-- case when (COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' is not null AND 
--            COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' !='')
--      then COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value'
--      when (COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' is null OR 
--            COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' ='')
--      then COP.object_data::JSON->'AOF'->'CA'->>'PRIVY_PRO_CLASSIFICATION'
--      else 'NA' END as "FINAL_CLASSIFICATION_IN_BCIF",
--        COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "Privy_Non_privy",
--case when (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))<=3
--     then 
--(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
--(select status_remarks , section_id  from tb_lead_rework_details tlrd 
--where object_pri_key_1 =disp.object_pri_key_1 
-- and rework_iteration ='1' 
--and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1 
--					and fm.default_system_role_code ='DVU'))A)
--    else 
--(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
--(select status_remarks , section_id  from tb_lead_rework_details tlrd 
--where object_pri_key_1 =disp.object_pri_key_1 
-- and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU')) 
--and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1 
--					and fm.default_system_role_code ='DVU'))A) end as  "DVU_REWORK_REASON1",
--case when (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))<=3
--     then 
--(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
--(select status_remarks , section_id  from tb_lead_rework_details tlrd 
--where object_pri_key_1 =disp.object_pri_key_1 
-- and rework_iteration ='2' 
--and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1 
--					and fm.default_system_role_code ='DVU'))A)
--    else 
--(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
--(select status_remarks , section_id  from tb_lead_rework_details tlrd 
--where object_pri_key_1 =disp.object_pri_key_1 
-- and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU')) 
--and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1 
--					and fm.default_system_role_code ='DVU'))A) end as  "DVU_REWORK_REASON2",
--case when (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))<=3
--     then 
--(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
--(select status_remarks , section_id  from tb_lead_rework_details tlrd 
--where object_pri_key_1 =disp.object_pri_key_1 
-- and rework_iteration ='3' 
--and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1 
--					and fm.default_system_role_code ='DVU'))A)
--    else 
--(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
--(select status_remarks , section_id  from tb_lead_rework_details tlrd 
--where object_pri_key_1 =disp.object_pri_key_1 
-- and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU')) 
--and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1 
--					and fm.default_system_role_code ='DVU'))A) end as  "DVU_REWORK_REASON3"	,
--case when (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))<=3
--     then 
--(select lead_remarks from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration ='1'
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1)
--    else 
--    (select lead_remarks from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--   and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU')) 
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) end as "DVU_REWORK_REMARK1",
--case when (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))<=3
--     then 
--(select lead_remarks from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration ='2'
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1)
--    else 
--    (select lead_remarks from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--   and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU')) 
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) end as "DVU_REWORK_REMARK2",
--case when (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))<=3
--     then 
--(select lead_remarks from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration ='3'
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1)
--    else 
--    (select lead_remarks from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--   and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU')) 
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) end as "DVU_REWORK_REMARK3",
--case when (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))<=3
--     then 
--(select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration ='1'
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1)
--    else 
--    (select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--      and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) end as "DVU_REWORK_DATE1",
--case when (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))<=3
--     then 
--(select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration ='2'
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1)
--    else 
--    (select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--      and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) end as "DVU_REWORK_DATE2",					
--case when (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))<=3
--     then 
--(select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration ='3'
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1)
--    else 
--    (select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--      and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) end as "DVU_REWORK_DATE3",
-- case when (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))<=3
--     then 
--(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration ='1'
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) 
--    else 
--(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--       and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) end as "DVU_REWORK_USER1" ,
--case when (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))<=3
--     then 
--(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration ='2'
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) 
--    else 
--(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--       and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) end as "DVU_REWORK_USER2",
--case when (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))<=3
--     then 
--(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration ='3'
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) 
--    else 
--(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--       and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) end as "DVU_REWORK_USER3" ,	  
--case when (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))<=3
--     then 
--(select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration ='1'
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) 
--    else 
--    (select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) end as "RM_REWORK_REMARK1",
--case when (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))<=3
--     then 
--(select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration ='2'
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) 
--    else 
--    (select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) end as "RM_REWORK_REMARK2",
--case when (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))<=3
--     then 
--(select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration ='3'
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) 
--    else 
--    (select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) end as "RM_REWORK_REMARK3",
--case when (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))<=3
--     then 
--(select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration ='1'
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) 
--    else 
--    (select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS')from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) end as "RM_REWORK_REVERT_DATE1",
--case when (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))<=3
--     then 
--(select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration ='2'
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) 
--    else 
--    (select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS')from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) end as "RM_REWORK_REVERT_DATE2",
--case when (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))<=3
--     then 
--(select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration ='3'
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) 
--    else 
--    (select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS')from tb_lead_rework_details tlrd 
--    where object_pri_key_1 =disp.object_pri_key_1
--    and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
--						   where object_pri_key_1 =disp.object_pri_key_1 
--						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--						                     tb_function_roles_mst fm , tb_section_status tss 
--											where teh."role" = fm.role_name 
--											and tss."role" =teh.employee_number 
--											and tss.object_pri_key_1 =disp.object_pri_key_1 
--											and fm.default_system_role_code ='DVU'))
--    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
--                     tb_function_roles_mst fm , tb_section_status tss 
--					where teh."role" = fm.role_name 
--					and tss."role" =teh.employee_number 
--					and tss.object_pri_key_1 =disp.object_pri_key_1
--					and fm.default_system_role_code ='DVU')
--					limit 1) end as "RM_REWORK_REVERT_DATE3",					
--        (select CONCAT(teh2.first_name ,' ', teh2.middle_names ,' ', teh2.last_name ) 
--		    from tb_emp_hrms teh2 , tb_btc_accesscontrol tba2 
--		   where tba2.object_pri_key_1 = COP.object_pri_key_1 
--		    and TEH2.employee_number = TBA2.emp_id 
--		    and TBA2.system_role ='RM')as "LAST_ACTION_RM"        
--from tb_cop_buss_obj_txn cop
-- join tb_btc_prc_grp_disp disp on disp.object_pri_key_1 = cop.object_pri_key_1
--   and disp.process_group in ('DVU','RCU')  and disp.prc_grp_disp in ('WIP','REWORK','APPROVE')
--  join tb_btc_accesscontrol acc on acc.object_pri_key_1 = disp.object_pri_key_1
--   and acc.system_role in ('DVU','RCU') 
--    and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_ASSIGNED','RCU_APPROVED','DVU_APPROVED','BOM_APPROVED','DVU_ASSIGNED','DVU_REWORK','DVU_REWORK_APPROVED','RCU_REWORK','RCU_REJECT','BOM_DVU_REWORK_APPROVED','RCU_REWORK_APPROVED','BOM_REWORK','BOM_REWORK_APPROVED','ACCOUNT_ACTIVATED')
--    and acc.emp_hierarchy_id =x_login_id
--     and case when V_CONSTITUTION = '' 
--          then coalesce(COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY','NA')in ('SP','IN')
--          else  coalesce(COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY','NA')= V_CONSTITUTION END
-- and case when V_PRIVY_OPTION = '' 
--          then UPPER(coalesce(COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE','NA'))in ('SELECT','PRIORITY PRIVY','BRANCH PRIVY','NON PRIVY')
--          else  coalesce(COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE','NA')= V_PRIVY_OPTION END
-- and case when V_FROM_DATE <>'' and V_TO_DATE <>''
--          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) between cast(V_FROM_DATE as DATE) and  CAST(V_TO_DATE as DATE)
--          when V_FROM_DATE ='' and V_TO_DATE <> ''
--          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) < cast(V_TO_DATE as DATE)
--          when V_FROM_DATE <>'' and V_TO_DATE = ''
--          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) between cast(V_FROM_DATE as DATE)and CURRENT_DATE
--          when V_FROM_DATE = '' and V_TO_DATE = ''
--          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) <= CURRENT_DATE
--     END
--          )t;	

--===================================================================================================================================   
   
   elsif x_role ='DVU Supervisor'  and x_login_id is not null then 
    select json_agg(row_to_json(t)) into v_data from
(select distinct 
         COP.object_data::JSON->'AOF'->>'LEAD_ID' as "LEAD_ID" ,
         COP.object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID" ,
         TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD HH24:MI:SS') as "LEAD_CREATED_DATE",
         COP.object_data::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "CUSTOMER_NAME" ,
         COP.object_data::JSON->'AOF'->'CA'->>'CRN_AUS' as "CRN_of_Individual_Authorised_Sig",
       'R' as "INDIVIDUAL_AUTHORISED_SIG_IT_TYPE",
 case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
      then 'GENUINE'
      when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
      then 'RELA_CORP'  else 'NA' end as "OVERRIDE_TYPE_INDIVIDUAL_AUTHORISED_SIG",   
         coalesce(COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY','NA') as "RELATED_TO_CORP_FOR_AUTHORISED_SIG",      
         coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
         coalesce(COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY','NA') as "Entity_CRN",
         COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' as "ENTITY_IT_TYPE",
 case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
      then 'GENUINE'
      when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
      then 'RELA_CORP' end as "OVERRIDE_TYPE_ENTITY",          
         coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADD_MHOLDER'->>'VALUE','NA') as "MANDATE_HOLDER",
         coalesce(COP.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE','NA') as "CRN_MANDATE",
         coalesce(COP.object_data::JSON->'AOF'->'WORK_VARIABLES'->'MH'->>'ID_NAME_ADD','NA') as "MANDATE_HOLDER_NAME",
         case when COP.object_data::JSON->'AOF'->>'WORKFLOW' = 'CADIY' 
              then 'NA'
              else 'R' end as "Mandate holder IT type",
--         'R' as "Mandate holder IT type",
         case when COP.object_data::JSON->'AOF'->>'WORKFLOW' = 'CADIY' 
              then 'NA'
              else 'MANDATE' end as "OVERRIDE_TYPE_MANDATE_HOLDER",
--         'MANDATE' as "OVERRIDE_TYPE_MANDATE_HOLDER",                
         coalesce(COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY','NA') as "RELATED_TO_CORP_FOR_MANDATE",
         COP.object_data::JSON->'AOF'->'CA'->'KIT_TYPE'->>'VALUE' as "KIT_TYPE",
  case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
       then 'Individual'
       when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
       then 'Sole Proprietor' end  as "CONSTITUTION",
        coalesce((object_data::JSON->'AOF'->'BUS_DATA'->'NAT_OF_INDUSTRY'->>'CODE') || ' - '||
(object_data::JSON->'AOF'->'BUS_DATA'->'NAT_OF_INDUSTRY'->>'VALUE'),'NA') as "INDUSTRY_CODE",
        COP.object_data::JSON->'AOF'->'RISK_PROFILE'->>'VALUE' as "RISK_PROFILE",
       (select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_btc_prc_grp_disp tbpgd 
          where tbpgd.object_pri_key_1 =COP.object_pri_key_1 
           and process_group ='ACCOUNT'and prc_grp_disp ='SUCCESS') as "ACCOUNT_OPENED_DATE", 
               (COP.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'CODE') || ' - '|| 
        (COP.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE') as "PRODUCT_CODE",
--     (select CONCAT(TEH.first_name ,' ',TEH.last_name ) 
--	        from  tb_btc_accesscontrol_hist tssh , 
--	         tb_emp_hrms teh , tb_function_roles_mst tfrm 
--	        where TSSH.object_pri_key_1 =ACC.object_pri_key_1
--	        and TEH."role" =TFRM.role_name 
--	        and TEH.employee_number = TSSH.emp_hierarchy_id 
--	        and tssh.system_role ='DVU'  
--	        and tssh.emp_hierarchy_id !=''
--	        and tssh.modified_by ='reassign_proc'
--	       order by tssh.log_time  limit 1)as "DVU_ASSIGNED_USER_NAME",
   case when (select TSSH.modified_by 
	        from  tb_btc_accesscontrol_hist tssh  
	        where TSSH.object_pri_key_1 =COP.object_pri_key_1 
	        and tssh.system_role ='DVU' 
	        and modified_by ='reassign_proc'
	        order by tssh.log_time  LIMIT 1) ='reassign_proc' 
     then (select CONCAT(TEH.first_name ,' ',TEH.last_name )
	       from  tb_btc_accesscontrol_hist tssh , tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where TSSH.object_pri_key_1 =ACC.object_pri_key_1 
	        and TEH."role" =TFRM.role_name 
            and tssh.system_role ='DVU' 
            and TEH.employee_number = TSSH.emp_hierarchy_id 
	        and tssh.modified_by ='reassign_proc'
	        and tssh.log_action  ='UPDATE'
	        order by tssh.log_time  LIMIT 1) 
     else 
     (select CONCAT(TEH.first_name ,' ',TEH.last_name ) 
	        from  tb_btc_accesscontrol tssh , 
	         tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where TSSH.object_pri_key_1 =ACC.object_pri_key_1
	        and TEH."role" =TFRM.role_name 
	        and TEH.employee_number = TSSH.emp_hierarchy_id 
	        and tssh.system_role ='DVU'  
	        and tssh.emp_hierarchy_id !=''
	       order by tssh.created_timestamp DESC  limit 1)
	       end as "DVU_FIRST_ASSIGNED_USER_NAME",
    (select TO_CHAR(TSSH.log_time,'YYYY-MM-DD HH24:MI:SS') 
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS, tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where  DIS.object_pri_key_1 =ACC.object_pri_key_1
	        and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
	        and TEH."role" =TFRM.role_name 
	        and TEH.employee_number = TSSH.emp_hierarchy_id 
	        and tssh.system_role ='DVU' 
	        and DIS.process_group ='DVU' and prc_grp_disp ='WIP'
	       and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 
	        and tssh.emp_hierarchy_id !='' 
	        order by tssh.log_time ASC 
	       limit 1) as "DVU_CURRENT_ASSIGNED_DATE",
--	       (select CONCAT(TEH.first_name ,' ',TEH.last_name ) 
--	        from  tb_btc_accesscontrol_hist tssh , 
--	        tb_emp_hrms teh , tb_function_roles_mst tfrm 
--	        where TSSH.object_pri_key_1 =ACC.object_pri_key_1 
--	        and TEH."role" =TFRM.role_name 
--	        and TEH.employee_number = TSSH.emp_hierarchy_id 
--	        and tssh.system_role ='DVU' 
--	        and tssh.emp_hierarchy_id !=''
--	       order by tssh.log_time DESC  limit 1)as "DVU_REASSIGNED_USER_NAME" ,
      (select CONCAT(TEH.first_name ,' ',TEH.last_name ) 
	        from  tb_btc_accesscontrol tssh , 
	         tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where TSSH.object_pri_key_1 =ACC.object_pri_key_1
	        and TEH."role" =TFRM.role_name 
	        and TEH.employee_number = TSSH.emp_hierarchy_id 
	        and tssh.system_role ='DVU'  
	        and tssh.emp_hierarchy_id !=''
	       order by tssh.created_timestamp DESC  limit 1) as "DVU_CURRENT_ASSIGNED_USER_NAME",
	case when (select TSSH.modified_by 
	        from  tb_btc_accesscontrol_hist tssh  
	        where TSSH.object_pri_key_1 =COP.object_pri_key_1 
	        and tssh.system_role ='DVU' 
	        and modified_by ='reassign_proc'
	        order by tssh.log_time  LIMIT 1) ='reassign_proc' 
     then (select TO_CHAR(TSSH.log_time,'YYYY-MM-DD HH24:MI:SS')
	       from  tb_btc_accesscontrol_hist tssh , tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where TSSH.object_pri_key_1 =ACC.object_pri_key_1 
	        and TEH."role" =TFRM.role_name 
            and tssh.system_role ='DVU' 
            and TEH.employee_number = TSSH.emp_hierarchy_id 
	        and tssh.modified_by ='reassign_proc'
	        and tssh.log_action  ='UPDATE'
	        order by tssh.log_time  LIMIT 1) 
     else 
     (select TO_CHAR(TSSH.created_timestamp,'YYYY-MM-DD HH24:MI:SS') 
	        from  tb_btc_accesscontrol tssh , 
	         tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where TSSH.object_pri_key_1 =ACC.object_pri_key_1
	        and TEH."role" =TFRM.role_name 
	        and TEH.employee_number = TSSH.emp_hierarchy_id 
	        and tssh.system_role ='DVU'  
	        and tssh.emp_hierarchy_id !=''
	       order by tssh.created_timestamp DESC  limit 1)
	       end as "DVU_FIRST_ASSIGNED_DATE",
    (select TO_CHAR(TSSH.log_time,'YYYY-MM-DD HH24:MI:SS') 
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS, tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where DIS.object_pri_key_1 =ACC.object_pri_key_1
	        and DIS.object_pri_key_1 =tssh.object_pri_key_1 
	        and TEH."role" =TFRM.role_name 
	        and TEH.employee_number = TSSH.emp_id 
	        and tssh.system_role ='RCU' 
	        and DIS.process_group ='RCU' and prc_grp_disp ='APPROVE'
	        and tssh.EMP_ID !=''
	       order by tssh.log_time DESC limit 1) as "RCU_APPROVAL_DATE",
    (select tcboth.text_2 from tb_cop_buss_obj_txn_hist tcboth , tb_btc_prc_grp_disp tbpgd2 
                                   where tbpgd2.object_pri_key_1 =TCBOTH.object_pri_key_1 
                                    and tcboth.text_1 = 'RCU_REJECT'
                                    AND tbpgd2.prc_grp_disp  ='REJECT'
                                    and tbpgd2.process_group ='RCU'
                                   and tbpgd2.object_pri_key_1=cop.object_pri_key_1
                                   order by device_modify_timestamp 
                                              limit 1) as "RCU_REJECT_REASON",
    (select TO_CHAR(tcboth.device_modify_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_cop_buss_obj_txn_hist tcboth , tb_btc_prc_grp_disp tbpgd2 
                                   where tbpgd2.object_pri_key_1 =TCBOTH.object_pri_key_1 
                                    and tcboth.text_1 = 'RCU_REJECT'
                                    AND tbpgd2.prc_grp_disp  ='REJECT'
                                    and tbpgd2.process_group ='RCU'
                                   and tbpgd2.object_pri_key_1=cop.object_pri_key_1
                                   order by device_modify_timestamp
                                              limit 1) as "RCU_REJECT_DATE",
--     COP.text_1 as "LEAD_STATUS",     
              (select process_name from tb_process_group_nomenclature tpgn 
          where COP.text_1 = tpgn.text_1 ) AS"LEAD_STATUS",
     COP.object_data::JSON->'AOF'->'CA'->'DEBIT_CARD_TYPE'->>'VALUE' as "DEBIT_CARD",
     COP.object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "LEAD_BRANCH",
     case when cop.object_data::json->'AOF'->>'WORKFLOW'= 'CA'
          then 'Assisted Journey'
          when cop.object_data::json->'AOF'->>'WORKFLOW'= 'CADIY'
          then 'DIY Journey'
          end as "LEAD_ORIGINATION",
--     'Assisted Journey' as "LEAD_ORIGINATION",
  coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP1_DOCTYPE'->>'VALUE','NA') as "Entity_doc_1_name",
(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L1')||
          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L1' !='' )
                      then ',' else  '' end || 
         (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L2')|| 
                  case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L2' !='' )
                      then ',' else  '' end || 
	     (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L3')||
	              case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L3' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_PINCODE')|| 
		          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_PINCODE' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_CITY')|| 
		 		   case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_CITY' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_STATE')as "ENTITY_DOC1_ADDRESS",
    coalesce((COP.object_data::JSON->'AOF'->'BUS_DATA'->>'PAN_GSTIN_REG_ADD_L1') ||' '||
    coalesce((COP.object_data::JSON->'AOF'->'BUS_DATA'->>'PAN_GSTIN_REG_ADD_L2') ,'') ||' '||
    coalesce((COP.object_data::JSON->'AOF'->'BUS_DATA'->>'PAN_GSTIN_REG_ADD_L3') ,''),'NA') as "GSTIN_ADDRESS",            
(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN1')||
          case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN1' !='' )
                      then ',' else  '' end || 
         (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN2')|| 
                  case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN2' !='' )
                      then ',' else  '' end || 
	     (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN3')||
	              case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN3' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'PIN')|| 
		          case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'PIN' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'CITY')|| 
		 		   case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'CITY' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'STATE')as "OCR_ADDRESS",            
 coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'AADHAAR'->>'ADDRESS','NA') as "AADHAAR_BIOMETRIC_ADDRESS",		  
     case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
      then COP.object_data::JSON->'AOF'->'CA'->'CPV1'->>'COMM_ADD'
      when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
      then  (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L1')||
          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L1' !='' )
                      then ',' else  '' end || 
         (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L2')|| 
                  case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L2' !='' )
                      then ',' else  '' end || 
	     (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L3')||
	              case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L3' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_PINCODE')|| 
		          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_PINCODE' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_CITY')|| 
		 		   case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_CITY' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_STATE')
      else 'NA' end as "ADDRESS_OF_COMMUNICATION",
case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADHAAR_CONSENT'->>'VALUE' is not null or 
             COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADHAAR_CONSENT'->>'VALUE'!='')
             then 'V1'
             else 'NA' end as "AADHAR_CONSENT_VERSION1",
-- 'V1' as "AADHAR_CONSENT_VERSION",
 coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP2_DOCTYPE'->>'VALUE','NA') as "Entity_doc_2_name",
(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L1')||
          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L1' !='' )
                      then ',' else  '' end || 
         (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L2')|| 
                  case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L2' !='' )
                      then ',' else  '' end || 
	     (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L3')||
	              case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L3' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_PINCODE')|| 
		          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_PINCODE' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_CITY')|| 
		 		   case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_CITY' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_STATE')as "ENTITY_DOC2_ADDRESS",
    case when (COP.object_data::JSON->'AOF'->'CA'->>'CUSTOMER_DECLARATION' is not null and 
               COP.object_data::JSON->'AOF'->'CA'->>'CUSTOMER_DECLARATION' !='')
         then 'Yes'
         else 'No' end  as "CUSTOMER_DECLARATION",
    case when (COP.object_data::JSON->'AOF'->'CA'->>'GROUPING_CONSENT' is not null and 
              COP.object_data::JSON->'AOF'->'CA'->>'GROUPING_CONSENT' !='')
         then 'Yes'
         else 'No' end  as "GROUPING_CONSENT",
 coalesce(COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value','NA') as "CLASSIFICATION_SELECTED_BY_DVU" ,           
        CASE when (COP.text_2 is not null OR COP.text_2 !='') then 'No'
            else 'Yes' end as "FIRST_PASS",
 case when (COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' is not null AND 
            COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' !='')
      then COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value'
      when (COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' is null OR 
            COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' ='')
      then COP.object_data::JSON->'AOF'->'CA'->>'PRIVY_PRO_CLASSIFICATION'
      else 'NA' END as "FINAL_CLASSIFICATION_IN_BCIF",
        COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "Privy_Non_privy",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
(select status_remarks , section_id  from tb_lead_rework_details tlrd 
where object_pri_key_1 =disp.object_pri_key_1 
 and rework_iteration ='1' 
and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1 
					and fm.default_system_role_code ='DVU'))A)
    else 
(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
(select status_remarks , section_id  from tb_lead_rework_details tlrd 
where object_pri_key_1 =disp.object_pri_key_1 
 and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU')) 
and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1 
					and fm.default_system_role_code ='DVU'))A) end as  "DVU_REWORK_REASON1",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
(select status_remarks , section_id  from tb_lead_rework_details tlrd 
where object_pri_key_1 =disp.object_pri_key_1 
 and rework_iteration ='2' 
and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1 
					and fm.default_system_role_code ='DVU'))A)
    else 
(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
(select status_remarks , section_id  from tb_lead_rework_details tlrd 
where object_pri_key_1 =disp.object_pri_key_1 
 and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU')) 
and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1 
					and fm.default_system_role_code ='DVU'))A) end as  "DVU_REWORK_REASON2",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
(select status_remarks , section_id  from tb_lead_rework_details tlrd 
where object_pri_key_1 =disp.object_pri_key_1 
 and rework_iteration ='3' 
and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1 
					and fm.default_system_role_code ='DVU'))A)
    else 
(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
(select status_remarks , section_id  from tb_lead_rework_details tlrd 
where object_pri_key_1 =disp.object_pri_key_1 
 and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU')) 
and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1 
					and fm.default_system_role_code ='DVU'))A) end as  "DVU_REWORK_REASON3"	,
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select lead_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration ='1'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1)
    else 
    (select lead_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
   and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU')) 
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_REMARK1",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select lead_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration ='2'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1)
    else 
    (select lead_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
   and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU')) 
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_REMARK2",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select lead_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration ='3'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1)
    else 
    (select lead_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
   and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU')) 
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_REMARK3",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration ='1'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1)
    else 
    (select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
      and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_DATE1",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration ='2'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1)
    else 
    (select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
      and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_DATE2",					
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration ='3'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1)
    else 
    (select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
      and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_DATE3",
 case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration ='1'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
       and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_USER1" ,
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration ='2'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
       and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_USER2",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration ='3'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
       and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_USER3" ,	  
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration ='1'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
    (select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "RM_REWORK_REMARK1",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration ='2'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
    (select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "RM_REWORK_REMARK2",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration ='3'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
    (select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "RM_REWORK_REMARK3",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration ='1'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
    (select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS')from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "RM_REWORK_REVERT_DATE1",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration ='2'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
    (select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS')from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "RM_REWORK_REVERT_DATE2",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration ='3'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
    (select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS')from tb_lead_rework_details tlrd 
    where object_pri_key_1 =disp.object_pri_key_1
    and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =disp.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =disp.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =disp.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "RM_REWORK_REVERT_DATE3",					
        (select CONCAT(teh2.first_name ,' ', teh2.middle_names ,' ', teh2.last_name ) 
		    from tb_emp_hrms teh2 , tb_btc_accesscontrol tba2 
		   where tba2.object_pri_key_1 = COP.object_pri_key_1 
		    and TEH2.employee_number = TBA2.emp_id 
		    and TBA2.system_role ='RM')as "LAST_ACTION_RM"        
from tb_cop_buss_obj_txn cop
 join tb_btc_prc_grp_disp disp on disp.object_pri_key_1 = cop.object_pri_key_1
   and disp.process_group in ('DVU','RCU')  and disp.prc_grp_disp in ('WIP','REWORK','APPROVE')
  join tb_btc_accesscontrol acc on acc.object_pri_key_1 = disp.object_pri_key_1
   and acc.system_role in ('DVU','RCU')
and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_ASSIGNED','RCU_APPROVED','DVU_APPROVED','BOM_APPROVED','DVU_ASSIGNED','DVU_REWORK','DVU_REWORK_APPROVED','RCU_REWORK','RCU_REJECT','BOM_DVU_REWORK_APPROVED','RCU_REWORK_APPROVED','BOM_REWORK','BOM_REWORK_APPROVED','ACCOUNT_ACTIVATED')
    and acc.emp_hierarchy_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
    and case when V_CONSTITUTION = '' 
          then coalesce(COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY','NA')in ('SP','IN')
          else  coalesce(COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY','NA')= V_CONSTITUTION END
 and case when V_PRIVY_OPTION = '' 
          then UPPER(coalesce(COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE','NA'))in ('SELECT','PRIORITY PRIVY','BRANCH PRIVY','NON PRIVY')
          else  coalesce(COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE','NA')= V_PRIVY_OPTION END
 and case when V_FROM_DATE <>'' and V_TO_DATE <>''
          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) between cast(V_FROM_DATE as DATE) and  CAST(V_TO_DATE as DATE)
          when V_FROM_DATE ='' and V_TO_DATE <> ''
          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) < cast(V_TO_DATE as DATE)
          when V_FROM_DATE <>'' and V_TO_DATE = ''
          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) between cast(V_FROM_DATE as DATE)and CURRENT_DATE
          when V_FROM_DATE = '' and V_TO_DATE = ''
          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) <= CURRENT_DATE
     END
          )t;	

--===================================================================================================================================  
  elsif x_role ='RCU'  and x_login_id is not null then 
  
  select json_agg(row_to_json(t)) into v_data from(
    select distinct COP.object_data::JSON->'AOF'->>'LEAD_ID' as "LEAD_ID" ,
       COP.object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID" ,
       cop.lead_journey as "LEAD_ORIGINATION",
       Cop.object_data::JSON->'AOF'->>'PARTNER_CODE' as "PARTNER_CODE",
       COP.object_data::JSON->'AOF'->'CA'->>'CRN_AUS' as "INDIVIDUAL_CRN_AUTHORIZED_SIG" ,
       COP.object_data::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "CUSTOMER_NAME" ,
    coalesce (COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY','NA') as "Entity_CRN",
   case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
         then 'NA'
         when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
         then COP.object_data::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1' 
         end  as "COMPANY_NAME",              
    coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADD_MHOLDER'->>'VALUE','NA') as "MANDATE_HOLDER",
       COP.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE' as "CRN_MANDATE",
    coalesce (COP.object_data::JSON->'AOF'->'WORK_VARIABLES'->'MH'->>'ID_NAME_ADD','NA') as "MANDATE_HOLDER_NAME",
    coalesce(COP.object_data::JSON->'AOF'->'COCO_CODE'->>'VALUE','NA') as "CORP_CODE",
       COP.object_data::JSON->'AOF'->'CA'->>'ACCOUNT_NO' as "ACCOUNT_NUMBER",
    case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
         then 'Individual'
         when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
         then 'Sole Proprietor'
         end  as "CONSTITUTION",
    coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'KYC_DOCUMENT_TYPE'->>'VALUE','NA') as "ADDRESS_PROOF",
    case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'IS_ID_PROOF'->>'VALUE' is not null OR
	              COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'IS_ID_PROOF'->>'VALUE'!='')
	     then  COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'IS_ID_PROOF'->>'VALUE'
	     else coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'KYC_DOCUMENT_TYPE'->>'VALUE','NA')
	        end as "IDENTITY_TYPE",
--       COP.object_data::JSON->'AOF'->'CA'->'CPV1'->'IP_TYPE'->>'VALUE' as "FUNDING_MODE",
'Cheque'as "FUNDING_MODE",
       COP.object_data::JSON->'AOF'->'CA'->>'CHQ_AMOUNT' as "IP_AMOUNT",
                      (COP.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'CODE') || ' - '|| 
        (COP.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE') as "PRODUCT_CODE",
       COP.object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE' as "BRANCH_CODE",
       COP.object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "BRANCH_NAME",
       COP.object_data::JSON->'AOF'->>'LG_CODE' as "LG_CODE",       
       COP.object_data::JSON->'AOF'->>'LC_CODE' as "LC_CODE",       
    (select TEH2.first_name || ' '|| TEH2.last_name from tb_btc_accesscontrol tba , tb_emp_hrms teh2 
        where TBA.object_pri_key_1 =ACC.object_pri_key_1 
        and    teh2.employee_number = TBA.emp_id 
        and TBA.system_role ='RM') as "RM_NAME",         
        COP.object_data::JSON->'AOF'->>'RM_CODE' as "RM_CODE",        
       TO_CHAR(cop.device_create_timestamp,'YYYY-MM-DD HH24:MI:SS') as "LEAD_CREATED_DATE",        
       TO_CHAR(COP.device_modify_timestamp ,'YYYY-MM-DD HH24:MI:SS') as "LEAD_MODIFIED_DATE",
    (select TO_CHAR(TSSH.log_time,'YYYY-MM-DD HH24:MI:SS') 
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS, tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where  DIS.object_pri_key_1 =ACC.object_pri_key_1
	        and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
	        and TEH."role" =TFRM.role_name 
	        and TEH.employee_number = TSSH.emp_id 
	        and tssh.system_role ='RCU' 
	        and DIS.process_group ='RCU' and prc_grp_disp ='WIP'
	       and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 
	        and tssh.emp_id !='' 
	        order by tssh.log_time ASC 
	       limit 1) as "RCU_ASSIGNED_DATE",       
   coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'NAT_OF_BUSSINESS'->>'VALUE','NA') as "NATURE_OF_BUSINESS",
       case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
         then 'NA'
         when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
         then COP.object_data::JSON->'AOF'->'BUS_DATA'->>'EP1_DOCNUM' 
         end  as "COMPANY_REG_NUMBER",  
        coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'BUS_DOI_1','NA') as "COMPANY_DATE_OF_INCORPORATION" , 	       
	 (select TO_CHAR(TSSH.log_time,'YYYY-MM-DD HH24:MI:SS') 
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS, tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where  DIS.object_pri_key_1 =ACC.object_pri_key_1
	        and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
	        and TEH."role" =TFRM.role_name 
	        and TEH.employee_number = TSSH.emp_id 
	        and tssh.system_role ='RCU' 
	        and DIS.process_group ='RCU' and prc_grp_disp in ('APPROVE','REJECT')
	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 
	        and tssh.emp_id !='' 
	        order by tssh.log_time ASC 
	       limit 1) as "RCU_REVIEWED_DATE",
     (select TEH.first_name || ' '|| TEH.last_name 
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS, tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where  DIS.object_pri_key_1 =ACC.object_pri_key_1
	        and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
	        and TEH."role" =TFRM.role_name 
	        and TEH.employee_number = TSSH.emp_id 
	        and tssh.system_role ='RCU' 
	        and DIS.process_group ='RCU' and prc_grp_disp in ('APPROVE','REJECT')
	       and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 
	        and tssh.emp_id !='' 
	        order by tssh.log_time ASC 
	       limit 1) as "RCU_REVIEWED_BY",	        
        COP.object_data::JSON->'AOF'->'CA'->'DEBIT_CARD_TYPE'->>'VALUE' as "DEBIT_CARD",
--        COP.text_1 as "LEAD_STATUS",
              (select process_name from tb_process_group_nomenclature tpgn 
          where COP.text_1 = tpgn.text_1 ) AS"LEAD_STATUS",
     case when cop.object_data::json->'AOF'->>'WORKFLOW'= 'CA'
          then 'Assisted Journey'
          when cop.object_data::json->'AOF'->>'WORKFLOW'= 'CADIY'
          then 'DIY Journey'
          end as "LEAD_ORIGINATION",
          --        'Assisted Journey' as "LEAD_ORIGINATION",
        COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY_NON_PRIVY",
          CASE when (COP.text_2 is not null OR COP.text_2 !='') then 'No'
            else 'Yes' end as "FIRST_PASS",
   coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP1_DOCTYPE'->>'VALUE','NA') as "Entity_doc_1_name",
(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L1')||
          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L1' !='' )
                      then ',' else  '' end || 
         (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L2')|| 
                  case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L2' !='' )
                      then ',' else  '' end || 
	     (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L3')||
	              case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L3' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_PINCODE')|| 
		          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_PINCODE' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_CITY')|| 
		 		   case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_CITY' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_STATE')as "ENTITY_DOC1_ADDRESS",
   coalesce((COP.object_data::JSON->'AOF'->'BUS_DATA'->>'PAN_GSTIN_REG_ADD_L1') ||' '||
   coalesce((COP.object_data::JSON->'AOF'->'BUS_DATA'->>'PAN_GSTIN_REG_ADD_L2') ,'') ||' '||
   coalesce((COP.object_data::JSON->'AOF'->'BUS_DATA'->>'PAN_GSTIN_REG_ADD_L3') ,''),'NA') as "GSTIN_ADDRESS",            
(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN1')||
          case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN1' !='' )
                      then ',' else  '' end || 
         (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN2')|| 
                  case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN2' !='' )
                      then ',' else  '' end || 
	     (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN3')||
	              case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN3' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'PIN')|| 
		          case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'PIN' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'CITY')|| 
		 		   case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'CITY' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'STATE')as "OCR_ADDRESS", 
   coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'AADHAAR'->>'ADDRESS','NA') as "AADHAAR_BIOMETRIC_ADDRESS",
case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADHAAR_CONSENT'->>'VALUE' is not null or 
             COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADHAAR_CONSENT'->>'VALUE'!='')
             then 'V1'
             else 'NA' end as "AADHAR_CONSENT_VERSION1",   
--         'V1' as "AADHAR_CONSENT_VERSION",
   coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP2_DOCTYPE'->>'VALUE','NA') as "ENTITY_DOC_2",
(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L1')||
          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L1' !='' )
                      then ',' else  '' end || 
         (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L2')|| 
                  case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L2' !='' )
                      then ',' else  '' end || 
	     (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L3')||
	              case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L3' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_PINCODE')|| 
		          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_PINCODE' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_CITY')|| 
		 		   case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_CITY' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_STATE')as "ENTITY_DOC2_ADDRESS",       
		  COP.object_data::JSON->'AOF'->>'VKYC_STATUS' as "VKYC_STATUS",
         COP.object_data::JSON->'AOF'->>'VKYC_AGENT_REMARK' as "VKYC_AGENT_REMARK",
         COP.object_data::JSON->'AOF'->>'VKYC_AUDITOR_REMARK' as "VKYC_AUDITOR_REMARK",
   case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
             then coalesce(object_data::JSON->'AOF'->'CA'->'CPV1'->>'COMM_ADD','NA') 
             when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
             then coalesce((COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L1')|| ' , '|| 
		   (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L2')|| ' , '|| 
		   (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L3')|| ' , '|| 
		   (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_PINCODE')|| ' , '|| 
		   (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_CITY')|| ' , '|| 
		   (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_STATE')	,'NA') 
             end  as "COMMUNICATION_ADDRESS"
 from tb_cop_buss_obj_txn cop
 join tb_btc_prc_grp_disp disp on disp.object_pri_key_1 = cop.object_pri_key_1
    and disp.process_group in ('RCU')  and disp.prc_grp_disp in ('WIP','REWORK','APPROVE','USERWAIT','REJECT')
 join tb_btc_accesscontrol acc on acc.object_pri_key_1 = disp.object_pri_key_1
    and acc.system_role in ('RCU')
    and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_APPROVED','RCU_APPROVED','RCU_ASSIGNED','RCU_REJECT','RCU_REWORK','RCU_REWORK_APPROVED','ACCOUNT_ACTIVATED')
    and acc.emp_id=X_LOGIN_ID
   and case when V_CONSTITUTION = '' 
          then coalesce(COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY','NA')in ('SP','IN')
          else  coalesce(COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY','NA')= V_CONSTITUTION END
 and case when V_PRIVY_OPTION = '' 
          then UPPER(coalesce(COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE','NA'))in ('SELECT','PRIORITY PRIVY','BRANCH PRIVY','NON PRIVY')
          else  coalesce(COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE','NA')= V_PRIVY_OPTION END
 and case when V_FROM_DATE <>'' and V_TO_DATE <>''
          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) between cast(V_FROM_DATE as DATE) and  CAST(V_TO_DATE as DATE)
          when V_FROM_DATE ='' and V_TO_DATE <> ''
          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) < cast(V_TO_DATE as DATE)
          when V_FROM_DATE <>'' and V_TO_DATE = ''
          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) between cast(V_FROM_DATE as DATE)and CURRENT_DATE
          when V_FROM_DATE = '' and V_TO_DATE = ''
          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) <= CURRENT_DATE
     END
          )t;	

 
--===================================================================================================================================
   elsif x_role ='RCU Supervisor'  and x_login_id is not null then 
  
  select json_agg(row_to_json(t)) into v_data from(
  select distinct COP.object_data::JSON->'AOF'->>'LEAD_ID' as "LEAD_ID" ,
       COP.object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID" ,
       COP.object_data::JSON->'AOF'->'CA'->>'CRN_AUS' as "INDIVIDUAL_CRN_AUTHORIZED_SIG" ,
       COP.object_data::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "CUSTOMER_NAME" ,
    coalesce (COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY','NA') as "Entity_CRN",
   case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
         then 'NA'
         when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
         then COP.object_data::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1' 
         end  as "COMPANY_NAME",              
    coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADD_MHOLDER'->>'VALUE','NA') as "MANDATE_HOLDER",
       COP.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE' as "CRN_MANDATE",
    coalesce (COP.object_data::JSON->'AOF'->'WORK_VARIABLES'->'MH'->>'ID_NAME_ADD','NA') as "MANDATE_HOLDER_NAME",
    coalesce(COP.object_data::JSON->'AOF'->'COCO_CODE'->>'VALUE','NA') as "CORP_CODE",
       COP.object_data::JSON->'AOF'->'CA'->>'ACCOUNT_NO' as "ACCOUNT_NUMBER",
    case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
         then 'Individual'
         when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
         then 'Sole Proprietor'
         end  as "CONSTITUTION",
    coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'KYC_DOCUMENT_TYPE'->>'VALUE','NA') as "ADDRESS_PROOF",
    case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'IS_ID_PROOF'->>'VALUE' is not null OR
	              COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'IS_ID_PROOF'->>'VALUE'!='')
	        then  COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'IS_ID_PROOF'->>'VALUE'
	        else coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'KYC_DOCUMENT_TYPE'->>'VALUE','NA')
	        end as "IDENTITY_TYPE",
--       COP.object_data::JSON->'AOF'->'CA'->'CPV1'->'IP_TYPE'->>'VALUE' as "FUNDING_MODE",
'Cheque'as "FUNDING_MODE",
       COP.object_data::JSON->'AOF'->'CA'->>'CHQ_AMOUNT' as "IP_AMOUNT",
       (COP.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'CODE') || ' - '|| 
       (COP.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE') as "PRODUCT_CODE",
       COP.object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE' as "BRANCH_CODE",
       COP.object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "BRANCH_NAME",
       COP.object_data::JSON->'AOF'->>'LG_CODE' as "LG_CODE",       
       COP.object_data::JSON->'AOF'->>'LC_CODE' as "LC_CODE",       
    (select TEH2.first_name || ' '|| TEH2.last_name from tb_btc_accesscontrol tba , tb_emp_hrms teh2 
        where TBA.object_pri_key_1 =ACC.object_pri_key_1 
        and    teh2.employee_number = TBA.emp_id 
        and TBA.system_role ='RM') as "RM_NAME",         
        COP.object_data::JSON->'AOF'->>'RM_CODE' as "RM_CODE",        
       TO_CHAR(cop.device_create_timestamp,'YYYY-MM-DD HH24:MI:SS') as "LEAD_CREATED_DATE",        
       TO_CHAR(COP.device_modify_timestamp ,'YYYY-MM-DD HH24:MI:SS') as "LEAD_MODIFIED_DATE",
    (select TO_CHAR(TSSH.log_time,'YYYY-MM-DD HH24:MI:SS') 
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS, tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where  DIS.object_pri_key_1 =ACC.object_pri_key_1
	        and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
	        and TEH."role" =TFRM.role_name 
	        and TEH.employee_number = TSSH.emp_id 
	        and tssh.system_role ='RCU' 
	        and DIS.process_group ='RCU' and prc_grp_disp ='WIP'
	       and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 
	        and tssh.emp_id !='' 
	        order by tssh.log_time ASC 
	       limit 1) as "RCU_ASSIGNED_DATE",       
   coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'NAT_OF_BUSSINESS'->>'VALUE','NA') as "NATURE_OF_BUSINESS",
       case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
         then 'NA'
         when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
         then COP.object_data::JSON->'AOF'->'BUS_DATA'->>'EP1_DOCNUM' 
         end  as "COMPANY_REG_NUMBER",  
        coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'BUS_DOI_1','NA') as "COMPANY_DATE_OF_INCORPORATION" , 	       
	 (select TO_CHAR(TSSH.log_time,'YYYY-MM-DD HH24:MI:SS') 
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS, tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where  DIS.object_pri_key_1 =ACC.object_pri_key_1
	        and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
	        and TEH."role" =TFRM.role_name 
	        and TEH.employee_number = TSSH.emp_id 
	        and tssh.system_role ='RCU' 
	        and DIS.process_group ='RCU' and prc_grp_disp in ('APPROVE','REJECT')
	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 
	        and tssh.emp_id !='' 
	        order by tssh.log_time ASC 
	       limit 1) as "RCU_REVIEWED_DATE",
     (select TEH.first_name || ' '|| TEH.last_name 
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS, tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where  DIS.object_pri_key_1 =ACC.object_pri_key_1
	        and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
	        and TEH."role" =TFRM.role_name 
	        and TEH.employee_number = TSSH.emp_id 
	        and tssh.system_role ='RCU' 
	        and DIS.process_group ='RCU' and prc_grp_disp in ('APPROVE','REJECT')
	       and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 
	        and tssh.emp_id !='' 
	        order by tssh.log_time ASC 
	       limit 1) as "RCU_REVIEWED_BY",	        
        COP.object_data::JSON->'AOF'->'CA'->'DEBIT_CARD_TYPE'->>'VALUE' as "DEBIT_CARD",
--        COP.text_1 as "LEAD_STATUS",
              (select process_name from tb_process_group_nomenclature tpgn 
          where COP.text_1 = tpgn.text_1 ) AS"LEAD_STATUS",
--        'Assisted Journey' as "LEAD_ORIGINATION",
  case when cop.object_data::json->'AOF'->>'WORKFLOW'= 'CA'
          then 'Assisted Journey'
          when cop.object_data::json->'AOF'->>'WORKFLOW'= 'CADIY'
          then 'DIY Journey'
          end as "LEAD_ORIGINATION",
        COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY_NON_PRIVY",
          CASE when (COP.text_2 is not null OR COP.text_2 !='') then 'No'
            else 'Yes' end as "FIRST_PASS",
   coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP1_DOCTYPE'->>'VALUE','NA') as "Entity_doc_1_name",
(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L1')||
          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L1' !='' )
                      then ',' else  '' end || 
         (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L2')|| 
                  case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L2' !='' )
                      then ',' else  '' end || 
	     (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L3')||
	              case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L3' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_PINCODE')|| 
		          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_PINCODE' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_CITY')|| 
		 		   case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_CITY' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_STATE')as "ENTITY_DOC1_ADDRESS",
   coalesce((COP.object_data::JSON->'AOF'->'BUS_DATA'->>'PAN_GSTIN_REG_ADD_L1') ||' '||
   coalesce((COP.object_data::JSON->'AOF'->'BUS_DATA'->>'PAN_GSTIN_REG_ADD_L2') ,'') ||' '||
   coalesce((COP.object_data::JSON->'AOF'->'BUS_DATA'->>'PAN_GSTIN_REG_ADD_L3') ,''),'NA') as "GSTIN_ADDRESS",            
(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN1')||
          case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN1' !='' )
                      then ',' else  '' end || 
         (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN2')|| 
                  case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN2' !='' )
                      then ',' else  '' end || 
	     (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN3')||
	              case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN3' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'PIN')|| 
		          case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'PIN' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'CITY')|| 
		 		   case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'CITY' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'STATE')as "OCR_ADDRESS", 
   coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'AADHAAR'->>'ADDRESS','NA') as "AADHAAR_BIOMETRIC_ADDRESS",
   case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADHAAR_CONSENT'->>'VALUE' is not null or 
             COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADHAAR_CONSENT'->>'VALUE'!='')
             then 'V1'
             else 'NA' end as "AADHAR_CONSENT_VERSION1",
--         'V1' as "AADHAR_CONSENT_VERSION",
   coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP2_DOCTYPE'->>'VALUE','NA') as "ENTITY_DOC_2",
(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L1')||
          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L1' !='' )
                      then ',' else  '' end || 
         (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L2')|| 
                  case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L2' !='' )
                      then ',' else  '' end || 
	     (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L3')||
	              case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L3' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_PINCODE')|| 
		          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_PINCODE' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_CITY')|| 
		 		   case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_CITY' !='' )
                      then ',' else  '' end || 
		 (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_STATE')as "ENTITY_DOC2_ADDRESS",          
   case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
             then coalesce(object_data::JSON->'AOF'->'CA'->'CPV1'->>'COMM_ADD','NA') 
             when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
             then coalesce((COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L1')|| ' , '|| 
		   (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L2')|| ' , '|| 
		   (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L3')|| ' , '|| 
		   (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_PINCODE')|| ' , '|| 
		   (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_CITY')|| ' , '|| 
		   (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_STATE')	,'NA') 
             end  as "COMMUNICATION_ADDRESS"
 from tb_cop_buss_obj_txn cop
 join tb_btc_prc_grp_disp disp on disp.object_pri_key_1 = cop.object_pri_key_1
    and disp.process_group in ('RCU')  and disp.prc_grp_disp in ('WIP','REWORK','APPROVE','USERWAIT','REJECT')
 join tb_btc_accesscontrol acc on acc.object_pri_key_1 = disp.object_pri_key_1
    and acc.system_role in ('RCU')
        and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_APPROVED','RCU_APPROVED','RCU_ASSIGNED','RCU_REJECT','RCU_REWORK','RCU_REWORK_APPROVED','ACCOUNT_ACTIVATED')
   and ACC.emp_id in  (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
   and case when V_CONSTITUTION = '' 
          then coalesce(COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY','NA')in ('SP','IN')
          else  coalesce(COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY','NA')= V_CONSTITUTION END
 and case when V_PRIVY_OPTION = '' 
          then UPPER(coalesce(COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE','NA'))in ('SELECT','PRIORITY PRIVY','BRANCH PRIVY','NON PRIVY')
          else  coalesce(COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE','NA')= V_PRIVY_OPTION END
 and case when V_FROM_DATE <>'' and V_TO_DATE <>''
          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) between cast(V_FROM_DATE as DATE) and  CAST(V_TO_DATE as DATE)
          when V_FROM_DATE ='' and V_TO_DATE <> ''
          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) < cast(V_TO_DATE as DATE)
          when V_FROM_DATE <>'' and V_TO_DATE = ''
          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) between cast(V_FROM_DATE as DATE)and CURRENT_DATE
          when V_FROM_DATE = '' and V_TO_DATE = ''
          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) <= CURRENT_DATE
     END
          )t;	

 
   
else 
v_data = '[{"code":"","value":"No ID exist"}]';
END IF;
if (v_data = '' or v_data is null)
then --v_data := '';
null;
END IF;
 OPEN x_result FOR SELECT 
            v_data  AS    "OBJECT";
              return x_result;     
            
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_dvu_report_nreq(x_login_id character varying, x_role character varying, x_param character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_role varchar(100);
v_count int;
v_prc_grp VARCHAR(100);
v_prc_grp_disp VARCHAR(100);
V_FROM_DATE VARCHAR(100);
V_TO_DATE VARCHAR(100);
V_CONSTITUTION VARCHAR(100);
V_PRIVY_OPTION VARCHAR(100);
begin
   if x_param = 'OBJECT' then 
     V_FROM_DATE :='';
     V_TO_DATE :='';
     V_CONSTITUTION :='';
     V_PRIVY_OPTION :='';	
   else 
		select json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_FROM_DATE',
		       json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_TO_DATE',
		      case when (select json_array_elements(cast(x_param as json)) ->'CONSTITUTION'->> 'code') is null 
		           then '' 
		           else (select json_array_elements(cast(x_param as json)) ->'CONSTITUTION'->> 'code')
		           end ,
		       case when (select json_array_elements(cast(x_param as json)) ->'PRIVY_OPTION'->> 'value') is null 
		            then ''
		            else (select json_array_elements(cast(x_param as json)) ->'PRIVY_OPTION'->> 'value') END 
		       into V_FROM_DATE , V_TO_DATE , V_CONSTITUTION, V_PRIVY_OPTION;

   end if;
   
  --sp_get_dvu_report
--if x_role = 'DVU'  and x_login_id is not null then
with T2 as (select 	object_pri_key_1,
        MAX(RM_REWORK_REVERT_DATE1) "RM_REWORK_REVERT_DATE1",
        MAX(RM_REWORK_REVERT_DATE2) "RM_REWORK_REVERT_DATE2",
        MAX(RM_REWORK_REVERT_DATE3) "RM_REWORK_REVERT_DATE3",
        MAX(RM_REWORK_REMARK1) "RM_REWORK_REMARK1",
        MAX(RM_REWORK_REMARK2) "RM_REWORK_REMARK2",
        MAX(RM_REWORK_REMARK3) "RM_REWORK_REMARK3",
        MAX(DVU_REWORK_USER1) "DVU_REWORK_USER1",
        MAX(DVU_REWORK_USER2) "DVU_REWORK_USER2",
        MAX(DVU_REWORK_USER3) "DVU_REWORK_USER3",
        MAX(DVU_REWORK_DATE1) "DVU_REWORK_DATE1",
        MAX(DVU_REWORK_DATE2) "DVU_REWORK_DATE2",
        MAX(DVU_REWORK_DATE3) "DVU_REWORK_DATE3" , 
        MAX(DVU_REWORK_REMARK1) "DVU_REWORK_REMARK1",
        MAX(DVU_REWORK_REMARK2) "DVU_REWORK_REMARK2",
        MAX(DVU_REWORK_REMARK3) "DVU_REWORK_REMARK3",
        MAX(DVU_REWORK_REASON1) "DVU_REWORK_REASON1",
        MAX(DVU_REWORK_REASON2) "DVU_REWORK_REASON2",
        MAX(DVU_REWORK_REASON3) "DVU_REWORK_REASON3" 
FROM(							
	select object_pri_key_1,rework_iteration, 
	(case when rework_iteration =1 and RN1 = 1 then TO_CHAR(rm_se_date,'YYYY-MM-DD HH24:MI:SS') 
	  else null end) RM_REWORK_REVERT_DATE1,
	(case when rework_iteration =2 and RN1 = 1 then TO_CHAR(rm_se_date,'YYYY-MM-DD HH24:MI:SS') 
	  else null end) RM_REWORK_REVERT_DATE2,
	(case when rework_iteration =3 and RN1 = 1 then TO_CHAR(rm_se_date,'YYYY-MM-DD HH24:MI:SS')
	  else null end) RM_REWORK_REVERT_DATE3,
    (case when rework_iteration =1 and RN1 = 1 then rm_se_remarks 
	  else null end) RM_REWORK_REMARK1,
	(case when rework_iteration =2 and RN1 = 1 then rm_se_remarks 
	  else null end) RM_REWORK_REMARK2,
	(case when rework_iteration =3 and RN1 = 1 then rm_se_remarks
	  else null end) RM_REWORK_REMARK3,	  
    (case when rework_iteration =1 and RN1 = 1 then EMP_ID 
	  else null end) DVU_REWORK_USER1,
	(case when rework_iteration =2 and RN1 = 1 then EMP_ID 
	  else null end) DVU_REWORK_USER2,
	(case when rework_iteration =3 and RN1 = 1 then EMP_ID
	  else null end) DVU_REWORK_USER3,
    (case when rework_iteration =1 and RN1 = 1 then TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') 
	  else null end) DVU_REWORK_DATE1,
	(case when rework_iteration =2 and RN1 = 1 then TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') 
	  else null end) DVU_REWORK_DATE2,
	(case when rework_iteration =3 and RN1 = 1 then TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS')
	  else null end) DVU_REWORK_DATE3,
    (case when rework_iteration =1 and RN1 = 1 then lead_remarks 
	  else null end) DVU_REWORK_REMARK1,
	(case when rework_iteration =2 and RN1 = 1 then lead_remarks 
	  else null end) DVU_REWORK_REMARK2,
	(case when rework_iteration =3 and RN1 = 1 then lead_remarks
	  else null end) DVU_REWORK_REMARK3	,
    (case when rework_iteration =1 and RN1 = 1 then DVU_REWORK_REASON 
	  else null end) DVU_REWORK_REASON1,
	(case when rework_iteration =2 and RN1 = 1 then DVU_REWORK_REASON 
	  else null end) DVU_REWORK_REASON2,
	(case when rework_iteration =3 and RN1 = 1 then DVU_REWORK_REASON
	  else null end) DVU_REWORK_REASON3		  
	FROM(
	select object_pri_key_1, rework_iteration ,
		       rm_se_date,rm_se_remarks,
		       EMP_ID, created_timestamp,
		       lead_remarks,
		       DVU_REWORK_REASON,
		       ROW_NUMBER() OVER( PARTITION BY object_pri_key_1, rework_iteration 
		                         ORDER BY rework_iteration DESC ,TO_CHAR(rm_se_date,'YYYY-MM-DD HH24:MI:SS') DESC) RN1
       FROM(
			select L.object_pri_key_1, L.rework_iteration ,
		       L.rm_se_date,L.rm_se_remarks,
		       L.EMP_ID, L.created_timestamp,
		       lead_remarks,
		       STRING_AGG( L.section_id|| ' - ' || L.status_remarks ,' , ' ) DVU_REWORK_REASON
   		       --L.section_id|| ' - ' || L.status_remarks  DVU_REWORK_REASON,
--		       ROW_NUMBER() OVER( PARTITION BY L.object_pri_key_1, L.rework_iteration 
--		                         ORDER BY L.rework_iteration DESC ,TO_CHAR(L.rm_se_date,'YYYY-MM-DD HH24:MI:SS') DESC) RN1
		  from tb_lead_rework_details L
		 where 1=1--L.object_pri_key_1 = 'SP010422104824620'--disp.object_pri_key_1 
		    and EXISTS  (select --1TEH.employee_number 
		                     from tb_emp_hrms teh , 
		                          tb_function_roles_mst fm , 
		                          tb_section_status tss 
							where teh."role" = fm.role_name 
							  and teh.employee_number = tss."role"
							  and tss.object_pri_key_1 =L.object_pri_key_1 
							  and fm.default_system_role_code ='DVU'
							  and TEH.employee_number = L.emp_id)
		group by L.object_pri_key_1,L.rework_iteration ,
		       L.rm_se_date,L.rm_se_remarks,
		       L.EMP_ID, L.created_timestamp,
		       lead_remarks 
		)T1
	    )TBL
	    )TBL_RM_REWORK_REVERT
      group by object_pri_key_1 )
select json_agg(row_to_json(t)) --into v_data 
from(
   select 
         COP.object_data::JSON->'AOF'->>'LEAD_ID' as "LEAD_ID" ,
         COP.object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID" ,
         TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD HH24:MI:SS') as "LEAD_CREATED_DATE",
         COP.object_data::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "CUSTOMER_NAME" ,
         COP.object_data::JSON->'AOF'->'CA'->>'CRN_AUS' as "CRN_of_Individual_Authorised_Sig",
         'R' as "INDIVIDUAL_AUTHORISED_SIG_IT_TYPE",
         case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN' then 'GENUINE'
              when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP' then 'RELA_CORP'  
              else 'NA' 
          end as "OVERRIDE_TYPE_INDIVIDUAL_AUTHORISED_SIG", 
         coalesce(COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY','NA') as "RELATED_TO_CORP_FOR_AUTHORISED_SIG",      
         coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
         coalesce(COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY','NA') as "Entity_CRN",
         'SP' as "ENTITY_IT_TYPE",
         case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN' then 
                'GENUINE'
              when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP' then 
                'RELA_CORP' 
           end as "OVERRIDE_TYPE_ENTITY",          
         coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADD_MHOLDER'->>'VALUE','NA') as "MANDATE_HOLDER",
         coalesce(COP.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE','NA') as "CRN_MANDATE",
         coalesce(COP.object_data::JSON->'AOF'->'WORK_VARIABLES'->'MH'->>'ID_NAME_ADD','NA') as "MANDATE_HOLDER_NAME",
         'R' as "Mandate holder IT type",
         'MANDATE' as "OVERRIDE_TYPE_MANDATE_HOLDER",         
         coalesce(COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY','NA') as "RELATED_TO_CORP_FOR_MANDATE",
         COP.object_data::JSON->'AOF'->'CA'->'KIT_TYPE'->>'VALUE' as "KIT_TYPE",
         case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN' then 
               'Individual'
              when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP' then 
               'Sole Proprietor' 
         end  as "CONSTITUTION",
         coalesce((object_data::JSON->'AOF'->'BUS_DATA'->'NAT_OF_INDUSTRY'->>'CODE') || ' - '||
         (object_data::JSON->'AOF'->'BUS_DATA'->'NAT_OF_INDUSTRY'->>'VALUE'),'NA') as "INDUSTRY_CODE",
         COP.object_data::JSON->'AOF'->'RISK_PROFILE'->>'VALUE' as "RISK_PROFILE",
         (select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') 
            from tb_btc_prc_grp_disp tbpgd 
           where tbpgd.object_pri_key_1 =COP.object_pri_key_1 
             and process_group ='ACCOUNT'
             and prc_grp_disp ='SUCCESS') as "ACCOUNT_OPENED_DATE", 
         (COP.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'CODE') || ' - '||
         (COP.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE') as "PRODUCT_CODE",
       -----------------------------------------------
         (case when (select TSSH.modified_by 
	                 from  tb_btc_accesscontrol_hist tssh  
			        where TSSH.object_pri_key_1 =COP.object_pri_key_1 
			          and tssh.system_role ='DVU' 
			          and modified_by ='reassign_proc'
			         order by tssh.log_time  LIMIT 1) ='reassign_proc' then 
			      (select CONCAT(TEH.first_name ,' ',TEH.last_name )
			         from  tb_btc_accesscontrol_hist tssh , tb_emp_hrms teh , tb_function_roles_mst tfrm 
			        where TSSH.object_pri_key_1 =cop.object_pri_key_1 
			          and TEH."role" =TFRM.role_name 
		              and tssh.system_role ='DVU' 
		              and TEH.employee_number = TSSH.emp_hierarchy_id 
			          and tssh.modified_by ='reassign_proc'
			          and tssh.log_action  ='UPDATE'
			        order by tssh.log_time  LIMIT 1) 
             else 
			      (select CONCAT(TEH.first_name ,' ',TEH.last_name ) 
			         from tb_btc_accesscontrol tssh , 
			              tb_emp_hrms teh , 
			              tb_function_roles_mst tfrm 
			        where TSSH.object_pri_key_1 =cop.object_pri_key_1
			        and TEH."role" =TFRM.role_name 
			        and TEH.employee_number = TSSH.emp_hierarchy_id 
			        and tssh.system_role ='DVU'  
			        and tssh.emp_hierarchy_id !=''
			       order by tssh.created_timestamp DESC  limit 1)
	     END) as "DVU_FIRST_ASSIGNED_USER_NAME",
	     -----------------------------------------------
         (select TO_CHAR(TSSH.log_time,'YYYY-MM-DD HH24:MI:SS') 
	        from tb_btc_accesscontrol_hist tssh , 
	             tb_btc_prc_grp_disp_hist DIS, 
	             tb_emp_hrms teh , 
	             tb_function_roles_mst tfrm 
	       where DIS.object_pri_key_1 =cop.object_pri_key_1
	         and DIS.object_pri_key_1 =tssh.object_pri_key_1 
	         and TEH."role" =TFRM.role_name 
	         and TEH.employee_number = TSSH.emp_hierarchy_id 
	         and tssh.system_role ='DVU' 
	         and DIS.process_group ='DVU' and prc_grp_disp ='WIP'
	         and TSSH.object_pri_key_1 =DIS.object_pri_key_1 
	         and tssh.emp_hierarchy_id !='' 
	        order by tssh.log_time ASC 
	       limit 1) as "DVU_CURRENT_ASSIGNED_DATE",
---------------------------------------------------------	       
         (select CONCAT(TEH.first_name ,' ',TEH.last_name ) 
	        from tb_btc_accesscontrol tssh , 
	             tb_emp_hrms teh , 
	             tb_function_roles_mst tfrm 
	        where TSSH.object_pri_key_1 =cop.object_pri_key_1
	         and TEH."role" =TFRM.role_name 
	         and TEH.employee_number = TSSH.emp_hierarchy_id 
	         and tssh.system_role ='DVU'  
	         and tssh.emp_hierarchy_id !=''
	       order by tssh.created_timestamp DESC  limit 1) as "DVU_CURRENT_ASSIGNED_USER_NAME",
---------------------------------------------------------	       
	     (case when (select TSSH.modified_by 
	                   from tb_btc_accesscontrol_hist tssh  
	                  where TSSH.object_pri_key_1 =COP.object_pri_key_1 
	                    and tssh.system_role ='DVU' 
	                    and modified_by ='reassign_proc'
	                  order by tssh.log_time  LIMIT 1) ='reassign_proc' then 
	               (select TO_CHAR(TSSH.log_time,'YYYY-MM-DD HH24:MI:SS')
				      from tb_btc_accesscontrol_hist tssh , tb_emp_hrms teh , tb_function_roles_mst tfrm 
				     where TSSH.object_pri_key_1 =cop.object_pri_key_1 
				       and TEH."role" =TFRM.role_name 
			           and tssh.system_role ='DVU' 
			           and TEH.employee_number = TSSH.emp_hierarchy_id 
			           and tssh.modified_by ='reassign_proc'
			           and tssh.log_action  ='UPDATE'
		            order by tssh.log_time  LIMIT 1) 
         else 
			     (select TO_CHAR(TSSH.created_timestamp,'YYYY-MM-DD HH24:MI:SS') 
				    from tb_btc_accesscontrol tssh , 
				         tb_emp_hrms teh , 
				         tb_function_roles_mst tfrm 
			       where TSSH.object_pri_key_1 =cop.object_pri_key_1
			         and TEH."role" =TFRM.role_name 
			         and TEH.employee_number = TSSH.emp_hierarchy_id 
			         and tssh.system_role ='DVU'  
			         and tssh.emp_hierarchy_id !=''
			       order by tssh.created_timestamp DESC  limit 1)
	       END) as "DVU_FIRST_ASSIGNED_DATE",
---------------------------------------------------------	       
           (select TO_CHAR(TSSH.log_time,'YYYY-MM-DD HH24:MI:SS') 
	          from tb_btc_accesscontrol_hist tssh , 
	               tb_btc_prc_grp_disp_hist DIS, 
	               tb_emp_hrms teh , 
	               tb_function_roles_mst tfrm 
	          where DIS.object_pri_key_1 =cop.object_pri_key_1
	            and DIS.object_pri_key_1 =tssh.object_pri_key_1 
	            and TEH."role" =TFRM.role_name 
		        and TEH.employee_number = TSSH.emp_id 
		        and tssh.system_role ='RCU' 
		        and DIS.process_group ='RCU' and prc_grp_disp ='APPROVE'
		        and tssh.EMP_ID !=''
		       order by tssh.log_time DESC limit 1) as "RCU_APPROVAL_DATE",
---------------------------------------------------------		       
           (select tcboth.text_2 
              from tb_cop_buss_obj_txn_hist tcboth , 
                   tb_btc_prc_grp_disp tbpgd2 
             where tbpgd2.object_pri_key_1 =TCBOTH.object_pri_key_1 
               and tcboth.text_1 = 'RCU_REJECT'
               AND tbpgd2.prc_grp_disp  ='REJECT'
               and tbpgd2.process_group ='RCU'
               and tbpgd2.object_pri_key_1=cop.object_pri_key_1
             order by device_modify_timestamp 
              limit 1) as "RCU_REJECT_REASON",
---------------------------------------------------------              
           (select TO_CHAR(tcboth.device_modify_timestamp,'YYYY-MM-DD HH24:MI:SS') 
              from tb_cop_buss_obj_txn_hist tcboth , 
                   tb_btc_prc_grp_disp tbpgd2 
             where tbpgd2.object_pri_key_1 =TCBOTH.object_pri_key_1 
               and tcboth.text_1 = 'RCU_REJECT'
	           AND tbpgd2.prc_grp_disp  ='REJECT'
	           and tbpgd2.process_group ='RCU'
	           and tbpgd2.object_pri_key_1=cop.object_pri_key_1
	         order by device_modify_timestamp
             limit 1) as "RCU_REJECT_DATE",
-----------------------------------------------------------     
            (select process_name 
               from tb_process_group_nomenclature tpgn 
              where tpgn.text_1 = COP.text_1 ) AS"LEAD_STATUS",
---------------------------------------------------------              
		    COP.object_data::JSON->'AOF'->'CA'->'DEBIT_CARD_TYPE'->>'VALUE' as "DEBIT_CARD",
		    COP.object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "LEAD_BRANCH",
		    'Assisted Journey' as "LEAD_ORIGINATION",
		    coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP1_DOCTYPE'->>'VALUE','NA') as "Entity_doc_1_name",
           (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L1')||
               case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L1' !='' ) then ',' 
                    else  '' end || 
           (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L2')|| 
               case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L2' !='' ) then ',' 
                    else  '' end || 
	       (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L3')||
	           case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L3' !='' ) then ',' 
	                else  '' end || 
		   (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_PINCODE')|| 
		       case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_PINCODE' !='' ) then ',' 
		            else  '' end || 
		   (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_CITY')|| 
		 	   case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_CITY' !='' ) then ',' 
		 	        else  '' end || 
		   (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_STATE')as "ENTITY_DOC1_ADDRESS",
---------------------------------------------------------		   
		   coalesce((COP.object_data::JSON->'AOF'->'BUS_DATA'->>'PAN_GSTIN_REG_ADD_L1') ||' '||
		   coalesce((COP.object_data::JSON->'AOF'->'BUS_DATA'->>'PAN_GSTIN_REG_ADD_L2') ,'') ||' '||
		   coalesce((COP.object_data::JSON->'AOF'->'BUS_DATA'->>'PAN_GSTIN_REG_ADD_L3') ,''),'NA') as "GSTIN_ADDRESS",            
---------------------------------------------------------    
           (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN1')||
                case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN1' !='' ) 
                   then ',' else  '' end || 
           (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN2')|| 
                case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN2' !='' )
                      then ',' else  '' end || 
	       (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN3')||
	            case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN3' !='' )
                      then ',' else  '' end || 
		   (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'PIN')|| 
		        case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'PIN' !='' )
                      then ',' else  '' end || 
		   (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'CITY')|| 
		 		case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'CITY' !='' )
                      then ',' else  '' end || 
		   (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'STATE')as "OCR_ADDRESS",            
---------------------------------------------------------		   
           coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'AADHAAR'->>'ADDRESS','NA') as "AADHAAR_BIOMETRIC_ADDRESS",		  
---------------------------------------------------------           
           (case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN' then 
                   COP.object_data::JSON->'AOF'->'CA'->'CPV1'->>'COMM_ADD'
                when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP' then 
                  (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L1')||
                    case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L1' !='' )
                      then ',' else  '' end || 
                  (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L2')|| 
                    case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L2' !='' )
                      then ',' else  '' end || 
	              (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L3')||
	                case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L3' !='' )
                      then ',' else  '' end || 
		          (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_PINCODE')|| 
		            case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_PINCODE' !='' )
                      then ',' else  '' end || 
		          (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_CITY')|| 
		 		    case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_CITY' !='' )
                      then ',' else  '' end || 
		           (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_STATE')
              else 'NA' END) as "ADDRESS_OF_COMMUNICATION",
---------------------------------------------------------              
           (case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADHAAR_CONSENT'->>'VALUE' is not null 
                    or COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADHAAR_CONSENT'->>'VALUE'!='') then 
                      'V1'
                 else 'NA' END) as "AADHAR_CONSENT_VERSION1",
---------------------------------------------------------
           coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP2_DOCTYPE'->>'VALUE','NA') as "Entity_doc_2_name",
---------------------------------------------------------          
		   (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L1')||
			          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L1' !='' )
			                      then ',' else  '' end || 
		   (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L2')|| 
			                  case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L2' !='' )
			                      then ',' else  '' end || 
			(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L3')||
				              case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L3' !='' )
			                      then ',' else  '' end || 
			(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_PINCODE')|| 
					          case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_PINCODE' !='' )
			                      then ',' else  '' end || 
			(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_CITY')|| 
					 		   case when (COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_CITY' !='' )
			                      then ',' else  '' end || 
			(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_STATE')as "ENTITY_DOC2_ADDRESS",
---------------------------------------------------------		 
		    (case when (COP.object_data::JSON->'AOF'->'CA'->>'CUSTOMER_DECLARATION' is not null and 
		               COP.object_data::JSON->'AOF'->'CA'->>'CUSTOMER_DECLARATION' !='')
		         then 'Yes'
		         else 'No' END)  as "CUSTOMER_DECLARATION",
---------------------------------------------------------         
		    (case when (COP.object_data::JSON->'AOF'->'CA'->>'GROUPING_CONSENT' is not null and 
		              COP.object_data::JSON->'AOF'->'CA'->>'GROUPING_CONSENT' !='')
		         then 'Yes'
		         else 'No' END)  as "GROUPING_CONSENT",
---------------------------------------------------------         
            coalesce(COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value','NA') as "CLASSIFICATION_SELECTED_BY_DVU" ,           
---------------------------------------------------------            
        	(CASE when (COP.text_2 is not null OR COP.text_2 !='') then 'No' else 'Yes' END) as "FIRST_PASS",
---------------------------------------------------------        	
   		    (case when (COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' is not null AND 
			            COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' !='') then 
			          COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value'
			      when (COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' is null OR 
			            COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' ='')  THEN
			          COP.object_data::JSON->'AOF'->'CA'->>'PRIVY_PRO_CLASSIFICATION'
			      else 'NA' END) as "FINAL_CLASSIFICATION_IN_BCIF",
---------------------------------------------------------			      
        	COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "Privy_Non_privy"
---------------------------------------------------------       
from tb_cop_buss_obj_txn cop
 left join T2 on  T2.object_pri_key_1 = cop.object_pri_key_1                             
    where 
     (
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_ASSIGNED' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_APPROVED' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'DVU_APPROVED' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'BOM_APPROVED' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'DVU_ASSIGNED' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'DVU_REWORK' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'DVU_REWORK_APPROVED' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_REWORK' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_REJECT' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'BOM_DVU_REWORK_APPROVED' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_REWORK_APPROVED' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'BOM_REWORK' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'BOM_REWORK_APPROVED' or
     COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'ACCOUNT_ACTIVATED'
     )
    and exists (select 1 from tb_btc_prc_grp_disp disp 
                 where  cop.object_pri_key_1 = disp.object_pri_key_1 
	               and (disp.process_group ='DVU'or disp.process_group ='RCU') 
	               and (disp.prc_grp_disp = 'WIP' or disp.prc_grp_disp ='REWORK' or disp.prc_grp_disp ='APPROVE')
               )
    and exists (select 1 from tb_btc_accesscontrol acc 
                 where cop.object_pri_key_1 = acc.object_pri_key_1 
                  and (acc.system_role = 'DVU' or acc.system_role = 'RCU')
				  and acc.emp_hierarchy_id = 'KMB121149'--x_login_id                              
               )           
and case when V_CONSTITUTION = '' then '1' 
      else COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' end = 
       case when V_CONSTITUTION = '' then '1' 
      else V_CONSTITUTION end  
and case when V_PRIVY_OPTION = '' then '1' 
      else upper(COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE') end = 
       case when V_PRIVY_OPTION = '' then '1' 
      else V_PRIVY_OPTION end  
--and case when V_FROM_DATE <>'' and V_TO_DATE <>''
--          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) between cast(V_FROM_DATE as DATE) and  CAST(V_TO_DATE as DATE)
--          when V_FROM_DATE ='' and V_TO_DATE <> ''
--          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) < cast(V_TO_DATE as DATE)
--          when V_FROM_DATE <>'' and V_TO_DATE = ''
--          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) between cast(V_FROM_DATE as DATE)and CURRENT_DATE
--          when V_FROM_DATE = '' and V_TO_DATE = ''
--          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) <= CURRENT_DATE
--     END
    )t;	
  
  


--CREATE INDEX IDX_tb_cop_buss_obj_txn_prgm ON tb_cop_buss_obj_txn ((cast(object_data AS JSON)->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'));
--CREATE INDEX IDX_tb_cop_buss_obj_txn_WFj ON tb_cop_buss_obj_txn ((cast(object_data AS JSON)->'AOF'->>'WORKFLOW_JOURNEY'));

    
            
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_entity_proof_lov_bo(x_value_code character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
DECLARE 
X_RESULT refcursor:='abc';
v_string_tab TEXT;
P_STRING_FINAL   TEXT;
BEGIN
SELECT array_to_json(array_agg(row_to_json(t)))  into v_string_tab
    FROM (   
    	select value_code  as "CODE" , value_desc as "VALUE"
		from tb_lov_mst
		where property ='ENTITY_PROOF'
          and value_code not in (x_value_code)
         order by sort_sequence )t;
   P_STRING_FINAL :=  CONCAT ('{  "object_data" : ', v_string_tab, '}');

   OPEN X_RESULT FOR SELECT P_STRING_FINAL as "DATA";
   RETURN X_RESULT;
END; $function$
;

CREATE OR REPLACE FUNCTION public.sp_get_gstin_custom_message(x_object_pri_key_1 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
DECLARE   
   p_string     TEXT;
   v_gst TEXT;
   v_lang varchar;
  v_count int;
  	X_result    refcursor ='cur';
BEGIN
select count(*) into v_count from tb_cop_buss_obj_txn tcbot2 
 where object_pri_key_1 = x_object_pri_key_1;

 if v_count>0 is not null then
	
    select
		object_data::json-> 'AOF'->'WORK_VARIABLES'->'GST_DETAILS_1'->>'VALUE'
		into v_gst
    from tb_cop_buss_obj_txn tcbot 
     WHERE object_pri_key_1 = x_object_pri_key_1;
 
  if v_gst is not null  then  
 
-- raise notice '1 code%',v_scheme_code;
-- raise notice '2 lang %',v_lang;

 select  ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(T))) INTO p_string from(
   select '01' as "CODE", 
          'I/We request Kotak Mahindra Bank to update ' 
   || v_gst || 
   ' against my/company CRN (Customer Relationship Number). I/We have read & understand the methodology of accounting of GST on GST network and do not have any objection to it.' as "VALUE" 
	from tb_cop_buss_obj_txn tcbot 
	 where object_pri_key_1 =x_object_pri_key_1)t;

 elsif (v_gst is null or v_gst = '') then  
	p_string ='{"object": [{"CODE":"00","VALUE": "Please provide valid GSTIN code"}]}';
	

 end if;
else 
    p_string ='{"object": [{"CODE":"00","VALUE": "Please provide valid Id"}]}';
end if ;
  OPEN X_result FOR 
  SELECT p_string as "DATA";
 --insert into test_as values(p_string);
return X_result;


END ;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_industry_code_bo(x_login_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
DECLARE 
X_RESULT refcursor:='cur';
v_string_tab TEXT;
P_STRING_FINAL   TEXT;
begin
	      SELECT
        REPLACE(CONCAT('{"object": [{"CODE": " ","VALUE": "SELECT"},', ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(T))), '}'),'},[{','},{') into P_STRING_FINAL
      FROM (  select value_desc   as "VALUE" , value_code as "CODE"
		from tb_lov_mst
		where property ='INDUSTRY_DESCRIPTION' order by value_code asc)t;
	
   OPEN X_RESULT FOR SELECT P_STRING_FINAL as "DATA";
   RETURN X_RESULT;
END; $function$
;

CREATE OR REPLACE FUNCTION public.sp_get_kyc_consent_report(x_login_id character varying, x_role character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_role varchar(100);
v_entity int;
v_aus int;
begin
 select TFRM.default_system_role_code into V_ROLE from tb_emp_hrms teh , tb_function_roles_mst tfrm
  where teh."role" =tfrm.role_name
  and tfrm.default_system_role_code in ('Product Supervisor','BSG')
 and TEH.employee_number =x_login_id;

if V_ROLE in ('Product Supervisor','BSG') then


select json_agg( json_build_object(
                         'LEAD_ID',A.LEAD_ID,
                         'KYC_CONSENT',KYC_CONSENT,
                         'KYC_LINK_SENT_DATE',KYC_LINK_SENT_DATE,
                         'KYC_LINK_SENT_BY',KYC_LINK_SENT_BY,
                         'KYC_LINK_RE_SENT_DATE',KYC_LINK_RE_SENT_DATE,
                         'KYC_LINK_RE_SENT_BY',KYC_LINK_RE_SENT_BY,
                         'Customer_IP_KYC_consent',Customer_IP_KYC_consent,
                         'CUSTOMER_BROWSER_NAME_KYC_CONSENT',CUSTOMER_BROWSER_NAME_KYC_CONSENT,
                         'CUSTOMER_BROWSER_VERSION_KYC_CONSENT',CUSTOMER_BROWSER_VERSION_KYC_CONSENT,
                         'CUSTOMER_DEVICE_OPERATING_SYSTEM_NAME_KYC_CONSENT',CUSTOMER_DEVICE_OPERATING_SYSTEM_NAME_KYC_CONSENT,
                         'CUSTOMER_DEVICE_OPERATING_SYSTEM_VERSION_KYC_CONSENT',CUSTOMER_DEVICE_OPERATING_SYSTEM_VERSION_KYC_CONSENT,
                         'REVIEW_CONSENT',REVIEW_CONSENT,
                         'REVIEW_LINK_SENT_DATE',REVIEW_LINK_SENT_DATE,
                         'REVIEW_LINK_SENT_BY',REVIEW_LINK_SENT_BY,
                         'REVIEW_LINK_RE_SENT_DATE',REVIEW_LINK_RE_SENT_DATE,
                         'REVIEW_LINK_RE_SENT_BY',REVIEW_LINK_RE_SENT_BY,
                         'CUSTOMER_IP_REVIEW_CONSENT',CUSTOMER_IP_REVIEW_CONSENT,
                         'CUSTOMER_BROWSER_NAME_REVIEW_CONSENT',CUSTOMER_BROWSER_NAME_REVIEW_CONSENT,
                         'CUSTOMER_BROWSER_VERSION_REVIEW_CONSENT',CUSTOMER_BROWSER_VERSION_REVIEW_CONSENT,
                         'CUSTOMER_DEVICE_OPERATING_SYSTEM_NAME_REVIEW_CONSENT',CUSTOMER_DEVICE_OPERATING_SYSTEM_NAME_REVIEW_CONSENT,
                         'CUSTOMER_DEVICE_OPERATING_SYSTEM_VERSION_REVIEW_CONSENT',CUSTOMER_DEVICE_OPERATING_SYSTEM_VERSION_REVIEW_CONSENT
                         )) into v_data
from (select con.object_pri_key_1 as LEAD_ID,
request_url as KYC_CONSENT,                                                                                                  
TO_CHAR(con.created_timestamp,'YYYY-MM-DD HH24:MI:SS') as KYC_LINK_SENT_DATE,
--TBA.emp_id as KYC_LINK_SENT_BY ,
'Kotak Bank Admin' as KYC_LINK_SENT_BY ,
TO_CHAR(to_timestamp(status_update_timestamp ,'YYYY-MM-DDTHH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS') as KYC_LINK_RE_SENT_DATE,
--TBA.emp_id as KYC_LINK_RE_SENT_BY,
'Kotak Bank Admin' as KYC_LINK_RE_SENT_BY,
json_array_elements(cast( status_update_address as json)) ->> 'Customer_IP' as Customer_IP_KYC_consent,
json_array_elements(cast( status_update_address as json)) ->> 'os_name' as CUSTOMER_BROWSER_NAME_KYC_CONSENT,
json_array_elements(cast( status_update_address as json)) ->> 'os_version' as CUSTOMER_BROWSER_VERSION_KYC_CONSENT,
json_array_elements(cast( status_update_address as json)) ->> 'browser_name' as CUSTOMER_DEVICE_OPERATING_SYSTEM_NAME_KYC_CONSENT,
json_array_elements(cast( status_update_address as json)) ->> 'browser_version' as CUSTOMER_DEVICE_OPERATING_SYSTEM_VERSION_KYC_CONSENT
from tb_consent_data_hist con , tb_btc_accesscontrol tba
 where tba.object_pri_key_1 =con.object_pri_key_1
 --and con.object_pri_key_1 ='SP080222113439695'
 and tba.system_role = 'RM'
 and CON.request_status ='CONFIRMED'
and CON.consent_sub_type ='ENTITY_CONSENT'
and status_update_address is not null
and trim(status_update_address)<>'') A,
(select con.object_pri_key_1 as LEAD_ID,
request_url as REVIEW_CONSENT,
TO_CHAR(con.created_timestamp,'YYYY-MM-DD HH24:MI:SS') as REVIEW_LINK_SENT_DATE,
TBA.emp_id as REVIEW_LINK_SENT_BY,
TO_CHAR(to_timestamp(status_update_timestamp ,'YYYY-MM-DDTHH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS') as REVIEW_LINK_RE_SENT_DATE,
TBA.emp_id REVIEW_LINK_RE_SENT_BY,
json_array_elements(cast( status_update_address as json)) ->> 'Customer_IP' as CUSTOMER_IP_REVIEW_CONSENT,
json_array_elements(cast( status_update_address as json)) ->> 'os_name' as CUSTOMER_BROWSER_NAME_REVIEW_CONSENT,
json_array_elements(cast( status_update_address as json)) ->> 'os_version' as CUSTOMER_BROWSER_VERSION_REVIEW_CONSENT,
json_array_elements(cast( status_update_address as json)) ->> 'browser_name' as CUSTOMER_DEVICE_OPERATING_SYSTEM_NAME_REVIEW_CONSENT,
json_array_elements(cast( status_update_address as json)) ->> 'browser_version' as CUSTOMER_DEVICE_OPERATING_SYSTEM_VERSION_REVIEW_CONSENT
from tb_consent_data_hist con , tb_btc_accesscontrol tba
 where tba.object_pri_key_1 =con.object_pri_key_1
 --and con.object_pri_key_1 ='SP080222113439695'
 and tba.system_role = 'RM'
 and CON.request_status ='CONFIRMED'
and CON.consent_sub_type ='FINAL_CONSENT'
and status_update_address is not null
and trim(status_update_address)<>'') B
where A.LEAD_ID=B.LEAD_ID;


/*
select jsonb_build_object('name','Current Team','APP_BUILDER',"APP_BUILDER",'PM',"PM",'BA',"BA",'JAVA',"JAVA",'DB',"DB",'TESTER',"TESTER",'WEB',"WEB")
   from
   (select cast(count(pm.project_id) as varchar) as "APP_BUILDER" from tb_people_project_map pm
    where project_id = 'PC0122'
    and project_role = 'SK0001'
    and release_date > now() and (emp_id !='' and emp_id is not null)) as "APP_BUILDER",
(select cast(count(pm.project_id) as varchar) as "PM" from tb_people_project_map pm
    where project_id = 'PC0122'
    and project_role = 'SK0012'
    and release_date > now() and (emp_id !='' and emp_id is not null)) as "PM",
(select cast(count(pm.project_id) as varchar) as "BA" from tb_people_project_map pm
    where project_id = 'PC0122'
    and project_role = 'SK0008'
    and release_date > now() and (emp_id !='' and emp_id is not null)) as "BA",
(select cast(count(pm.project_id) as varchar) as "JAVA" from tb_people_project_map pm
   where project_id = 'PC0122'
   and   project_role = 'SK0002'
   and release_date > now() and (emp_id !='' and emp_id is not null)) as "JAVA",
(select cast(count(pm.project_id) as varchar) as "DB" from tb_people_project_map pm
   where project_id = 'PC0122'
   and project_role = 'SK0003'
   and release_date > now() and (emp_id !='' and emp_id is not null)) as "DB",
(select cast(count(pm.project_id) as varchar) as "TESTER" from tb_people_project_map pm
   where project_id = 'PC0122'
     and project_role IN ('SK0009','SK0010')
     and release_date > now() and (emp_id !='' and emp_id is not null)) as "TESTER",
(select cast(count(pm.project_id) as varchar) as "WEB" from tb_people_project_map pm
   where project_id = 'PC0122'
   and project_role ='SK0004'
   and   release_date > now()
  and is_active = 'Y' and (emp_id !='' and emp_id is not null)) as "WEB";
 
*/

end if;

if (v_data = '' or v_data is null) then
 v_data := '[{"code":"","value":"No Leads present for this ID"}]';
END IF;
 
OPEN x_result FOR SELECT
            v_data  AS    "OBJECT";
return x_result;    
           
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_lead_data_java()
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
x_result refcursor = 'cur';
begin
open x_result for 
select * from mv_lead_status_report_metadata;

return x_result;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_lead_role_user_id(x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_process_group character varying, x_prc_grp_disp character varying, x_login_id character varying, x_object character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$ 
DECLARE 
--X_RESULT REFCURSOR:='cur_role_user';    
v_user_id varchar(100);
v_rcu_corrector_id varchar(100);
v_branch_code varchar(100);
v_rm_id varchar(100);
begin
	
--RCU-->CIF SUCCESS--->ACCOUNTNOM-->ACCOUNTCASA-->ACCOUNT-->RU -->ACCOUNTMAN-->SIGNATURE-->(CERSAI,FILENET,GSTIN,FATCA Handoff)
--CIFMAN SUCCESS--->ACCOUNTNOM WAIT-->ACCOUNTCASA WAIT
--RCU-->CIF SUCCESS--->CIFCORP	WAIT--> CIFMAN	WAIT-->ACCOUNTNOM WAIT
	

if x_process_group = 'RU' and x_prc_grp_disp = 'RU_USERWAIT' then --BJACCAOFUPDSUCCESSNA  BJACCAOFUPD-SUCCESS-NA
v_user_id :='USER_GEN_QUE';
elsif x_process_group = 'ACCOUNT' and x_prc_grp_disp = 'SUCCESS' then --BJACCAOFUPDSUCCESSNA  BJACCAOFUPD-SUCCESS-NA
v_user_id :='System';
elsif x_process_group = 'ACCOUNT' and x_prc_grp_disp = 'WAIT' then --BJACCCASAAOFUPDSUCCESSNA  BJACCCASAAOFUPD-SUCCESS-NA
v_user_id :='System';
elsif x_process_group = 'ACCOUNTCASA' and x_prc_grp_disp = 'SUCCESS' then --BJACCCASAAOFUPDSUCCESSNA  BJACCCASAAOFUPD-SUCCESS-NA
v_user_id :='System';
elsif x_process_group = 'ACCOUNTMAN' and x_prc_grp_disp = 'SUCCESS' then --BJACCMANAOFUPDSUCCESSNA  BJACCMANAOFUPD-SUCCESS-NA
v_user_id :='System';
elsif x_process_group = 'SIGNATURE' and x_prc_grp_disp = 'WAIT' then --BJACCMANAOFUPDSUCCESSNA  BJACCMANAOFUPD-SUCCESS-NA
v_user_id :='System';
elsif x_process_group = 'ACCOUNTCASA' and x_prc_grp_disp = 'WAIT' then --BJACCNOMAOFUPDSUCCESSNA  BJACCNOMAOFUPD-SUCCESS-NA
v_user_id :='System';
elsif x_process_group = 'ACCOUNTNOM' and x_prc_grp_disp = 'SUCCESS' then --BJACCNOMAOFUPDSUCCESSNA  BJACCNOMAOFUPD-SUCCESS-NA
v_user_id :='System';
elsif x_process_group = 'CIFCORP' and x_prc_grp_disp = 'WAIT' then --BJCIFAOFUPDSUCCESSNA  BJCIFAOFUPD-SUCCESS-NA
v_user_id :='System'; 
elsif x_process_group = 'CIF' and x_prc_grp_disp = 'SUCCESS' then --BJCIFAOFUPDSUCCESSNA  BJCIFAOFUPD-SUCCESS-NA
v_user_id :='System';
elsif x_process_group = 'CIFMAN' and x_prc_grp_disp = 'WAIT' then --BJCIFCORPAOFUPDSUCCESSNA  BJCIFCORPAOFUPD-SUCCESS-NA
v_user_id :='System';
elsif x_process_group = 'CIFCORP' and x_prc_grp_disp = 'SUCCESS' then --BJCIFCORPAOFUPDSUCCESSNA  BJCIFCORPAOFUPD-SUCCESS-NA
v_user_id :='System';
elsif x_process_group = 'ACCOUNTNOM' and x_prc_grp_disp = 'WAIT' then --BJCIFINDAOFUPDSUCCESSNA  BJCIFINDAOFUPD-SUCCESS-NA
v_user_id :='System';
elsif x_process_group = 'CIF' and x_prc_grp_disp = 'SUCCESS' then --BJCIFINDAOFUPDSUCCESSNA  BJCIFINDAOFUPD-SUCCESS-NA
v_user_id :='System';
elsif x_process_group = 'ACCOUNTNOM' and x_prc_grp_disp = 'WAIT' then --BJCIFMANAOFUPDSUCCESSNA  BJCIFMANAOFUPD-SUCCESS-NA
v_user_id :='System';
elsif x_process_group = 'CIFMAN' and x_prc_grp_disp = 'SUCCESS' then --BJCIFMANAOFUPDSUCCESSNA  BJCIFMANAOFUPD-SUCCESS-NA
v_user_id :='System';
elsif x_process_group = 'CERSAI' and x_prc_grp_disp = 'WAIT' then --BJSGNAOFUPDSUCCESSNA  BJSGNAOFUPD-SUCCESS-NA
v_user_id :='System';
elsif x_process_group = 'FATCA Handoff' and x_prc_grp_disp = 'WAIT' then --BJSGNAOFUPDSUCCESSNA  BJSGNAOFUPD-SUCCESS-NA
v_user_id :='System';
elsif x_process_group = 'GSTIN' and x_prc_grp_disp = 'WAIT' then --BJSGNAOFUPDSUCCESSNA  BJSGNAOFUPD-SUCCESS-NA
v_user_id :='System';
elsif x_process_group = 'FILENET' and x_prc_grp_disp = 'WAIT' then --BJSGNAOFUPDSUCCESSNA  BJSGNAOFUPD-SUCCESS-NA
v_user_id :='System';
elsif x_process_group = 'SIGNATURE' and x_prc_grp_disp = 'SUCCESS' then --BJSGNAOFUPDSUCCESSNA  BJSGNAOFUPD-SUCCESS-NA
v_user_id :='System';
elsif x_process_group = 'BOM_APPROVER' and x_prc_grp_disp = 'USERWAIT' then --MBRMAOFUPDSUBMITTEDNA  MBRMAOFUPD-SUBMITTED-NA
--v_user_id :='RM_SE USERID  GET BOM_APPROVER';
	select APPROVER_ID into v_user_id
	  from tb_se_app_mapping
	 where SE_ID =x_login_id;   
	
elsif x_process_group = 'RM_SE' and x_prc_grp_disp = 'SUBMITTED' then --MBRMAOFUPDSUBMITTEDNA  MBRMAOFUPD-SUBMITTED-NA
v_user_id :=x_login_id;
elsif x_process_group = 'ENRICHMENT' and x_prc_grp_disp = 'WAIT' then --MBRMAOFUPDSUBMITTEDNA  MBRMAOFUPD-SUBMITTED-NA
v_user_id :='System';
elsif x_process_group = 'BOM_APPROVER' and x_prc_grp_disp = 'APPROVE' then --PRBOMAOFUPDAPPROVENA  PRBOMAOFUPD-APPROVE-NA
  v_user_id :=x_login_id;
elsif x_process_group = 'DVU' and x_prc_grp_disp = 'USERWAIT' then --PRBOMAOFUPDAPPROVENA  PRBOMAOFUPD-APPROVE-NA
v_user_id := 'USER_GEN_QUE';--'BOM USERID  GET DVU';
elsif x_process_group = 'BOM_APPROVER' and x_prc_grp_disp = 'REWORK' then --PRBOMAOFUPDREWORKNA  PRBOMAOFUPD-REWORK-NA
v_user_id :=x_login_id;
elsif x_process_group = 'RM_SE' and x_prc_grp_disp = 'APPROVERQUERY' then --PRBOMAOFUPDREWORKNA  PRBOMAOFUPD-REWORK-NA
	--v_user_id :='BOM USERID  GET RM_SE';
	select emp_id into v_user_id
	from tb_btc_accesscontrol
	where system_role='RM'
	and object_pri_key_1=X_object_pri_key_1;

elsif x_process_group = 'DVU' and x_prc_grp_disp = 'APPROVE' then --PRDVUAOFUPDAPPROVENA  PRDVUAOFUPD-APPROVE-NA
v_user_id :=x_login_id;
elsif x_process_group = 'RCU' and x_prc_grp_disp = 'USERWAIT' then --PRDVUAOFUPDAPPROVENA  PRDVUAOFUPD-APPROVE-NA
v_user_id :='USER_GEN_QUE';--'DVU USERID  GET RCU';
elsif x_process_group = 'DVU' and x_prc_grp_disp = 'REWORK' then --PRDVUAOFUPDREWORKNA  PRDVUAOFUPD-REWORK-NA
v_user_id :=x_login_id;
elsif x_process_group = 'RM_SE' and x_prc_grp_disp = 'DVUQUERY' then --PRDVUAOFUPDREWORKNA  PRDVUAOFUPD-REWORK-NA
	--v_user_id :='DVU USERID  GET RM_SE';
	select emp_id into v_user_id
	from tb_btc_accesscontrol
	where system_role='RM'
	and object_pri_key_1=X_object_pri_key_1;

elsif x_process_group = 'CIF' and x_prc_grp_disp = 'WAIT' then --PRRCUAOFUPDAPPROVENA  PRRCUAOFUPD-APPROVE-NA
v_user_id :='System';--'RCU USERID  GET CIF';
elsif x_process_group = 'RCU' and x_prc_grp_disp = 'APPROVE' then --PRRCUAOFUPDAPPROVENA  PRRCUAOFUPD-APPROVE-NA
v_user_id :=x_login_id;
elsif x_process_group = 'RCU' and x_prc_grp_disp = 'REWORK' then --PRRCUAOFUPDREWORKNA  PRRCUAOFUPD-REWORK-NA
v_user_id :=x_login_id;
elsif x_process_group = 'RCU_Correcter' and x_prc_grp_disp = 'USERWAIT' then --PRRCUAOFUPDREWORKNA  PRRCUAOFUPD-REWORK-NA
--v_user_id :='RCU USERID  GET RCU_Correcter';

	select emp_id into v_rm_id
		from tb_btc_accesscontrol
		where system_role='RM'
		and object_pri_key_1=X_object_pri_key_1;
	
	select branch_code into v_BRANCH_CODE
		from tb_emp_hrms
		where employee_number=v_rm_id;
	
	select rcu_corrector_id into v_rcu_corrector_id
		from tb_branch_rcu_corrector_mapping
		where branch=v_BRANCH_CODE;
	
	v_user_id := v_rcu_corrector_id;
else 
v_user_id := x_login_id;
end if;
	

--select 
--workflow_group_id,
--event_process,
--ref_input_1,
--ref_input_2,
--process_group,prc_grp_disp,
--''''||workflow_group_id||event_process||ref_input_1||ref_input_2||''',' EV
--from tb_btc_prc_grp_disp_cfg
--where process_group='ACCOUNTNOM'
----and prc_grp_disp='WAIT'
--order by workflow_group_id,event_process,ref_input_1,ref_input_2
--;
--
--select workflow_group_id,
--event_process,
--ref_input_1,
--ref_input_2,
--process_group,prc_grp_disp
--from tb_btc_prc_grp_disp_cfg
--where (workflow_group_id||event_process||ref_input_1||ref_input_2 )
--in(
--'CABJCIFMANAOFUPDSUCCESSNA'
--)
--order by workflow_group_id,event_process,ref_input_1,ref_input_2
--;


--select 
--workflow_group_id,
--event_process,
--ref_input_1,
--ref_input_2 ,
-- process_group,prc_grp_disp,
--'elsif x_process_group = '''||process_group||''' and x_prc_grp_disp = '''||prc_grp_disp||''' then --'||event_process||ref_input_1||ref_input_2||'  '||event_process||'-'||ref_input_1||'-'||ref_input_2  ||CHR(10)||'v_user_id :=''UU'';'
--  from(
--select * from tb_btc_prc_grp_disp_cfg
--where (workflow_group_id,
--event_process,
--ref_input_1,
--ref_input_2 )
--in(
--	select
--	workflow_group_id,
--	event_process,
--	ref_input_1,
--	ref_input_2 
--	from(
--		select 
--		workflow_group_id,
--		event_process,
--		ref_input_1,
--		ref_input_2 ,
--		count(1) cnt
--		from tb_btc_prc_grp_disp_cfg
--		group by workflow_group_id,
--		event_process,
--		ref_input_1,
--		ref_input_2
--		having count(1)>1
--	    )tbl
--) order by workflow_group_id,
--	event_process,
--	ref_input_1,
--	ref_input_2 
--)tbl2
-- order by workflow_group_id,
--	event_process,
--	ref_input_1,
--	ref_input_2 ;


  RETURN v_user_id;  

END;$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_lead_status_report(x_login_id character varying, x_role character varying, x_param character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_role varchar(100);
v_count int;
v_prc_grp VARCHAR(100);
v_prc_grp_disp VARCHAR(100);
V_FROM_DATE VARCHAR(100);
V_TO_DATE VARCHAR(100);
V_CONSTITUTION VARCHAR(100);
V_PRIVY_OPTION VARCHAR(100);
V_FIRST_PASS VARCHAR(10);
V_ENTITY_DOC_1 VARCHAR(100);
V_ENTITY_DOC_2 VARCHAR(100);
begin
   if x_param = 'OBJECT' then 
     V_FROM_DATE :='';
     V_TO_DATE :='';
     V_CONSTITUTION :='';
     V_PRIVY_OPTION :='';
     V_FIRST_PASS :='';
     V_ENTITY_DOC_1 :='';
     V_ENTITY_DOC_2 :='';
   else 
		select json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_FROM_DATE',
		       json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_TO_DATE',
		      case when (select json_array_elements(cast(x_param as json)) ->'CONSTITUTION'->> 'code') is null 
		           then '' 
		           else (select json_array_elements(cast(x_param as json)) ->'CONSTITUTION'->> 'code')
		           end ,
		       case when (select json_array_elements(cast(x_param as json)) ->'PRIVY_OPTION'->> 'value') is null 
		            then ''
		            else (select json_array_elements(cast(x_param as json)) ->'PRIVY_OPTION'->> 'value') 
		            end, 
		       case when (select json_array_elements(cast(x_param as json)) ->'First_pass'->> 'value') is null 
		            then ''
		            else (select json_array_elements(cast(x_param as json)) ->'First_pass'->> 'value') 
		            end,		
		       case when (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_1'->> 'value') is null 
		            then ''
		            else (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_1'->> 'value') 
		            end,
		       case when (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_2'->> 'value') is null 
		            then ''
		            else (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_2'->> 'value') END		            		            
		       into V_FROM_DATE , V_TO_DATE , V_CONSTITUTION, V_PRIVY_OPTION, V_FIRST_PASS, V_ENTITY_DOC_1, V_ENTITY_DOC_2;
   end if;
	if x_role in ('Product Supervisor','BSG') then 
	
 select json_agg(row_to_json(t)) into v_data from
( select 
       COP.object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID" ,       
       COP.object_data::JSON->'AOF'->'CA'->>'CRN_AUS' as "CRN_OF_INDIVIDUAL_AUTHORISED_SIG",
       COP.object_data::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "CUSTOMER_NAME" ,
       coalesce(COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY','NA') as "Entity_CRN",
       coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",       
       coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADD_MHOLDER'->>'VALUE','NA') as "MANDATE_HOLDER",
       coalesce(COP.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE','NA') as "MANDATE_HOLDER_CRN",                                    
       coalesce(COP.object_data::JSON->'AOF'->'WORK_VARIABLES'->'MH'->>'ID_NAME_ADD','NA') as "MANDATE_HOLDER_NAME",
       COP.object_data::JSON->'AOF'->'CA'->>'ACCOUNT_NO' as "ACCOUNT_NUMBER",
--      (select tbpgd.modified_timestamp from tb_btc_prc_grp_disp tbpgd 
--		     where tbpgd.object_pri_key_1 =COP.object_pri_key_1 
--		      AND process_group ='ACCOUNT'
--		      and prc_grp_disp ='SUCCESS' ) as "ACCOUNT_ACTIVATION_DATE",
        COP.object_data::JSON->'AOF'->'CA'->'KIT_TYPE'->>'VALUE' as "KIT_TYPE",
--      COP.object_data::JSON->'AOF'->'CA'->'CPV1'->'IP_TYPE'->>'VALUE' as "FUNDING_MODE",
       'Cheque' as "FUNDING_MODE",
        COP.object_data::JSON->'AOF'->'CA'->>'CHQ_AMOUNT' as "IP_AMOUNT",
                case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
             then 'Individual'
             when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
             then 'Sole Proprietor'end  as "CONSTITUTION",
        COP.object_data::JSON->'AOF'->'CA'->'DEBIT_CARD_TYPE'->>'VALUE' as "DEBIT_CARD",
        coalesce(COP.object_data::JSON->'AOF'->'CA'->'CREDIT_FACILITIES'->>'VALUE','NA') as "EXISTING_CREDIT_FACILITY",
        COP.object_data::JSON->'AOF'->'CA'->'ANNEXURE_1_CREDIT_FACILITY_TYPE'->>'VALUE' as "TYPE_OF_FACILITY",
        cop.device_create_timestamp as "LEAD_CREATED_DATE",
        (Select employee_number from tb_emp_hrms teh 
	        where teh.employee_number= cop.login_id ) as "LEAD_CREATED_BY_LC",
         COP.object_data::JSON->'AOF'->>'RM_CODE' as "RM_CODE",	        
	    (Select first_name || ' ' || last_name from tb_emp_hrms teh 
	                 where teh.employee_number= cop.login_id ) as "LC_NAME",
         COP.object_data::JSON->'AOF'->>'LG_CODE' as "LG_CODE",
	    (Select first_name || ' ' || last_name from tb_emp_hrms teh 
	        where teh.employee_number= cop.login_id ) as "RM_NAME",
       (COP.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'CODE') || ' - '|| 
        (COP.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE') as "PRODUCT_CODE",
--	 (select 'ACCOUNT ACTIVATED' from tb_btc_prc_grp_disp tbpgd 
--		where tbpgd.object_pri_key_1 =COP.object_pri_key_1 
--		AND process_group ='ACCOUNT'
--		  and prc_grp_disp ='SUCCESS' ) as "LEAD_STATUS",
--           cop.text_1 as "LEAD_STATUS",
              (select process_name from tb_process_group_nomenclature tpgn 
          where COP.text_1 = tpgn.text_1 ) AS"LEAD_STATUS",
	  COP.modify_emp_id as "LAST_MODIFIED_BY",
      (select distinct tfrm.role_alias from tb_emp_hrms tehh ,
           tb_function_roles_mst tfrm , tb_cop_buss_obj_txn tcbot 
			 where tehh."role" = tfrm.role_name
			  and  tcbot.modify_emp_id = tehh.employee_number 
			  and tcbot.object_pri_key_1 =cop.object_pri_key_1 limit 1 ) as "LAST_MODIFIED_BY_ROLE", 
	    COP.device_modify_timestamp as "LAST_MODIFIED_DATE",
	(select TO_CHAR(end_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_btc_prc_grp_disp tbpgd 
          where tbpgd.object_pri_key_1 =COP.object_pri_key_1 
           and process_group ='ACCOUNT'and prc_grp_disp ='SUCCESS') as "ACCOUNT_OPENED_DATE",
       'Retail Liabilities' as "SEGMENT",
       coalesce(COP.object_data::JSON->'AOF'->'PROMO'->>'VALUE','NA') as "PROMO_CODE",         
       coalesce(COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value','NA') as "CLASSIFICATION_SELECTED_BY_DVU",
        COP.object_data::JSON->'AOF'->'LOB'->>'VALUE' as "LOB",
        COP.object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE' as "BRANCH_CODE",
        COP.object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "BRANCH_NAME",
        COP.object_data::JSON->'AOF'->'COCO_CODE'->>'VALUE' as "COCO",
       CASE when (COP.text_2 is not null AND COP.text_2 !='') then 'No'
            else 'Yes' end as "FIRST_PASS",
 		(select TEH.FIRST_NAME ||' '||TEH.LAST_NAME from tb_emp_hrms teh  
           where TEH.employee_number in (select SUPERVISOR_EMP_NO from tb_emp_hrms teh2 , tb_btc_accesscontrol tba2 
		                                 where teh2.EMPLOYEE_NUMBER =tba2.emp_id 
		                                  and tba2.object_pri_key_1 =cop.object_pri_key_1 
		                                  and tba2.system_role ='RM')) as "SOURCING_RM_SUPERVISOR_NAME",
    (select TO_CHAR(DIS.created_timestamp ,'YYYY-MM-DD HH24:MI:SS')
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS
	        where  DIS.object_pri_key_1 =cop.object_pri_key_1 and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
	        and tssh.system_role ='RCU' and DIS.process_group ='RCU' and prc_grp_disp ='WIP'
	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 and tssh.emp_id !='' 
	        order by tssh.log_time ASC 
	       limit 1) as "SENT_TO_MID_OFFICE_DATE",
 (select TO_CHAR(DIS.created_timestamp ,'YYYY-MM-DD HH24:MI:SS')  
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS
	        where  DIS.object_pri_key_1 =COP.object_pri_key_1   
	        and tssh.system_role ='DVU' and DIS.process_group ='DVU' and prc_grp_disp ='USERWAIT'
	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 and tssh.emp_id !='' 
	        order by tssh.log_time ASC 
	       limit 1) as "SENT_TO_DVU_DATE",
case when (select TSSH.modified_by 
	        from  tb_btc_accesscontrol_hist tssh  
	        where TSSH.object_pri_key_1 =COP.object_pri_key_1 
	        and tssh.system_role ='DVU' 
	        and modified_by ='reassign_proc'
	        order by tssh.log_time  LIMIT 1) ='reassign_proc' 
     then (select TO_CHAR(TSSH.log_time,'YYYY-MM-DD HH24:MI:SS')
	       from  tb_btc_accesscontrol_hist tssh , tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where TSSH.object_pri_key_1 =COP.object_pri_key_1 
	        and TEH."role" =TFRM.role_name 
            and tssh.system_role ='DVU' 
            and TEH.employee_number = TSSH.emp_hierarchy_id 
	        and tssh.modified_by ='reassign_proc'
	        and tssh.log_action  ='UPDATE'
	        order by tssh.log_time  LIMIT 1) 
     else 
     (select TO_CHAR(TSSH.created_timestamp,'YYYY-MM-DD HH24:MI:SS') 
	        from  tb_btc_accesscontrol tssh , 
	         tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where TSSH.object_pri_key_1 =COP.object_pri_key_1
	        and TEH."role" =TFRM.role_name 
	        and TEH.employee_number = TSSH.emp_hierarchy_id 
	        and tssh.system_role ='DVU'  
	        and tssh.emp_hierarchy_id !=''
	       order by tssh.created_timestamp DESC  limit 1)
	       end as "DVU_FIRST_ASSIGNED_DATE",
--(select first_name ||' '||last_name from tb_emp_hrms teh3 
--  where employee_number in (select tssh.emp_hierarchy_id 
--	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS
--	        where  DIS.object_pri_key_1 =COP.object_pri_key_1 and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
--	        and tssh.system_role ='DVU' and DIS.process_group ='DVU' and prc_grp_disp ='WIP'
--	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 and tssh.emp_hierarchy_id !='' 
--	        order by tssh.log_time ASC limit 1)) as "DVU_ASSIGNED_USER_NAME",
   case when (select TSSH.modified_by 
	        from  tb_btc_accesscontrol_hist tssh  
	        where TSSH.object_pri_key_1 =COP.object_pri_key_1 
	        and tssh.system_role ='DVU' 
	        and modified_by ='reassign_proc'
	        order by tssh.log_time  LIMIT 1) ='reassign_proc' 
     then (select CONCAT(TEH.first_name ,' ',TEH.last_name )
	       from  tb_btc_accesscontrol_hist tssh , tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where TSSH.object_pri_key_1 =COP.object_pri_key_1 
	        and TEH."role" =TFRM.role_name 
            and tssh.system_role ='DVU' 
            and TEH.employee_number = TSSH.emp_hierarchy_id 
	        and tssh.modified_by ='reassign_proc'
	        and tssh.log_action  ='UPDATE'
	        order by tssh.log_time  LIMIT 1) 
     else 
     (select CONCAT(TEH.first_name ,' ',TEH.last_name ) 
	        from  tb_btc_accesscontrol tssh , 
	         tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where TSSH.object_pri_key_1 =COP.object_pri_key_1
	        and TEH."role" =TFRM.role_name 
	        and TEH.employee_number = TSSH.emp_hierarchy_id 
	        and tssh.system_role ='DVU'  
	        and tssh.emp_hierarchy_id !=''
	       order by tssh.created_timestamp DESC  limit 1)
	       end as "DVU_FIRST_ASSIGNED_USER_NAME",     
case when COP.text_1 ='DVU_ASSIGNED'
       	    then (select CONCAT(CURRENT_DATE - cast(TO_CHAR(tssh.log_time,'YYYY-MM-DD')as DATE)  ,' days')   
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS, tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where  DIS.object_pri_key_1 =cop.object_pri_key_1 and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
	        and TEH."role" =TFRM.role_name and TEH.employee_number = TSSH.emp_id 
	        and tssh.system_role ='DVU' and DIS.process_group ='DVU' and prc_grp_disp ='WIP'
	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 and tssh.emp_hierarchy_id !='' 
	        order by tssh.log_time ASC limit 1) 
	         end as "DVU_PENDING_SINCE",
        COP.object_data::JSON->'AOF'->'RISK_PROFILE'->>'VALUE' as "RISK",
 (select TO_CHAR(DIS.created_timestamp ,'YYYY-MM-DD HH24:MI:SS') 
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS
--	        , tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where  DIS.object_pri_key_1 =COP.object_pri_key_1 and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
--	        and TEH."role" =TFRM.role_name and TEH.employee_number = TSSH.emp_id 
	        and tssh.system_role ='RCU' and DIS.process_group ='RCU' and prc_grp_disp ='WIP'
	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 and tssh.emp_id !='' 
	        order by tssh.log_time ASC limit 1) as "MID_OFFICE_ASSIGNED_DATE",
(select first_name ||' '||last_name from tb_emp_hrms teh3 
  where employee_number in(select  tssh.emp_id
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS
	        where  DIS.object_pri_key_1 =COP.object_pri_key_1 and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
	        and tssh.system_role ='RCU' and DIS.process_group ='RCU' and prc_grp_disp ='WIP'
	        and tssh.emp_id !='' 
	        and tssh.config_id ='44'
	        order by tssh.log_time ASC limit 1)) as "MID_OFFICE_ASSIGNED_USER_NAME",  
case when COP.text_1 ='RCU_ASSIGNED'
       	    then (select CONCAT(CURRENT_DATE - cast(TO_CHAR(tssh.log_time,'YYYY-MM-DD')as DATE)  ,' days')
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS, tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where  DIS.object_pri_key_1 =cop.object_pri_key_1 and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
	        and TEH."role" =TFRM.role_name and TEH.employee_number = TSSH.emp_id 
	        and tssh.system_role ='RCU' and DIS.process_group ='RCU' and prc_grp_disp ='WIP'
	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 and tssh.emp_id !='' 
	        order by tssh.log_time ASC limit 1) 
	         end as "MID_OFFICE_PENDING_SINCE",
	   COP.object_data::JSON->'AOF'->'BUS_DATA'->'NAT_OF_INDUSTRY'->>'VALUE' as "INDUSTRY_DESCRIPTION",         
	   coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'NAT_OF_BUSSINESS'->>'VALUE','NA') as "NATURE_OF_BUSINESS",     
	           case when (COP.object_data::JSON->'AOF'->'CA'->'ACTIV_MONEY'->>'VALUE'='--Select--' or 
                   COP.object_data::JSON->'AOF'->'CA'->'ACTIV_MONEY'->>'VALUE' = '' or 
                   COP.object_data::JSON->'AOF'->'CA'->'ACTIV_MONEY'->>'VALUE' is null )
             then 'NA'
             else COP.object_data::JSON->'AOF'->'CA'->'ACTIV_MONEY'->>'VALUE' end  as "ACTIVE_MONEY",
	   coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'KYC_DOCUMENT_TYPE'->>'VALUE','NA') as "ADDRESS_PROOF",
	   	   case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'IS_ID_PROOF'->>'VALUE' is not null OR
	              COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'IS_ID_PROOF'->>'VALUE'!='')
	        then  COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'IS_ID_PROOF'->>'VALUE'
	        else coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'KYC_DOCUMENT_TYPE'->>'VALUE','NA')
	        end as "IDENTITY_TYPE",
--(select first_name ||' '||last_name from tb_emp_hrms teh3 
--  where employee_number in (select tssh.emp_hierarchy_id 
--	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS
--	        where  DIS.object_pri_key_1 =COP.object_pri_key_1 and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
--	        and tssh.system_role ='DVU' and DIS.process_group ='DVU' and prc_grp_disp ='WIP'
--	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 and tssh.emp_hierarchy_id !='' 
--	        order by tssh.log_time ASC limit 1)) as "DVU_ASSIGNED_USER_NAME",
--(select first_name ||' '||last_name from tb_emp_hrms teh3 
--  where employee_number in (select tssh.emp_hierarchy_id 
--	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS
--	        where  DIS.object_pri_key_1 =COP.object_pri_key_1 and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
--	        and tssh.system_role ='DVU' and DIS.process_group ='DVU' and prc_grp_disp ='WIP'
--	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 and tssh.emp_hierarchy_id !='' 
--	        order by tssh.log_time ASC limit 1)) as "DVU_USER_NAME",	        
--(select TEH3.employee_number from tb_emp_hrms teh3 
--  where employee_number in (select tssh.emp_hierarchy_id 
--	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS
--	        where  DIS.object_pri_key_1 =COP.object_pri_key_1 and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
--	        and tssh.system_role ='DVU' and DIS.process_group ='DVU' and prc_grp_disp ='WIP'
--	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 and tssh.emp_hierarchy_id !='' 
--	        order by tssh.log_time ASC limit 1)) as "DVU_USER_EMP_CODE",
	      'Assisted Journey' as "LEAD_ORIGINATION",  
        COP.object_data::JSON->'AOF'->'WORK_VARIABLES'->>'AADHAAR_PAN' as "PAN_STATUS",
        COP.object_data::JSON->'AOF'->'WORK_VARIABLES'->>'AADHAAR_PAN_LINKING' as "PAN_AADHAR_LINKING_STATUS",
--CASE when (COP.text_2 is not null and COP.text_2!='') then 'Yes'
--       else 'No' end as "RE_OPENED_LEAD",	     	        
      'NA' as "RE_OPENED_LEAD",	     	        
        COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY_NON_PRIVY",
        coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP1_DOCTYPE'->>'VALUE','NA') as "ENTITY_DOC_1",
        coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP2_DOCTYPE'->>'VALUE','NA') as "ENTITY_DOC_2",
--        coalesce(COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value','NA') as "FINAL_CLASSIFICATION_IN_BCIF",  
 case when (COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' is not null AND 
            COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' !='')
      then COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value'
      when (COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' is null OR 
            COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' ='')
      then COP.object_data::JSON->'AOF'->'CA'->>'PRIVY_PRO_CLASSIFICATION'
      else 'NA' END as "FINAL_CLASSIFICATION_IN_BCIF",
--(select CONCAT(TEH.first_name ,' ',TEH.last_name )
--	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS,
--	        tb_emp_hrms teh , tb_function_roles_mst tfrm 
--	        where DIS.object_pri_key_1 =cop.object_pri_key_1
--	        and DIS.object_pri_key_1 =tssh.object_pri_key_1 
--	        and TEH."role" =TFRM.role_name 
--	        and TEH.employee_number = TSSH.emp_hierarchy_id 
--	        and tssh.system_role ='DVU' 
--	        and tssh.emp_hierarchy_id !=''
--	       order by tssh.log_time DESC limit 1) as "DVU_REASSIGNED_USER_NAME",
      (select CONCAT(TEH.first_name ,' ',TEH.last_name ) 
	        from  tb_btc_accesscontrol tssh , 
	         tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where TSSH.object_pri_key_1 =cop.object_pri_key_1
	        and TEH."role" =TFRM.role_name 
	        and TEH.employee_number = TSSH.emp_hierarchy_id 
	        and tssh.system_role ='DVU'  
	        and tssh.emp_hierarchy_id !=''
	       order by tssh.created_timestamp DESC  limit 1) as "DVU_CURRENT_ASSIGNED_USER_NAME",
(select TEH.employee_number 
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS,
	              tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where DIS.object_pri_key_1 =cop.object_pri_key_1
	        and DIS.object_pri_key_1 =tssh.object_pri_key_1 
	        and TEH."role" =TFRM.role_name 
	        and TEH.employee_number = TSSH.emp_hierarchy_id 
	        and tssh.system_role ='DVU' 
	        and tssh.emp_hierarchy_id !=''
	       order by tssh.log_time DESC limit 1) as "DVU_CURRENT_ASSIGNED_USER_ID",
 case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
(select status_remarks , section_id  from tb_lead_rework_details tlrd 
where object_pri_key_1 =COP.object_pri_key_1 
 and rework_iteration ='1' 
and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1 
					and fm.default_system_role_code ='DVU'))A)
    else 
(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
(select status_remarks , section_id  from tb_lead_rework_details tlrd 
where object_pri_key_1 =COP.object_pri_key_1 
 and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU')) 
and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1 
					and fm.default_system_role_code ='DVU'))A) end as  "DVU_REWORK_REASON1",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select lead_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='1'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1)
    else 
    (select lead_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
   and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU')) 
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_REMARK1",			         
 case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
(select status_remarks , section_id  from tb_lead_rework_details tlrd 
where object_pri_key_1 =COP.object_pri_key_1 
 and rework_iteration ='2' 
and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1 
					and fm.default_system_role_code ='DVU'))A)
    else 
(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
(select status_remarks , section_id  from tb_lead_rework_details tlrd 
where object_pri_key_1 =COP.object_pri_key_1 
 and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU')) 
and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1 
					and fm.default_system_role_code ='DVU'))A) end as  "DVU_REWORK_REASON2",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select lead_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='2'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1)
    else 
    (select lead_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
   and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU')) 
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_REMARK2",			         
 case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
(select status_remarks , section_id  from tb_lead_rework_details tlrd 
where object_pri_key_1 =COP.object_pri_key_1 
 and rework_iteration ='3' 
and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1 
					and fm.default_system_role_code ='DVU'))A)
    else 
(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
(select status_remarks , section_id  from tb_lead_rework_details tlrd 
where object_pri_key_1 =COP.object_pri_key_1 
 and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU')) 
and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1 
					and fm.default_system_role_code ='DVU'))A) end as  "DVU_REWORK_REASON3"	,
	case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select lead_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='3'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1)
    else 
    (select lead_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
   and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU')) 
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_REMARK3",
    case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='1'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1)
    else 
    (select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
      and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_DATE1",
   case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='2'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1)
    else 
    (select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
      and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_DATE2",
    case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='3'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1)
    else 
    (select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
      and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_DATE3",
   case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='1'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
       and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_USER1" ,	  
  case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='2'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
       and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_USER2",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='3'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
       and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_USER3" ,		  
  case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='1'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
    (select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "RM_REWORK_REMARK1",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='2'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
    (select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "RM_REWORK_REMARK2",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='3'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
    (select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "RM_REWORK_REMARK3",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='1'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
    (select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS')from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "RM_REWORK_REVERT_DATE1",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='2'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
    (select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS')from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "RM_REWORK_REVERT_DATE2",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='3'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
    (select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS')from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "RM_REWORK_REVERT_DATE3",
(select first_name||' '||last_name from tb_emp_hrms teh 
where employee_number in (select TBA.emp_id from tb_btc_accesscontrol tba 
 where tba.object_pri_key_1 =COP.object_pri_key_1 
  and TBA.system_role ='RM')) as "LAST_ACTION_RM"
  From Tb_Cop_Buss_Obj_Txn Cop
Where  Exists (Select 1 From Tb_Btc_Prc_Grp_Disp Disp Where Disp.Object_Pri_Key_1 = Cop.Object_Pri_Key_1
 )
 and case when V_CONSTITUTION = '' 
          then coalesce(COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY','NA')in ('SP','IN')
          else  coalesce(COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY','NA')= V_CONSTITUTION END
 and case when V_PRIVY_OPTION = '' 
          then (UPPER(COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE')in
                                     ('SELECT','PRIORITY PRIVY','BRANCH PRIVY','NON PRIVY') 
              or (COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE')is null )
          else  coalesce(COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE','NA')= V_PRIVY_OPTION END
 and case when V_FROM_DATE <>'' and V_TO_DATE <>''
          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) between cast(V_FROM_DATE as DATE) and  CAST(V_TO_DATE as DATE)
          when V_FROM_DATE ='' and V_TO_DATE <> ''
          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) < cast(V_TO_DATE as DATE)
          when V_FROM_DATE <>'' and V_TO_DATE = ''
          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) between cast(V_FROM_DATE as DATE)and CURRENT_DATE
          when V_FROM_DATE = '' and V_TO_DATE = ''
          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) <= CURRENT_DATE
     END
 and case when V_FIRST_PASS = '' 
          then ( COP.text_2 ='' or (COP.text_2!='' or COP.text_2 is not null))
          when V_FIRST_PASS = 'YES'
          then (COP.text_2 is not null or COP.text_2 !='')
          when V_FIRST_PASS = 'NO'
          then (COP.text_2 ='')end 
and case when V_ENTITY_DOC_1 = '' 
          then (coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP1_DOCTYPE'->>'VALUE','NA') is not null or 
                coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP1_DOCTYPE'->>'VALUE','NA') !='')
          else coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP1_DOCTYPE'->>'VALUE','NA') = V_ENTITY_DOC_1 end 
and case when V_ENTITY_DOC_2 = '' 
          then (coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP2_DOCTYPE'->>'VALUE','NA') is not null or 
                coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP2_DOCTYPE'->>'VALUE','NA') !='')
          else coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP2_DOCTYPE'->>'VALUE','NA') = V_ENTITY_DOC_2 end   
         )t;	


   
END IF;

if (v_data = '' or v_data is null)
then --v_data := '';
null;
END IF;
 OPEN x_result FOR SELECT 
            v_data  AS    "OBJECT";
              return x_result;     
            
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_lead_status_report_java(x_login_id character varying, x_role character varying, x_param character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data jsonb;
v_role varchar(100);
v_count int;
v_prc_grp VARCHAR(100);
v_prc_grp_disp VARCHAR(100);
V_FROM_DATE VARCHAR(100);
V_TO_DATE VARCHAR(100);
V_CONSTITUTION VARCHAR(100);
V_PRIVY_OPTION VARCHAR(100);
V_FIRST_PASS VARCHAR(100);
V_ENTITY_DOC_1 VARCHAR(100);
V_ENTITY_DOC_2 VARCHAR(100);
begin
   if x_param = 'OBJECT' then
     V_FROM_DATE :='';
     V_TO_DATE :='';
     V_CONSTITUTION :='';
     V_PRIVY_OPTION :='';
     V_FIRST_PASS :='';
     V_ENTITY_DOC_1 :='';
     V_ENTITY_DOC_2 :='';
   else
select json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_FROM_DATE',
      json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_TO_DATE',
     case when (select json_array_elements(cast(x_param as json)) ->'CONSTITUTION'->> 'code') is null
          then ''
          else (select json_array_elements(cast(x_param as json)) ->'CONSTITUTION'->> 'code')
          end ,
      case when (select json_array_elements(cast(x_param as json)) ->'PRIVY_OPTION'->> 'value') is null
           then ''
           else (select json_array_elements(cast(x_param as json)) ->'PRIVY_OPTION'->> 'value')
           end,
      case when (select json_array_elements(cast(x_param as json)) ->'First_pass'->> 'value') is null
           then ''
           else (select json_array_elements(cast(x_param as json)) ->'First_pass'->> 'value')
           end,
      case when (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_1'->> 'value') is null
           then ''
           else (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_1'->> 'value')
           end,
      case when (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_2'->> 'value') is null
           then ''
           else (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_2'->> 'value') END                        
      into V_FROM_DATE , V_TO_DATE , V_CONSTITUTION, V_PRIVY_OPTION, V_FIRST_PASS, V_ENTITY_DOC_1, V_ENTITY_DOC_2;
   end if;
   
  --if x_role in ('Product Supervisor','BSG') then
  
 open x_result for select tr.* from tb_lead_status_data tr
 where case when V_CONSTITUTION = ''
          then coalesce(tr.CONSTITUTION_CODE,'NA')in ('SP','IN')
          else  coalesce(tr.CONSTITUTION_CODE,'NA')= V_CONSTITUTION END
 and case when V_PRIVY_OPTION = ''
          then upper(coalesce(tr.PRIVY_OPTION,'NA')) in ('SELECT','PRIORITY PRIVY','BRANCH PRIVY','NON PRIVY')
          else  upper(coalesce(tr.PRIVY_OPTION,'NA')) = V_PRIVY_OPTION end 
 and case when V_FROM_DATE !='' and V_TO_DATE !=''
          then tr."DATE" between V_FROM_DATE::text and V_TO_DATE::text
          --cast(V_FROM_DATE as DATE) and  CAST(V_TO_DATE as DATE) 
          when V_FROM_DATE ='' and V_TO_DATE != ''
          then tr."DATE" < V_TO_DATE::text
          --then cast(tr."DATE" as DATE) < cast(V_TO_DATE as DATE)
          when V_FROM_DATE !='' and V_TO_DATE = ''
          then tr."DATE" between V_FROM_DATE::text and current_date::text 
          --then cast(tr."DATE" as DATE) between cast(V_FROM_DATE as DATE)and CURRENT_DATE
          when V_FROM_DATE = '' and V_TO_DATE = ''
          then tr."DATE" < current_date::text 
          --then cast(tr."DATE" as DATE)< CURRENT_DATE
     END
 and case when V_FIRST_PASS = ''
          then (tr."FirstPass" ='' or (tr."FirstPass"!='' AND tr."FirstPass" is not null))
          when V_FIRST_PASS = 'YES'
          then (tr."FirstPass" is not null and tr."FirstPass" !='')
          when V_FIRST_PASS = 'NO'
          then (tr."FirstPass" ='') end
and case when V_ENTITY_DOC_1 = ''
          then (coalesce(tr."ENTITY_DOC_1",'NA') is not null and
                coalesce(tr."ENTITY_DOC_1",'NA') !='')
          else coalesce(tr."ENTITY_DOC_1",'NA')= V_ENTITY_DOC_1 end
and case when V_ENTITY_DOC_2 = ''
          then (coalesce(tr."ENTITY_DOC_2",'NA') is not null and
                coalesce(tr."ENTITY_DOC_2",'NA') !='')
          else coalesce(tr."ENTITY_DOC_2",'NA')= V_ENTITY_DOC_2 end 

  ;
  return x_result;
--exception
--		when others then open x_result for select 'Failure' as res_msg;
--return X_RESULT;

  end;
  $function$
;

CREATE OR REPLACE FUNCTION public.sp_get_lead_status_report_java_first_pass(x_login_id character varying, x_role character varying, x_param character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data jsonb;
v_role varchar(100);
v_count int;
v_prc_grp VARCHAR(100);
v_prc_grp_disp VARCHAR(100);
V_FROM_DATE VARCHAR(100);
V_TO_DATE VARCHAR(100);
V_CONSTITUTION VARCHAR(100);
V_PRIVY_OPTION VARCHAR(100);
V_FIRST_PASS VARCHAR(100);
V_ENTITY_DOC_1 VARCHAR(100);
V_ENTITY_DOC_2 VARCHAR(100);
begin
   if x_param = 'OBJECT' then
     V_FROM_DATE :='';
     V_TO_DATE :='';
     V_CONSTITUTION :='';
     V_PRIVY_OPTION :='';
     V_FIRST_PASS :='';
     V_ENTITY_DOC_1 :='';
     V_ENTITY_DOC_2 :='';
   else
select json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_FROM_DATE',
      json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_TO_DATE',
     case when (select json_array_elements(cast(x_param as json)) ->'CONSTITUTION'->> 'code') is null
          then ''
          else (select json_array_elements(cast(x_param as json)) ->'CONSTITUTION'->> 'code')
          end ,
      case when (select json_array_elements(cast(x_param as json)) ->'PRIVY_OPTION'->> 'value') is null
           then ''
           else (select json_array_elements(cast(x_param as json)) ->'PRIVY_OPTION'->> 'value')
           end,
      case when (select json_array_elements(cast(x_param as json)) ->'First_pass'->> 'value') is null
           then ''
           else (select json_array_elements(cast(x_param as json)) ->'First_pass'->> 'value')
           end,
      case when (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_1'->> 'value') is null
           then ''
           else (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_1'->> 'value')
           end,
      case when (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_2'->> 'value') is null
           then ''
           else (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_2'->> 'value') END                        
      into V_FROM_DATE , V_TO_DATE , V_CONSTITUTION, V_PRIVY_OPTION, V_FIRST_PASS, V_ENTITY_DOC_1, V_ENTITY_DOC_2;
   end if;
   
  --if x_role in ('Product Supervisor','BSG') then
  
 open x_result for select  tr."LEAD_ID",
     tr."CUSTOMER_NAME",
    tr."CRN_OF_INDIVIDUAL_AUTHORISED_SIG",
    tr."ENTITY_NAME",
    tr."Entity_CRN",
    tr."MANDATE_HOLDER",
    tr."MANDATE_HOLDER_NAME",
    tr."ACCOUNT_NUMBER",
     tr."KIT_TYPE",
tr."FundingMode",
     tr."IP_AMOUNT",
    tr.constitution,
        tr."ReOpenedLead",
    tr."SEGMENT",
    tr."LEAD_ORIGINATION",
       tr."FINAL_CLASSIFICATION_IN_BCIF",
    tr."INDUSTRY_DESCRIPTION",
   tr."DEBIT_CARD",
     tr."EXISTING_CREDIT_FACILITY",
    tr."TYPE_OF_FACILITY",
    tr."LEAD_CREATED_DATE",
    tr."LG_CODE",
    tr."RM_CODE",
    tr."MANDATE_HOLDER_CRN",
    tr."RM_NAME",
    tr."LC_NAME",
    tr."PRODUCT_CODE",
    tr."LeadStatus",
    tr."PROMO_CODE",
    tr."LOB",
    tr."BRANCH_CODE",
    tr."BRANCH_NAME",
    tr."COCO",
    tr."RISK",
    tr."NATURE_OF_BUSINESS",
    tr."ACTIVE_MONEY",
    tr."ADDRESS_PROOF",
    tr."IDENTITY_TYPE",
     tr."PAN_STATUS",
    tr."PAN_AADHAR_LINKING_STATUS",
    tr."PRIVY_NON_PRIVY",
    tr."ENTITY_DOC_1",
    tr."ENTITY_DOC_2",
    tr."LEAD_CREATED_BY_LC",
    tr."LAST_MODIFIED_BY",
     tr."LAST_MODIFIED_BY_ROLE",
    tr."LAST_MODIFIED_DATE",
    tr."ACCOUNT_OPENED_DATE",
    tr."SOURCING_RM_SUPERVISOR_NAME",
    tr."SENT_TO_MID_OFFICE_DATE",
     tr."SENT_TO_DVU_DATE",
    tr."DVU_ASSIGNED_DATE",
    tr."MID_OFFICE_ASSIGNED_DATE",
    tr."DVU_ASSIGNED_USER_NAME",
    tr."MID_OFFICE_ASSIGNED_USER_NAME",
    tr."DVU_REASSIGNED_USER_NAME",
    tr."DVU_REASSIGNED_USER_ID",
     tr."MID_OFFICE_PENDING_DATE",
        tr."DVU_PENDING_DATE",
    tr."DVU_REWORK_REASON1",
    tr."DVU_REWORK_REASON2",
    tr."DVU_REWORK_REASON3",
    tr."DVU_REWORK_REMARK1",
    tr."DVU_REWORK_REMARK2",
    tr."DVU_REWORK_REMARK3",
    tr."DVU_REWORK_DATE1",
    tr."DVU_REWORK_DATE2",
    tr."DVU_REWORK_DATE3",
    tr."DVU_REWORK_USER1",
    tr."DVU_REWORK_USER2",
    tr."DVU_REWORK_USER3",
    tr."RM_REWORK_REMARK1",
    tr."RM_REWORK_REMARK2",
    tr."RM_REWORK_REMARK3",
    tr."RM_REWORK_REVERT_DATE1",
    tr."RM_REWORK_REVERT_DATE2",
    tr."RM_REWORK_REVERT_DATE3",
tr."LAST_ACTION_RM",
    tr.privy_option,    
    tr."DATE",
    --t.text_2 AS "FirstPass",
    '' as "FirstPass",
       tr.constitution_code from tb_lead_status_data tr
 where case when V_CONSTITUTION = ''
          then coalesce(tr.CONSTITUTION_CODE,'NA')in ('SP','IN')
          else  coalesce(tr.CONSTITUTION_CODE,'NA')= V_CONSTITUTION END
 and case when V_PRIVY_OPTION = ''
          then upper(coalesce(tr.PRIVY_OPTION,'NA')) in ('SELECT','PRIORITY PRIVY','BRANCH PRIVY','NON PRIVY')
          else  upper(coalesce(tr.PRIVY_OPTION,'NA')) = V_PRIVY_OPTION end 
 and case when V_FROM_DATE !='' and V_TO_DATE !=''
          then tr."DATE" between V_FROM_DATE::text and V_TO_DATE::text
          --cast(V_FROM_DATE as DATE) and  CAST(V_TO_DATE as DATE) 
          when V_FROM_DATE ='' and V_TO_DATE != ''
          then tr."DATE" < V_TO_DATE::text
          --then cast(tr."DATE" as DATE) < cast(V_TO_DATE as DATE)
          when V_FROM_DATE !='' and V_TO_DATE = ''
          then tr."DATE" between V_FROM_DATE::text and current_date::text 
          --then cast(tr."DATE" as DATE) between cast(V_FROM_DATE as DATE)and CURRENT_DATE
          when V_FROM_DATE = '' and V_TO_DATE = ''
          then tr."DATE" < current_date::text 
          --then cast(tr."DATE" as DATE)< CURRENT_DATE
     END
 and case when V_FIRST_PASS = ''
          then (tr."FirstPass" ='' or (tr."FirstPass"!='' AND tr."FirstPass" is not null))
          when V_FIRST_PASS = 'YES'
          then (tr."FirstPass" is not null and tr."FirstPass" !='')
          when V_FIRST_PASS = 'NO'
          then (tr."FirstPass" ='') end
and case when V_ENTITY_DOC_1 = ''
          then (coalesce(tr."ENTITY_DOC_1",'NA') is not null and
                coalesce(tr."ENTITY_DOC_1",'NA') !='')
          else coalesce(tr."ENTITY_DOC_1",'NA')= V_ENTITY_DOC_1 end
and case when V_ENTITY_DOC_2 = ''
          then (coalesce(tr."ENTITY_DOC_2",'NA') is not null and
                coalesce(tr."ENTITY_DOC_2",'NA') !='')
          else coalesce(tr."ENTITY_DOC_2",'NA')= V_ENTITY_DOC_2 end 

  ;
  return x_result;
--exception
--		when others then open x_result for select 'Failure' as res_msg;
--return X_RESULT;

  end;
  $function$
;

CREATE OR REPLACE FUNCTION public.sp_get_lead_status_report_new_test(x_login_id character varying, x_role character varying, x_param character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_role varchar(100);
v_count int;
v_prc_grp VARCHAR(100);
v_prc_grp_disp VARCHAR(100);
V_FROM_DATE VARCHAR(100);
V_TO_DATE VARCHAR(100);
V_CONSTITUTION VARCHAR(100);
V_PRIVY_OPTION VARCHAR(100);
V_FIRST_PASS VARCHAR(10);
V_ENTITY_DOC_1 VARCHAR(100);
V_ENTITY_DOC_2 VARCHAR(100);
begin
   if x_param = 'OBJECT' then
     V_FROM_DATE :='';
     V_TO_DATE :='';
     V_CONSTITUTION :='';
     V_PRIVY_OPTION :='';
     V_FIRST_PASS :='';
     V_ENTITY_DOC_1 :='';
     V_ENTITY_DOC_2 :='';
   else
select json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_FROM_DATE',
      json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_TO_DATE',
     case when (select json_array_elements(cast(x_param as json)) ->'CONSTITUTION'->> 'code') is null
          then ''
          else (select json_array_elements(cast(x_param as json)) ->'CONSTITUTION'->> 'code')
          end ,
      case when (select json_array_elements(cast(x_param as json)) ->'PRIVY_OPTION'->> 'value') is null
           then ''
           else (select json_array_elements(cast(x_param as json)) ->'PRIVY_OPTION'->> 'value')
           end,
      case when (select json_array_elements(cast(x_param as json)) ->'First_pass'->> 'value') is null
           then ''
           else (select json_array_elements(cast(x_param as json)) ->'First_pass'->> 'value')
           end,
      case when (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_1'->> 'value') is null
           then ''
           else (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_1'->> 'value')
           end,
      case when (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_2'->> 'value') is null
           then ''
           else (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_2'->> 'value') END                        
      into V_FROM_DATE , V_TO_DATE , V_CONSTITUTION, V_PRIVY_OPTION, V_FIRST_PASS, V_ENTITY_DOC_1, V_ENTITY_DOC_2;
   end if;
   
  if x_role in ('Product Supervisor','BSG') then
  open x_result for
  select json_agg(row_to_json(t))  from(
select tr.* from mv_lead_status_report tr
   where case when V_CONSTITUTION = ''
          then coalesce(tr.CONSTITUTION_CODE,'NA')in ('SP','IN')
          else  coalesce(tr.CONSTITUTION_CODE,'NA')= V_CONSTITUTION END
 and case when V_PRIVY_OPTION = ''
          then upper(coalesce(tr.PRIVY_OPTION,'NA')) in ('SELECT','PRIORITY PRIVY','BRANCH PRIVY','NON PRIVY')
          else  upper(coalesce(tr.PRIVY_OPTION,'NA')) = V_PRIVY_OPTION END
 and case when V_FROM_DATE <>'' and V_TO_DATE <>''
          then tr."DATE" between cast(V_FROM_DATE as DATE) and  CAST(V_TO_DATE as DATE)
          when V_FROM_DATE ='' and V_TO_DATE <> ''
          then cast(tr."DATE" as DATE) < cast(V_TO_DATE as DATE)
          when V_FROM_DATE <>'' and V_TO_DATE = ''
          then cast(tr."DATE" as DATE) between cast(V_FROM_DATE as DATE)and CURRENT_DATE
          when V_FROM_DATE = '' and V_TO_DATE = ''
          then cast(tr."DATE" as DATE) < CURRENT_DATE
     END
 and case when V_FIRST_PASS = ''
          then ( tr."FIRST_PASS" ='' or (tr."FIRST_PASS"!='' AND tr."FIRST_PASS" is not null))
          when V_FIRST_PASS = 'YES'
          then (tr."FIRST_PASS" is not null and tr."FIRST_PASS" !='')
          when V_FIRST_PASS = 'NO'
          then (tr."FIRST_PASS" ='')end
and case when V_ENTITY_DOC_1 = ''
          then (coalesce(tr."ENTITY_DOC_1",'NA') is not null and
                coalesce(tr."ENTITY_DOC_1",'NA') !='')
          else coalesce(tr."ENTITY_DOC_1",'NA')= V_ENTITY_DOC_1 end
and case when V_ENTITY_DOC_2 = ''
          then (coalesce(tr."ENTITY_DOC_2",'NA') is not null and
                coalesce(tr."ENTITY_DOC_2",'NA') !='')
          else coalesce(tr."ENTITY_DOC_2",'NA')= V_ENTITY_DOC_2 end
--
   )t;      
  return x_result;
 else
 open X_result for select 'Failure' as res_msg;
 
end if;

  end;
  $function$
;

CREATE OR REPLACE FUNCTION public.sp_get_lead_status_report_new_test_v1(x_login_id character varying, x_role character varying, x_param character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_role varchar(100);
v_count int;
v_prc_grp VARCHAR(100);
v_prc_grp_disp VARCHAR(100);
V_FROM_DATE VARCHAR(100);
V_TO_DATE VARCHAR(100);
V_CONSTITUTION VARCHAR(100);
V_PRIVY_OPTION VARCHAR(100);
V_FIRST_PASS VARCHAR(10);
V_ENTITY_DOC_1 VARCHAR(100);
V_ENTITY_DOC_2 VARCHAR(100);
begin
   if x_param = 'OBJECT' then
     V_FROM_DATE :='';
     V_TO_DATE :='';
     V_CONSTITUTION :='';
     V_PRIVY_OPTION :='';
     V_FIRST_PASS :='';
     V_ENTITY_DOC_1 :='';
     V_ENTITY_DOC_2 :='';
   else
select json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_FROM_DATE',
      json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_TO_DATE',
     case when (select json_array_elements(cast(x_param as json)) ->'CONSTITUTION'->> 'code') is null
          then ''
          else (select json_array_elements(cast(x_param as json)) ->'CONSTITUTION'->> 'code')
          end ,
      case when (select json_array_elements(cast(x_param as json)) ->'PRIVY_OPTION'->> 'value') is null
           then ''
           else (select json_array_elements(cast(x_param as json)) ->'PRIVY_OPTION'->> 'value')
           end,
      case when (select json_array_elements(cast(x_param as json)) ->'First_pass'->> 'value') is null
           then ''
           else (select json_array_elements(cast(x_param as json)) ->'First_pass'->> 'value')
           end,
      case when (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_1'->> 'value') is null
           then ''
           else (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_1'->> 'value')
           end,
      case when (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_2'->> 'value') is null
           then ''
           else (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_2'->> 'value') END                        
      into V_FROM_DATE , V_TO_DATE , V_CONSTITUTION, V_PRIVY_OPTION, V_FIRST_PASS, V_ENTITY_DOC_1, V_ENTITY_DOC_2;
   end if;
   
  if x_role in ('Product Supervisor','BSG') then
  open x_result for
  select json_agg(row_to_json(t))  from(
select tr.* from mv_lead_status_report tr
   where case when V_CONSTITUTION = ''
          then coalesce(tr.CONSTITUTION_CODE,'NA')in ('SP','IN')
          else  coalesce(tr.CONSTITUTION_CODE,'NA')= V_CONSTITUTION END
 and case when V_PRIVY_OPTION = ''
          then upper(coalesce(tr.PRIVY_OPTION,'NA')) in ('SELECT','PRIORITY PRIVY','BRANCH PRIVY','NON PRIVY')
          else  upper(coalesce(tr.PRIVY_OPTION,'NA')) = V_PRIVY_OPTION END
 and case when V_FROM_DATE <>'' and V_TO_DATE <>''
          then tr."DATE" between cast(V_FROM_DATE as DATE) and  CAST(V_TO_DATE as DATE)
          when V_FROM_DATE ='' and V_TO_DATE <> ''
          then cast(tr."DATE" as DATE) < cast(V_TO_DATE as DATE)
          when V_FROM_DATE <>'' and V_TO_DATE = ''
          then cast(tr."DATE" as DATE) between cast(V_FROM_DATE as DATE)and CURRENT_DATE
          when V_FROM_DATE = '' and V_TO_DATE = ''
          then cast(tr."DATE" as DATE) < CURRENT_DATE
     END
 and case when V_FIRST_PASS = ''
          then ( tr."FIRST_PASS" ='' or (tr."FIRST_PASS"!='' AND tr."FIRST_PASS" is not null))
          when V_FIRST_PASS = 'YES'
          then (tr."FIRST_PASS" is not null and tr."FIRST_PASS" !='')
          when V_FIRST_PASS = 'NO'
          then (tr."FIRST_PASS" ='')end
and case when V_ENTITY_DOC_1 = ''
          then (coalesce(tr."ENTITY_DOC_1",'NA') is not null and
                coalesce(tr."ENTITY_DOC_1",'NA') !='')
          else coalesce(tr."ENTITY_DOC_1",'NA')= V_ENTITY_DOC_1 end
and case when V_ENTITY_DOC_2 = ''
          then (coalesce(tr."ENTITY_DOC_2",'NA') is not null and
                coalesce(tr."ENTITY_DOC_2",'NA') !='')
          else coalesce(tr."ENTITY_DOC_2",'NA')= V_ENTITY_DOC_2 end
--
   )t;      
  return x_result;
 else
 open X_result for select 'Failure' as res_msg;
 
end if;

  end;
  $function$
;

CREATE OR REPLACE FUNCTION public.sp_get_lead_status_report_test(x_login_id character varying, x_role character varying, x_param character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_role varchar(100);
v_count int;
v_prc_grp VARCHAR(100);
v_prc_grp_disp VARCHAR(100);
V_FROM_DATE VARCHAR(100);
V_TO_DATE VARCHAR(100);
V_CONSTITUTION VARCHAR(100);
V_PRIVY_OPTION VARCHAR(100);
V_FIRST_PASS VARCHAR(10);
V_ENTITY_DOC_1 VARCHAR(100);
V_ENTITY_DOC_2 VARCHAR(100);
begin
--   if x_param = 'OBJECT' then 
--     V_FROM_DATE :='';
--     V_TO_DATE :='';
--     V_CONSTITUTION :='';
--     V_PRIVY_OPTION :='';
--     V_FIRST_PASS :='';
--     V_ENTITY_DOC_1 :='';
--     V_ENTITY_DOC_2 :='';
--   else 
--		select json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_FROM_DATE',
--		       json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_TO_DATE',
--		      case when (select json_array_elements(cast(x_param as json)) ->'CONSTITUTION'->> 'code') is null 
--		           then '' 
--		           else (select json_array_elements(cast(x_param as json)) ->'CONSTITUTION'->> 'code')
--		           end ,
--		       case when (select json_array_elements(cast(x_param as json)) ->'PRIVY_OPTION'->> 'value') is null 
--		            then ''
--		            else (select json_array_elements(cast(x_param as json)) ->'PRIVY_OPTION'->> 'value') 
--		            end, 
--		       case when (select json_array_elements(cast(x_param as json)) ->'First_pass'->> 'value') is null 
--		            then ''
--		            else (select json_array_elements(cast(x_param as json)) ->'First_pass'->> 'value') 
--		            end,		
--		       case when (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_1'->> 'value') is null 
--		            then ''
--		            else (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_1'->> 'value') 
--		            end,
--		       case when (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_2'->> 'value') is null 
--		            then ''
--		            else (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_2'->> 'value') END		            		            
--		       into V_FROM_DATE , V_TO_DATE , V_CONSTITUTION, V_PRIVY_OPTION, V_FIRST_PASS, V_ENTITY_DOC_1, V_ENTITY_DOC_2;
--   end if;
	if x_role in ('Product Supervisor','BSG') then 
	
 select json_agg(row_to_json(t)) into v_data from
( select 
       COP.object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID" ,       
       COP.object_data::JSON->'AOF'->'CA'->>'CRN_AUS' as "CRN_OF_INDIVIDUAL_AUTHORISED_SIG",
       COP.object_data::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "CUSTOMER_NAME" ,
       coalesce(COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY','NA') as "Entity_CRN",
       coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",       
       coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADD_MHOLDER'->>'VALUE','NA') as "MANDATE_HOLDER",
       coalesce(COP.object_data::JSON->'AOF'->'CA'->>'CRN_MANDATE','NA') as "MANDATE_HOLDER_CRN",                                    
       coalesce(COP.object_data::JSON->'AOF'->'WORK_VARIABLES'->'MH'->>'ID_NAME_ADD','NA') as "MANDATE_HOLDER_NAME",
       COP.object_data::JSON->'AOF'->'CA'->>'ACCOUNT_NO' as "ACCOUNT_NUMBER",
--      (select tbpgd.modified_timestamp from tb_btc_prc_grp_disp tbpgd 
--		     where tbpgd.object_pri_key_1 =COP.object_pri_key_1 
--		      AND process_group ='ACCOUNT'
--		      and prc_grp_disp ='SUCCESS' ) as "ACCOUNT_ACTIVATION_DATE",
        COP.object_data::JSON->'AOF'->'CA'->'KIT_TYPE'->>'VALUE' as "KIT_TYPE",
--      COP.object_data::JSON->'AOF'->'CA'->'CPV1'->'IP_TYPE'->>'VALUE' as "FUNDING_MODE",
       'Cheque' as "FUNDING_MODE",
        COP.object_data::JSON->'AOF'->'CA'->>'CHQ_AMOUNT' as "IP_AMOUNT",
                case when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
             then 'Individual'
             when COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
             then 'Sole Proprietor'end  as "CONSTITUTION",
        COP.object_data::JSON->'AOF'->'CA'->'DEBIT_CARD_TYPE'->>'VALUE' as "DEBIT_CARD",
        coalesce(COP.object_data::JSON->'AOF'->'CA'->'CREDIT_FACILITIES'->>'VALUE','NA') as "EXISTING_CREDIT_FACILITY",
        COP.object_data::JSON->'AOF'->'CA'->'ANNEXURE_1_CREDIT_FACILITY_TYPE'->>'VALUE' as "TYPE_OF_FACILITY",
        cop.device_create_timestamp as "LEAD_CREATED_DATE",
        (Select employee_number from tb_emp_hrms teh 
	        where teh.employee_number= cop.login_id ) as "LEAD_CREATED_BY_LC",
         COP.object_data::JSON->'AOF'->>'RM_CODE' as "RM_CODE",	        
	    (Select first_name || ' ' || last_name from tb_emp_hrms teh 
	                 where teh.employee_number= cop.login_id ) as "LC_NAME",
         COP.object_data::JSON->'AOF'->>'LG_CODE' as "LG_CODE",
	    (Select first_name || ' ' || last_name from tb_emp_hrms teh 
	        where teh.employee_number= cop.login_id ) as "RM_NAME",
       (COP.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'CODE') || ' - '|| 
        (COP.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE') as "PRODUCT_CODE",
--	 (select 'ACCOUNT ACTIVATED' from tb_btc_prc_grp_disp tbpgd 
--		where tbpgd.object_pri_key_1 =COP.object_pri_key_1 
--		AND process_group ='ACCOUNT'
--		  and prc_grp_disp ='SUCCESS' ) as "LEAD_STATUS",
--           cop.text_1 as "LEAD_STATUS",
              (select process_name from tb_process_group_nomenclature tpgn 
          where COP.text_1 = tpgn.text_1 ) AS"LEAD_STATUS",
	  COP.modify_emp_id as "LAST_MODIFIED_BY",
      (select distinct tfrm.default_system_role_code from tb_emp_hrms tehh ,
           tb_function_roles_mst tfrm , tb_cop_buss_obj_txn tcbot 
			 where tehh."role" = tfrm.role_name
			  and  tcbot.modify_emp_id = tehh.employee_number 
			  and tcbot.object_pri_key_1 =cop.object_pri_key_1 limit 1 ) as "LAST_MODIFIED_BY_ROLE", 
	    COP.device_modify_timestamp as "LAST_MODIFIED_DATE",
	(select TO_CHAR(end_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_btc_prc_grp_disp tbpgd 
          where tbpgd.object_pri_key_1 =COP.object_pri_key_1 
           and process_group ='ACCOUNT'and prc_grp_disp ='SUCCESS') as "ACCOUNT_OPENED_DATE",
       'Retail Liabilities' as "SEGMENT",
       coalesce(COP.object_data::JSON->'AOF'->'PROMO'->>'VALUE','NA') as "PROMO_CODE",         
       coalesce(COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value','NA') as "CLASSIFICATION_SELECTED_BY_DVU",
        COP.object_data::JSON->'AOF'->'LOB'->>'VALUE' as "LOB",
        COP.object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE' as "BRANCH_CODE",
        COP.object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "BRANCH_NAME",
        COP.object_data::JSON->'AOF'->'COCO_CODE'->>'VALUE' as "COCO",
       CASE when (COP.text_2 is not null OR COP.text_2 !='') then 'Yes'
            else 'No' end as "FIRST_PASS",
 		(select TEH.FIRST_NAME ||' '||TEH.LAST_NAME from tb_emp_hrms teh  
           where TEH.employee_number in (select SUPERVISOR_EMP_NO from tb_emp_hrms teh2 , tb_btc_accesscontrol tba2 
		                                 where teh2.EMPLOYEE_NUMBER =tba2.emp_id 
		                                  and tba2.object_pri_key_1 =cop.object_pri_key_1 
		                                  and tba2.system_role ='RM')) as "SOURCING_RM_SUPERVISOR_NAME",
    (select TO_CHAR(DIS.created_timestamp ,'YYYY-MM-DD HH24:MI:SS')
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS
	        where  DIS.object_pri_key_1 =cop.object_pri_key_1 and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
	        and tssh.system_role ='RCU' and DIS.process_group ='RCU' and prc_grp_disp ='WIP'
	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 and tssh.emp_id !='' 
	        order by tssh.log_time ASC 
	       limit 1) as "SENT_TO_RCU_DATE",
 (select TO_CHAR(DIS.created_timestamp ,'YYYY-MM-DD HH24:MI:SS')  
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS
	        where  DIS.object_pri_key_1 =COP.object_pri_key_1   
	        and tssh.system_role ='DVU' and DIS.process_group ='DVU' and prc_grp_disp ='USERWAIT'
	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 and tssh.emp_id !='' 
	        order by tssh.log_time ASC 
	       limit 1) as "SENT_TO_DVU_DATE",
(select TO_CHAR(TSSH.log_time,'YYYY-MM-DD HH24:MI:SS') 
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS, tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where  DIS.object_pri_key_1 =cop.object_pri_key_1
	        and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
	        and TEH."role" =TFRM.role_name 
	        and TEH.employee_number = TSSH.emp_hierarchy_id 
	        and tssh.system_role ='DVU' 
--	        and DIS.process_group ='DVU' and prc_grp_disp ='WIP'
	       and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 
	       and tssh.modified_by ='reassign_proc'
	        and tssh.emp_hierarchy_id !='' 
	        order by tssh.log_time DESC 
	       limit 1) as "DVU_FIRST_ASSIGNED_DATE",
--(select first_name ||' '||last_name from tb_emp_hrms teh3 
--  where employee_number in (select tssh.emp_hierarchy_id 
--	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS
--	        where  DIS.object_pri_key_1 =COP.object_pri_key_1 and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
--	        and tssh.system_role ='DVU' and DIS.process_group ='DVU' and prc_grp_disp ='WIP'
--	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 and tssh.emp_hierarchy_id !='' 
--	        order by tssh.log_time ASC limit 1)) as "DVU_ASSIGNED_USER_NAME",
   case when (select TSSH.modified_by 
	        from  tb_btc_accesscontrol_hist tssh  
	        where TSSH.object_pri_key_1 =COP.object_pri_key_1 
	        and tssh.system_role ='DVU' 
	        and modified_by ='reassign_proc'
	       order by tssh.log_time desc LIMIT 1) ='reassign_proc' 
     then (select CONCAT(TEH.first_name ,' ',TEH.last_name )
	       from  tb_btc_accesscontrol_hist tssh , tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where TSSH.object_pri_key_1 =cop.object_pri_key_1 
	        and TEH."role" =TFRM.role_name 
	        and TEH.employee_number = TSSH.emp_hierarchy_id 
	        and tssh.system_role ='DVU' 
	       order by tssh.log_time   limit 1) 
     else '' end as "DVU_FIRST_ASSIGNED_USER_NAME",	        
case when COP.text_1 ='DVU_ASSIGNED'
       	    then (select CONCAT(CURRENT_DATE - cast(TO_CHAR(DIS.start_timestamp,'YYYY-MM-DD')as DATE)  ,' days')   
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS, tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where  DIS.object_pri_key_1 =cop.object_pri_key_1 and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
	        and TEH."role" =TFRM.role_name and TEH.employee_number = TSSH.emp_id 
	        and tssh.system_role ='DVU' and DIS.process_group ='DVU' and prc_grp_disp ='WIP'
	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 and tssh.emp_id !='' 
	        order by tssh.log_time ASC limit 1) 
	         end as "DVU_PENDING_SINCE",
        COP.object_data::JSON->'AOF'->'RISK_PROFILE'->>'VALUE' as "RISK",
 (select TO_CHAR(DIS.created_timestamp ,'YYYY-MM-DD HH24:MI:SS') 
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS
--	        , tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where  DIS.object_pri_key_1 =COP.object_pri_key_1 and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
--	        and TEH."role" =TFRM.role_name and TEH.employee_number = TSSH.emp_id 
	        and tssh.system_role ='RCU' and DIS.process_group ='RCU' and prc_grp_disp ='WIP'
	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 and tssh.emp_id !='' 
	        order by tssh.log_time ASC limit 1) as "RCU_ASSIGNED_DATE",
(select first_name ||' '||last_name from tb_emp_hrms teh3 
  where employee_number in(select  tssh.emp_id
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS
	        where  DIS.object_pri_key_1 =COP.object_pri_key_1 and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
	        and tssh.system_role ='RCU' and DIS.process_group ='RCU' and prc_grp_disp ='WIP'
	        and tssh.emp_id !='' 
	        and tssh.config_id ='44'
	        order by tssh.log_time ASC limit 1)) as "RCU_ASSIGNED_USER_NAME",  
case when COP.text_1 ='RCU_ASSIGNED'
       	    then (select CONCAT(CURRENT_DATE - cast(TO_CHAR(DIS.start_timestamp,'YYYY-MM-DD')as DATE)  ,' days')
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS, tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where  DIS.object_pri_key_1 =cop.object_pri_key_1 and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
	        and TEH."role" =TFRM.role_name and TEH.employee_number = TSSH.emp_id 
	        and tssh.system_role ='RCU' and DIS.process_group ='RCU' and prc_grp_disp ='WIP'
	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 and tssh.emp_id !='' 
	        order by tssh.log_time ASC limit 1) 
	         end as "RCU_PENDING_SINCE",
	   COP.object_data::JSON->'AOF'->'BUS_DATA'->'NAT_OF_INDUSTRY'->>'VALUE' as "INDUSTRY_DESCRIPTION",         
	   coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'NAT_OF_BUSSINESS'->>'VALUE','NA') as "NATURE_OF_BUSINESS",     
	           case when (COP.object_data::JSON->'AOF'->'CA'->'ACTIV_MONEY'->>'VALUE'='--Select--' or 
                   COP.object_data::JSON->'AOF'->'CA'->'ACTIV_MONEY'->>'VALUE' = '' or 
                   COP.object_data::JSON->'AOF'->'CA'->'ACTIV_MONEY'->>'VALUE' is null )
             then 'NA'
             else COP.object_data::JSON->'AOF'->'CA'->'ACTIV_MONEY'->>'VALUE' end  as "ACTIVE_MONEY",
	   coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'KYC_DOCUMENT_TYPE'->>'VALUE','NA') as "ADDRESS_PROOF",
	   	   case when (COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'IS_ID_PROOF'->>'VALUE' is not null OR
	              COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'IS_ID_PROOF'->>'VALUE'!='')
	        then  COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'IS_ID_PROOF'->>'VALUE'
	        else coalesce(COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'KYC_DOCUMENT_TYPE'->>'VALUE','NA')
	        end as "IDENTITY_TYPE",
--(select first_name ||' '||last_name from tb_emp_hrms teh3 
--  where employee_number in (select tssh.emp_hierarchy_id 
--	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS
--	        where  DIS.object_pri_key_1 =COP.object_pri_key_1 and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
--	        and tssh.system_role ='DVU' and DIS.process_group ='DVU' and prc_grp_disp ='WIP'
--	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 and tssh.emp_hierarchy_id !='' 
--	        order by tssh.log_time ASC limit 1)) as "DVU_ASSIGNED_USER_NAME",
--(select first_name ||' '||last_name from tb_emp_hrms teh3 
--  where employee_number in (select tssh.emp_hierarchy_id 
--	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS
--	        where  DIS.object_pri_key_1 =COP.object_pri_key_1 and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
--	        and tssh.system_role ='DVU' and DIS.process_group ='DVU' and prc_grp_disp ='WIP'
--	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 and tssh.emp_hierarchy_id !='' 
--	        order by tssh.log_time ASC limit 1)) as "DVU_USER_NAME",	        
--(select TEH3.employee_number from tb_emp_hrms teh3 
--  where employee_number in (select tssh.emp_hierarchy_id 
--	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS
--	        where  DIS.object_pri_key_1 =COP.object_pri_key_1 and  DIS.object_pri_key_1 =tssh.object_pri_key_1 
--	        and tssh.system_role ='DVU' and DIS.process_group ='DVU' and prc_grp_disp ='WIP'
--	        and  TSSH.object_pri_key_1 =DIS.object_pri_key_1 and tssh.emp_hierarchy_id !='' 
--	        order by tssh.log_time ASC limit 1)) as "DVU_USER_EMP_CODE",
	      'Assisted Journey' as "LEAD_ORIGINATION",  
        COP.object_data::JSON->'AOF'->'WORK_VARIABLES'->>'AADHAAR_PAN' as "PAN_STATUS",
        COP.object_data::JSON->'AOF'->'WORK_VARIABLES'->>'AADHAAR_PAN_LINKING' as "PAN_AADHAR_LINKING_STATUS",
--CASE when (COP.text_2 is not null and COP.text_2!='') then 'Yes'
--       else 'No' end as "RE_OPENED_LEAD",	     	        
      'NA' as "RE_OPENED_LEAD",	     	        
        COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY_NON_PRIVY",
        coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP1_DOCTYPE'->>'VALUE','NA') as "ENTITY_DOC_1",
        coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP2_DOCTYPE'->>'VALUE','NA') as "ENTITY_DOC_2",
--        coalesce(COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value','NA') as "FINAL_CLASSIFICATION_IN_BCIF",  
 case when (COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' is not null AND 
            COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' !='')
      then COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value'
      when (COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' is null OR 
            COP.object_data::JSON->'PRODUCTSELECTION_CHOICE'->>'value' ='')
      then COP.object_data::JSON->'AOF'->'CA'->>'PRIVY_PRO_CLASSIFICATION'
      else 'NA' END as "FINAL_CLASSIFICATION_IN_BCIF",
--(select CONCAT(TEH.first_name ,' ',TEH.last_name )
--	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS,
--	        tb_emp_hrms teh , tb_function_roles_mst tfrm 
--	        where DIS.object_pri_key_1 =cop.object_pri_key_1
--	        and DIS.object_pri_key_1 =tssh.object_pri_key_1 
--	        and TEH."role" =TFRM.role_name 
--	        and TEH.employee_number = TSSH.emp_hierarchy_id 
--	        and tssh.system_role ='DVU' 
--	        and tssh.emp_hierarchy_id !=''
--	       order by tssh.log_time DESC limit 1) as "DVU_REASSIGNED_USER_NAME",
      (select CONCAT(TEH.first_name ,' ',TEH.last_name ) 
	        from  tb_btc_accesscontrol tssh , 
	         tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where TSSH.object_pri_key_1 =cop.object_pri_key_1
	        and TEH."role" =TFRM.role_name 
	        and TEH.employee_number = TSSH.emp_hierarchy_id 
	        and tssh.system_role ='DVU'  
	        and tssh.emp_hierarchy_id !=''
	       order by tssh.created_timestamp DESC  limit 1) as "DVU_CURRENT_ASSIGNED_USER_NAME",
(select TEH.employee_number 
	        from  tb_btc_accesscontrol_hist tssh , tb_btc_prc_grp_disp_hist DIS,
	              tb_emp_hrms teh , tb_function_roles_mst tfrm 
	        where DIS.object_pri_key_1 =cop.object_pri_key_1
	        and DIS.object_pri_key_1 =tssh.object_pri_key_1 
	        and TEH."role" =TFRM.role_name 
	        and TEH.employee_number = TSSH.emp_hierarchy_id 
	        and tssh.system_role ='DVU' 
	        and tssh.emp_hierarchy_id !=''
	       order by tssh.log_time DESC limit 1) as "DVU_CURRENT_ASSIGNED_USER_ID",
 case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
(select status_remarks , section_id  from tb_lead_rework_details tlrd 
where object_pri_key_1 =COP.object_pri_key_1 
 and rework_iteration ='1' 
and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1 
					and fm.default_system_role_code ='DVU'))A)
    else 
(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
(select status_remarks , section_id  from tb_lead_rework_details tlrd 
where object_pri_key_1 =COP.object_pri_key_1 
 and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU')) 
and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1 
					and fm.default_system_role_code ='DVU'))A) end as  "DVU_REWORK_REASON1",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select lead_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='1'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1)
    else 
    (select lead_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
   and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU')) 
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_REMARK1",			         
 case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
(select status_remarks , section_id  from tb_lead_rework_details tlrd 
where object_pri_key_1 =COP.object_pri_key_1 
 and rework_iteration ='2' 
and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1 
					and fm.default_system_role_code ='DVU'))A)
    else 
(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
(select status_remarks , section_id  from tb_lead_rework_details tlrd 
where object_pri_key_1 =COP.object_pri_key_1 
 and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU')) 
and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1 
					and fm.default_system_role_code ='DVU'))A) end as  "DVU_REWORK_REASON2",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select lead_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='2'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1)
    else 
    (select lead_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
   and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU')) 
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_REMARK2",			         
 case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
(select status_remarks , section_id  from tb_lead_rework_details tlrd 
where object_pri_key_1 =COP.object_pri_key_1 
 and rework_iteration ='3' 
and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1 
					and fm.default_system_role_code ='DVU'))A)
    else 
(select STRING_AGG( section_id|| ' - ' || status_remarks,' , ' )from
(select status_remarks , section_id  from tb_lead_rework_details tlrd 
where object_pri_key_1 =COP.object_pri_key_1 
 and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU')) 
and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1 
					and fm.default_system_role_code ='DVU'))A) end as  "DVU_REWORK_REASON3"	,
	case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select lead_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='3'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1)
    else 
    (select lead_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
   and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU')) 
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_REMARK3",
    case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='1'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1)
    else 
    (select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
      and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_DATE1",
   case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='2'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1)
    else 
    (select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
      and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_DATE2",
    case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='3'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1)
    else 
    (select TO_CHAR(created_timestamp,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
      and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_DATE3",
   case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='1'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
       and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_USER1" ,	  
  case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='2'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
       and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_USER2",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='3'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
(select tlrd.EMP_ID from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
       and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "DVU_REWORK_USER3" ,		  
  case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='1'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
    (select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "RM_REWORK_REMARK1",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='2'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
    (select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "RM_REWORK_REMARK2",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='3'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
    (select tlrd.rm_se_remarks from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "RM_REWORK_REMARK3",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='1'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
    (select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS')from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration in (select  max(rework_iteration )-2 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "RM_REWORK_REVERT_DATE1",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='2'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
    (select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS')from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration in (select  max(rework_iteration )-1 from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "RM_REWORK_REVERT_DATE2",
case when (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))<=3
     then 
(select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS') from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration ='3'
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) 
    else 
    (select TO_CHAR(tlrd.rm_se_date,'YYYY-MM-DD HH24:MI:SS')from tb_lead_rework_details tlrd 
    where object_pri_key_1 =COP.object_pri_key_1
    and rework_iteration in (select  max(rework_iteration ) from tb_lead_rework_details 
						   where object_pri_key_1 =COP.object_pri_key_1 
						    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
						                     tb_function_roles_mst fm , tb_section_status tss 
											where teh."role" = fm.role_name 
											and tss."role" =teh.employee_number 
											and tss.object_pri_key_1 =COP.object_pri_key_1 
											and fm.default_system_role_code ='DVU'))
    and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =COP.object_pri_key_1
					and fm.default_system_role_code ='DVU')
					limit 1) end as "RM_REWORK_REVERT_DATE3",
(select first_name||' '||last_name from tb_emp_hrms teh 
where employee_number in (select TBA.emp_id from tb_btc_accesscontrol tba 
 where tba.object_pri_key_1 =COP.object_pri_key_1 
  and TBA.system_role ='RM')) as "LAST_ACTION_RM"
 From Tb_Cop_Buss_Obj_Txn Cop
Where  Exists (Select 1 From Tb_Btc_Prc_Grp_Disp Disp Where Disp.Object_Pri_Key_1 = Cop.Object_Pri_Key_1
 )
-- and case when V_CONSTITUTION = '' 
--          then coalesce(COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY','NA')in ('SP','IN')
--          else  coalesce(COP.object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY','NA')= V_CONSTITUTION END
-- and case when V_PRIVY_OPTION = '' 
--          then (UPPER(COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE')in
--          ('SELECT','PRIORITY PRIVY','BRANCH PRIVY','NON PRIVY') or (COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE')is null )
--          else  coalesce(COP.object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE','NA')= V_PRIVY_OPTION END
-- and case when V_FROM_DATE <>'' and V_TO_DATE <>''
--          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) between cast(V_FROM_DATE as DATE) and  CAST(V_TO_DATE as DATE)
--          when V_FROM_DATE ='' and V_TO_DATE <> ''
--          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) < cast(V_TO_DATE as DATE)
--          when V_FROM_DATE <>'' and V_TO_DATE = ''
--          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) between cast(V_FROM_DATE as DATE)and CURRENT_DATE
--          when V_FROM_DATE = '' and V_TO_DATE = ''
--          then cast(TO_CHAR(cop.device_create_timestamp ,'YYYY-MM-DD')as DATE) <= CURRENT_DATE
--     END
-- and case when V_FIRST_PASS = '' 
--          then ( COP.text_2 ='' or (COP.text_2!='' AND COP.text_2 is not null))
--          when V_FIRST_PASS = 'YES'
--          then (COP.text_2 is not null and COP.text_2 !='')
--          when V_FIRST_PASS = 'NO'
--          then (COP.text_2 ='')end 
--and case when V_ENTITY_DOC_1 = '' 
--          then (coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP1_DOCTYPE'->>'VALUE','NA') is not null and 
--                coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP1_DOCTYPE'->>'VALUE','NA') !='')
--          else coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP1_DOCTYPE'->>'VALUE','NA') = V_ENTITY_DOC_1 end 
--and case when V_ENTITY_DOC_2 = '' 
--          then (coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP2_DOCTYPE'->>'VALUE','NA') is not null and 
--                coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP2_DOCTYPE'->>'VALUE','NA') !='')
--          else coalesce(COP.object_data::JSON->'AOF'->'BUS_DATA'->'EP2_DOCTYPE'->>'VALUE','NA') = V_ENTITY_DOC_2 end   
         )t;	


   
END IF;

if (v_data = '' or v_data is null)
then --v_data := '';
null;
END IF;
 OPEN x_result FOR SELECT 
            v_data  AS    "OBJECT";
              return x_result;     
            
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_lead_status_report_v2(x_login_id character varying, x_role character varying, x_param character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_role varchar(100);
v_count int;
v_prc_grp VARCHAR(100);
v_prc_grp_disp VARCHAR(100);
V_FROM_DATE VARCHAR(100);
V_TO_DATE VARCHAR(100);
V_CONSTITUTION VARCHAR(100);
V_PRIVY_OPTION VARCHAR(100);
V_FIRST_PASS VARCHAR(10);
V_ENTITY_DOC_1 VARCHAR(100);
V_ENTITY_DOC_2 VARCHAR(100);
begin
   if x_param = 'OBJECT' then
     V_FROM_DATE :='';
     V_TO_DATE :='';
     V_CONSTITUTION :='';
     V_PRIVY_OPTION :='';
     V_FIRST_PASS :='';
     V_ENTITY_DOC_1 :='';
     V_ENTITY_DOC_2 :='';
   else
select json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_FROM_DATE',
      json_array_elements(cast(x_param as json)) ->> 'LEAD_CREATED_TO_DATE',
     case when (select json_array_elements(cast(x_param as json)) ->'CONSTITUTION'->> 'code') is null
          then ''
          else (select json_array_elements(cast(x_param as json)) ->'CONSTITUTION'->> 'code')
          end ,
      case when (select json_array_elements(cast(x_param as json)) ->'PRIVY_OPTION'->> 'value') is null
           then ''
           else (select json_array_elements(cast(x_param as json)) ->'PRIVY_OPTION'->> 'value')
           end,
      case when (select json_array_elements(cast(x_param as json)) ->'First_pass'->> 'value') is null
           then ''
           else (select json_array_elements(cast(x_param as json)) ->'First_pass'->> 'value')
           end,
      case when (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_1'->> 'value') is null
           then ''
           else (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_1'->> 'value')
           end,
      case when (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_2'->> 'value') is null
           then ''
           else (select json_array_elements(cast(x_param as json)) ->'Entity_Doc_2'->> 'value') END                        
      into V_FROM_DATE , V_TO_DATE , V_CONSTITUTION, V_PRIVY_OPTION, V_FIRST_PASS, V_ENTITY_DOC_1, V_ENTITY_DOC_2;
   end if;
if x_role in ('Product Supervisor','BSG') then

 select json_agg(row_to_json(t)) into v_data from
(select tr.* from mv_lead_status_report tr
   where case when V_CONSTITUTION = ''
          then coalesce(tr.CONSTITUTION_CODE,'NA')in ('SP','IN')
          else  coalesce(tr.CONSTITUTION_CODE,'NA')= V_CONSTITUTION END
 and case when V_PRIVY_OPTION = ''
          then upper(coalesce(tr.PRIVY_OPTION,'NA')) in ('SELECT','PRIORITY PRIVY','BRANCH PRIVY','NON PRIVY')
          else  upper(coalesce(tr.PRIVY_OPTION,'NA')) = V_PRIVY_OPTION END
 and case when V_FROM_DATE <>'' and V_TO_DATE <>''
          then tr."DATE" between cast(V_FROM_DATE as DATE) and  CAST(V_TO_DATE as DATE)
          when V_FROM_DATE ='' and V_TO_DATE <> ''
          then cast(tr."DATE" as DATE) < cast(V_TO_DATE as DATE)
          when V_FROM_DATE <>'' and V_TO_DATE = ''
          then cast(tr."DATE" as DATE) between cast(V_FROM_DATE as DATE)and CURRENT_DATE
          when V_FROM_DATE = '' and V_TO_DATE = ''
          then cast(tr."DATE" as DATE) < CURRENT_DATE
     END
 and case when V_FIRST_PASS = ''
          then ( tr."FIRST_PASS" ='' or (tr."FIRST_PASS"!='' AND tr."FIRST_PASS" is not null))
          when V_FIRST_PASS = 'YES'
          then (tr."FIRST_PASS" is not null and tr."FIRST_PASS" !='')
          when V_FIRST_PASS = 'NO'
          then (tr."FIRST_PASS" ='')end
and case when V_ENTITY_DOC_1 = ''
          then (coalesce(tr."ENTITY_DOC_1",'NA') is not null and
                coalesce(tr."ENTITY_DOC_1",'NA') !='')
          else coalesce(tr."ENTITY_DOC_1",'NA')= V_ENTITY_DOC_1 end
and case when V_ENTITY_DOC_2 = ''
          then (coalesce(tr."ENTITY_DOC_2",'NA') is not null and
                coalesce(tr."ENTITY_DOC_2",'NA') !='')
          else coalesce(tr."ENTITY_DOC_2",'NA')= V_ENTITY_DOC_2 end
         
     limit 1000    )t;


   
END IF;

if (v_data = '' or v_data is null)
then --v_data := '';
null;
END IF;
 OPEN x_result FOR SELECT
            v_data  AS    "OBJECT";
              return x_result;    
           
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_lob_bo(x_login_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
DECLARE 
X_RESULT refcursor:='cur';
v_string_tab TEXT;
P_STRING_FINAL   TEXT;
begin
	
	
	      SELECT
        REPLACE(CONCAT('{"object": [{"CODE": " ","VALUE": "SELECT"},', ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(T))), '}'),'},[{','},{') into P_STRING_FINAL
--        REPLACE(cast(ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(T)))as varchar),'},[{','},{') into P_STRING_FINAL
      FROM (  select value_code as "CODE", value_code||  ' - ' ||value_desc  as "VALUE"
		from tb_lov_mst
		where property ='LOB')t;
	

--   P_STRING_FINAL :=  CONCAT ('{  "object_data" : ', v_string_tab, '}');

   OPEN X_RESULT FOR SELECT P_STRING_FINAL as "DATA";
   RETURN X_RESULT;
END; $function$
;

CREATE OR REPLACE FUNCTION public.sp_get_lov_master_data(x_master_type character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
  X_DATA_OBJECT REFCURSOR;
BEGIN
  OPEN X_DATA_OBJECT FOR
  SELECT
    DATA_OBJECT
  FROM TB_MASTER_DATA_OBJS
  WHERE MASTER_TYPE = X_MASTER_TYPE;
  RETURN X_DATA_OBJECT;


END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_object_for_consent(x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_login_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_count int;
v_login_id varchar(20);
begin
select count(*) into v_count from tb_cop_buss_obj_txn tcbot 
 where object_pri_key_1 = x_object_pri_key_1
  and  coalesce(object_pri_key_2,'NA') = coalesce(x_object_pri_key_2,'NA')
  and  coalesce(object_pri_key_3,'NA') = coalesce(x_object_pri_key_3,'NA');
  
  select login_id into v_login_id from tb_cop_buss_obj_txn tcbot 
   where object_pri_key_1=x_object_pri_key_1;
  
 if v_count> 0 then 

           OPEN x_result FOR 
		       select object_data as "OBJECT" , 
			          (select distinct employee_number  from tb_emp_hrms hr
			                   where employee_number = tcbot.login_id 
			                     and hr.employee_number = tcbot.login_id) as "emp_code",
  			          (select distinct first_name  from tb_emp_hrms hr 
  			                  where employee_number = tcbot.login_id
  			                    and hr.employee_number = tcbot.login_id) as "emp_name", -- added by vipul
			          (select lob_code  from tb_emp_hrms hr 
			                     where employee_number = tcbot.login_id 
			                     and hr.employee_number = tcbot.login_id) as "lob_code",
  			           OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "ENTITY_CRN",			
			           OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
		          case when (Object_data::json->'AOF'->'BUS_DATA'->'INDUSTRY_IMG'->>0 is not null and 
			                 Object_data::json->'AOF'->'BUS_DATA'->'INDUSTRY_IMG'->>0 !='')
			           then (select tlm.text_2 from tb_lov_mst tlm  
							   where property ='INDUSTRY_DESCRIPTION'
								and value_code = tcbot.Object_data::json->'AOF'->'BUS_DATA'->'NAT_OF_INDUSTRY'->>'CODE')
					    else '' end as "industry_doc_code",
			           (select disp.text_5 from tb_btc_prc_grp_disp DISP 
					     where object_pri_key_1 =x_object_pri_key_1
					     and disp.process_group ='ACCOUNTNOM'limit 1 ) as "finacle_app_rec_id",
					    (select disp.text_5 from tb_btc_prc_grp_disp DISP 
					     where object_pri_key_1 =x_object_pri_key_1
					     and disp.process_group ='ACCOUNTCASA'limit 1 ) as "finacle_app_rec_id_casatd"
					   from tb_cop_buss_obj_txn tcbot   
                                     where object_pri_key_1= x_object_pri_key_1
						  and  coalesce(object_pri_key_2,'NA') = coalesce(x_object_pri_key_2,'NA')
						  and  coalesce(object_pri_key_3,'NA') = coalesce(x_object_pri_key_3,'NA');

--			   SELECT distinct object_pri_key_1 ,
--			   object_data as "OBJECT" ,
--			         hrms.first_name  as "emp_code",
--  			         hrms.first_name  as "emp_name", -- added by vipul
--			         hrms.lob_code  as "lob_code",
--  			         tcbot.OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "ENTITY_CRN",			
--			         tcbot.OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN"
--					   from tb_cop_buss_obj_txn tcbot  
--					   join tb_emp_hrms hrms on hrms.employee_number = tcbot.login_id 
--                                     where object_pri_key_1= x_object_pri_key_1;
----						  and  coalesce(object_pri_key_2,'NA') = coalesce(x_object_pri_key_2,'NA')
----						  and  coalesce(object_pri_key_3,'NA') = coalesce(x_object_pri_key_3,'NA');               

              return x_result;     
           ELSE
              OPEN x_result FOR SELECT 'No LEAD ID Exist'  AS  "OBJECT";
             return x_result;
            END IF;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_pgn(x_object_pri_key_1 character varying, x_product_type character varying, x_login_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_ROLE VARCHAR(100);
user_count int;
ref refcursor := 'cur'; 
V_ROLE VARCHAR(20);
v_crn_aus  varchar(50);
v_account_no varchar(50);
v_crn_entity varchar(50);
V_COUNT INT;
begin
	
select COUNT(*) into V_COUNT from tb_pgn_mst tcbot 
	 where aof_id =x_object_pri_key_1;

if v_count = 0 and x_product_type = 'Individual' then 
 	
	SELECT   crn_aus ,account_no into v_crn_aus, v_account_no
	 FROM public.tb_pgn_mst
     where (aof_id is null or aof_id ='')
	 and (crn_entity = '' or crn_entity is null);
 
  if  (v_account_no is not null and v_crn_aus is not null )  then
	 update tb_pgn_mst
	 set aof_id      = x_object_pri_key_1,
	     create_date = NOW(),
	     apply_date  = NOW()
	 where crn_aus = v_crn_aus
	  and  account_no = v_account_no;
  
   OPEN ref FOR SELECT 
           'SUCCESS' as "STATUS",
		   v_account_no as "ACCOUNT_NO",
		   v_crn_aus  as "CRN_AUS";
      return ref;
 
  else
   OPEN ref FOR SELECT 
           'FAILURE' as "STATUS",
		   '' as "ACCOUNT_NO",
		   ''  as "CRN_AUS",
		  'NO ACCOUNT LEFT'  as "MESSAGE";
      return ref;
  END IF ;
  
  ELSIF v_count > 0 and x_product_type = 'Individual' then 
 
  
     OPEN ref FOR  
           select 'SUCCESS' as "STATUS",
           crn_aus AS "CRN_AUS",
		          account_no AS "ACCOUNT_NO",
				  'ALREADY ASSIGN ACCOUNT' || ' - '|| account_no as "MESSAGE"
		      from tb_pgn_mst tcbot 
	           where aof_id =x_object_pri_key_1;
      return ref;
 
  ELSIF x_product_type = 'SOLE PROP' and  v_count = 0 then
  
  	SELECT   crn_aus ,account_no, crn_entity into v_crn_aus, v_account_no, v_crn_entity
	 FROM public.tb_pgn_mst
     where (aof_id is null or aof_id ='')
	 and (crn_entity <> null or crn_entity != '');
 
  if  (v_account_no is not null and v_crn_aus is not null  and v_crn_entity is not null ) then
	 update tb_pgn_mst
	 set aof_id      = x_object_pri_key_1,
	 	 create_date = NOW(),
	     apply_date  = NOW()
	 where crn_aus = v_crn_aus
	  and  account_no = v_account_no
	  and crn_entity = v_crn_entity;
  
      OPEN ref FOR SELECT 
				   'SUCCESS' as "STATUS",
				   v_account_no as "ACCOUNT_NO",
				   v_crn_aus  as "CRN_AUS",
				   v_crn_entity as "CRN_ENTITY";
      return ref;
 
  else 
   OPEN ref FOR SELECT 
           'FAILURE' as "STATUS",
		   '' as "ACCOUNT_NO",
		   ''  as "CRN_AUS",
		   ''  as "CRN_ENTITY",
		   'NO ACCOUNT LEFT'  as "MESSAGE";
      return ref;
  END IF ;
 
 ELSIF x_product_type = 'SOLE PROP' and  v_count > 0 then
     OPEN ref FOR  
           select 'SUCCESS' as "STATUS",
           crn_aus AS "CRN_AUS",
		          account_no AS "ACCOUNT_NO",
				  crn_entity AS "CRN_ENTITY",
				  'ALREADY ASSIGN ACCOUNT'||' - '||  account_no as "MESSAGE"
		   from tb_pgn_mst tcbot 
	       where aof_id =x_object_pri_key_1;
     return ref;
	 ELSE 
 open ref FOR SELECT 
           'FAILURE' as "STATUS";
 return ref; 
end if ;

RETURN ref;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_pgn_report(x_login_id character varying, x_role character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_role varchar(100);
v_entity int;
v_aus int;
begin
 select TFRM.default_system_role_code into V_ROLE from tb_emp_hrms teh , tb_function_roles_mst tfrm 
  where teh."role" =tfrm.role_name 
  and tfrm.default_system_role_code in ('Product Supervisor','BSG')
 and TEH.employee_number =x_login_id;

if V_ROLE in ('Product Supervisor','BSG') then 

 select count(account_no) into v_entity from tb_pgn_mst tpm 
      where (aof_id is  null or aof_id ='')
      and (crn_entity = '' or crn_entity is null);

 select count(account_no) into v_aus from tb_pgn_mst tpm 
      where (aof_id is  null or aof_id ='')
      and (crn_entity != '' or crn_entity is not null);

     
V_DATA:='[{"PROJECT": "Digital Current Account","ITEM": "PGN CRN-Sole proprietor","COUNT":'||v_aus ||',"REPORT_DATE":"'||current_date||'"},{"PROJECT":"Digital Current Account","ITEM": "PGN CRN-Individual","COUNT":'||v_entity|| ',"REPORT_DATE": "'||current_date||'"}]';

--select json_agg(row_to_json(t)) into v_data from
-- (select  
--(select count(account_no) from tb_pgn_mst tpm 
--      where (aof_id is  null or aof_id ='')
--      and (crn_entity != '' or crn_entity is not null)) as "CRN_AUS" ,
--(select count(account_no )from tb_pgn_mst tpm 
--     where (aof_id is  null or aof_id ='')
--     and (crn_entity = '' or crn_entity is null)) as "CRN_ENTITY",
--'Digital Current Account' as "PROJECT",
--  'PGN CRN-Sole proprietor' as "ITEM", current_date as "REPORT_DATE"  
--  from tb_pgn_mst tpm 
-- where (aof_id is  null or aof_id ='')
--group by "CRN_AUS", "CRN_ENTITY", "REPORT_DATE", "ITEM", "PROJECT")t;	

end if;

	if (v_data = '' or v_data is null) then 
 v_data := '[{"code":"","value":"No Leads present for this ID"}]';
	END IF;
 
OPEN x_result FOR SELECT 
            v_data  AS    "OBJECT";
return x_result;     
            
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_product_scheme_bo(x_eligible_account_code character varying, x_branch_code character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$                                             
declare                                                  
P_RESULT refcursor:='cur';                            
v_data text;
v_count int;
v_pop_classification varchar(50);
begin 

select category INTO v_pop_classification FROM tb_branch_mst
 WHERE branch_cd = x_branch_code;

--	select count(1)into v_count from tb_product_master
--	 WHERE eligible_account = cast(x_eligible_account_code as int);
--	
  IF x_eligible_account_code in ('01','02') and v_pop_classification = 'Metro' THEN 
      SELECT
--        REPLACE(CONCAT('{"object": [{"CODE": null,"VALUE": "--select--"},', ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(T))), '}'),'},[{','},{') into v_data
        REPLACE(cast(ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(T)))as varchar),'},[{','},{') into v_data
      FROM (  SELECT DISTINCT scheme_code as "CODE", product_name as "VALUE" 
      FROM tb_product_master
        WHERE eligible_account = x_eligible_account_code
		and allowed_metro = 'Y')t;
	
       elsiF x_eligible_account_code  in ('01','02') and (v_pop_classification != 'Metro' or v_pop_classification not in ('Metro')) THEN 
	  SELECT
        --REPLACE(CONCAT('{"object": [{"CODE": null,"VALUE": "--select--"},', ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(T))), '}'),'},[{','},{') into v_data
        REPLACE(cast(ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(T)))as varchar),'},[{','},{') into v_data
      FROM (  SELECT DISTINCT scheme_code as "CODE", product_name as "VALUE" 
      FROM tb_product_master
        WHERE eligible_account = x_eligible_account_code)t; 
	  
       elsif x_eligible_account_code = '00' then
     v_data =   '{"object":[{"code":"00","value":"No Scheme Code available"}]}'; 
  END IF;
 if (V_DATA = '' or V_DATA is null)
  then V_DATA='{"object": [{"CODE":"","VALUE": "--select--"}]}';
 end if;
 OPEN P_RESULT FOR 
 select  v_data  as "DATA";
 
return P_RESULT;   
/*
EXCEPTION WHEN OTHERS THEN


   OPEN P_RESULT FOR SELECT '' as "UNSUCCESSFUL",
  'In-correct data. Some error has Occured' as "ERROR_REMARKS";

return P_RESULT;   
*/
end;$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_roles(x_login_id character varying, x_login_role character varying, x_role character varying, x_que character varying, x_object_pri_key_1 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT refcursor:='cur';
v_state   TEXT;
v_msg     TEXT;
v_detail  TEXT;
v_hint    TEXT;
v_context TEXT;
v_data text;
v_role varchar(80);
begin

--select  fun.default_system_role_code into v_role from tb_emp_hrms teh 
--        join tb_function_roles_mst fun on fun.role_name = teh."role" 
--         where employee_number =x_login_id and fun.default_system_role_code=x_login_role;

	v_role := x_login_role;

if UPPER(x_role) != '' THEN 
 


if v_role like 'Product Supervisor%' and x_role ='RCU_Correcter' THEN
 SELECT jsonb_agg(row_to_json(t)) into v_data  from 
 (select distinct employee_number AS "VALUE", tfrm.default_system_role_code AS "CODE", employee_number AS "value", tfrm.default_system_role_code AS "code" 
 from tb_emp_hrms teh , tb_function_roles_mst tfrm
 where teh.role= tfrm.role_name 
 and UPPER(tfrm.default_system_role_code ) = upper('RCU Corrector')
 and TEH.employee_number not in (select ac.EMP_ID 
     FROM tb_btc_accesscontrol ac WHERE ac.system_role in (x_role) and ac.OBJECT_PRI_KEY_1 in 
     (select json_array_elements(cast(X_object_pri_key_1 as json)) ->> 'caseid'))
union 
 select first_name , role,first_name , role from tb_emp_hrms teh 
 where  UPPER(role) = upper(x_role)
 and employee_number not in (select ac.EMP_ID 
                                               FROM tb_btc_accesscontrol ac 
                                               WHERE ac.OBJECT_PRI_KEY_1 in (select json_array_elements(cast(X_object_pri_key_1 as json)) ->> 'caseid')
                                               and ac.system_role in (x_role)))T;

elsif v_role = 'SE Supervisor' then 
 SELECT jsonb_agg(row_to_json(t)) into v_data  from 
 ( SELECT employee_number AS "VALUE", tfrm.default_system_role_code AS "CODE", employee_number AS "value", tfrm.default_system_role_code AS "code" ,first_name as "RM_Name",employee_number as "RM_id", email_address as "RM_email"
		 from tb_emp_hrms teh, tb_function_roles_mst tfrm
		 where teh.role = tfrm.role_name 
		 and upper(tfrm.default_system_role_code) =upper('Sales Executive')
		 and teh.supervisor_emp_no = x_login_id
		 and employee_number not in (select ac.emp_id FROM TB_COP_BUSS_OBJ_TXN obj 
						      JOIN tb_btc_accesscontrol ac on obj.OBJECT_PRI_KEY_1 = ac.object_pri_key_1 
						       WHERE obj.OBJECT_PRI_KEY_1 in (select json_array_elements(cast(X_object_pri_key_1 as json)) ->> 'caseid')
						       and ac.system_role ='RM'
						       and obj.IS_ACTIVE='Y'  
						       and ac.ACCESS_TYPE  IN ('R','W')))T;
						      
elsif v_role = 'Approver Supervisor' then		

SELECT jsonb_agg(row_to_json(t)) into v_data  from 
 ( SELECT employee_number AS "VALUE", tfrm.default_system_role_code AS "CODE", employee_number AS "value", tfrm.default_system_role_code AS "code", first_name as "RM_Name",employee_number as "RM_id", email_address as "RM_email"
		 from tb_emp_hrms teh, tb_function_roles_mst tfrm
		 where teh.role = tfrm.role_name 
		 and upper(tfrm.default_system_role_code) =upper('Approver')
		 and teh.supervisor_emp_no = x_login_id
		 and employee_number not in (select ac.update_login_id FROM TB_COP_BUSS_OBJ_TXN obj 
						      JOIN tb_btc_accesscontrol ac on obj.OBJECT_PRI_KEY_1 = ac.object_pri_key_1 
						       WHERE obj.OBJECT_PRI_KEY_1 in (select json_array_elements(cast(X_object_pri_key_1 as json)) ->> 'caseid')
						       and ac.system_role ='BOM'
						       and obj.IS_ACTIVE='Y'  
						      -- and ac.ACCESS_TYPE  IN ('R','W'))
						      ))T;

elsif upper(v_role) = upper('DVU Supervisor') then		

SELECT jsonb_agg(row_to_json(t)) into v_data  from 
 ( SELECT employee_number AS "VALUE", tfrm.default_system_role_code AS "CODE", employee_number AS "value",
 tfrm.default_system_role_code AS "code", first_name as "RM_Name",employee_number as "RM_id", email_address as "RM_email"
		 from tb_emp_hrms teh, tb_function_roles_mst tfrm
		 where teh.role = tfrm.role_name 
		 and upper(tfrm.default_system_role_code) =upper('DVU')
		 and   teh.supervisor_emp_no = x_login_id
		 and employee_number not in (select ac.emp_hierarchy_id FROM TB_COP_BUSS_OBJ_TXN obj 
						      JOIN tb_btc_accesscontrol ac on obj.OBJECT_PRI_KEY_1 = ac.object_pri_key_1 
						       WHERE obj.OBJECT_PRI_KEY_1 in (select json_array_elements(cast(X_object_pri_key_1 as json)) ->> 'caseid')
						       and ac.system_role ='DVU'
						       and obj.IS_ACTIVE='Y'  
						      -- and ac.ACCESS_TYPE  IN ('R','W'))
						      ))T;

elsif v_role = 'RCU Supervisor' then		

SELECT jsonb_agg(row_to_json(t)) into v_data  from 
 ( SELECT employee_number AS "VALUE", tfrm.default_system_role_code AS "CODE", employee_number AS "value", tfrm.default_system_role_code AS "code", first_name as "RM_Name",employee_number as "RM_id", email_address as "RM_email"
		 from tb_emp_hrms teh, tb_function_roles_mst tfrm
		 where teh.role = tfrm.role_name
		 and upper(tfrm.default_system_role_code) =upper('RCU')
		 and teh.supervisor_emp_no = x_login_id
		 and employee_number not in (select ac.emp_id FROM TB_COP_BUSS_OBJ_TXN obj 
						      JOIN tb_btc_accesscontrol ac on obj.OBJECT_PRI_KEY_1 = ac.object_pri_key_1 
						       WHERE obj.OBJECT_PRI_KEY_1 in (select json_array_elements(cast(X_object_pri_key_1 as json)) ->> 'caseid')
						       and ac.system_role ='RCU'
						       and obj.IS_ACTIVE='Y'  
						      -- and ac.ACCESS_TYPE  IN ('R','W'))
						      ))T;
						     
elsif v_role = 'RCU Corrector Supervisor' then		
SELECT jsonb_agg(row_to_json(t)) into v_data  from 
 ( SELECT employee_number AS "VALUE", tfrm.default_system_role_code AS "CODE", employee_number AS "value", tfrm.default_system_role_code AS "code",employee_number as "RM_Name",employee_number as "RM_id", email_address as "RM_email"
		 from tb_emp_hrms teh, tb_function_roles_mst tfrm
		 where teh.role = tfrm.role_name
		 and upper(tfrm.default_system_role_code) =upper('RCU Corrector')
		 and teh.supervisor_emp_no = x_login_id
		 and first_name not in (select ac.emp_id FROM TB_COP_BUSS_OBJ_TXN obj 
						      JOIN tb_btc_accesscontrol ac on obj.OBJECT_PRI_KEY_1 = ac.object_pri_key_1 
						       WHERE obj.OBJECT_PRI_KEY_1 in (select json_array_elements(cast(X_object_pri_key_1 as json)) ->> 'caseid')
						       and ac.system_role ='RCU_Correcter'
						       and obj.IS_ACTIVE='Y'  
						      -- and ac.ACCESS_TYPE  IN ('R','W'))
						      ))T;
						     
--elsif upper(x_role) = upper('RUS') then --- for report 'Product Supervisor'
	elsif upper(v_role) = upper('Product Supervisor') and upper(x_role) = upper('RUS') then			     
  
				 SELECT 
				   jsonb_agg(json_build_object('VALUE',employee_number,
							                   'CODE',tfrm.default_system_role_code,
							                   'value', employee_number,
							                   'code',tfrm.default_system_role_code,
							                   'RM_Name',first_name,
							                   'RM_id',employee_number,
							                   'RM_email',email_address                   
                              ))into v_data  
                 from tb_emp_hrms teh, tb_function_roles_mst tfrm
		         where teh.role = tfrm.role_name
                 and role = 'Risk Unit'--teh.supervisor_emp_no = x_login_id
                 and employee_number not in (select ac.EMP_ID 
                                               FROM tb_btc_accesscontrol ac 
                                               WHERE ac.OBJECT_PRI_KEY_1 in (select json_array_elements(cast(X_object_pri_key_1 as json)) ->> 'caseid')
                                               and ac.system_role ='RU'
                                          );
                                           
--raise notice 'RUS %', v_data ;                                          
				

elsif upper(v_role) = upper('Risk Unit Supervisor') and x_role = upper('RU') then
--elsif upper(x_role) = upper('RU') then --- for report 'ru Supervisor'
  
				 SELECT 
				   jsonb_agg(json_build_object('VALUE',employee_number,
							                   'CODE',tfrm.default_system_role_code,
							                   'value', employee_number,
							                   'code',tfrm.default_system_role_code,
							                   'RM_Name',first_name,
							                   'RM_id',employee_number,
							                   'RM_email',email_address                   
                              ))into v_data  
                 from tb_emp_hrms teh, tb_function_roles_mst tfrm
		         where teh.role = tfrm.role_name
                 and teh.supervisor_emp_no = x_login_id
                 and employee_number not in (select ac.EMP_ID 
                                               FROM tb_btc_accesscontrol ac 
                                               WHERE ac.OBJECT_PRI_KEY_1 in (select json_array_elements(cast(X_object_pri_key_1 as json)) ->> 'caseid')
                                               and ac.system_role ='RU'
                                            );
                                           
--raise notice 'RUS %', v_data ;                                          
elsif v_role like 'Product Supervisor%' and x_role !='RCU Corrector'
then
 SELECT jsonb_agg(row_to_json(t)) into v_data  from 
 (select employee_number AS "VALUE", tfrm.default_system_role_code AS "CODE", employee_number AS "value", tfrm.default_system_role_code AS "code" 
 from tb_emp_hrms teh , tb_function_roles_mst tfrm
 where teh.role= tfrm.role_name
  and (case when upper(x_role)!='RCU Corrector' then tfrm.default_system_role_code else '1' end)
 = (case when upper(x_role)=upper('Approver') then 'Approver' 
 when upper(x_role)=upper('DVU') then 'DVU'
 when upper(x_role)=upper('RCU') then 'RCU'
 when upper(x_role)=upper('RU') then 'RU'
  when upper(x_role)=upper('Sales Executive') then 'Sales Executive'
 else '2' end)
  --and (tfrm.default_system_role_code not in ('Approver Supervisor','DVU Supervisor',
 --'RCU Corrector Supervisor','RCU Supervisor','SE Supervisor')
   and role in (select role_name from tb_function_roles_mst tfrm 
                   where  upper(default_system_role_code) in (upper(x_role)))
		and employee_number not in (select ac.EMP_ID 
                                               FROM tb_btc_accesscontrol ac 
                                               WHERE ac.OBJECT_PRI_KEY_1 in (select json_array_elements(cast(X_object_pri_key_1 as json)) ->> 'caseid')
                                               and ac.system_role in (x_role))
		union 
 select first_name , role,first_name , role from tb_emp_hrms teh 
 where  UPPER(role) in (upper(x_role)) 
 and employee_number not in (select ac.EMP_ID 
                                               FROM tb_btc_accesscontrol ac 
                                               WHERE ac.OBJECT_PRI_KEY_1 in (select json_array_elements(cast(X_object_pri_key_1 as json)) ->> 'caseid')
                                               and ac.system_role in (x_role)))T;
		end if;	
  end if;
  raise notice '3 : % ', v_data;
 if (v_data = '' or v_data is null)
   then v_data = '[{"code":"","value":"No DATA exist"}]';
 END IF;
     
OPEN X_RESULT FOR
  SELECT v_data as "OBJECT";
 RETURN X_RESULT;

/*
EXCEPTION WHEN OTHERS THEN

V_ERR:=SQLERRM;
OPEN ref FOR SELECT '' as "UNSUCCESSFUL",
'In-correct data. Some error has Occured' as "ERROR_REMARKS",
                         'tb_client_master' as "TABLENAME",
                '' as "ACTION";

return ref; */

END;
 $function$
;

CREATE OR REPLACE FUNCTION public.sp_get_roles_test(x_login_id character varying, x_role character varying, x_object_pri_key_1 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT refcursor:='cur';
v_state   TEXT;
v_msg     TEXT;
v_detail  TEXT;
v_hint    TEXT;
v_context TEXT;
v_data text;
v_role varchar(80);
begin

 select role into v_role  from tb_emp_hrms teh 
  where first_name = x_login_id;
raise notice '1 : % ', v_role;
if UPPER(x_role) != '' THEN 
 if v_role like 'Product Supervisor%'
then
 SELECT jsonb_agg(row_to_json(t)) into v_data  from 
 (  select first_name AS "VALUE", ROLE AS "CODE"  from tb_emp_hrms teh 
  where role in (select role_name from tb_function_roles_mst tfrm 
                   where  upper(default_system_role_code) = upper(x_role))
union 
 select first_name , role from tb_emp_hrms teh 
 where  UPPER(role) = upper(x_role))T;

elsif v_role = 'SE Supervisor' then 
 SELECT jsonb_agg(row_to_json(t)) into v_data  from 
 ( SELECT first_name AS "VALUE", ROLE AS "CODE" 
		 from tb_emp_hrms teh 
		 where teh.supervisor_emp_no = x_login_id
		 and first_name not in (select ac.emp_id FROM TB_COP_BUSS_OBJ_TXN obj 
						      JOIN tb_btc_accesscontrol ac on obj.OBJECT_PRI_KEY_1 = ac.object_pri_key_1 
						       WHERE obj.OBJECT_PRI_KEY_1 in (select json_array_elements(cast(X_object_pri_key_1 as json)) ->> 'caseid')
						       and ac.system_role ='RM'
						       and obj.IS_ACTIVE='Y'  
						       and ac.ACCESS_TYPE  IN ('R','W')))T;
elsif v_role = 'Approver Supervisor' then		

SELECT jsonb_agg(row_to_json(t)) into v_data  from 
 ( SELECT first_name AS "VALUE", ROLE AS "CODE" 
		 from tb_emp_hrms teh 
		 where teh.supervisor_emp_no = x_login_id
		 and first_name not in (select ac.update_login_id FROM TB_COP_BUSS_OBJ_TXN obj 
						      JOIN tb_btc_accesscontrol ac on obj.OBJECT_PRI_KEY_1 = ac.object_pri_key_1 
						       WHERE obj.OBJECT_PRI_KEY_1 in (select json_array_elements(cast(X_object_pri_key_1 as json)) ->> 'caseid')
						       and ac.system_role ='RM'
						       and obj.IS_ACTIVE='Y'  
						      -- and ac.ACCESS_TYPE  IN ('R','W'))
						      ))T;

elsif v_role = 'DVU Supervisor' then		

SELECT jsonb_agg(row_to_json(t)) into v_data  from 
 ( SELECT first_name AS "VALUE", ROLE AS "CODE" 
		 from tb_emp_hrms teh 
		 where teh.supervisor_emp_no = x_login_id
		 and first_name not in (select ac.emp_hierarchy_id FROM TB_COP_BUSS_OBJ_TXN obj 
						      JOIN tb_btc_accesscontrol ac on obj.OBJECT_PRI_KEY_1 = ac.object_pri_key_1 
						       WHERE obj.OBJECT_PRI_KEY_1 in (select json_array_elements(cast(X_object_pri_key_1 as json)) ->> 'caseid')
						       and ac.system_role ='RM'
						       and obj.IS_ACTIVE='Y'  
						      -- and ac.ACCESS_TYPE  IN ('R','W'))
						      ))T;

elsif v_role = 'RCU Supervisor' then		

SELECT jsonb_agg(row_to_json(t)) into v_data  from 
 ( SELECT first_name AS "VALUE", ROLE AS "CODE" 
		 from tb_emp_hrms teh 
		 where teh.supervisor_emp_no = x_login_id
		 and first_name not in (select ac.emp_id FROM TB_COP_BUSS_OBJ_TXN obj 
						      JOIN tb_btc_accesscontrol ac on obj.OBJECT_PRI_KEY_1 = ac.object_pri_key_1 
						       WHERE obj.OBJECT_PRI_KEY_1 in (select json_array_elements(cast(X_object_pri_key_1 as json)) ->> 'caseid')
						       and ac.system_role ='RCU'
						       and obj.IS_ACTIVE='Y'  
						      -- and ac.ACCESS_TYPE  IN ('R','W'))
						      ))T;
				
		end if;
  end if;
  raise notice '3 : % ', v_data;
 if (v_data = '' or v_data is null)
   then v_data = '[{"code":"","value":"No DATA exist"}]';
 END IF;
     
OPEN X_RESULT FOR
  SELECT v_data as "OBJECT";
 RETURN X_RESULT;

/*
EXCEPTION WHEN OTHERS THEN

V_ERR:=SQLERRM;
OPEN ref FOR SELECT '' as "UNSUCCESSFUL",
'In-correct data. Some error has Occured' as "ERROR_REMARKS",
                         'tb_client_master' as "TABLENAME",
                '' as "ACTION";

return ref;                                    
*/
END;
 $function$
;

CREATE OR REPLACE FUNCTION public.sp_get_ru_report(x_login_id character varying, x_param character varying, x_role character varying, x_report_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT refcursor :='cur';
v_data text;
 begin
  --OPEN X_RESULT FOR
 
  select json_agg(row_to_json(t)) into v_data FROM(
select
   row_number() over (order by cop.object_pri_key_1) as "Serial_Number",
   OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1' as "Entity_Name",
   OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "AUS_Individual_Name",
   OBJECT_DATA::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "Lead_Id",
   OBJECT_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE' as "Branch_Code",
   OBJECT_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "Branch_Name",
   (select CITY from tb_branch_mst tbm
              where branch_cd =  object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE') as "Region",
   OBJECT_DATA::JSON->'AOF'->>'LC_CODE' as "LC_Emp",
   case when
   OBJECT_DATA::JSON->'AOF'->>'LC_CODE' is null then 'NA'
   else
   (select first_name ||' ' || last_name from tb_emp_hrms teh
   WHERE employee_number = OBJECT_DATA::JSON->'AOF'->>'LC_CODE')
             end as "LC_Name",
   (case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN' then
             'Individual'
                 when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP' then
                      'Sole Proprietor'
                 else 'NA'
               end)  as "Constitution",    
   --'Current Account'
              CONCAT(COP.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'CODE','-',COP.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE') as "Type_of_Account",
   'Digi-CA' as "Sourcing_Channel",
   OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "Mobile_Number",
   
           
            (case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN' then
             CONCAT(
   COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN1',' ',
   COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN2',' ',
   COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN3',' ',
   COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'PIN',' ',
   COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'CITY',' ',
   COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'STATE'
            )
                 when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP' then
                      CONCAT(
   COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L1',' ',
   COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L2',' ',
       COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L3',' ',
   COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_PINCODE',' ',
   COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_CITY',' ',
   COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_STATE'
            )
                 else 'NA'
              end)
            as "Customer_Address",
case when  object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP' then
OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
else
OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' end as "CRN",
   OBJECT_DATA::JSON->'AOF'->'CA'->>'ACCOUNT_NO' as "Account_Number",
/*  case when (select c.modified_timestamp  from tb_btc_prc_grp_disp c
           where c.process_group ='ACCOUNT' and c.prc_grp_disp ='SUCCESS'
           and c.object_pri_key_1 = disp.object_pri_key_1 ) is null then now()::timestamp
           else
           (select c.end_timestamp from tb_btc_prc_grp_disp c
           where c.process_group ='ACCOUNT' and c.prc_grp_disp ='SUCCESS'
           and c.object_pri_key_1 = disp.object_pri_key_1 ) end    */
  (select c.modified_timestamp  from tb_btc_prc_grp_disp c
           where c.process_group ='ACCOUNT' and c.prc_grp_disp ='SUCCESS'
           and c.object_pri_key_1 = disp.object_pri_key_1)
           as "Account_Opened_Date"
            from tb_cop_buss_obj_txn cop  
      join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1
                                  and disp.process_group  = 'RU'
                                  and disp.prc_grp_disp  in ('RU_ASSIGN','RU_SUBMITTED','RU_USERWAIT')
 join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1  
 and acc.system_role ='RU' and cop.is_active = 'Y'
       WHERE acc.EMP_ID = x_login_id --in( select employee_number from tb_emp_hrms teh  where supervisor_emp_no = x_login_id )
                )t ;


--RETURN X_RESULT;
 OPEN x_result FOR SELECT
            v_data  AS    "OBJECT";
              return x_result;  
   
   
 
END;$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_rus_report(x_login_id character varying, x_param character varying, x_role character varying, x_report_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT refcursor :='cur_rus_report';
v_data text;
 begin
  -- OPEN X_RESULT FOR
select json_agg(row_to_json(t)) into v_data FROM(
select
   row_number() over (order by cop.object_pri_key_1) as "Serial_Number",
   OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1' as "Entity_Name",
   OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "AUS_Individual_Name",
   OBJECT_DATA::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "Lead_Id",
   OBJECT_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE' as "Branch_Code",
   OBJECT_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "Branch_Name",
   (select CITY from tb_branch_mst tbm
              where branch_cd =  object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE') as "Region",
   OBJECT_DATA::JSON->'AOF'->>'LC_CODE' as "LC_Emp",
   case when
   OBJECT_DATA::JSON->'AOF'->>'LC_CODE' is null then 'NA'
   else
   (select first_name ||' ' || last_name from tb_emp_hrms teh
   WHERE employee_number = OBJECT_DATA::JSON->'AOF'->>'LC_CODE')
             end as "LC_Name",
   (case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN' then
             'Individual'
                 when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP' then
                      'Sole Proprietor'
                 else 'NA'
               end)  as "Constitution",    
   --'Current Account'
              CONCAT(COP.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'CODE','-',COP.object_data::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE') as "Type_of_Account",
   'Digi-CA' as "Sourcing_Channel",
   OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "Mobile_Number",
   
           
            (case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN' then
             CONCAT(
   COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN1',' ',
   COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN2',' ',
   COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'LN3',' ',
   COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'PIN',' ',
   COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'CITY',' ',
   COP.object_data::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADDRESSES'->0->>'STATE'
            )
                 when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP' then
                      CONCAT(
   COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L1',' ',
   COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L2',' ',
       COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_L3',' ',
   COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_PINCODE',' ',
   COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_CITY',' ',
   COP.object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_REG_ADD_STATE'
            )
                 else 'NA'
              end)
            as "Customer_Address",
case when  object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP' then
OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
else
OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' end as "CRN",
   OBJECT_DATA::JSON->'AOF'->'CA'->>'ACCOUNT_NO' as "Account_Number",
/*   case when (select c.modified_timestamp from tb_btc_prc_grp_disp c
           where c.process_group ='ACCOUNT' and c.prc_grp_disp ='SUCCESS'
           and c.object_pri_key_1 = disp.object_pri_key_1 ) is null then now()::timestamp
           else
           (select c.end_timestamp from tb_btc_prc_grp_disp c
           where c.process_group ='ACCOUNT' and c.prc_grp_disp ='SUCCESS'
           and c.object_pri_key_1 = disp.object_pri_key_1 ) end      */
           (select c.modified_timestamp  from tb_btc_prc_grp_disp c
           where c.process_group ='ACCOUNT' and c.prc_grp_disp ='SUCCESS'
           and c.object_pri_key_1 = disp.object_pri_key_1)
           as "Account_Opened_Date"
     from tb_cop_buss_obj_txn cop  
      join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1
                                  and disp.process_group  = 'RU'
                                  and cop.is_active = 'Y'
                                  and disp.prc_grp_disp  in ('RU_ASSIGN','RU_SUBMITTED','RU_USERWAIT')
 join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1  
 and acc.system_role ='RU' WHERE acc.EMP_ID in (select employee_number from tb_emp_hrms teh  where supervisor_emp_no = x_login_id )
              )T ;


 OPEN x_result FOR SELECT
            v_data  AS    "OBJECT";
              return x_result;  
   
 
END;$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_scheme_ip_funding(x_scheme_code character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
DECLARE 
X_RESULT refcursor:='cur';
v_string_tab TEXT;
P_STRING_FINAL   TEXT;
v_count int;
v_scheme_code varchar(10);
begin
	
	select scheme_code into v_scheme_code from tb_product_master
	 where coalesce(trim(scheme_code),'NA') = coalesce(trim(x_scheme_code),'NA');
	
	if (v_scheme_code is not null or v_scheme_code!='')then 
SELECT array_to_json(array_agg(row_to_json(t)))  INTO v_string_tab
    FROM (   
    	select scheme_code  as "CODE" , ip_min_req as "VALUE"
		from tb_product_master
	   where coalesce(trim(scheme_code),v_scheme_code) = coalesce(trim(x_scheme_code),v_scheme_code))t;
	
   P_STRING_FINAL :=  CONCAT ('{  "object_data" : ', v_string_tab, '}');
  else 
  P_STRING_FINAL='{"OBJECT":[{"CODE":"","VALUE":"--select--"}]}';
end if;
  
   OPEN X_RESULT FOR SELECT P_STRING_FINAL as "DATA";
   RETURN X_RESULT;
END; $function$
;

CREATE OR REPLACE FUNCTION public.sp_get_secugen_device_rep()
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT refcursor;
  begin
        OPEN X_RESULT FOR 
          select (cast(jsonb_agg(json_build_object (
        'serial_number',serial_number,
        'device_id',device_id,
        'rm',rm,
        'total_hits',total_hits,
       'Success_hits',Success_hits,
       'Failure_hits',Failure_hits
        )) as text)) as "OBJECT" from 
        (select row_number() over (order by device_id)as serial_number,device_id , rm,count(device_id) total_hits, sum(success) as Success_hits ,sum(failure) as Failure_hits from 
(select ts.device_id, ts.rm,
        (case when ts.status = 'SUCCESS' then 1 else 0 end) as success,
        (case when ts.status = 'FAILURE' then 1 else 0 end) as failure 
               from tb_secugen_device_hits_dtls ts 
             )a
              group by device_id,rm)TBL;
     RETURN X_RESULT;
     
END;$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_sweep_thresholds(x_scheme_code character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$                                             
declare                                                  
P_RESULT refcursor:='cur';

begin   
	OPEN P_RESULT FOR 
	
  select t1.sweep_in_threshold as "sweep_in_threshold", t1.sweep_out_threshold as "sweep_out_threshold" 
  from public.tb_product_master t1 where t1.scheme_code = x_scheme_code;

  return P_RESULT; 
  
--EXCEPTION WHEN OTHERS THEN
--   OPEN P_RESULT FOR SELECT '' as "UNSUCCESSFUL",
--  'In-correct data. Some error has Occured' as "ERROR_REMARKS";
--return X_RESULT;   
end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_title_lov_bo(x_gender_code character varying, x_marital_code character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
DECLARE 
X_RESULT refcursor:='cur';
v_string_tab TEXT;
P_STRING_FINAL   TEXT;
begin
	if x_gender_code = 'Trans Gender' --and (x_marital_code ='' or x_marital_code is null) 
	then 
SELECT REPLACE(CONCAT('{"object_data": [{"CODE": "MX.","VALUE": "Mx."},', ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(T))), '}'),'},[{','},{') into v_string_tab
    FROM (   
    	select code  as "CODE" , VALUE as "VALUE"
		from TB_TITLE_LOV_BO
		 where gender = x_gender_code
	     --AND coalesce(marital,'') = coalesce(x_marital_code,'')
	union 
	   select code  as "CODE" , VALUE as "VALUE"
		from TB_TITLE_LOV_BO
	     where gender is NULL
	     AND marital is NULL
	)t;

	else 	
SELECT REPLACE(CONCAT('{"object_data": [{"CODE": " ","VALUE": "SELECT"},', ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(T))), '}'),'},[{','},{') into v_string_tab
    FROM (   
    	select code  as "CODE" , VALUE as "VALUE"
		from TB_TITLE_LOV_BO
		 where gender = x_gender_code
	     AND coalesce(marital,'') = coalesce(x_marital_code,'')
	union 
	   select code  as "CODE" , VALUE as "VALUE"
		from TB_TITLE_LOV_BO
	     where gender is NULL
	     AND marital is NULL
	)t;
	
	end if;
--   P_STRING_FINAL :=  CONCAT ('{  "object_data" : ', v_string_tab, '}');

   OPEN X_RESULT FOR SELECT v_string_tab as "DATA";
   RETURN X_RESULT;
END; $function$
;

CREATE OR REPLACE FUNCTION public.sp_get_vflow_queue_count(x_count_group_id character varying, x_login_id character varying, x_user_id character varying, x_role character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_status varchar(10);   -- for status 
v_count int;
v_prc_grp VARCHAR(50);
v_role varchar(20);
v_id VARCHAR(50);

V_GEN_QUE_CNT INT ;
V_ASSIGN_QUE_CNT  INT ;
V_SUBMITTED_QUE_CNT INT ;

begin
select distinct role  into v_role from  tb_queues_workflow_mapping qwm 
join tb_emp_hrms teh on upper(qwm.access_level) = upper(teh."role")
 where teh.employee_number =x_login_id
-- AND   upper(TEH.role) = upper(x_role)
  and internal_flag ='Y'; 
 
  v_status = 'SUCCESS';
	
if upper(x_role) ='APPROVER' then

select employee_number into v_id from tb_emp_hrms teh 
 where supervisor_emp_no = x_login_id;
--select json_agg(row_to_json(t)) into v_data from  
--	(select count(count_group_id) , COUNT_GROUP_ID  from tb_queues_workflow_mapping wfm
--	join tb_btc_prc_grp_disp disp on wfm.prc_grp_disp = disp.prc_grp_disp 
--	 and wfm.process_group = disp.process_group  
--	join tb_cop_buss_obj_txn cop on disp.object_pri_key_1 =cop.object_pri_key_1 
--	 join tb_btc_accesscontrol acc on acc.object_pri_key_1 = cop.object_pri_key_1 
--	 where wfm.count_group_id in ('MYQUE3','MYQUE9','MYQUE10')
--	 group by count_group_id)t;
--	raise notice 'v :%',v_id;
-----------------------------------------------------------------------------------------

/*select replace(concat(string_agg( concat('{"',QUE_ID,'":{"count":"', cont,'"}'),','),'}'),',{',',') into v_data from
	( select count(count_group_id) as "cont" ,
      case when COUNT_GROUP_ID = 'MYQUE3' then 'MY_QUE' 
            when COUNT_GROUP_ID = 'MYQUE9' then 'MY_QUE_REJ'
            when COUNT_GROUP_ID = 'MYQUE10' then 'MY_QUE_REW'
            else '' end as "que_id"  from tb_queues_workflow_mapping wfm
	join tb_btc_prc_grp_disp disp on wfm.prc_grp_disp = disp.prc_grp_disp 
	 and wfm.process_group = disp.process_group  
	join tb_cop_buss_obj_txn cop on disp.object_pri_key_1 =cop.object_pri_key_1 
--	 join tb_btc_accesscontrol acc on acc.object_pri_key_1 = cop.object_pri_key_1 
	 where wfm.count_group_id in ('MYQUE3','MYQUE9','MYQUE10')
--	 and ACC.ACCESS_TYPE = 'R'
and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('SUBMITTED','BOM_REWORK','BOM_REJECTED')
	 and cop.login_id in(select employee_number  from tb_emp_hrms teh 
                           where upper(supervisor_emp_no) = upper(x_login_id))
	 group by count_group_id)T;
	*/
-----------------------------------------------------------------------------------------	
	select json_build_object('MY_QUE',"QUE1",'MY_QUE_REW',"REW",'MY_QUE_REJ',"REJ",'MY_ALL_QUE',"MY_ALL_QUE",'MY_BACKEND_QUE',"MY_BACKEND_QUE")into v_data
      from (select count(disp.object_pri_key_1) as "count"
             			from tb_cop_metadata_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'USERWAIT'
				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
				and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'BOM'
				and cop.workflow_status ='SUBMITTED' 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
				where ACC.update_login_id = X_LOGIN_ID
				) as "QUE1",
				--acc.emp_id in (select se_id from tb_se_app_mapping tsam where approver_id = X_LOGIN_ID)) as "QUE1",
          (select count(disp.object_pri_key_1) as "count"
                  From tb_cop_metadata_txn cop  
		join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
									-- and cop.object_pri_key_2  = disp.object_pri_key_2  
									 --and cop.object_pri_key_3 = disp.object_pri_key_3 
		  and disp.process_group = 'RM_SE' and disp.prc_grp_disp  in ('APPROVERQUERY','APPROVEDQUERY','DVUAPPROVEDQUERY','DVUQUERY')
             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 									 
		 join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
		    --and disp.object_pri_key_2 = acc.object_pri_key_2 
		    --and disp.object_pri_key_3 = acc.object_pri_key_3 
		    and acc.system_role  = 'BOM'
		    and cop.workflow_status   in ('BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','DVU_REWORK') 
		--where ACC.emp_id = X_LOGIN_ID
		where ACC.update_login_id = X_LOGIN_ID
		) as "REW",
		--UPPER(acc.emp_id) in (select se_id from tb_se_app_mapping tsam where approver_id = X_LOGIN_ID)) as "REW",
          (select count(disp.object_pri_key_1) as "count"		
                      From tb_cop_metadata_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                           -- and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'REJECT'
				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
				and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'BOM'
				and cop.workflow_status  ='BOM_REJECT'
				where acc.emp_id =X_LOGIN_ID
				and COP.is_active ='Y') as "REJ",
		   (select count(COP.object_pri_key_1) as "count"		
			from tb_cop_metadata_txn cop  
--				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 	 
--				  and disp.process_group IN ('BOM_APPROVER','DVU','RCU') and disp.prc_grp_disp in ('DVU_APPROVED','USERWAIT','WIP','REWORK') 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  ='RM'--,'DVU','RCU') 
				and COP.is_active= 'Y'
				and WORKFLOW_STATUS in ('BOM_APPROVED','BOM_REWORK_APPROVED','DVU_ASSIGNED','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_APPROVED',
				         'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
				where ACC.update_login_id = X_LOGIN_ID) as "MY_ALL_QUE",
		    (select count(COP.object_pri_key_1) as "count"		
                  from tb_cop_metadata_txn cop 
            	  where exists ( select 1 from tb_btc_prc_grp_disp disp 
            	                  where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                            and process_group in ('ACCOUNT')
                                    and prc_grp_disp in ('SUCCESS'))
                   and COP.is_active ='Y' ) as "MY_BACKEND_QUE";
				
                          
ELSIf upper(x_role) ='DVU' then

---------------------------------------------------------------------------------------------
/*
	select replace(concat(string_agg( concat('{"',QUE_ID,'":{"count":"', cont,'"}'),','),'}'),',{',',') into v_data from
	  (select count(count_group_id) as "cont" ,
      case when COUNT_GROUP_ID = 'MYQUE8' then 'MY_QUE_GEN' 
            when COUNT_GROUP_ID = 'MYQUE12' then 'MY_QUE'
            else '' end as "que_id"   from tb_queues_workflow_mapping wfm
	    join tb_btc_prc_grp_disp disp on wfm.prc_grp_disp = disp.prc_grp_disp 
	    and wfm.process_group = disp.process_group  
	   join tb_cop_buss_obj_txn cop on disp.object_pri_key_1 =cop.object_pri_key_1 
	   --join tb_btc_accesscontrol acc on acc.object_pri_key_1 = cop.object_pri_key_1 
	  where wfm.count_group_id in ('MYQUE8','MYQUE12')
	  and  cop.workflow_status  in ('BOM_APPROVED','DVU_ASSIGNED')
--	  and cop.login_id =v_id
	  group by count_group_id)T;
*/
---------------------------------------------------------------------------------------------
select json_build_object('MY_QUE_GEN',"QUE1",'MY_QUE',"QUE", 'MY_QUE_REW', "REW",'MY_BACKEND_QUE',"MY_BACKEND_QUE",'MY_ALL_QUE',"MY_ALL_QUE")into v_data
      from (select count(disp.object_pri_key_1) as "count"
            From tb_cop_metadata_txn cop  
		join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
									--and cop.object_pri_key_2  = disp.object_pri_key_2  
									--and cop.object_pri_key_3 = disp.object_pri_key_3 
		  and disp.process_group = 'DVU' and disp.prc_grp_disp = 'USERWAIT'
		   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
		join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
		and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'DVU'
		and COP.workflow_status  in ('BOM_APPROVED','CPVAPPROVED')) as "QUE1",
          (select count(disp.object_pri_key_1) as "count"
	               	 From tb_cop_metadata_txn cop  
		join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
									--and cop.object_pri_key_2  = disp.object_pri_key_2  
									--and cop.object_pri_key_3 = disp.object_pri_key_3 
		  and disp.process_group = 'DVU' and disp.prc_grp_disp = 'WIP'
		   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
		join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
		and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'DVU'
		and COP.workflow_status  in ('DVU_ASSIGNED')
		where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id)) as "QUE",
          (select count(disp.object_pri_key_1) as "count"
             			 	        From tb_cop_metadata_txn cop  
   		     join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
and disp.process_group IN('DVU') and disp.prc_grp_disp IN ('REWORK')
--		     join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
			join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
			  and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'DVU'
			and COP.workflow_status  in ('BOM_REWORK','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED')
			where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id)
		) as "REW",
          (select count(COP.object_pri_key_1) as "count"
   from tb_cop_metadata_txn cop 
            	  where exists ( select 1 from tb_btc_prc_grp_disp disp 
            	                  where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                            and process_group in ('ACCOUNT')
                                    and prc_grp_disp in ('SUCCESS'))
                   and COP.is_active ='Y' 
		) as "MY_BACKEND_QUE",
	          (select count(COP.object_pri_key_1) as "count"
                      from tb_cop_metadata_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
--				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  IN ('DVU','RCU')
				and cop.is_active ='Y'
				and cop.workflow_status  in ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
				where ACC.emp_hierarchy_id = X_LOGIN_ID) as "MY_ALL_QUE";                  


ELSIf upper(x_role) ='RCU' then
---------------------------------------------------------------------------------------------------
/*   
   	select replace(concat(string_agg( concat('{"',QUE_ID,'":{"count":"', cont,'"}'),','),'}'),',{',',') into v_data from
	  (select count(count_group_id) as "cont" ,
      case when COUNT_GROUP_ID = 'MYQUE13' then 'MY_QUE_GEN' 
            when COUNT_GROUP_ID = 'MYQUE15' then 'MY_QUE'
            when COUNT_GROUP_ID = 'MYQUE17' then 'MY_GEN_REW'
            else '' end as "que_id"   from tb_queues_workflow_mapping wfm
	    join tb_btc_prc_grp_disp disp on wfm.prc_grp_disp = disp.prc_grp_disp 
	    and wfm.process_group = disp.process_group  
	   join tb_cop_buss_obj_txn cop on disp.object_pri_key_1 =cop.object_pri_key_1 
	   join tb_btc_accesscontrol acc on acc.object_pri_key_1 = cop.object_pri_key_1 
	  where wfm.count_group_id in ('MYQUE13','MYQUE15','MYQUE17')
	  and  cop.workflow_status  in ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK')
--	  and cop.login_id =v_id
	  group by count_group_id)T;
*/
---------------------------------------------------------------------------------------------------
	select json_build_object('MY_QUE_GEN',"QUE1",'MY_QUE',"REW",'MY_QUE_REW',"GEN_REW",'MY_QUE_REJ',"REJ",'MY_ALL_QUE',"MY_ALL_QUE",'MY_BACKEND_QUE',"MY_BACKEND_QUE")into v_data
      from (select count(disp.object_pri_key_1) as "count"
				from tb_cop_metadata_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				      --                      and cop.object_pri_key_2  = disp.object_pri_key_2  
				    --                        and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group = 'RCU' and disp.prc_grp_disp = 'USERWAIT'
				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				                            and disp.object_pri_key_2 = acc.object_pri_key_2 
				                           and disp.object_pri_key_3 = acc.object_pri_key_3 
				and acc.system_role  = 'RCU'
				and COP.workflow_status  in ('DVU_APPROVED')) as "QUE1",
          (select count(disp.object_pri_key_1) as "count"
             			from tb_cop_metadata_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
      --                      and cop.object_pri_key_2  = disp.object_pri_key_2  
    --                        and cop.object_pri_key_3 = disp.object_pri_key_3 
              and disp.process_group = 'RCU' and disp.prc_grp_disp = 'WIP'
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                            and disp.object_pri_key_2 = acc.object_pri_key_2 
                           and disp.object_pri_key_3 = acc.object_pri_key_3 
               and acc.system_role  = 'RCU'
            and COP.workflow_status  in ('RCU_ASSIGNED')
                where acc.EMP_ID = x_login_id) as "REW",
          (select count(disp.object_pri_key_1) as "count"
             from tb_cop_metadata_txn cop 
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
      --                      and cop.object_pri_key_2  = disp.object_pri_key_2  
      --                      and cop.object_pri_key_3 = disp.object_pri_key_3 
                and disp.process_group = 'RCU' and disp.prc_grp_disp IN ('REWORK')
			  join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
              join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                            and disp.object_pri_key_3 = acc.object_pri_key_3 
                            and acc.system_role  = 'RCU' 
                            where acc.EMP_ID = x_login_id
                            and cop.workflow_status  in ('RCU_REWORK','RCU_REWORK_APPROVED')
                           ) as "GEN_REW",
          (select count(disp.object_pri_key_1) as "count"
             from tb_cop_metadata_txn cop 
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
      --                      and cop.object_pri_key_2  = disp.object_pri_key_2  
      --                      and cop.object_pri_key_3 = disp.object_pri_key_3 
                and disp.process_group = 'RCU' and disp.prc_grp_disp IN ('REJECT')
			  join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
              join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                            and disp.object_pri_key_3 = acc.object_pri_key_3 
                            and acc.system_role  = 'RCU' 
                            where acc.EMP_ID = x_login_id
                            and cop.workflow_status  in ('RCU_REJECT')
                            and COP.is_active ='Y'
                           ) as "REJ",
                    (select count(disp.object_pri_key_1) as "count"
			from tb_cop_metadata_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group IN ('RCU') and disp.prc_grp_disp in ('APPROVE')
--				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  IN ('RCU')
				and cop.workflow_status  in ('RCU_APPROVED') 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
				where ACC.emp_id = X_LOGIN_ID
                           ) as "MY_ALL_QUE",
         (select count(COP.object_pri_key_1) as "count"		
		                      from tb_cop_metadata_txn cop 
            	  where exists ( select 1 from tb_btc_prc_grp_disp disp 
            	                  where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                            and process_group in ('ACCOUNT')
                                    and prc_grp_disp in ('SUCCESS'))
                   and COP.is_active ='Y' ) 
                 as "MY_BACKEND_QUE";
                           	 
	 
ELSIf upper(x_role) ='RCU CORRECTOR' then  
---------------------------------------------------------------------------------------------------------------
/*
     select replace(concat(string_agg( concat('{"',QUE_ID,'":{"count":"', cont,'"}'),','),'}'),',{',',') into v_data from
	  (select count(count_group_id) as "cont" ,
      case when COUNT_GROUP_ID = 'MYQUE16' then 'MY_QUE'
            else '' end as "que_id"  from tb_queues_workflow_mapping wfm
	    join tb_btc_prc_grp_disp disp on wfm.prc_grp_disp = disp.prc_grp_disp 
	    and wfm.process_group = disp.process_group  
	   join tb_cop_buss_obj_txn cop on disp.object_pri_key_1 =cop.object_pri_key_1 
	   join tb_btc_accesscontrol acc on acc.object_pri_key_1 = cop.object_pri_key_1 
	  where wfm.count_group_id in  ('MYQUE16')
	  and cop.object_data::json->'AOF'->'CA'->'HOME_BRANCH'->'OBJECT'->>'code' in (select branch_code from tb_emp_hrms teh 
	                                                                                   where employee_number = x_login_id)
	  and  cop.workflow_status  in ('RCU_APPROVED')
--	  and cop.login_id =v_id
	  group by count_group_id)T;
*/
---------------------------------------------------------------------------------------------------------------

select json_build_object('MY_QUE',"QUE1")into v_data
      from (((select cop1.object_pri_key_1,acc.access_type,acc.object_pri_key_1 as pk1  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			            and acc.system_role in ('RM')
			              and COP1.is_active ='Y'
			            and cop1.workflow_status = 'RCU_REWORK'
			        where acc.EMP_ID in (select employee_number from tb_emp_hrms teh 
			                    join tb_branch_rcu_corrector_mapping RCM on rcm.branch = teh.branch_code 
			                   where RCM.rcu_corrector_id =x_login_id)   
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        )
 union 
				       ( select cop1.object_pri_key_1,acc.access_type,acc.object_pri_key_1 as pk1  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			       --      and acc.system_role in ('RM','RCU_Correcter')
			              and COP1.is_active ='Y'
			            and cop1.workflow_status = 'RCU_REWORK'
			        where cop1.region_name  in (select region_name from tb_cop_metadata_txn teh 
			                    join tb_branch_rcu_corrector_mapping RCM on rcm.branch = teh.region_name 
			                   where RCM.rcu_corrector_id =x_login_id)   
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        )
				          )) as "QUE1";


elsif UPPER(X_role)='AUDITOR' THEN			  
select json_build_object('MY_QUE_GEN',"QUE1",'MY_BACKEND_QUE',"MY_BACKEND_QUE")into v_data
      from (select count(distinct cop.object_pri_key_1) as "count"
             from tb_cop_metadata_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                  and disp.process_group not in ('RM_SE','RCU') and disp.prc_grp_disp not in ('APPROVE','APPROVERQUERY','DVUQUERY','ASSIGNED','SUBMITTED','REJECT')
               join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
               and acc.system_role not in ('RM_SE','RCU')
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                           and disp.object_pri_key_3 = acc.object_pri_key_3  
                ) as "QUE1",
               (select count(cop.object_pri_key_1) as "count"
                         from tb_cop_metadata_txn cop 
            	  where exists ( select 1 from tb_btc_prc_grp_disp disp 
            	                  where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                            and process_group in ('ACCOUNT')
                                    and prc_grp_disp in ('SUCCESS'))
                   and COP.is_active ='Y' 
                ) as "MY_BACKEND_QUE";

elsif X_role='Ops CA' THEN			  
select json_build_object('MY_QUE_GEN',"QUE1")into v_data
      from (select COUNT(distinct cop.lead_id) as "count"
         from 
                (select  cop1.object_pri_key_1,disp.prc_grp_disp,disp.process_group,disp.config_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			             and disp.process_group in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNTCASA','ACCOUNT','ACCOUNTCASA','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')
              and disp.prc_grp_disp in ('FAILURE','WAIT')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNTCASA','ACCOUNT','ACCOUNTCASA','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')
                          and COP1.is_active ='Y'
                      		where cop1.object_pri_key_1 not in (select distinct TSS.object_pri_key_1 from tb_service_audit tss
                                                 where process_group ='ACCOUNT' 
                                                 and TSS.prc_grp_disp ='SUCCESS')
               order by 
               coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        --  limit  100
				          ) tt
             join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1
            ) as "QUE1";
               
  
ELSIf x_role in  ('BSG','Product Supervisor') THEN				  

select json_build_object('MY_RMSE_QUE',"RMQUE",'MY_APPROVER_QUE',"APP_QUE",'MY_DVU_QUE',"DVU_QUE",'MY_RCU_QUE',"RCU_QUE",'MY_RCU_COR_QUE',"RCU_COR_QUE",'MY_QUE_REJ',"MY_QUE_REJ",
                         'MY_BACKEND_QUE',"MY_BACKEND_QUE",'MY_QUE_GEN',"MY_QUE_GEN",'MY_ALL_QUE',"MY_ALL_QUE",'RUS_REASSIGNMENT_QUE',"RUS_REASSIGNMENT_QUE")into v_data
      from (select count(disp.object_pri_key_1) as "count"
                   from tb_cop_metadata_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                        and disp.process_group  in ('RM_SE') and disp.prc_grp_disp  in ('APPROVERQUERY','DVUQUERY','ASSIGNED')
--			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
                join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
               and acc.system_role ='RM' and COP.is_active ='Y'
               and COP.workflow_status  in  ('ASSIGNED','DVU_REWORK','BOM_REWORK','MOVETOASSISTED')
               and  COP.account_no is not null 
              and  COP.account_no <>'') as "RMQUE",
           (select count(disp.object_pri_key_1) as "count"
            from tb_cop_metadata_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group in ('RM_SE') and disp.prc_grp_disp in ('APPROVEDQUERY','DVUAPPROVEDQUERY','SUBMITTED','APPROVERQUERY','DVUQUERY')
--			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
                join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                and ACC.system_role = 'RM'
                and is_active ='Y'
                and cop.workflow_status  in ('SUBMITTED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REWORK')) as "APP_QUE",			   
	     (select count(disp.object_pri_key_1) as "count" 
                         from tb_cop_metadata_txn cop  
			              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
			              and disp.process_group IN('DVU') and disp.prc_grp_disp IN ('WIP','USERWAIT','REWORK')
--						   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--			              and wfm.process_group = disp.process_group 
			            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			                            and disp.object_pri_key_2 = acc.object_pri_key_2 
			                           and disp.object_pri_key_3 = acc.object_pri_key_3 
			               and acc.system_role  = 'DVU'
			               and COP.workflow_status  in ('BOM_APPROVED','CPVAPPROVED','BOM_REWORK','BOM_APPROVED','DVU_ASSIGNED','DVU_REWORK','BOM_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_REWORK_APPROVED')) as "DVU_QUE",			   	  
         (select count(disp.object_pri_key_1) as "count"
	    	from tb_cop_metadata_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group  = 'RCU' and disp.prc_grp_disp in  ('WIP','USERWAIT','REWORK')
--			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
            and acc.system_role ='RCU'
            and COP.workflow_status  in ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REWORK')) as "RCU_QUE",
         (select count(disp.object_pri_key_1) as "count"
	                    from tb_cop_metadata_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
--			        join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				   and wfm.process_group = disp.process_group 
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  = 'RCU_Correcter' and COP.is_active ='Y'
				   and COP.workflow_status  = 'RCU_REWORK'
				   ) as "RCU_COR_QUE",
         (select count(disp.object_pri_key_1) as "count"
	                    from tb_cop_metadata_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group IN('RM_SE','BOM_APPROVER','RCU') and disp.prc_grp_disp IN ('REJECT')
--			        join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				   and wfm.process_group = disp.process_group 
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  IN('RM','BOM','RCU')
				   and ACC.access_type = 'R'
				   and COP.workflow_status  IN ('REJECTED','BOM_REJECT','RCU_REJECT')
				   and COP.is_active ='Y') as "MY_QUE_REJ",
         (select count(COP.object_pri_key_1) as "count"
	                     from tb_cop_metadata_txn cop 
            	  where exists ( select 1 from tb_btc_prc_grp_disp disp 
            	                  where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                            and process_group in ('ACCOUNT')
                                    and prc_grp_disp in ('SUCCESS'))
                   and COP.is_active ='Y' 
                          --and COP.workflow_status  ='ACCOUNT_ACTIVATED'
                          ) as "MY_BACKEND_QUE",
         ( select COUNT(distinct cop.lead_id) as "count"
         from 
                (select  cop1.object_pri_key_1,disp.prc_grp_disp,disp.process_group,disp.config_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			             and disp.process_group in ('CIF','CERSAI','ACCOUNTCASA','ACCOUNT','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN')
              and disp.prc_grp_disp in ('FAILURE','WAIT')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role in ('CIF','CERSAI','ACCOUNTCASA','ACCOUNT','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN')
                          and COP1.is_active ='Y'
                      		where cop1.object_pri_key_1 not in (select distinct TSS.object_pri_key_1 from tb_service_audit tss
                                                 where process_group ='ACCOUNT' 
                                                 and TSS.prc_grp_disp ='SUCCESS')
               order by 
               coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          --limit  100
				          ) tt
             join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1
             ) as "MY_QUE_GEN",
         (select count(distinct disp.object_pri_key_1) as "count" 
              from tb_cop_metadata_txn cop
  join tb_btc_prc_grp_disp disp on disp.object_pri_key_1 = cop.object_pri_key_1
  join tb_btc_accesscontrol acc on acc.object_pri_key_1 = disp.object_pri_key_1
  and COP.object_pri_key_1 =ACC.object_pri_key_1) as "MY_ALL_QUE",
    (select count(distinct disp.object_pri_key_1)
      from tb_cop_metadata_txn cop  
      join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                                  and disp.process_group  = 'RU' 
                                  and disp.prc_grp_disp  in ('RU_ASSIGN','RU_SUBMITTED','RU_USERWAIT')
	  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1  
	   and acc.system_role ='RU' and cop.is_active ='Y'
       --WHERE acc.EMP_ID in( select employee_number from tb_emp_hrms teh  where supervisor_emp_no = x_login_id )
               ) as "RUS_REASSIGNMENT_QUE";		
				  
elsif UPPER(X_role)='SE SUPERVISOR' THEN				  				  
select json_build_object('MY_RE_QUE',"QUE1")into v_data
      from (select count(disp.object_pri_key_1) as "count"
               from tb_cop_metadata_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                        and disp.process_group  in ('RM_SE') and disp.prc_grp_disp  in ('APPROVERQUERY','DVUQUERY','ASSIGNED')
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group 
                join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;
          and acc.system_role ='RM'
          and COP.workflow_status  in  ('ASSIGNED','DVU_REWORK','BOM_REWORK')
         and ACC.emp_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)) as "QUE1";

elsif UPPER(X_role)='APPROVER SUPERVISOR' THEN				  				  
select json_build_object('MY_QUE_REJ',"REJ",'MY_RE_QUE',"QUE1",'MY_ALL_QUE',"MY_ALL_QUE",'MY_BACKEND_QUE',"MY_BACKEND_QUE")into v_data
      from 
      (select count(cop.object_pri_key_1) as "count"	from tb_cop_metadata_txn cop  
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role ='BOM' --IN ('BOM','DVU','RCU')
				and cop.workflow_status  in ('BOM_REJECT') 
				where cop.modify_emp_id in (select employee_number from  tb_emp_hrms hrms  
				where supervisor_emp_no =x_login_id) and COP.is_active ='Y') as "REJ",
      (select count(disp.object_pri_key_1) as "count"
              from tb_cop_metadata_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group in ('BOM_APPROVER') and disp.prc_grp_disp in ('USERWAIT','REWORK' , 'APPROVE')
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group 
                join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                 and ACC.system_role = 'BOM'
                 and cop.is_active = 'Y'
                where  cop.workflow_status  in ('SUBMITTED','BOM_REWORK_APPROVED','BOM_REWORK', 'DVU_REWORK_APPROVED')
               and ACC.update_login_id in (select employee_number from  tb_emp_hrms hrms  where supervisor_emp_no =x_login_id)) as "QUE1",
(select count(COP.object_pri_key_1) as "count"
			from tb_cop_metadata_txn cop  
--				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
--				  and disp.process_group IN ('BOM_APPROVER','DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role ='RM' --IN ('BOM','DVU','RCU')
				and cop.is_active ='Y'
				and cop.workflow_status in ('BOM_APPROVED','BOM_REWORK_APPROVED','DVU_ASSIGNED',
			           'DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_APPROVED',
				            'RCU_ASSIGNED','RCU_REWORK','BOM_REWORK','RCU_REWORK_APPROVED')
				where ACC.update_login_id in (select employee_number from  tb_emp_hrms hrms  where supervisor_emp_no =x_login_id)) as "MY_ALL_QUE",
             (select count(COP.object_pri_key_1) as "count"
	                    from tb_cop_metadata_txn cop 
            	  where exists ( select 1 from tb_btc_prc_grp_disp disp 
            	                  where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                            and process_group in ('ACCOUNT')
                                    and prc_grp_disp in ('SUCCESS'))
                   and COP.is_active ='Y' 
                          ) as "MY_BACKEND_QUE";						  

elsif UPPER(X_role)='DVU SUPERVISOR' THEN				  				  
 select json_build_object('MY_RE_QUE',"QUE1",'MY_ALL_QUE',"MY_ALL_QUE",'MY_BACKEND_QUE',"MY_BACKEND_QUE")into v_data
      from (select count(disp.object_pri_key_1) as "count"
from tb_cop_metadata_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group  in ('DVU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group 
            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;
            and ACC.system_role ='DVU'
           and COP.workflow_status  in ('BOM_APPROVED','DVU_ASSIGNED','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_REWORK','BOM_REWORK_APPROVED')
            and ACC.emp_hierarchy_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)) as "QUE1",
(select count(disp.object_pri_key_1) as "count"
			from tb_cop_metadata_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
--				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  IN ('BOM','DVU')
				and cop.is_active ='Y'
				and cop.workflow_status  in ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
                   where  ACC.emp_hierarchy_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)) as "MY_ALL_QUE",
                               (select count(COP.object_pri_key_1) as "count"
	            from tb_cop_metadata_txn cop 
            	  where exists ( select 1 from tb_btc_prc_grp_disp disp 
            	                  where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                            and process_group in ('ACCOUNT')
                                    and prc_grp_disp in ('SUCCESS'))
                   and COP.is_active ='Y' 
                          ) as "MY_BACKEND_QUE";		

elsif UPPER(X_role)='RCU SUPERVISOR' THEN				  				  
  select json_build_object('MY_QUE_REJ',"REJ",'MY_RE_QUE',"QUE1",'MY_ALL_QUE',"MY_ALL_QUE",'MY_BACKEND_QUE',"MY_BACKEND_QUE")into v_data
      from 
      (select count(cop.object_pri_key_1) as "count"	from tb_cop_metadata_txn cop  
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role ='RCU' --IN ('BOM','DVU','RCU')
				and cop.workflow_status  in ('RCU_REJECT') 
				where cop.modify_emp_id in (select employee_number from  tb_emp_hrms hrms  
				where supervisor_emp_no =x_login_id) and COP.is_active ='Y') as "REJ",
      (select count(disp.object_pri_key_1) as "count"
			from tb_cop_metadata_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group  = 'RCU' and disp.prc_grp_disp in  ('WIP','USERWAIT','REWORK')
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group 
            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;
            and acc.system_role ='RCU'
            and COP.workflow_status  in ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REWORK')
	       and ACC.emp_id in  (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)) as "QUE1",
(select count(disp.object_pri_key_1) as "count"
			from tb_cop_metadata_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group IN ('RCU') and disp.prc_grp_disp in ('APPROVE','REWORK')
--				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  IN ('RCU')
				and cop.workflow_status  in ('RCU_APPROVED','RCU_REWORK') 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
                   where  ACC.emp_id in  (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)) as "MY_ALL_QUE",
             (select count(COP.object_pri_key_1) as "count"
   from tb_cop_metadata_txn cop 
            	  where exists ( select 1 from tb_btc_prc_grp_disp disp 
            	                  where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                            and process_group in ('ACCOUNT')
                                    and prc_grp_disp in ('SUCCESS'))
                   and COP.is_active ='Y'  
                          --and COP.workflow_status  ='ACCOUNT_ACTIVATED'
                          ) as "MY_BACKEND_QUE";		
						  
elsif UPPER(X_role)='RCU CORRECTOR SUPERVISOR' THEN				  				  
  select json_build_object('MY_RE_QUE',"QUE1")into v_data
      from (select count(disp.object_pri_key_1) as "count"
              				           from tb_cop_metadata_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  = 'RM'
				   and COP.workflow_status  = 'RCU_REWORK' 
				   where acc.EMP_ID in 	 				   (select teh2.employee_number from tb_emp_hrms teh2 
                      where branch_code in (select  branch from tb_branch_rcu_corrector_mapping tbrcm 
                                              where rcu_corrector_id in (select employee_number from tb_emp_hrms teh 
                                                                           where supervisor_emp_no =X_LOGIN_ID) )
                       and "role" in (select tfrm.role_name from tb_function_roles_mst tfrm 
                                        where default_system_role_code ='Sales Executive'))	) as "QUE1";  
						  	  

elsif UPPER(X_role) = UPPER('Risk Unit')THEN	

  select COUNT(1) into V_GEN_QUE_CNT from tb_cop_metadata_txn cop1  
  join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
  where disp.process_group ='RU' 
  and disp.prc_grp_disp ='RU_USERWAIT' and COP1.is_active ='Y';
  
  select COUNT(1) into V_ASSIGN_QUE_CNT 
  from tb_cop_metadata_txn cop1  
  join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1  and acc.system_role  = 'RU'
  where disp.process_group ='RU' 
   and disp.prc_grp_disp ='RU_ASSIGN'
   and acc.EMP_ID =x_login_id and COP1.is_active ='Y';
  
  select COUNT(1) into V_SUBMITTED_QUE_CNT 
   from tb_cop_metadata_txn cop1  
  join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1
  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1  and acc.system_role  = 'RU'
  where disp.process_group ='RU' 
   and disp.prc_grp_disp ='RU_SUBMITTED'
   and COP1.is_active ='Y'
   and acc.EMP_ID =x_login_id
  ;
 
select json_build_object('GENERAL_QUE',json_build_object('count',V_GEN_QUE_CNT),
                         'ASSIGN_QUE',json_build_object('count',V_ASSIGN_QUE_CNT),
                         'SUBMITTED_QUE',json_build_object('count',V_SUBMITTED_QUE_CNT)
                        )into v_data 
                         ;    
                        
elsif UPPER(X_role) = UPPER('Risk Unit Supervisor') THEN	

  select COUNT(1) into V_ASSIGN_QUE_CNT 
   from tb_cop_metadata_txn cop1  
  join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1
  where disp.process_group ='RU' 
  and cop1.is_active ='Y'
   and disp.prc_grp_disp in('RU_ASSIGN','RU_SUBMITTED')
  and exists (select 1 from  tb_btc_accesscontrol acc 
              where  disp.object_pri_key_1 = acc.object_pri_key_1  
               and acc.system_role  = 'RU'
               and acc.EMP_ID in( select employee_number from tb_emp_hrms teh  where supervisor_emp_no = x_login_id )
              );
  
 
select json_build_object('RUS_REASSIGNMENT_QUE',json_build_object('count',V_ASSIGN_QUE_CNT)                    
                        )into v_data 
                         ;        

                       
                        
                        
                        
                        
 elsif UPPER(X_role)='CPV' THEN				  				  
 select json_build_object('MY_CPV',"MY_CPV")into v_data
      from 
      (select count(disp.object_pri_key_1) as "count"
	               	 From tb_cop_metadata_txn cop  
		join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
		  and disp.process_group = 'CPV' and disp.prc_grp_disp in ('ASSIGNMENTPENDING','ASSIGNED')
		   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
		join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
		and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'CPV'
		and COP.workflow_status  in ('ASSIGNMENTPENDING','ASSIGNED')
		 )
			 as "MY_CPV";
    

			
			

ELSIf upper(x_role) ='MIDOFFICE_DIY' then

 select json_build_object('Pending_midoffice',"Pending_midoffice",'Pending_cc_od',"Pending_cc_od", 'All_midoffice', "All_midoffice") into v_data
      from (select count(disp.object_pri_key_1) as "count"
            From tb_cop_metadata_txn cop  
		join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
		  and disp.process_group = 'DIYWEBAPP' and disp.prc_grp_disp = 'WIP'
		   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
		join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and acc.system_role  = 'Midoffice_DIY'
		and COP.workflow_status  in ('WIP')) as "Pending_midoffice",
          (select count(disp.object_pri_key_1) as "count"
	               	 From tb_cop_metadata_txn cop  
		join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
		  and disp.process_group = 'DIYWEBAPP' and disp.prc_grp_disp = 'MIDOFFDROP'
		   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
		join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
		and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'Midoffice_DIY'
		and COP.workflow_status  in ('MIDOFFDROP')) as "Pending_cc_od",
	(select count(cop1.object_pri_key_1) as "count"  from tb_cop_metadata_txn cop1  
			          --    join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			--      and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'REJECT'
                          join tb_btc_accesscontrol acc on COP1.object_pri_key_1 = acc.object_pri_key_1 
                        and acc.system_role = 'Midoffice_DIY'
			              and COP1.is_active in ('Y','N')
			            and cop1.workflow_status in ('WIP','ASSIGNMENTPENDING' ,'MOVETOASSISTED','CPVAPPROVED','SUBMITTED','REJECTED','MDO REJECTED','PENDING','VKYC_UNABLE','SYSTEMWAIT','APPROVED','DVU_REWORK','DWREJECTED','MIDOFFDROP'))  as "All_midoffice";
                  
else 
v_data = '[{"code":"","value":"No ID exist"}]';
v_status = 'FAILURE';
END IF;
if v_data= '}' then 
V_DATA = '{"MY_QUE_GEN":{"count":"0"}}';
v_status = 'FAILURE';
end if;
OPEN x_result FOR SELECT 
            v_data  AS    "OBJECT",
            v_status as "STATUS",
            cast(now() as timestamp) as "Currrent_date";
              return x_result;   
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_vflow_queue_count_05_07_22(x_count_group_id character varying, x_login_id character varying, x_role character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_status varchar(10);   -- for status 
v_count int;
v_prc_grp VARCHAR(50);
v_role varchar(20);
v_id VARCHAR(50);

V_GEN_QUE_CNT INT ;
V_ASSIGN_QUE_CNT  INT ;
V_SUBMITTED_QUE_CNT INT ;

begin
select distinct role  into v_role from  tb_queues_workflow_mapping qwm 
join tb_emp_hrms teh on upper(qwm.access_level) = upper(teh."role")
 where teh.employee_number =x_login_id
-- AND   upper(TEH.role) = upper(x_role)
  and internal_flag ='Y'; 
 
  v_status = 'SUCCESS';
	
if upper(x_role) ='APPROVER' then

select employee_number into v_id from tb_emp_hrms teh 
 where supervisor_emp_no = x_login_id;
--select json_agg(row_to_json(t)) into v_data from  
--	(select count(count_group_id) , COUNT_GROUP_ID  from tb_queues_workflow_mapping wfm
--	join tb_btc_prc_grp_disp disp on wfm.prc_grp_disp = disp.prc_grp_disp 
--	 and wfm.process_group = disp.process_group  
--	join tb_cop_buss_obj_txn cop on disp.object_pri_key_1 =cop.object_pri_key_1 
--	 join tb_btc_accesscontrol acc on acc.object_pri_key_1 = cop.object_pri_key_1 
--	 where wfm.count_group_id in ('MYQUE3','MYQUE9','MYQUE10')
--	 group by count_group_id)t;
--	raise notice 'v :%',v_id;
-----------------------------------------------------------------------------------------

/*select replace(concat(string_agg( concat('{"',QUE_ID,'":{"count":"', cont,'"}'),','),'}'),',{',',') into v_data from
	( select count(count_group_id) as "cont" ,
      case when COUNT_GROUP_ID = 'MYQUE3' then 'MY_QUE' 
            when COUNT_GROUP_ID = 'MYQUE9' then 'MY_QUE_REJ'
            when COUNT_GROUP_ID = 'MYQUE10' then 'MY_QUE_REW'
            else '' end as "que_id"  from tb_queues_workflow_mapping wfm
	join tb_btc_prc_grp_disp disp on wfm.prc_grp_disp = disp.prc_grp_disp 
	 and wfm.process_group = disp.process_group  
	join tb_cop_buss_obj_txn cop on disp.object_pri_key_1 =cop.object_pri_key_1 
--	 join tb_btc_accesscontrol acc on acc.object_pri_key_1 = cop.object_pri_key_1 
	 where wfm.count_group_id in ('MYQUE3','MYQUE9','MYQUE10')
--	 and ACC.ACCESS_TYPE = 'R'
and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('SUBMITTED','BOM_REWORK','BOM_REJECTED')
	 and cop.login_id in(select employee_number  from tb_emp_hrms teh 
                           where upper(supervisor_emp_no) = upper(x_login_id))
	 group by count_group_id)T;
	*/
-----------------------------------------------------------------------------------------	
	select json_build_object('MY_QUE',"QUE1",'MY_QUE_REW',"REW",'MY_QUE_REJ',"REJ",'MY_ALL_QUE',"MY_ALL_QUE",'MY_BACKEND_QUE',"MY_BACKEND_QUE")into v_data
      from (select count(disp.object_pri_key_1) as "count"
             			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'USERWAIT'
				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
				and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'BOM'
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'='SUBMITTED' 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
				where ACC.update_login_id = X_LOGIN_ID and COP.is_active ='Y'
				) as "QUE1",
				--acc.emp_id in (select se_id from tb_se_app_mapping tsam where approver_id = X_LOGIN_ID)) as "QUE1",
          (select count(disp.object_pri_key_1) as "count"
                  From tb_cop_buss_obj_txn cop  
		join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
									-- and cop.object_pri_key_2  = disp.object_pri_key_2  
									 --and cop.object_pri_key_3 = disp.object_pri_key_3 
		  and disp.process_group = 'RM_SE' and disp.prc_grp_disp  in ('APPROVERQUERY','APPROVEDQUERY','DVUAPPROVEDQUERY')
             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 									 
		 join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
		    --and disp.object_pri_key_2 = acc.object_pri_key_2 
		    --and disp.object_pri_key_3 = acc.object_pri_key_3 
		    and acc.system_role  = 'BOM'
		    and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED') 
		--where ACC.emp_id = X_LOGIN_ID
		where ACC.update_login_id = X_LOGIN_ID and COP.is_active ='Y'
		) as "REW",
		--UPPER(acc.emp_id) in (select se_id from tb_se_app_mapping tsam where approver_id = X_LOGIN_ID)) as "REW",
          (select count(disp.object_pri_key_1) as "count"		
                      From tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                           -- and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'REJECT'
				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
				and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'BOM'
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'='BOM_REJECT'
				where acc.emp_id =X_LOGIN_ID
				and COP.is_active ='Y') as "REJ",
		   (select count(COP.object_pri_key_1) as "count"		
			from tb_cop_buss_obj_txn cop  
--				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 	 
--				  and disp.process_group IN ('BOM_APPROVER','DVU','RCU') and disp.prc_grp_disp in ('DVU_APPROVED','USERWAIT','WIP','REWORK') 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  ='RM'--,'DVU','RCU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_APPROVED','BOM_REWORK_APPROVED','DVU_ASSIGNED','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_APPROVED',
				                                                          'RCU_APPROVED','RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
				where ACC.update_login_id = X_LOGIN_ID and COP.is_active ='Y') as "MY_ALL_QUE",
		    (select count(COP.object_pri_key_1) as "count"		
                  from tb_cop_buss_obj_txn cop 
            	  where exists ( select 1 from tb_btc_prc_grp_disp disp 
            	                  where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                            and process_group in ('ACCOUNT')
                                    and prc_grp_disp in ('SUCCESS'))
                   and COP.is_active ='Y' ) as "MY_BACKEND_QUE";
				
                          
ELSIf upper(x_role) ='DVU' then

---------------------------------------------------------------------------------------------
/*
	select replace(concat(string_agg( concat('{"',QUE_ID,'":{"count":"', cont,'"}'),','),'}'),',{',',') into v_data from
	  (select count(count_group_id) as "cont" ,
      case when COUNT_GROUP_ID = 'MYQUE8' then 'MY_QUE_GEN' 
            when COUNT_GROUP_ID = 'MYQUE12' then 'MY_QUE'
            else '' end as "que_id"   from tb_queues_workflow_mapping wfm
	    join tb_btc_prc_grp_disp disp on wfm.prc_grp_disp = disp.prc_grp_disp 
	    and wfm.process_group = disp.process_group  
	   join tb_cop_buss_obj_txn cop on disp.object_pri_key_1 =cop.object_pri_key_1 
	   --join tb_btc_accesscontrol acc on acc.object_pri_key_1 = cop.object_pri_key_1 
	  where wfm.count_group_id in ('MYQUE8','MYQUE12')
	  and  cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_APPROVED','DVU_ASSIGNED')
--	  and cop.login_id =v_id
	  group by count_group_id)T;
*/
---------------------------------------------------------------------------------------------
select json_build_object('MY_QUE_GEN',"QUE1",'MY_QUE',"QUE", 'MY_QUE_REW', "REW",'MY_BACKEND_QUE',"MY_BACKEND_QUE",'MY_ALL_QUE',"MY_ALL_QUE")into v_data
      from (select count(disp.object_pri_key_1) as "count"
            From tb_cop_buss_obj_txn cop  
		join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
									--and cop.object_pri_key_2  = disp.object_pri_key_2  
									--and cop.object_pri_key_3 = disp.object_pri_key_3 
		  and disp.process_group = 'DVU' and disp.prc_grp_disp = 'USERWAIT' and COP.is_active ='Y'
		   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
		join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
		and disp.object_pri_key_2 = acc.object_pri_key_2 
		and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'DVU'
		and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'='BOM_APPROVED') as "QUE1",
          (select count(disp.object_pri_key_1) as "count"
	               	 From tb_cop_buss_obj_txn cop  
		join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
									--and cop.object_pri_key_2  = disp.object_pri_key_2  
									--and cop.object_pri_key_3 = disp.object_pri_key_3 
		  and disp.process_group = 'DVU' and disp.prc_grp_disp = 'WIP'
		   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
		join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
		and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'DVU'
		and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_ASSIGNED') and COP.is_active ='Y'
		where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id)) as "QUE",
          (select count(disp.object_pri_key_1) as "count"
             			 	        From tb_cop_buss_obj_txn cop  
   		     join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
and disp.process_group ='DVU' and disp.prc_grp_disp ='REWORK'
--		     join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
			join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
			  and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'DVU'
			and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_REWORK','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED')
			where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id) and COP.is_active ='Y'
		) as "REW",
          (select count(COP.object_pri_key_1) as "count"
   from tb_cop_buss_obj_txn cop 
            	  where exists ( select 1 from tb_btc_prc_grp_disp disp 
            	                  where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                            and process_group ='ACCOUNT'
                                    and prc_grp_disp ='SUCCESS')
                   and COP.is_active ='Y' 
		) as "MY_BACKEND_QUE",
	          (select count(COP.object_pri_key_1) as "count"
                      from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
--				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  IN ('DVU','RCU') and COP.is_active ='Y'
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_APPROVED','RCU_APPROVED',
				                                                          'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
				where ACC.emp_hierarchy_id = X_LOGIN_ID) as "MY_ALL_QUE";                  


ELSIf upper(x_role) ='RCU' then
---------------------------------------------------------------------------------------------------
/*   
   	select replace(concat(string_agg( concat('{"',QUE_ID,'":{"count":"', cont,'"}'),','),'}'),',{',',') into v_data from
	  (select count(count_group_id) as "cont" ,
      case when COUNT_GROUP_ID = 'MYQUE13' then 'MY_QUE_GEN' 
            when COUNT_GROUP_ID = 'MYQUE15' then 'MY_QUE'
            when COUNT_GROUP_ID = 'MYQUE17' then 'MY_GEN_REW'
            else '' end as "que_id"   from tb_queues_workflow_mapping wfm
	    join tb_btc_prc_grp_disp disp on wfm.prc_grp_disp = disp.prc_grp_disp 
	    and wfm.process_group = disp.process_group  
	   join tb_cop_buss_obj_txn cop on disp.object_pri_key_1 =cop.object_pri_key_1 
	   join tb_btc_accesscontrol acc on acc.object_pri_key_1 = cop.object_pri_key_1 
	  where wfm.count_group_id in ('MYQUE13','MYQUE15','MYQUE17')
	  and  cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK')
--	  and cop.login_id =v_id
	  group by count_group_id)T;
*/
---------------------------------------------------------------------------------------------------
	select json_build_object('MY_QUE_GEN',"QUE1",'MY_QUE',"REW",'MY_QUE_REW',"GEN_REW",'MY_QUE_REJ',"REJ",'MY_ALL_QUE',"MY_ALL_QUE",'MY_BACKEND_QUE',"MY_BACKEND_QUE")into v_data
      from (select count(disp.object_pri_key_1) as "count"
				from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				      --                      and cop.object_pri_key_2  = disp.object_pri_key_2  
				    --                        and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group = 'RCU' and disp.prc_grp_disp = 'USERWAIT'
				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				                            and disp.object_pri_key_2 = acc.object_pri_key_2 
				                           and disp.object_pri_key_3 = acc.object_pri_key_3 
				and acc.system_role  = 'RCU' and COP.is_active ='Y'
				and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_APPROVED')) as "QUE1",
          (select count(disp.object_pri_key_1) as "count"
             			from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
      --                      and cop.object_pri_key_2  = disp.object_pri_key_2  
    --                        and cop.object_pri_key_3 = disp.object_pri_key_3 
              and disp.process_group = 'RCU' and disp.prc_grp_disp = 'WIP'
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                            and disp.object_pri_key_2 = acc.object_pri_key_2 
                           and disp.object_pri_key_3 = acc.object_pri_key_3 
               and acc.system_role  = 'RCU' and COP.is_active ='Y'
            and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_ASSIGNED')
                where acc.EMP_ID = x_login_id) as "REW",
          (select count(disp.object_pri_key_1) as "count"
             from tb_cop_buss_obj_txn cop 
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
      --                      and cop.object_pri_key_2  = disp.object_pri_key_2  
      --                      and cop.object_pri_key_3 = disp.object_pri_key_3 
                and disp.process_group = 'RCU' and disp.prc_grp_disp ='REWORK'
			  join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
              join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                            and disp.object_pri_key_3 = acc.object_pri_key_3 
                            and acc.system_role  = 'RCU' and COP.is_active ='Y'
                            where acc.EMP_ID = x_login_id
                            and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_REWORK','RCU_REWORK_APPROVED')
                           ) as "GEN_REW",
          (select count(disp.object_pri_key_1) as "count"
             from tb_cop_buss_obj_txn cop 
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
      --                      and cop.object_pri_key_2  = disp.object_pri_key_2  
      --                      and cop.object_pri_key_3 = disp.object_pri_key_3 
                and disp.process_group = 'RCU' and disp.prc_grp_disp ='REJECT'
			  join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
              join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                            and disp.object_pri_key_3 = acc.object_pri_key_3 
                            and acc.system_role  = 'RCU' 
                            where acc.EMP_ID = x_login_id
                            and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_REJECT')
                            and COP.is_active ='Y'
                           ) as "REJ",
                    (select count(disp.object_pri_key_1) as "count"
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group ='RCU' and disp.prc_grp_disp ='APPROVE'
--				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role ='RCU' and COP.is_active ='Y'
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_APPROVED') 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
				where ACC.emp_id = X_LOGIN_ID
                           ) as "MY_ALL_QUE",
         (select count(COP.object_pri_key_1) as "count"		
		                      from tb_cop_buss_obj_txn cop 
            	  where exists ( select 1 from tb_btc_prc_grp_disp disp 
            	                  where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                            and process_group ='ACCOUNT'
                                    and prc_grp_disp ='SUCCESS')
                   and COP.is_active ='Y' ) 
                 as "MY_BACKEND_QUE";
                           	 
	 
ELSIf upper(x_role) ='RCU CORRECTOR' then  
---------------------------------------------------------------------------------------------------------------
/*
     select replace(concat(string_agg( concat('{"',QUE_ID,'":{"count":"', cont,'"}'),','),'}'),',{',',') into v_data from
	  (select count(count_group_id) as "cont" ,
      case when COUNT_GROUP_ID = 'MYQUE16' then 'MY_QUE'
            else '' end as "que_id"  from tb_queues_workflow_mapping wfm
	    join tb_btc_prc_grp_disp disp on wfm.prc_grp_disp = disp.prc_grp_disp 
	    and wfm.process_group = disp.process_group  
	   join tb_cop_buss_obj_txn cop on disp.object_pri_key_1 =cop.object_pri_key_1 
	   join tb_btc_accesscontrol acc on acc.object_pri_key_1 = cop.object_pri_key_1 
	  where wfm.count_group_id in  ('MYQUE16')
	  and cop.object_data::json->'AOF'->'CA'->'HOME_BRANCH'->'OBJECT'->>'code' in (select branch_code from tb_emp_hrms teh 
	                                                                                   where employee_number = x_login_id)
	  and  cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_APPROVED')
--	  and cop.login_id =v_id
	  group by count_group_id)T;
*/
---------------------------------------------------------------------------------------------------------------

select json_build_object('MY_QUE',"QUE1")into v_data
      from (select count(disp.object_pri_key_1) as "count"
             from tb_cop_buss_obj_txn cop 
                  join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                    and disp.process_group = 'RCU_Correcter' and disp.prc_grp_disp in  ('USERWAIT')
			join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
                  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                            and acc.system_role  = 'RM'
           and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_REWORK')
	        where acc.EMP_ID in (
			 select employee_number from tb_emp_hrms teh 
			  join tb_branch_rcu_corrector_mapping RCM on rcm.branch = teh.branch_code 
			   where RCM.rcu_corrector_id =x_login_id)) as "QUE1";


elsif UPPER(X_role)='AUDITOR' THEN			  
select json_build_object('MY_QUE_GEN',"QUE1",'MY_BACKEND_QUE',"MY_BACKEND_QUE")into v_data
      from (select count(distinct cop.object_pri_key_1) as "count"
             from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                  and disp.process_group not in ('RM_SE','RCU') and disp.prc_grp_disp not in ('APPROVE','APPROVERQUERY','DVUQUERY','ASSIGNED','SUBMITTED','REJECT')
               join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
               and acc.system_role not in ('RM_SE','RCU')
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                           and disp.object_pri_key_3 = acc.object_pri_key_3  
                ) as "QUE1",
               (select count(cop.object_pri_key_1) as "count"
                         from tb_cop_buss_obj_txn cop 
            	  where exists ( select 1 from tb_btc_prc_grp_disp disp 
            	                  where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                            and process_group in ('ACCOUNT')
                                    and prc_grp_disp in ('SUCCESS'))
                   and COP.is_active ='Y' 
                ) as "MY_BACKEND_QUE";

elsif X_role='Ops CA' THEN			  
select json_build_object('MY_QUE_GEN',"QUE1")into v_data
      from (select count(distinct disp.object_pri_key_1) as "count"
  from tb_cop_buss_obj_txn cop, tb_btc_prc_grp_disp disp,tb_btc_accesscontrol acc 
			where cop.object_pri_key_1 not in (select distinct TSS.object_pri_key_1 from tb_service_audit tss
                                                 where process_group ='ACCOUNT' 
                                                 and TSS.prc_grp_disp ='SUCCESS')
			  and   cop.object_pri_key_1 = disp.object_pri_key_1
              and disp.process_group in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNTCASA','ACCOUNT','ACCOUNTCASA','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')
              and disp.prc_grp_disp in ('FAILURE','WAIT')
              and disp.object_pri_key_1 = acc.object_pri_key_1 
              and acc.system_role in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNTCASA','ACCOUNT','ACCOUNTCASA','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')
--              and DISP.process_group in (select process_group from tb_service_audit tsa2
--                              where TSA2.object_pri_key_1 =DISP.object_pri_key_1
--                                order by created_timestamp desc limit 1)
            ) as "QUE1";
               
  
ELSIf x_role in  ('BSG','Product Supervisor') THEN				  

select json_build_object('MY_RMSE_QUE',"RMQUE",'MY_APPROVER_QUE',"APP_QUE",'MY_DVU_QUE',"DVU_QUE",'MY_RCU_QUE',"RCU_QUE",'MY_RCU_COR_QUE',"RCU_COR_QUE",'MY_QUE_REJ',"MY_QUE_REJ",
                         'MY_BACKEND_QUE',"MY_BACKEND_QUE",'MY_QUE_GEN',"MY_QUE_GEN",'MY_ALL_QUE',"MY_ALL_QUE",'RUS_REASSIGNMENT_QUE',"RUS_REASSIGNMENT_QUE") into v_data
      from (select count(disp.object_pri_key_1) as "count"
                   from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                        and disp.process_group ='RM_SE' and disp.prc_grp_disp  in ('APPROVERQUERY','DVUQUERY','ASSIGNED')
--			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
                join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
               and acc.system_role ='RM' 
               and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' in  ('ASSIGNED','DVU_REWORK','BOM_REWORK') limit 1) as "RMQUE",
           (select count(disp.object_pri_key_1) as "count"
            from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group in ('RM_SE') and disp.prc_grp_disp in ('APPROVEDQUERY','DVUAPPROVEDQUERY','SUBMITTED','APPROVERQUERY')
--			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
                join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                and ACC.system_role = 'RM'
                and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('SUBMITTED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REWORK')limit 1) as "APP_QUE",			   
	     (select count(disp.object_pri_key_1) as "count" 
                         from tb_cop_buss_obj_txn cop  
			              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
			              and disp.process_group IN('DVU') and disp.prc_grp_disp IN ('WIP','USERWAIT','REWORK')
--						   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--			              and wfm.process_group = disp.process_group 
			            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			                            and disp.object_pri_key_2 = acc.object_pri_key_2 
			                           and disp.object_pri_key_3 = acc.object_pri_key_3 
			               and acc.system_role  = 'DVU'
			               and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_REWORK','BOM_APPROVED','DVU_ASSIGNED','DVU_REWORK','BOM_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_REWORK_APPROVED')limit 1) as "DVU_QUE",			   	  
         (select count(disp.object_pri_key_1) as "count"
	                   				from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group  = 'RCU' and disp.prc_grp_disp in  ('WIP','USERWAIT','REWORK')
--			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
            and acc.system_role ='RCU'
            and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REWORK')limit 1) as "RCU_QUE",
         (select count(disp.object_pri_key_1) as "count"
	                    from tb_cop_buss_obj_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
--			        join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				   and wfm.process_group = disp.process_group 
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  = 'RCU_Correcter'
				   and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_REWORK' limit 1) as "RCU_COR_QUE",
         (select count(disp.object_pri_key_1) as "count"
	                    from tb_cop_buss_obj_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group IN('RM_SE','BOM_APPROVER','RCU') and disp.prc_grp_disp IN ('REJECT')
--			        join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				   and wfm.process_group = disp.process_group 
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  IN('RM','BOM','RCU')
				   and ACC.access_type = 'R'
				   and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' IN ('REJECTED','BOM_REJECT','RCU_REJECT')
				   and COP.is_active ='Y' limit 1) as "MY_QUE_REJ",
         (select count(COP.object_pri_key_1) as "count"
	                     from tb_cop_buss_obj_txn cop 
            	  where exists ( select 1 from tb_btc_prc_grp_disp disp 
            	                  where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                            and process_group in ('ACCOUNT')
                                    and prc_grp_disp in ('SUCCESS'))
                   and COP.is_active ='Y' limit 1
                          --and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' ='ACCOUNT_ACTIVATED'
                          ) as "MY_BACKEND_QUE",
         (select count(distinct disp.object_pri_key_1) as "count"
 from tb_cop_buss_obj_txn cop, tb_btc_prc_grp_disp disp,tb_btc_accesscontrol acc 
			where cop.object_pri_key_1 not in (select distinct TSS.object_pri_key_1 from tb_service_audit tss
                                                 where process_group ='ACCOUNT' 
                                                 and TSS.prc_grp_disp ='SUCCESS')
			  and   cop.object_pri_key_1 = disp.object_pri_key_1
              and disp.process_group in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNTCASA','ACCOUNT','ACCOUNTCASA','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')
              and disp.prc_grp_disp in ('FAILURE','WAIT')
              and disp.object_pri_key_1 = acc.object_pri_key_1 
              and acc.system_role in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNTCASA','ACCOUNT','ACCOUNTCASA','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')limit 1
--              and DISP.process_group in (select process_group from tb_service_audit tsa2
--                              where TSA2.object_pri_key_1 =DISP.object_pri_key_1
--                                order by created_timestamp desc limit 1)
             ) as "MY_QUE_GEN",
         (select count(distinct disp.object_pri_key_1) as "count" 
              from tb_cop_buss_obj_txn cop
  join tb_btc_prc_grp_disp disp on disp.object_pri_key_1 = cop.object_pri_key_1
  join tb_btc_accesscontrol acc on acc.object_pri_key_1 = disp.object_pri_key_1
  and COP.object_pri_key_1 =ACC.object_pri_key_1 limit 1) as "MY_ALL_QUE",
    (select count(distinct disp.object_pri_key_1)
      from tb_cop_buss_obj_txn cop  
      join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                                  and disp.process_group  = 'RU' 
                                  and disp.prc_grp_disp  in ('RU_ASSIGN','RU_SUBMITTED','RU_USERWAIT')
	  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1  
	   and acc.system_role ='RU' limit 1
       --WHERE acc.EMP_ID in( select employee_number from tb_emp_hrms teh  where supervisor_emp_no = x_login_id )
               ) as "RUS_REASSIGNMENT_QUE";			
				  
elsif UPPER(X_role)='SE SUPERVISOR' THEN				  				  
select json_build_object('MY_RE_QUE',"QUE1")into v_data
      from (select count(disp.object_pri_key_1) as "count"
               from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                        and disp.process_group  in ('RM_SE') and disp.prc_grp_disp  in ('APPROVERQUERY','DVUQUERY','ASSIGNED')
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group 
                join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;
          and acc.system_role ='RM'
          and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' in  ('ASSIGNED','DVU_REWORK','BOM_REWORK')
         and ACC.emp_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)) as "QUE1";

elsif UPPER(X_role)='APPROVER SUPERVISOR' THEN				  				  
select json_build_object('MY_QUE_REJ',"REJ",'MY_RE_QUE',"QUE1",'MY_ALL_QUE',"MY_ALL_QUE",'MY_BACKEND_QUE',"MY_BACKEND_QUE")into v_data
      from 
      (select count(cop.object_pri_key_1) as "count"	from tb_cop_buss_obj_txn cop  
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role ='BOM' --IN ('BOM','DVU','RCU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REJECT') 
				where cop.modify_emp_id in (select employee_number from  tb_emp_hrms hrms  
				where supervisor_emp_no =x_login_id) and COP.is_active ='Y') as "REJ",
      (select count(disp.object_pri_key_1) as "count"
              from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group in ('BOM_APPROVER') and disp.prc_grp_disp in ('USERWAIT','REWORK' , 'APPROVE')
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group 
                join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                 and ACC.system_role = 'BOM'
                where  cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('SUBMITTED','BOM_REWORK_APPROVED','BOM_REWORK', 'DVU_REWORK_APPROVED')
               and ACC.update_login_id in (select employee_number from  tb_emp_hrms hrms  where supervisor_emp_no =x_login_id)) as "QUE1",
(select count(COP.object_pri_key_1) as "count"
			from tb_cop_buss_obj_txn cop  
--				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
--				  and disp.process_group IN ('BOM_APPROVER','DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role ='RM' --IN ('BOM','DVU','RCU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_APPROVED','RCU_APPROVED','BOM_REWORK_APPROVED','DVU_ASSIGNED','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_APPROVED',
				                                                          'RCU_ASSIGNED','RCU_REWORK','BOM_REWORK','RCU_REWORK_APPROVED') 
				where ACC.update_login_id in (select employee_number from  tb_emp_hrms hrms  where supervisor_emp_no =x_login_id)) as "MY_ALL_QUE",
             (select count(COP.object_pri_key_1) as "count"
	                    from tb_cop_buss_obj_txn cop 
            	  where exists ( select 1 from tb_btc_prc_grp_disp disp 
            	                  where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                            and process_group in ('ACCOUNT')
                                    and prc_grp_disp in ('SUCCESS'))
                   and COP.is_active ='Y' 
                          ) as "MY_BACKEND_QUE";						  

elsif UPPER(X_role)='DVU SUPERVISOR' THEN				  				  
 select json_build_object('MY_RE_QUE',"QUE1",'MY_ALL_QUE',"MY_ALL_QUE",'MY_BACKEND_QUE',"MY_BACKEND_QUE")into v_data
      from (select count(disp.object_pri_key_1) as "count"
from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group  in ('DVU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group 
            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;
            and ACC.system_role ='DVU'
           and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_APPROVED','DVU_ASSIGNED','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_REWORK','BOM_REWORK_APPROVED')
            and ACC.emp_hierarchy_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)) as "QUE1",
(select count(disp.object_pri_key_1) as "count"
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
--				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  IN ('BOM','DVU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_APPROVED','RCU_APPROVED'
				                                                          'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
                   where  ACC.emp_hierarchy_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)) as "MY_ALL_QUE",
                               (select count(COP.object_pri_key_1) as "count"
	            from tb_cop_buss_obj_txn cop 
            	  where exists ( select 1 from tb_btc_prc_grp_disp disp 
            	                  where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                            and process_group in ('ACCOUNT')
                                    and prc_grp_disp in ('SUCCESS'))
                   and COP.is_active ='Y' 
                          ) as "MY_BACKEND_QUE";		

elsif UPPER(X_role)='RCU SUPERVISOR' THEN				  				  
  select json_build_object('MY_QUE_REJ',"REJ",'MY_RE_QUE',"QUE1",'MY_ALL_QUE',"MY_ALL_QUE",'MY_BACKEND_QUE',"MY_BACKEND_QUE")into v_data
      from 
      (select count(cop.object_pri_key_1) as "count"	from tb_cop_buss_obj_txn cop  
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role ='RCU' --IN ('BOM','DVU','RCU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('RCU_REJECT') 
				where cop.modify_emp_id in (select employee_number from  tb_emp_hrms hrms  
				where supervisor_emp_no =x_login_id) and COP.is_active ='Y') as "REJ",
      (select count(disp.object_pri_key_1) as "count"
			from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group  = 'RCU' and disp.prc_grp_disp in  ('WIP','USERWAIT','REWORK')
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group 
            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;
            and acc.system_role ='RCU'
            and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REWORK')
	       and ACC.emp_id in  (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)) as "QUE1",
(select count(disp.object_pri_key_1) as "count"
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group IN ('RCU') and disp.prc_grp_disp in ('APPROVE','REWORK')
--				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  IN ('RCU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_APPROVED','RCU_REWORK') 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
                   where  ACC.emp_id in  (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)) as "MY_ALL_QUE",
             (select count(COP.object_pri_key_1) as "count"
   from tb_cop_buss_obj_txn cop 
            	  where exists ( select 1 from tb_btc_prc_grp_disp disp 
            	                  where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                            and process_group in ('ACCOUNT')
                                    and prc_grp_disp in ('SUCCESS'))
                   and COP.is_active ='Y'  
                          --and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' ='ACCOUNT_ACTIVATED'
                          ) as "MY_BACKEND_QUE";		
						  
elsif UPPER(X_role)='RCU CORRECTOR SUPERVISOR' THEN				  				  
  select json_build_object('MY_RE_QUE',"QUE1")into v_data
      from (select count(disp.object_pri_key_1) as "count"
              				           from tb_cop_buss_obj_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  = 'RM'
				   and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_REWORK' 
				   where acc.EMP_ID in 	 				   (select teh2.employee_number from tb_emp_hrms teh2 
                      where branch_code in (select  branch from tb_branch_rcu_corrector_mapping tbrcm 
                                              where rcu_corrector_id in (select employee_number from tb_emp_hrms teh 
                                                                           where supervisor_emp_no =X_LOGIN_ID) )
                       and "role" in (select tfrm.role_name from tb_function_roles_mst tfrm 
                                        where default_system_role_code ='Sales Executive'))	) as "QUE1";  
						  	  

elsif UPPER(X_role) = UPPER('Risk Unit')THEN	

  select COUNT(1) into V_GEN_QUE_CNT from tb_btc_prc_grp_disp disp
  where disp.process_group ='RU' 
   and disp.prc_grp_disp ='RU_USERWAIT';
  
  select COUNT(1) into V_ASSIGN_QUE_CNT 
  from tb_btc_prc_grp_disp disp
  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1  and acc.system_role  = 'RU'
  where disp.process_group ='RU' 
   and disp.prc_grp_disp ='RU_ASSIGN'
   and acc.EMP_ID =x_login_id
  ;
  
  select COUNT(1) into V_SUBMITTED_QUE_CNT 
  from tb_btc_prc_grp_disp disp
  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1  and acc.system_role  = 'RU'
  where disp.process_group ='RU' 
   and disp.prc_grp_disp ='RU_SUBMITTED'
   and acc.EMP_ID =x_login_id
  ;
 
select json_build_object('GENERAL_QUE',json_build_object('count',V_GEN_QUE_CNT),
                         'ASSIGN_QUE',json_build_object('count',V_ASSIGN_QUE_CNT),
                         'SUBMITTED_QUE',json_build_object('count',V_SUBMITTED_QUE_CNT)
                        )into v_data 
                         ;    
                        
elsif UPPER(X_role) = UPPER('Risk Unit Supervisor') THEN	

  select COUNT(1) into V_ASSIGN_QUE_CNT 
   from tb_btc_prc_grp_disp disp
  where disp.process_group ='RU' 
   and disp.prc_grp_disp in('RU_ASSIGN','RU_SUBMITTED')
  and exists (select 1 from  tb_btc_accesscontrol acc 
              where  disp.object_pri_key_1 = acc.object_pri_key_1  
               and acc.system_role  = 'RU'
               and acc.EMP_ID in( select employee_number from tb_emp_hrms teh  where supervisor_emp_no = x_login_id )
              );
  
 
select json_build_object('RUS_REASSIGNMENT_QUE',json_build_object('count',V_ASSIGN_QUE_CNT)                    
                        )into v_data 
                         ;        

else 
v_data = '[{"code":"","value":"No ID exist"}]';
v_status = 'FAILURE';
END IF;
if v_data= '}' then 
V_DATA = '{"MY_QUE_GEN":{"count":"0"}}';
v_status = 'FAILURE';
end if;
OPEN x_result FOR SELECT 
            v_data  AS    "OBJECT",
           v_status as "STATUS",
           cast(now() as timestamp) as "Currrent_date";
              return x_result;   
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_vflow_queue_details(x_count_group_id character varying, x_login_id character varying, x_role character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_role varchar(100);
v_count int;
v_prc_grp VARCHAR(100);
v_prc_grp_disp VARCHAR(100);
begin
select role into v_role from tb_emp_hrms 
 where employee_number = x_login_id;

-----FOR RM_SE SUBMITTED LEADS  
--ELSIf upper(x_role) ='MIDOFFICE' and x_count_group_id in ('MIDOFFICEMYQUE') then

if upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE') then 
 select json_agg(row_to_json(t)) into v_data from
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",	
   	            coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",	
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.update_login_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'USERWAIT'
				join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
				and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'BOM'
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'='SUBMITTED' 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
				where ACC.update_login_id = X_LOGIN_ID
			       order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
			--acc.emp_id in (select se_id from tb_se_app_mapping tsam where approver_id = X_LOGIN_ID))T;

ELSIf  upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE_REW') then 
-----------FOR APPROVER REWORK LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
--	        ACC.access_type as "ACCESS_TYPE",
       case when disp.process_group = 'RM_SE' 
             and disp.prc_grp_disp IN ('APPROVERQUERY') 
             and acc.system_role  = 'BOM'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_REWORK' then 
             'R'
             when disp.process_group = 'RM_SE' 
             and disp.prc_grp_disp IN ('APPROVEDQUERY') 
             and acc.system_role  = 'BOM'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_REWORK_APPROVED' then 
             'W'
             when disp.process_group = 'RM_SE' 
             and disp.prc_grp_disp IN ('DVUAPPROVEDQUERY') 
             and acc.system_role  = 'BOM'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'DVU_REWORK_APPROVED' then 
             'W'
             else ACC.access_type end as "ACCESS_TYPE",
             case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'BOM_REWORK'
                  then 'APPROVER_REWORK'
                  when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'BOM_REWORK_APPROVED'
                  then 'APPROVER_REWORK_APPROVED' 
                  else cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' end as "STAT",
                  cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",		
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",		
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			ACC.update_login_id as "ASSIGNED_TO"
		From tb_cop_buss_obj_txn cop  
		join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
									-- and cop.object_pri_key_2  = disp.object_pri_key_2  
									 --and cop.object_pri_key_3 = disp.object_pri_key_3 
		  and disp.process_group = 'RM_SE' 
		  and disp.prc_grp_disp  in ('APPROVERQUERY','APPROVEDQUERY','DVUAPPROVEDQUERY')
             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 									 
		 join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
		    --and disp.object_pri_key_2 = acc.object_pri_key_2 
		    --and disp.object_pri_key_3 = acc.object_pri_key_3 
		    and acc.system_role  = 'BOM'
		    and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED') 
		--where ACC.emp_id = X_LOGIN_ID
		where ACC.update_login_id = X_LOGIN_ID
	order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
	--UPPER(acc.emp_id) in (select se_id from tb_se_app_mapping tsam where approver_id = X_LOGIN_ID))T;

ELSIf  upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE_REJ') then 
-----------FOR APPROVER REJECTED LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
			     OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			     coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",		
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
		     cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.update_login_id as "ASSIGNED_TO"
			From tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                           -- and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'REJECT'
				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
				and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'BOM'
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'='BOM_REJECT'
				where acc.emp_id =X_LOGIN_ID--in (select se_id from tb_se_app_mapping tsam where approver_id = X_LOGIN_ID)
				and COP.is_active ='Y'
			      order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
				        
ELSIf x_role ='Approver Supervisor'  and x_count_group_id in ('MY_QUE_REJ') 
then

select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",		     
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
						case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' end as "STAT",
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =ACC.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO" 
		from tb_cop_buss_obj_txn cop  
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role ='RM' --IN ('BOM','DVU','RCU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REJECT','RCU_REJECT') 
				where cop.modify_emp_id in (select employee_number from  tb_emp_hrms hrms  
				where supervisor_emp_no =X_LOGIN_ID) and COP.is_active ='Y'
			       order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end)T;
				        
ELSIf x_role ='RCU Supervisor'  and x_count_group_id in ('MY_QUE_REJ') 
then

select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",		     
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
						case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' end as "STAT",
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =ACC.object_pri_key_1
			 and tba.system_role ='RM'
			 )as "ASSIGNED_TO" 
		from tb_cop_buss_obj_txn cop  
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role ='RM' --IN ('BOM','DVU','RCU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' ='RCU_REJECT' 
				where cop.modify_emp_id in (select employee_number from  tb_emp_hrms hrms  
				where supervisor_emp_no =X_LOGIN_ID) and COP.is_active ='Y'
			       order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end)T;
			
-----------FOR APPROVER ACCOUNT ACTIVATED LEADS				        
ELSIf  upper(x_role) ='APPROVER'  and x_count_group_id in ('MY_ALL_QUE') 
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",		     
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			     coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",	
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'
			 end  as "STAT",
			     cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.update_login_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
--				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 	 
--				  and disp.process_group IN ('BOM_APPROVER','DVU','RCU') and disp.prc_grp_disp in ('DVU_APPROVED','USERWAIT','WIP','REWORK') 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  ='RM'--,'DVU','RCU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_APPROVED','BOM_REWORK_APPROVED','DVU_ASSIGNED','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_APPROVED',
				                                                          'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
				where ACC.update_login_id = X_LOGIN_ID
			       order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end  )T;				        
				        
				        
---------FOR DVU GENRAL LEADS                          
ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE_GEN') then
 	
 select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",	
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",                  
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"
			From tb_cop_buss_obj_txn cop  
		join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
									--and cop.object_pri_key_2  = disp.object_pri_key_2  
									--and cop.object_pri_key_3 = disp.object_pri_key_3 
		  and disp.process_group = 'DVU' and disp.prc_grp_disp = 'USERWAIT'
		   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
		join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
		and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'DVU'
		and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_APPROVED')
		--where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id)
		order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
	--UPPER(acc.update_login_id) = UPPER(x_login_id))T;

---------FOR DVU MY QUEUE BUCKET
ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE') then
 	       
 select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			ACC.emp_hierarchy_id as "ASSIGNED_TO"
	 From tb_cop_buss_obj_txn cop  
		join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
									--and cop.object_pri_key_2  = disp.object_pri_key_2  
									--and cop.object_pri_key_3 = disp.object_pri_key_3 
		  and disp.process_group = 'DVU' and disp.prc_grp_disp = 'WIP'
		   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
		join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
		and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'DVU'
		and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_ASSIGNED')
		where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id)
		order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;

---------FOR DVU REWORK BUCKET
ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE_REW') then
 	       
 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
--	ACC.access_type as "ACCESS_TYPE",
 case when disp.process_group = 'DVU' 
             and disp.prc_grp_disp IN ('REWORK') 
             and acc.system_role  = 'DVU'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'IN ('DVU_REWORK','DVU_REWORK_APPROVED','BOM_REWORK_APPROVED','BOM_REWORK') then 
             'R'
             when disp.process_group = 'RM_SE' 
             and disp.prc_grp_disp IN ('DVUAPPROVEDQUERY') 
             and acc.system_role  = 'DVU'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'IN ('DVU_REWORK','DVU_REWORK_APPROVED' )then 
             'R'
             else ACC.access_type end as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			ACC.emp_hierarchy_id as "ASSIGNED_TO"
	        From tb_cop_buss_obj_txn cop  
   		     join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
and disp.process_group IN('DVU') and disp.prc_grp_disp IN ('REWORK')
--		     join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
			join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
			  and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'DVU'
			and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_REWORK','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED')
			where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id)
		order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
       
ELSIf x_role ='DVU'  and x_count_group_id in ('MY_ALL_QUE') 
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
   	            coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
		case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'
			 end  as "STAT",
			     cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.update_login_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
--				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  IN ('DVU','RCU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_APPROVED',
				                                                          'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
				where ACC.emp_hierarchy_id = X_LOGIN_ID
			       order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;				        
				        
---------FOR RCU GENRAL QUEUE BUCKET
       
 ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_GEN') then
  
   select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
					      --                      and cop.object_pri_key_2  = disp.object_pri_key_2  
					    --                        and cop.object_pri_key_3 = disp.object_pri_key_3 
					  and disp.process_group = 'RCU' and disp.prc_grp_disp = 'USERWAIT'
					   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
					                                 and wfm.process_group = disp.process_group 
					join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
					                            and disp.object_pri_key_2 = acc.object_pri_key_2 
					                           and disp.object_pri_key_3 = acc.object_pri_key_3 
					and acc.system_role  = 'RCU'
					and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_APPROVED')
				order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;

---------FOR RCU MY QUEUE BUCKET
       
 ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE') then
  
   select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			ACC.EMP_ID as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
      --                      and cop.object_pri_key_2  = disp.object_pri_key_2  
    --                        and cop.object_pri_key_3 = disp.object_pri_key_3 
              and disp.process_group = 'RCU' and disp.prc_grp_disp = 'WIP'
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                            and disp.object_pri_key_2 = acc.object_pri_key_2 
                           and disp.object_pri_key_3 = acc.object_pri_key_3 
               and acc.system_role  = 'RCU'
            and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_ASSIGNED')
                where acc.EMP_ID = x_login_id
               order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
        
---------FOR RCU GENRAL REWORK QUEUE BUCKET
       
 ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_REW') then
  
   select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	    --ACC.access_type as "ACCESS_TYPE",
	    case when disp.process_group = 'RCU' 
             and disp.prc_grp_disp IN ('REWORK') 
             and acc.system_role  = 'RCU'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
             'R'
             when disp.process_group = 'RCU' 
             and disp.prc_grp_disp IN ('REWORK') 
             and acc.system_role  = 'RCU'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
             'W'else ACC.access_type end as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
									(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_buss_obj_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop 
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
      --                      and cop.object_pri_key_2  = disp.object_pri_key_2  
      --                      and cop.object_pri_key_3 = disp.object_pri_key_3 
                and disp.process_group = 'RCU' and disp.prc_grp_disp ='REWORK'
			  join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
              join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                            and acc.system_role  = 'RCU'
--            and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_ASSIGNED')
        and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_REWORK','RCU_REWORK_APPROVED')
        where acc.EMP_ID = x_login_id 
               order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
----------------------------------------------------------------------------------------------------------------				        
ELSIf  upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_REJ') then 
-----------FOR RCU REJECTED LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
			     OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			     coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
		     cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.EMP_ID as "ASSIGNED_TO"
			From tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                           -- and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group = 'RCU' and disp.prc_grp_disp = 'REJECT'
				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
				and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'RCU'
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'='RCU_REJECT'
				where acc.emp_id =X_LOGIN_ID--in (select se_id from tb_se_app_mapping tsam where approver_id = X_LOGIN_ID)
				and COP.is_active ='Y'
			      order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
				        
ELSIf  upper(x_role) ='RCU'  and x_count_group_id in ('MY_ALL_QUE') 
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",		     
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.update_login_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group ='RCU' and disp.prc_grp_disp ='APPROVE'
--				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  ='RCU'
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' ='RCU_APPROVED' 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
				where ACC.emp_id = X_LOGIN_ID
			       order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
				        
----------------------------------------------------------------------------------------------------------------
 ---------FOR RCU CORRECTOR VIEW QUEUE BUCKET      
 ELSIf upper(x_role) ='RCU CORRECTOR' and x_count_group_id in ('MY_QUE') then
   
   select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	       ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
                  where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
--			cop.login_id as "ASSIGNED_USER_ID",
(select acc1.emp_id  from tb_btc_accesscontrol acc1 
			  where acc1.object_pri_key_1 =acc.object_pri_key_1 
			  and acc1.system_role ='RM')
			as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
--			(select rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
--                 where branch in (select branch_code from tb_emp_hrms teh 
--                                   where employee_number = acc.emp_id
--                                    )) as "ASSIGNED_TO"
			(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh , tb_btc_accesscontrol tba,
                 tb_cop_buss_obj_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
 	           from tb_cop_buss_obj_txn cop 
                  join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                    and disp.process_group = 'RCU_Correcter' and disp.prc_grp_disp in  ('USERWAIT')
                  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                            and acc.system_role  = 'RM'
           and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' ='RCU_REWORK'
	        where acc.EMP_ID in (
			 select employee_number from tb_emp_hrms teh 
			  join tb_branch_rcu_corrector_mapping RCM on rcm.branch = teh.branch_code 
			   where RCM.rcu_corrector_id =x_login_id)
			  order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
       
ELSIf x_role ='Auditor' and x_count_group_id in ('MY_QUE_GEN') 
then

    select json_agg(row_to_json(t)) into v_data from  
	(select distinct object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
	       --wfm.count_group_id as "que_id",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select distinct employee_number from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                  and disp.process_group not in ('RM_SE','RCU') and disp.prc_grp_disp not in ('APPROVE','APPROVERQUERY','DVUQUERY','ASSIGNED','SUBMITTED','REJECT')
               join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
               and acc.system_role not in ('RM_SE','RCU') )T;
				        
--ELSIf  upper(x_role) ='AUDITOR'  and x_count_group_id in ('MY_BACKEND_QUE') 
--then
--
--  select json_agg(row_to_json(t)) into v_data from  
--	(select  distinct object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
----	wfm.count_group_id as "que_id",
----	ACC.access_type as "ACCESS_TYPE",
--	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
--			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
--			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
----			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
----			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
----			     END as "name",
--                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
--			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
--			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "ENTITY_CRN",			
--			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
--			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
----			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
--			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
--			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then 'Individual'
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
--			     end as "CONSTITUTION_TYPE",
--			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
--				(select CITY from tb_branch_mst tbm      
--               where branch_cd in (select object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE'))  as "REGION_NAME",
--			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
--			cop.login_id as "ASSIGNED_USER_ID",
--			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
--			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
--			'' as "CURRENT_WORKSTEP"  
--		from tb_cop_buss_obj_txn cop  
--		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
-- 		              and process_group in ('ACCOUNT')
--                           and prc_grp_disp in ('SUCCESS'))T;
				        
ELSIf x_role in ('Ops CA','BSG','Product Supervisor') and x_count_group_id in ('MY_QUE_GEN') 
then

    select json_agg(row_to_json(t)) into v_data from  
	(select distinct   object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
           COP.object_pri_key_1 ,
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd in (select object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE'))  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			case when DISP.prc_grp_disp = 'WAIT'
			     then 'NA'
			     else(select case when (response_payload is null or response_payload='') 
			 			then exception_payload 
						when response_payload is not null 
						then response_payload 
						else '' end 
			     from tb_service_audit tsa 
			     where object_pri_key_1 =COP.object_pri_key_1 
			     order by created_timestamp desc limit 1  )end as "ERROR_TAG",
			case when DISP.prc_grp_disp = 'WAIT'
			     then 'NA'
			     else (select request_payload
			             from tb_service_audit tsa 
			             where object_pri_key_1 =COP.object_pri_key_1 
			             order by created_timestamp desc limit 1)
			             end as "REQUEST_TAG",
			case when DISP.prc_grp_disp = 'WAIT'
			     then (select DISP.process_group from tb_service_audit tsa
			     join tb_btc_prc_grp_disp CFG on CFG.process_group = TSA.process_group 
				  where TSA.object_pri_key_1 =COP.object_pri_key_1 
				order by TSA.created_timestamp desc limit 1  )
			     else (select TSA.process_group from tb_service_audit tsa
			     join tb_btc_prc_grp_disp_cfg CFG on CFG.process_group = TSA.process_group 
				  where TSA.object_pri_key_1 =COP.object_pri_key_1 
				order by TSA.created_timestamp desc limit 1  )
				end as "PROCESS_GROUP",
			case when DISP.prc_grp_disp = 'WAIT'
			     then (select DISP.prc_grp_disp from tb_service_audit tsa 
				 where object_pri_key_1 =COP.object_pri_key_1 
				order by created_timestamp desc
				limit 1)
			     else (select tsa.prc_grp_disp from tb_service_audit tsa 
				 where object_pri_key_1 =COP.object_pri_key_1 
				order by created_timestamp desc
				limit 1  )end as  "DISPOSITION",
			case when DISP.prc_grp_disp = 'WAIT'
			     then 'NA'
			     else (select case when tbpgd.config_id = '145' then 'BJCIFINDAOFUPD' 
			             when tbpgd.config_id = '117' then 'BJCIFAOFUPD'
			         else tbpgd.event_process end 
			from tb_service_audit tsa , tb_btc_prc_grp_disp_cfg tbpgd 
				 where disp.object_pri_key_1 =COP.object_pri_key_1 
				 and tbpgd.process_group = tsa.process_group 
				 and tbpgd.prc_grp_disp = tsa.prc_grp_disp
				 and DISP.config_id = cast(tbpgd.config_id as VARCHAR)
				order by tsa.created_timestamp desc
				limit 1  )end as  "EVENT_PROCESS",
			(select distinct employee_number from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" 
		     	    from tb_cop_buss_obj_txn cop, tb_btc_prc_grp_disp disp,tb_btc_accesscontrol acc 
			where cop.object_pri_key_1 not in (select distinct TSS.object_pri_key_1 from tb_service_audit tss
                                                 where process_group ='ACCOUNT' 
                                                 and TSS.prc_grp_disp ='SUCCESS')
			  and cop.object_pri_key_1 = disp.object_pri_key_1
              and disp.process_group in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNTCASA','ACCOUNT','ACCOUNTCASA','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')
              and disp.prc_grp_disp in ('FAILURE','WAIT')
              and disp.object_pri_key_1 = acc.object_pri_key_1 
              and acc.system_role in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNTCASA','ACCOUNT','ACCOUNTCASA','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')
              )T;				   
            
ELSIf x_role in ('BSG','Product Supervisor') and x_count_group_id in ('MY_ALL_QUE') 
then

    select json_agg(row_to_json(t)) into v_data from  
	( select distinct object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
          COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",	
   	            coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",	
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
		  case   when COP.TEXT_1 in ('ASSIGNED','REJECTED')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'RM'
			            and COP.TEXT_1 in ('ASSIGNED','REJECTED'))	 
		         when COP.TEXT_1 in ('SUBMITTED','BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REJECT')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'BOM'
			            and COP.TEXT_1 in ('SUBMITTED','BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REJECT'))	
			     when COP.text_1 in ('BOM_APPROVED','DVU_APPROVED')
			      then  'YET TO ASSIGN'
			     when COP.text_1 in ('RCU_APPROVED')
			      then  'PENDING AT API'
			     when cop.text_1 in ('DVU_ASSIGNED','DVU_REWORK','BOM_DVU_REWORK_APPROVED')
			      then  (select tba.emp_hierarchy_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'DVU'
			            and cOP.text_1 in ('DVU_ASSIGNED','DVU_REWORK','BOM_DVU_REWORK_APPROVED'))
			     when COP.text_1 in ('RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REJECT')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'RCU' 
			            and COP.text_1 in ('RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REJECT'))			     
			     when COP.text_1 in ('RCU_REWORK')
			      then  (select rcu_corrector_id from tb_branch_rcu_corrector_mapping rcu
			                   where rcu.branch in (select branch_code from tb_emp_hrms teh2, tb_btc_accesscontrol tba2 
			                                          where employee_number = tba2.emp_id 
			                                          and tba2.object_pri_key_1 =acc.object_pri_key_1 
                   			                          and tba2.system_role ='RM'
                   			                          and cop.text_1 ='RCU_REWORK'))
			   else 'NA'                       
			      end as "ASSIGNED_TO"
  from tb_cop_buss_obj_txn cop
  join tb_btc_prc_grp_disp disp on disp.object_pri_key_1 = cop.object_pri_key_1
  join tb_btc_accesscontrol acc on acc.object_pri_key_1 = disp.object_pri_key_1)T;				        
				              
--ELSIf x_role ='BSG' and x_count_group_id in ('MY_QUE_GEN') 
--then

--    select json_agg(row_to_json(t)) into v_data from  
--	(select wfm.count_group_id as "que_id",
--	ACC.access_type as "ACCESS_TYPE",
--			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
--			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
--			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
----			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
----			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
----			     END as "name",
--                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
--			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
--			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "ENTITY_CRN",			
--			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
--			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
--			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
--			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
--			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then 'Individual'
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
--			     end as "CONSTITUTION_TYPE",
--			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
--				(select CITY from tb_branch_mst tbm      
--               where branch_cd in (select object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE'))  as "REGION_NAME",
--			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
--			cop.login_id as "ASSIGNED_USER_ID",
--			(select employee_number from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
--			to_char(COP.DEVICE_MODIFY_TIMESTAMP, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
--			'' as "CURRENT_WORKSTEP"  from tb_cop_buss_obj_txn cop  
--              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
--              and disp.process_group not in ('RM_SE') and disp.prc_grp_disp not in  ('APPROVERQUERY','DVUQUERY','ASSIGNED','REJECT')
--			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
--            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
----                            and disp.object_pri_key_2 = acc.object_pri_key_2 
----                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;                          
--	   order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
--				         when  'Priority Privy' then 1 
--				         when  'Branch Privy' then 2  
--				         when 'Non Privy' then 3 end  )T;

-------------------------------BSG RM_SE BUCKET-------------------------------
ELSIf x_role in  ('BSG','Product Supervisor') and x_count_group_id in ('MY_RMSE_QUE') 
then

  select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
               from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                        and disp.process_group  ='RM_SE' and disp.prc_grp_disp  in ('APPROVERQUERY','DVUQUERY','ASSIGNED')
--			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
                join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;
               and acc.system_role ='RM' 
               and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' in  ('ASSIGNED','DVU_REWORK','BOM_REWORK')
             --and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_ASSIGNED')
              --  where acc.EMP_ID = x_login_id
            --  order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
			--	         when  'Priority Privy' then 1 
				--         when  'Branch Privy' then 2  
				--         when 'Non Privy' then 3 end  
				)T;
              
	  
-------------------------------BSG APPROVER BUCKET-------------------------------	  
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_APPROVER_QUE') 
then

select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
						(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =ACC.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO" 
	from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group ='RM_SE' and disp.prc_grp_disp in ('APPROVEDQUERY','DVUAPPROVEDQUERY','SUBMITTED','APPROVERQUERY')
--			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
                join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                and ACC.system_role = 'RM'
                and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('SUBMITTED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REWORK') 
               order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;

-------------------------------BSG DVU BUCKET-------------------------------	  
ELSIf x_role in('BSG','Product Supervisor')and x_count_group_id in ('MY_DVU_QUE') 
then

 select json_agg(row_to_json(t)) into v_data from  
	(select
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			 case when COP.TEXT_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED')
			      then  (select tba.update_login_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'BOM'
			            and COP.TEXT_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED'))	
			      when cop.text_1 in ('DVU_ASSIGNED','BOM_DVU_REWORK_APPROVED')
			      then  (select tba.emp_hierarchy_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'DVU'
			            and cOP.text_1 in ('DVU_ASSIGNED','BOM_DVU_REWORK_APPROVED'))
			      when cop.text_1 ='DVU_REWORK'
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'RM'
			            and cOP.text_1 ='DVU_REWORK') end  as "ASSIGNED_TO"
from tb_cop_buss_obj_txn cop  
			              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
			              and disp.process_group ='DVU' and disp.prc_grp_disp IN ('WIP','USERWAIT','REWORK')
--						   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--			              and wfm.process_group = disp.process_group 
			            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			                            and disp.object_pri_key_2 = acc.object_pri_key_2 
			                           and disp.object_pri_key_3 = acc.object_pri_key_3 
			               and acc.system_role  = 'DVU'
			               and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_REWORK','BOM_APPROVED','DVU_ASSIGNED','DVU_REWORK','BOM_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_REWORK_APPROVED')
            --and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_ASSIGNED')
              --  where acc.EMP_ID = x_login_id
           /*    order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end   */ )T;
              
-------------------------------BSG RCU BUCKET-------------------------------	  
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RCU_QUE') 
then

  select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
	       	       case when cop.text_1 ='DVU_APPROVED'
	       then ''
	       when cop.text_1 ='RCU_REWORK'
	       then (select distinct rcu_corrector_id 
		       from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh , tb_btc_accesscontrol tba ,
                 tb_cop_buss_obj_txn cop
                                          where TBA.system_role ='RM'
                                          and TEH.employee_number = TBA.emp_id
                                          and tba.object_pri_key_1 =COP.object_pri_key_1)limit 1)
	       else 
			acc.emp_id  end as "ASSIGNED_TO"
				from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group  = 'RCU' and disp.prc_grp_disp in  ('WIP','USERWAIT','REWORK')
            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
            and acc.system_role ='RCU'
            and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in 
            ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REWORK')
               order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;

-------------------------------BSG RCU_CORRECTOR BUCKET-------------------------------	  
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RCU_COR_QUE') 
then

  select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",		
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
		(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_buss_obj_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"		           from tb_cop_buss_obj_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
--			        join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				   and wfm.process_group = disp.process_group 
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  = 'RCU_Correcter'
				   and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_REWORK'			  
            --and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_ASSIGNED')
              --  where acc.EMP_ID = x_login_id
               order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;

---------------------------Product Supervisor RCU CORRECTOR SUPERVISOR---------------------
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RE_QUE') 
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
		    (select rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
                  where branch in (select branch_code from tb_emp_hrms teh 
                                     where employee_number = acc.emp_id)) as "ASSIGNED_TO"
				           from tb_cop_buss_obj_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
--			        join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				   and wfm.process_group = disp.process_group 
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  = 'RCU_Correcter'
				   and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_REWORK'	
			  order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;				        
				        
              
-------------------------------BSG ALL REJECTED BUCKET-------------------------------	  
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_QUE_REJ') 
then

  select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			acc.emp_id as "ASSIGNED_TO"
				from tb_cop_buss_obj_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group IN('RM_SE','BOM_APPROVER','RCU') and disp.prc_grp_disp ='REJECT'
--			        join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				   and wfm.process_group = disp.process_group 
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  IN('RM','BOM','RCU')
				   and ACC.access_type = 'R'
				   and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' IN ('REJECTED','BOM_REJECT','RCU_REJECT')
				   and COP.is_active ='Y'
            /*   order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end  */ )T;

-------------------------------Product Supervisor ALL AFTER RCU_APPROVED BUCKET-------------------------------				        
ELSIf x_role in  ('BSG','Product Supervisor','Approver','DVU','RCU','Auditor','RCU Supervisor','DVU Supervisor','Approver Supervisor') and x_count_group_id in ('MY_BACKEND_QUE') 
then


  select json_agg(row_to_json(t)) into v_data from  
	(select   object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
--	wfm.count_group_id as "que_id",
--	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  
from tb_cop_buss_obj_txn cop 
		 where exists ( select 1 from tb_btc_prc_grp_disp disp where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		              and process_group ='ACCOUNT'
                           and prc_grp_disp ='SUCCESS')
and COP.is_active ='Y'                           
        --  order by cop.device_modify_timestamp desc
             --   and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' ='ACCOUNT_ACTIVATED'                           
--               order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
--				         when  'Priority Privy' then 1 
--				         when  'Branch Privy' then 2  
--				         when 'Non Privy' then 3 end
				        )T;
--
--  select json_agg(row_to_json(t)) into v_data from  
--	(select  distinct object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
----	wfm.count_group_id as "que_id",
----	ACC.access_type as "ACCESS_TYPE",
--	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
--			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
--			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
----			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
----			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
----			     END as "name",
--                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
--			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
--			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
--			     else 'NA' end as "ENTITY_CRN",			
--			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
--			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
--			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
----			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
--			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
--			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then 'Individual'
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
--			     end as "CONSTITUTION_TYPE",
--			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
--				(select CITY from tb_branch_mst tbm      
--               where branch_cd in (select object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE'))  as "REGION_NAME",
--			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
--			cop.login_id as "ASSIGNED_USER_ID",
--			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
--			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
--			'' as "CURRENT_WORKSTEP"  
--from tb_cop_buss_obj_txn cop  ,tb_btc_prc_grp_disp disp 
--  where cop.object_pri_key_1 = disp.object_pri_key_1 
--  and exists ((select 1 from tb_btc_prc_grp_disp tbpgd where tbpgd.object_pri_key_1 =cop.object_pri_key_1 
--                  and tbpgd.process_group = 'ACCOUNT'       and tbpgd.prc_grp_disp ='SUCCESS'))
--and exists ((select 1 from tb_btc_prc_grp_disp tbpgd where tbpgd.object_pri_key_1 =cop.object_pri_key_1 
--                  and tbpgd.process_group = 'CERSAI'       and tbpgd.prc_grp_disp ='SUCCESS'))
--and exists ((select 1 from tb_btc_prc_grp_disp tbpgd where tbpgd.object_pri_key_1 =cop.object_pri_key_1 
--                  and tbpgd.process_group = 'GSTIN'       and tbpgd.prc_grp_disp ='SUCCESS'))
--and exists ((select 1 from tb_btc_prc_grp_disp tbpgd where tbpgd.object_pri_key_1 =cop.object_pri_key_1 
--                  and tbpgd.process_group = 'FATCA Handoff'       and tbpgd.prc_grp_disp ='SUCCESS'))   
--				        )T;
-------------------------------BSG ALL ERROR BUCKET-------------------------------	  				        				       				       

-------------------------------------------------------------------------------				        
ELSIf upper(x_role) ='SE SUPERVISOR' and x_count_group_id in ('MY_RE_QUE') 
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                        and disp.process_group  in ('RM_SE') and disp.prc_grp_disp  in ('APPROVERQUERY','DVUQUERY','ASSIGNED')
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group 
                join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;
          and acc.system_role ='RM'
          and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' in  ('ASSIGNED','DVU_REWORK','BOM_REWORK')
         and ACC.emp_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
        order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
   
ELSIf x_role ='Approver Supervisor' and x_count_group_id in ('MY_RE_QUE') 
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	        ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",	
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
		(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =ACC.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO" 
			from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group in ('BOM_APPROVER') and disp.prc_grp_disp in ('USERWAIT','REWORK', 'APPROVE')
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group 
                join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                 and ACC.system_role = 'BOM'
                where  cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('SUBMITTED','BOM_REWORK_APPROVED','BOM_REWORK' , 'DVU_REWORK_APPROVED')
               and ACC.update_login_id in (select employee_number from  tb_emp_hrms hrms  where supervisor_emp_no =x_login_id)
						order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
-----------FOR APPROVER ACCOUNT ACTIVATED LEADS				        
ELSIf x_role ='Approver Supervisor'  and x_count_group_id in ('MY_ALL_QUE') 
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",		     
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
						case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' end as "STAT",
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =ACC.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO" 
			from tb_cop_buss_obj_txn cop  
--				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
--				  and disp.process_group IN ('BOM_APPROVER','DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role ='RM' --IN ('BOM','DVU','RCU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_APPROVED','BOM_REWORK_APPROVED','DVU_ASSIGNED','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_APPROVED',
				                                                          'RCU_ASSIGNED','RCU_REWORK','BOM_REWORK','RCU_REWORK_APPROVED') 
				where ACC.update_login_id in (select employee_number from  tb_emp_hrms hrms  where supervisor_emp_no =x_login_id)
			       order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end)T;				        
				        	   

ELSIf x_role ='DVU Supervisor' and x_count_group_id in ('MY_RE_QUE') 
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			acc.emp_hierarchy_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group  in ('DVU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group 
            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;
            and ACC.system_role ='DVU'
            and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_APPROVED','DVU_ASSIGNED','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_REWORK','BOM_REWORK_APPROVED')
            where ACC.emp_hierarchy_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
           order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
                         
ELSIf x_role ='DVU Supervisor'  and x_count_group_id in ('MY_ALL_QUE') 
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
   	            coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'
			 end  as "STAT",
			--cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.update_login_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
--				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  IN ('RCU','DVU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_APPROVED',
				                                                          'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
                   where  ACC.emp_hierarchy_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			       order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
				        
ELSIf x_role ='RCU Supervisor' and x_count_group_id in ('MY_RE_QUE') 
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
             	       case when cop.text_1 ='DVU_APPROVED'
	       then ''
	       when cop.text_1 ='RCU_REWORK'
	       then (select distinct rcu_corrector_id 
		       from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba,
                 tb_cop_buss_obj_txn cop
                                          where TBA.system_role ='RM'
                                          and TEH.employee_number = TBA.emp_id
                                          and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1)
	       else 
			acc.emp_id  end as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group  = 'RCU' and disp.prc_grp_disp in  ('WIP','USERWAIT','REWORK')
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group 
            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;
            and acc.system_role ='RCU'
            and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REWORK')
	       and ACC.emp_id in  (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
	      order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
	      
ELSIf x_role ='RCU Supervisor'  and x_count_group_id in ('MY_ALL_QUE') 
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
   	            coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.emp_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group ='RCU' and disp.prc_grp_disp in ('APPROVE','REWORK')
--				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  ='RCU'
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_APPROVED','RCU_REWORK') 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
                   where  ACC.emp_id in  (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			       order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
				        
ELSIf x_role ='RCU Corrector Supervisor' and x_count_group_id in ('MY_RE_QUE') 
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select 
	ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
--			(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm , tb_btc_accesscontrol tba 
--                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh 
--                                   where TBA.system_role ='RM'
--                                    and TEH.employee_number = TBA.emp_id
--                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
				         (select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_buss_obj_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
                                      from tb_cop_buss_obj_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  = 'RM'
				   and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_REWORK' 
				   where acc.EMP_ID in 	 				   (select teh2.employee_number from tb_emp_hrms teh2 
                      where branch_code in (select  branch from tb_branch_rcu_corrector_mapping tbrcm 
                                              where rcu_corrector_id in (select employee_number from tb_emp_hrms teh 
                                                                           where supervisor_emp_no =X_LOGIN_ID) )
                       and "role" in (select tfrm.role_name from tb_function_roles_mst tfrm 
                                        where default_system_role_code ='Sales Executive'))	
			  order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
				        
ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='GENERAL_QUE' 
then

  select json_agg(row_to_json(t)) into v_data from  
	(select ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
               from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                                          and disp.process_group  = 'RU' 
                                          and disp.prc_grp_disp  = 'RU_USERWAIT'
			  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
               and acc.system_role ='RU' 
             --where acc.EMP_ID = x_login_id
              order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end  )T;

ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='ASSIGN_QUE' 
then

  select json_agg(row_to_json(t)) into v_data from  
	(select ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
               from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                                          and disp.process_group  = 'RU' 
                                          and disp.prc_grp_disp  = 'RU_ASSIGN'
			  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
               and acc.system_role ='RU'
             where acc.EMP_ID = x_login_id
              order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end  )T;
				        
ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='SUBMITTED_QUE'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
               from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                                          and disp.process_group  = 'RU' 
                                          and disp.prc_grp_disp  = 'RU_SUBMITTED'
			  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
              and acc.system_role ='RU' 
              where acc.EMP_ID = x_login_id
              order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end  )T;		
				        
ELSIf UPPER(x_role) = UPPER('Risk Unit Supervisor') and x_count_group_id ='RUS_REASSIGNMENT_QUE' 
then

  select json_agg(row_to_json(t)) into v_data from  
	(select ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
               from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                                          and disp.process_group  = 'RU' 
                                          and disp.prc_grp_disp  IN ('RU_ASSIGN','RU_SUBMITTED')
			  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1  and acc.system_role ='RU'
               WHERE acc.EMP_ID in( select employee_number from tb_emp_hrms teh  where supervisor_emp_no = x_login_id )
               order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end  )T;
				        

				        
ELSIf x_role in  ('BSG','Product Supervisor') and x_count_group_id ='RUS_REASSIGNMENT_QUE' 
then

  select json_agg(row_to_json(t)) into v_data from  
	(select ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
               from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                                          and disp.process_group  = 'RU' 
                                          and disp.prc_grp_disp  in ('RU_ASSIGN','RU_SUBMITTED','RU_USERWAIT')
			  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1  and acc.system_role ='RU'
               --WHERE acc.EMP_ID in( select employee_number from tb_emp_hrms teh  where supervisor_emp_no = x_login_id )
           /*  order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end */ )T;	
    
else 
v_data = 'No Data';
--v_data = '[{"code":"","value":"No Data"}]';
end if ;
if (v_data = '' or v_data is null)
then --v_data := '';
null;
--'[{"code":"","value":"No Data"}]';
--No Leads present for this ID
--NULL;--= '[{"code":"","value":"No DATA exist"}]';

END IF;
 OPEN x_result FOR SELECT 
            v_data  AS    "OBJECT";
              return x_result;     
            
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_vflow_queue_details_v2(x_count_group_id character varying, x_login_id character varying, x_role character varying, x_filter_applied character varying, x_param character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_role varchar(100);
v_count int;
v_prc_grp VARCHAR(100);
v_prc_grp_disp VARCHAR(100) ;
v_from_date VARCHAR(100) ;
v_to_date VARCHAR(100);
v_case_id VARCHAR(100);
v_cust_name VARCHAR(100);
v_filer_type  VARCHAR(100);
begin
select role into v_role from tb_emp_hrms 
 where employee_number = x_login_id;

-----FOR RM_SE SUBMITTED LEADS  
--ELSIf upper(x_role) ='MIDOFFICE' and x_count_group_id in ('MIDOFFICEMYQUE') then
raise notice 'x_filter_applied%',x_filter_applied;
if x_filter_applied = 'N' then 
v_from_date :='';
v_to_date :='';
v_case_id :='';
v_cust_name :='';

else   

select json_array_elements(cast(x_param as json)) ->> 'filter_type',
	   json_array_elements(cast(x_param as json)) ->> 'lead_modified_from_date',
	   json_array_elements(cast(x_param as json)) ->> 'lead_modified_to_date' ,
	   json_array_elements(cast(x_param as json)) ->> 'case_id',
	   json_array_elements(cast(x_param as json)) ->> 'entity_name' 
  into v_filer_type ,v_from_date , v_to_date, v_case_id ,v_cust_name;
 
end if;
raise notice 'v_filer_type%',v_filer_type;
raise notice 'v_from_date%',v_from_date;
raise notice 'v_to_date%',v_to_date;
raise notice 'v_case_id%',v_case_id;
raise notice 'v_cust_name%',v_cust_name;

if upper(x_role) ='CPV' and x_count_group_id in ('MY_CPV') and x_filter_applied ='N' then 
 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
   	            cop.id_name_add as "AUS_Customer_Name_as_per_Aadhaar",	
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.object_data->'AOF'->>'CPV_ASSIGNED_TO' as "CPV_ASSIGNED_TO",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY",
			(cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->'EP1_DOCTYPE'->>'VALUE') as "Entity_proof_1_document",
                    (cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'EP1_ENAME') as "Name_of_Organisation_1",
        (cop.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L1') || (cop.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L2') || (cop.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L3') as "Address_1",
			(cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_PINCODE') as "Pincode_1",
			(cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_CITY') as "City_1",
			(cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_STATE') as "State_1",
					(cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->'EP2_DOCTYPE'->>'VALUE') as "Entity_proof_2_document",
(cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'EP2_ENAME') as "Name_of_Organisation_2",
			(cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L1') || (cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L2') || (cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L3') as "Address_2",
			(cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_PINCODE') as "Pincode_2",
			(cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_CITY') as "City_2",
			(cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_STATE') as "State_2",
			 concat(cop.OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->'AADHAAR_EKYC_RESPONSE'->>'PRMNT_ADD_LINE1',' ',cop.OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->'AADHAAR_EKYC_RESPONSE'->>'PRMNT_ADD_LINE2',' ', cop.OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->'AADHAAR_EKYC_RESPONSE'->>'PRMNT_ADD_LINE3') as "Individual_or_AUS_customer_Aadhaar_Address",
			(cop.OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->'AADHAAR_EKYC_RESPONSE'->>'PRMNT_ADD_PINCODE') as "Pincode",
			(cop.OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->'AADHAAR_EKYC_RESPONSE'->>'PRMNT_ADD_CITY') as "City",
			(cop.OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->'AADHAAR_EKYC_RESPONSE'->>'PRMNT_ADD_STATE') as "State",
			
			case when (cop.constitution_type) ='SP'
			then '' 
			else
			(cop.OBJECT_DATA::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'COMMUNICATION_ADDRESS'->>'COMM_ADD_L1') || (cop.OBJECT_DATA::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'COMMUNICATION_ADDRESS'->>'COMM_ADD_L2') end as "Individual_customer_Communication_Address",
			case when (cop.constitution_type) ='SP'
			then '' 
			else
			(cop.OBJECT_DATA::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'COMMUNICATION_ADDRESS'->>'COMM_PINCODE') end as "Pincode_Communication",
			case when (cop.constitution_type) ='SP'
			then '' 
			else
			(cop.OBJECT_DATA::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'COMMUNICATION_ADDRESS'->>'COMM_CITY') end as "City_Communication",
			case when (cop.constitution_type) ='SP'
			then '' 
			else
			(cop.OBJECT_DATA::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'COMMUNICATION_ADDRESS'->>'COMM_STATE') end as "State_Communication"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			       and disp.process_group = 'CPV' and disp.prc_grp_disp in ('ASSIGNMENTPENDING','ASSIGNED')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role = 'CPV'
			              and COP1.is_active ='Y'
			              and cop1.workflow_status in ('ASSIGNMENTPENDING','ASSIGNED')
			             -- 	where ACC.update_login_id = X_LOGIN_ID
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
elsif upper(x_role) ='CPV' and x_count_group_id in ('MY_CPV') and x_filter_applied ='Y' then 
 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
   	            cop.id_name_add as "AUS_Customer_Name_as_per_Aadhaar",	
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.object_data->'AOF'->>'CPV_ASSIGNED_TO' as "CPV_ASSIGNED_TO",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY",
									(cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->'EP1_DOCTYPE'->>'VALUE') as "Entity_proof_1_document",
                    (cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'EP1_ENAME') as "Name_of_Organisation_1",
        (cop.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L1') || (cop.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L2') || (cop.object_data::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_L3') as "Address_1",
			(cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_PINCODE') as "Pincode_1",
			(cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_CITY') as "City_1",
			(cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD1_STATE') as "State_1",
					(cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->'EP2_DOCTYPE'->>'VALUE') as "Entity_proof_2_document",
(cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'EP2_ENAME') as "Name_of_Organisation_2",
			(cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L1') || (cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L2') || (cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_L3') as "Address_2",
			(cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_PINCODE') as "Pincode_2",
			(cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_CITY') as "City_2",
			(cop.OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'ENTITY_ADD2_STATE') as "State_2",
			 concat(cop.OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->'AADHAAR_EKYC_RESPONSE'->>'PRMNT_ADD_LINE1',' ',cop.OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->'AADHAAR_EKYC_RESPONSE'->>'PRMNT_ADD_LINE2',' ', cop.OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->'AADHAAR_EKYC_RESPONSE'->>'PRMNT_ADD_LINE3') as "Individual_or_AUS_customer_Aadhaar_Address",
			(cop.OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->'AADHAAR_EKYC_RESPONSE'->>'PRMNT_ADD_PINCODE') as "Pincode",
			(cop.OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->'AADHAAR_EKYC_RESPONSE'->>'PRMNT_ADD_CITY') as "City",
			(cop.OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->'AADHAAR_EKYC_RESPONSE'->>'PRMNT_ADD_STATE') as "State",
			
			case when (cop.constitution_type) ='SP'
			then '' 
			else
			(cop.OBJECT_DATA::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'COMMUNICATION_ADDRESS'->>'COMM_ADD_L1') || (cop.OBJECT_DATA::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'COMMUNICATION_ADDRESS'->>'COMM_ADD_L2') end as "Individual_customer_Communication_Address",
			case when (cop.constitution_type) ='SP'
			then '' 
			else
			(cop.OBJECT_DATA::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'COMMUNICATION_ADDRESS'->>'COMM_PINCODE') end as "Pincode_Communication",
			case when (cop.constitution_type) ='SP'
			then '' 
			else
			(cop.OBJECT_DATA::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'COMMUNICATION_ADDRESS'->>'COMM_CITY') end as "City_Communication",
			case when (cop.constitution_type) ='SP'
			then '' 
			else
			(cop.OBJECT_DATA::JSON->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'COMMUNICATION_ADDRESS'->>'COMM_STATE') end as "State_Communication"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			       and disp.process_group = 'CPV' and disp.prc_grp_disp in ('ASSIGNMENTPENDING','ASSIGNED')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role = 'CPV'
			              and COP1.is_active ='Y'
			              and cop1.workflow_status in ('ASSIGNMENTPENDING','ASSIGNED')
			           --   where ACC.update_login_id = X_LOGIN_ID
			              and case when  v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                          and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                          and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				      --   limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
				        
elsif upper(x_role) ='MIDOFFICE_DIY' and x_count_group_id = 'Pending_midoffice' and x_filter_applied ='N' then 
 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
   	            cop.id_name_add as "name",	
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			       and disp.process_group in  ('DIYWEBAPP','VKYC') and disp.prc_grp_disp in  ('WIP','PENDING','VKYC_UNABLE')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role = 'Midoffice_DIY'
			              and COP1.is_active ='Y'
			              and cop1.workflow_status in ('WIP','PENDING','VKYC_UNABLE')
			     --         	where ACC.update_login_id = X_LOGIN_ID
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
elsif upper(x_role) ='MIDOFFICE_DIY' and x_count_group_id in ('Pending_midoffice') and x_filter_applied ='Y' then 
 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
   	            cop.id_name_add as "name",	
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			       and disp.process_group in ('DIYWEBAPP','VKYC') and disp.prc_grp_disp in ('WIP','PENDING','VKYC_UNABLE')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role = 'Midoffice_DIY'
			              and COP1.is_active ='Y'
			              and cop1.workflow_status in ('WIP','PENDING','VKYC_UNABLE')
			        --      where ACC.update_login_id = X_LOGIN_ID
			              and case when  v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                          and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                          and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         --limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
							        
elsif upper(x_role) ='MIDOFFICE_DIY' and x_count_group_id in ('All_midoffice') and x_filter_applied ='N' then 
 select json_agg(row_to_json(t)) into v_data from 
 (select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
   	            cop.id_name_add as "name",	
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (      select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			          --    join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			--      and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'REJECT'
                          join tb_btc_accesscontrol acc on COP1.object_pri_key_1 = acc.object_pri_key_1 
                        and acc.system_role = 'Midoffice_DIY'
			              and COP1.is_active in ('Y','N')
			            and cop1.workflow_status in ('WIP','ASSIGNMENTPENDING' ,'MOVETOASSISTED','CPVAPPROVED','SUBMITTED','MDO REJECTED','PENDING','VKYC_UNABLE','SYSTEMWAIT','APPROVED','DVU_REWORK','DWREJECTED','MIDOFFDROP')

			          -- where-- ACC.update_login_id = X_LOGIN_ID
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
			)T;
		
elsif upper(x_role) ='MIDOFFICE_DIY' and x_count_group_id in ('All_midoffice') and x_filter_applied ='Y' then 
 select json_agg(row_to_json(t)) into v_data from 
 (select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
   	            cop.id_name_add as "name",	
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			          --    join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			--      and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'REJECT'
                          join tb_btc_accesscontrol acc on COP1.object_pri_key_1 = acc.object_pri_key_1 
                        and acc.system_role = 'Midoffice_DIY'
			              and COP1.is_active in ('Y','N')
			            and cop1.workflow_status in ('WIP','ASSIGNMENTPENDING' ,'MOVETOASSISTED','CPVAPPROVED','SUBMITTED','MDO REJECTED','PENDING','VKYC_UNABLE','SYSTEMWAIT','APPROVED','DVU_REWORK','DWREJECTED','MIDOFFDROP')

				          and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
        and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
        and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
       		         --  where ACC.update_login_id = X_LOGIN_ID
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				     --    limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
			)T;
		
		
elsif upper(x_role) ='MIDOFFICE_DIY' and x_count_group_id = 'Pending_cc_od' and x_filter_applied ='N' then 
 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
   	            cop.id_name_add as "name",	
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			       and disp.process_group = 'DIYWEBAPP' and disp.prc_grp_disp = 'MIDOFFDROP'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role = 'Midoffice_DIY'
			              and COP1.is_active ='Y'
			              and cop1.workflow_status='MIDOFFDROP'
			     --         	where ACC.update_login_id = X_LOGIN_ID
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        

elsif upper(x_role) ='MIDOFFICE_DIY' and x_count_group_id in ('Pending_cc_od') and x_filter_applied ='Y' then 
 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
   	            cop.id_name_add as "name",	
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			       and disp.process_group = 'DIYWEBAPP' and disp.prc_grp_disp = 'MIDOFFDROP'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role = 'Midoffice_DIY'
			              and COP1.is_active ='Y'
			              and cop1.workflow_status='MIDOFFDROP'
			        --      where ACC.update_login_id = X_LOGIN_ID
			              and case when  v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                          and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                          and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				       --  limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
				        
				        
				        
ELSIF upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE') and x_filter_applied ='N' then 
 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
   	            cop.id_name_add as "name",	
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			       and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role = 'BOM'
			              and COP1.is_active ='Y'
			              and cop1.workflow_status='SUBMITTED'
			              	where ACC.update_login_id = X_LOGIN_ID
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
				        
			--acc.emp_id in (select se_id from tb_se_app_mapping tsam where approver_id = X_LOGIN_ID))T;
elsif upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE') and x_filter_applied ='Y' then 
 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
   	            cop.id_name_add as "name",	
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			       and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role = 'BOM'
			              and COP1.is_active ='Y'
			              and cop1.workflow_status='SUBMITTED'
			              and case when  v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
        and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
        and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
                         where ACC.update_login_id = X_LOGIN_ID
			             order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				        
ELSIf  upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE_REW')  and x_filter_applied ='N' then 
-----------FOR APPROVER REWORK LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
--	        ACC.access_type as "ACCESS_TYPE",
       case when tt.process_group = 'RM_SE' 
             and tt.prc_grp_disp IN ('APPROVERQUERY','DVUQUERY') 
             and tt.system_role  = 'BOM'
             and cop.workflow_status in ('BOM_REWORK','DVU_REWORK') then 
             'R'
             when tt.process_group = 'RM_SE' 
             and tt.prc_grp_disp IN ('APPROVEDQUERY') 
             and tt.system_role  = 'BOM'
             and cop.workflow_status= 'BOM_REWORK_APPROVED' then 
             'W'
             when tt.process_group = 'RM_SE' 
             and tt.prc_grp_disp IN ('DVUAPPROVEDQUERY') 
             and tt.system_role  = 'BOM'
             and cop.workflow_status= 'DVU_REWORK_APPROVED' then 
             'W'
             else tt.access_type end as "ACCESS_TYPE",
             case when cop.workflow_status = 'BOM_REWORK'
                  then 'APPROVER_REWORK'
                  when cop.workflow_status = 'BOM_REWORK_APPROVED'
                  then 'APPROVER_REWORK_APPROVED' 
                  else cop.workflow_status end as "STAT",
                  cop.workflow_status as "STAT1",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",		
			cop.scheme_code as "SCHEME_CODE",			
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",		
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
		from 
                (select cop1.object_pri_key_1,acc.access_type,wfm.count_group_id,disp.process_group,disp.prc_grp_disp,
                acc.system_role,ACC.update_login_id
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group ='RM_SE' 
		  and disp.prc_grp_disp  in ('APPROVERQUERY','APPROVEDQUERY','DVUAPPROVEDQUERY','DVUQUERY')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role = 'BOM'
			              and COP1.is_active ='Y'
			              and cop1.workflow_status in ('BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','DVU_REWORK') 
		               where ACC.update_login_id = X_LOGIN_ID
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;


				        
				        --UPPER(acc.emp_id) in (select se_id from tb_se_app_mapping tsam where approver_id = X_LOGIN_ID))T;
ELSIf  upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE_REW')  and x_filter_applied ='Y' then 
-----------FOR APPROVER REWORK LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
--	        ACC.access_type as "ACCESS_TYPE",
       case when tt.process_group = 'RM_SE' 
             and tt.prc_grp_disp IN ('APPROVERQUERY','DVUQUERY') 
             and tt.system_role  = 'BOM'
             and cop.workflow_status in ('BOM_REWORK','DVU_REWORK') then 
             'R'
             when tt.process_group = 'RM_SE' 
             and tt.prc_grp_disp IN ('APPROVEDQUERY') 
             and tt.system_role  = 'BOM'
             and cop.workflow_status= 'BOM_REWORK_APPROVED' then 
             'W'
             when tt.process_group = 'RM_SE' 
             and tt.prc_grp_disp IN ('DVUAPPROVEDQUERY') 
             and tt.system_role  = 'BOM'
             and cop.workflow_status= 'DVU_REWORK_APPROVED' then 
             'W'
             else tt.access_type end as "ACCESS_TYPE",
             case when cop.workflow_status = 'BOM_REWORK'
                  then 'APPROVER_REWORK'
                  when cop.workflow_status = 'BOM_REWORK_APPROVED'
                  then 'APPROVER_REWORK_APPROVED' 
                  else cop.workflow_status end as "STAT",
                  cop.workflow_status as "STAT1",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",		
			cop.scheme_code as "SCHEME_CODE",			
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",		
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
		from 
                (select cop1.object_pri_key_1,acc.access_type,wfm.count_group_id,disp.process_group,disp.prc_grp_disp,
                acc.system_role,ACC.update_login_id
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group  ='RM_SE' 
		  and disp.prc_grp_disp  in ('APPROVERQUERY','APPROVEDQUERY','DVUAPPROVEDQUERY','DVUQUERY')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role = 'BOM'
			              and COP1.is_active ='Y'
			              and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
        and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
        and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
		              and cop1.workflow_status in ('BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','DVU_REWORK') 
		               where ACC.update_login_id = X_LOGIN_ID
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				       
ELSIf  upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE_REJ') and  x_filter_applied ='N' then 
-----------FOR APPROVER REJECTED LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
			     cop.id_name_add as "name",
			     coalesce(cop.entity_name,'NA') as "ENTITY_NAME",		
			cop.scheme_code as "SCHEME_CODE",			
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
		     cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			 from 
                (select cop1.object_pri_key_1,acc.access_type,wfm.count_group_id, ACC.update_login_id
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'REJECT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role = 'BOM'
			              and COP1.is_active ='Y'
			             and cop1.workflow_status='BOM_REJECT'
			             where ACC.emp_id = X_LOGIN_ID
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;


				        
ELSIf  upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE_REJ') and  x_filter_applied ='Y' then 
-----------FOR APPROVER REJECTED LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
			     cop.id_name_add as "name",
			     coalesce(cop.entity_name,'NA') as "ENTITY_NAME",		
			cop.scheme_code as "SCHEME_CODE",			
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
		     cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			 from 
                (select cop1.object_pri_key_1,acc.access_type,wfm.count_group_id, ACC.update_login_id
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'REJECT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role = 'BOM'
			              and COP1.is_active ='Y'
			             and cop1.workflow_status='BOM_REJECT'
			              and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
			             where ACC.emp_id = X_LOGIN_ID
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				       
				        
ELSIf x_role ='Approver Supervisor'  and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='N'
then

select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",		     
			cop.scheme_code as "SCHEME_CODE",
						case when cop.workflow_status in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.workflow_status in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.workflow_status end as "STAT",
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =tt.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY" 
		from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.object_pri_key_1 as pk1  from tb_cop_metadata_txn cop1  
			             join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
                         and cop1.workflow_status in ('BOM_REJECT','RCU_REJECT') 
			             and acc.system_role ='RM'
			              and COP1.is_active ='Y'
			             where cop1.modify_emp_id in (select employee_number from  tb_emp_hrms hrms  
			              where supervisor_emp_no =X_LOGIN_ID)  
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				       limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
ELSIf x_role ='Approver Supervisor'  and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='Y'
then

select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",		     
			cop.scheme_code as "SCHEME_CODE",
						case when cop.workflow_status in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.workflow_status in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.workflow_status end as "STAT",
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =tt.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
		from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.object_pri_key_1 as pk1  from tb_cop_metadata_txn cop1  
			             join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
                         and cop1.workflow_status in ('BOM_REJECT','RCU_REJECT') 
			             and acc.system_role ='RM'
			              and COP1.is_active ='Y'
			             where cop1.modify_emp_id in (select employee_number from  tb_emp_hrms hrms  
			              where supervisor_emp_no =X_LOGIN_ID) 
			              and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                          and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                          and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				      ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
ELSIf x_role ='RCU Supervisor'  and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='N'
then

select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",		     
			cop.scheme_code as "SCHEME_CODE",
						case when cop.workflow_status in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.workflow_status in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.workflow_status end as "STAT",
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =tt.object_pri_key_1
			 and tba.system_role ='RM'
			 )as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY" 
		 from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.object_pri_key_1 as pk1  from tb_cop_metadata_txn cop1  
			             join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
                         and cop1.workflow_status='RCU_REJECT' 
			             and acc.system_role ='RM'
			              and COP1.is_active ='Y'
			             where cop1.modify_emp_id in (select employee_number from  tb_emp_hrms hrms  
			              where supervisor_emp_no =X_LOGIN_ID)
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				       limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				        
ELSIf x_role ='RCU Supervisor'  and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='Y'
then

select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",		     
			cop.scheme_code as "SCHEME_CODE",
						case when cop.workflow_status in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.workflow_status in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.workflow_status end as "STAT",
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =tt.object_pri_key_1
			 and tba.system_role ='RM'
			 )as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
		 from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.object_pri_key_1 as pk1  from tb_cop_metadata_txn cop1  
			             join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
                         and cop1.workflow_status='RCU_REJECT' 
			             and acc.system_role ='RM'
			              and COP1.is_active ='Y'
			              where cop1.modify_emp_id in (select employee_number from  tb_emp_hrms hrms  
			              where supervisor_emp_no =X_LOGIN_ID)
			              and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
        and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
        and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
       	                  order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;


-----------FOR APPROVER ACCOUNT ACTIVATED LEADS				        
ELSIf  upper(x_role) ='APPROVER'  and x_count_group_id in ('MY_ALL_QUE')  and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
   	            cop.id_name_add as "name",		     
			cop.scheme_code as "SCHEME_CODE",			
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			     coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			case when cop.workflow_status= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.workflow_status= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.workflow_status= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.workflow_status
			 end  as "STAT",
			     cop.workflow_status as "STAT1",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			TT.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			          --    join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			--      and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'REJECT'
                          join tb_btc_accesscontrol acc on COP1.object_pri_key_1 = acc.object_pri_key_1 
                        and acc.system_role = 'RM'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status in ('BOM_APPROVED','BOM_REWORK_APPROVED','DVU_ASSIGNED','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_APPROVED',
				         'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
			           where ACC.update_login_id = X_LOGIN_ID
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1
				         )T;				        

				        
ELSIf  upper(x_role) ='APPROVER'  and x_count_group_id in ('MY_ALL_QUE')  and x_filter_applied ='Y'
then

   select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
   	            cop.id_name_add as "name",		     
			cop.scheme_code as "SCHEME_CODE",			
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			     coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			case when cop.workflow_status= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.workflow_status= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.workflow_status= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.workflow_status
			 end  as "STAT",
			     cop.workflow_status as "STAT1",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			TT.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			          --    join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			--      and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'REJECT'
                          join tb_btc_accesscontrol acc on COP1.object_pri_key_1 = acc.object_pri_key_1 
                        and acc.system_role = 'RM'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status in ('BOM_APPROVED','BOM_REWORK_APPROVED','DVU_ASSIGNED','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_APPROVED',
				         'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
				          and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
        and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
        and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
       		           where ACC.update_login_id = X_LOGIN_ID
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				      ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1
				         )T;				        
			        
---------FOR DVU GENRAL LEADS                          
ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE_GEN') and x_filter_applied ='N' then
 	
select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",                  
			cop.scheme_code as "SCHEME_CODE",			
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",cop.lead_journey as "LEAD_JOURNEY"
			 from 
                (select cop1.object_pri_key_1,acc.access_type,  wfm.count_group_id from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group = 'DVU' and disp.prc_grp_disp = 'USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='DVU'
			              and COP1.is_active ='Y'
			             	and COP1.workflow_status in ('BOM_APPROVED','CPVAPPROVED')
			          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
               order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1
				         )T;

				        
	--UPPER(acc.update_login_id) = UPPER(x_login_id))T;
ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE_GEN') and x_filter_applied ='Y' then

select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",                  
			cop.scheme_code as "SCHEME_CODE",			
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",cop.lead_journey as "LEAD_JOURNEY"
			 from 
                (select cop1.object_pri_key_1,acc.access_type,  wfm.count_group_id from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group = 'DVU' and disp.prc_grp_disp = 'USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='DVU'
			              and COP1.is_active ='Y'
			            	and COP1.workflow_status in ('BOM_APPROVED','CPVAPPROVED')
			          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group
        and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
        and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
        and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
                         order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1
				         )T;


---------FOR DVU MY QUEUE BUCKET
ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE') and x_filter_applied ='N' then
 	       
 select json_agg(row_to_json(t)) into v_data from  
	(select TT.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			TT.emp_hierarchy_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
	from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.emp_hierarchy_id, wfm.count_group_id
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group = 'DVU' and disp.prc_grp_disp = 'WIP'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='DVU'
			              and COP1.is_active ='Y'
			              and COP1.workflow_status in ('DVU_ASSIGNED')
			              where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id)
               order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE') and x_filter_applied ='Y' then
 	       
  select json_agg(row_to_json(t)) into v_data from  
	(select TT.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			TT.emp_hierarchy_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
	from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.emp_hierarchy_id, wfm.count_group_id
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group = 'DVU' and disp.prc_grp_disp = 'WIP'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='DVU'
			              and COP1.is_active ='Y'
			               and COP1.workflow_status in ('DVU_ASSIGNED')
			              where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id)
			        and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
        and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
        and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
       order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				        
				        
---------FOR DVU REWORK BUCKET
ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE_REW') and x_filter_applied ='N' then
 	       
 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
--	ACC.access_type as "ACCESS_TYPE",
 case when TT.process_group = 'DVU' 
             and TT.prc_grp_disp IN ('REWORK') 
             and TT.system_role  = 'DVU'
             and cop.workflow_status in ('DVU_REWORK','DVU_REWORK_APPROVED','BOM_REWORK_APPROVED','BOM_REWORK') then 
             'R'
             when TT.process_group = 'RM_SE' 
             and TT.prc_grp_disp IN ('DVUAPPROVEDQUERY') 
             and TT.system_role  = 'DVU'
             and cop.workflow_status in ('DVU_REWORK','DVU_REWORK_APPROVED' )then 
             'R'
             when TT.process_group = 'DVU' 
             and TT.prc_grp_disp = 'REWORK'   
             and TT.system_role  = 'DVU'
             and cop.workflow_status in ('BOM_DVU_REWORK_APPROVED' )then 
             'W'
             else TT.access_type end as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			coalesce(cop.login_id,
			(select teh.employee_number from tb_emp_hrms teh, tb_cop_metadata_txn tcmt ,tb_branch_mst tbm
			where tcmt.opening_branch=tbm.ldesc and
			tbm.branch_cd=teh.branch_code
			and tcmt.object_pri_key_1=cop.object_pri_key_1)) as "ASSIGNED_USER_ID",
			--(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) 
			coalesce((select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id),
			(select first_name ||' ' || last_name from tb_emp_hrms teh, tb_cop_metadata_txn tcmt ,tb_branch_mst tbm
			where tcmt.opening_branch=tbm.ldesc and
			tbm.branch_cd=teh.branch_code
			and tcmt.object_pri_key_1=cop.object_pri_key_1 limit 1))
			as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			TT.emp_hierarchy_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
	       from 
                (select cop1.object_pri_key_1, ACC.access_type,disp.prc_grp_disp,disp.process_group,acc.system_role,ACC.emp_hierarchy_id 
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group = 'DVU' and disp.prc_grp_disp = 'REWORK'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='DVU'
			              and COP1.is_active ='Y'
			              where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id)
			           and COP1.workflow_status in ('BOM_REWORK','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED')
                       order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
				        
ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE_REW') and x_filter_applied ='Y' then
 	       
  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
--	ACC.access_type as "ACCESS_TYPE",
 case when TT.process_group = 'DVU' 
             and TT.prc_grp_disp IN ('REWORK') 
             and TT.system_role  = 'DVU'
             and cop.workflow_status in ('DVU_REWORK','DVU_REWORK_APPROVED','BOM_REWORK_APPROVED','BOM_REWORK') then 
             'R'
             when TT.process_group = 'RM_SE' 
             and TT.prc_grp_disp IN ('DVUAPPROVEDQUERY') 
             and TT.system_role  = 'DVU'
             and cop.workflow_status in ('DVU_REWORK','DVU_REWORK_APPROVED' )then 
             'R'
             else TT.access_type end as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			coalesce(cop.login_id,
			(select teh.employee_number from tb_emp_hrms teh, tb_cop_metadata_txn tcmt ,tb_branch_mst tbm
			where tcmt.opening_branch=tbm.ldesc and
			tbm.branch_cd=teh.branch_code
			and tcmt.object_pri_key_1=cop.object_pri_key_1)) as "ASSIGNED_USER_ID",
			--(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) 
			coalesce((select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id),
			(select first_name ||' ' || last_name from tb_emp_hrms teh, tb_cop_metadata_txn tcmt ,tb_branch_mst tbm
			where tcmt.opening_branch=tbm.ldesc and
			tbm.branch_cd=teh.branch_code
			and tcmt.object_pri_key_1=cop.object_pri_key_1 limit 1))
			as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			TT.emp_hierarchy_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
	       from 
                (select cop1.object_pri_key_1, ACC.access_type,disp.prc_grp_disp,disp.process_group,acc.system_role,ACC.emp_hierarchy_id 
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group = 'DVU' and disp.prc_grp_disp = 'REWORK'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='DVU'
			              and COP1.is_active ='Y'
			              where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id)
			               and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
        and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
        and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
			           and COP1.workflow_status in ('BOM_REWORK','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED')
                       order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;				        
       
ELSIf x_role ='DVU'  and x_count_group_id in ('MY_ALL_QUE')  and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
		case when cop.workflow_status= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.workflow_status= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.workflow_status= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.workflow_status
			 end  as "STAT",
			     cop.workflow_status as "STAT1",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and  disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role  IN ('DVU','RCU')
				and cop1.workflow_status in ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
			              and COP1.is_active ='Y'
			              	where ACC.emp_hierarchy_id = X_LOGIN_ID
			        --   and COP1.workflow_status in ('BOM_REWORK','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED')
                       order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;				        

ELSIf x_role ='DVU'  and x_count_group_id in ('MY_ALL_QUE')  and x_filter_applied ='Y'
then

 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
		case when cop.workflow_status= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.workflow_status= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.workflow_status= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.workflow_status
			 end  as "STAT",
			     cop.workflow_status as "STAT1",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and  disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role  IN ('DVU','RCU')
				and cop1.workflow_status in ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
			              and COP1.is_active ='Y'
			              	where ACC.emp_hierarchy_id = X_LOGIN_ID
			        --   and COP1.workflow_status in ('BOM_REWORK','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED')
                      and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                    and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                    and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
		               order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;	
				        
				        
---------FOR RCU GENRAL QUEUE BUCKET
       
 ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_GEN')  and x_filter_applied ='N' then  
  
   select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,wfm.count_group_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU' and disp.prc_grp_disp ='USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RCU'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status in ('DVU_APPROVED')
			        --    where ACC.emp_id = X_LOGIN_ID
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				        
				        
ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_GEN')  and x_filter_applied ='Y' then  
  
  select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",cop.lead_journey as "LEAD_JOURNEY"  
			from 
                (select cop1.object_pri_key_1,acc.access_type,wfm.count_group_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU' and disp.prc_grp_disp ='USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RCU'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status in ('DVU_APPROVED')
			             and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
                order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
				        
---------FOR RCU MY QUEUE BUCKET
       
 ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE') and x_filter_applied ='N' then
  
  select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			tt.EMP_ID as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.EMP_ID, wfm.count_group_id
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU' and disp.prc_grp_disp ='WIP'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RCU'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status= 'RCU_ASSIGNED'
			            where ACC.emp_id = X_LOGIN_ID
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
				        
 ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE') and x_filter_applied ='Y' then
  
  select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			tt.EMP_ID as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.EMP_ID, wfm.count_group_id
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU' and disp.prc_grp_disp ='WIP'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RCU'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status= 'RCU_ASSIGNED'
			            where ACC.emp_id = X_LOGIN_ID
			             and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
			          order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				      ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				         
				        ---------FOR RCU GENRAL REWORK QUEUE BUCKET
       
 ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_REW')  and x_filter_applied ='N' then
  
   select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	    --ACC.access_type as "ACCESS_TYPE",
	    case when tt.process_group = 'RCU' 
             and tt.prc_grp_disp IN ('REWORK') 
             and tt.system_role  = 'RCU'
             and cop.workflow_status= 'RCU_REWORK' then 
             'R'
             when tt.process_group = 'RCU' 
             and tt.prc_grp_disp IN ('REWORK') 
             and tt.system_role  = 'RCU'
             and cop.workflow_status= 'RCU_REWORK_APPROVED' then 
             'W'else tt.access_type end as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
									(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_metadata_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			 from 
                (select cop1.object_pri_key_1,acc.access_type,wfm.count_group_id,disp.prc_grp_disp,disp.process_group,
                acc.system_role
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU' and disp.prc_grp_disp ='REWORK'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RCU'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status in ('RCU_REWORK','RCU_REWORK_APPROVED')
			            where ACC.emp_id = X_LOGIN_ID
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
             				         )T;
				        
				        
ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_REW')  and x_filter_applied ='Y' then
  
   select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	    --ACC.access_type as "ACCESS_TYPE",
	    case when tt.process_group = 'RCU' 
             and tt.prc_grp_disp IN ('REWORK') 
             and tt.system_role  = 'RCU'
             and cop.workflow_status= 'RCU_REWORK' then 
             'R'
             when tt.process_group = 'RCU' 
             and tt.prc_grp_disp IN ('REWORK') 
             and tt.system_role  = 'RCU'
             and cop.workflow_status= 'RCU_REWORK_APPROVED' then 
             'W'else tt.access_type end as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
									(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_metadata_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			 from 
                (select cop1.object_pri_key_1,acc.access_type,wfm.count_group_id,disp.prc_grp_disp,disp.process_group,
                acc.system_role
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU' and disp.prc_grp_disp ='REWORK'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RCU'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status in ('RCU_REWORK','RCU_REWORK_APPROVED')
			            where ACC.emp_id = X_LOGIN_ID
			             and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				           ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
             				         )T;		        
----------------------------------------------------------------------------------------------------------------				        
ELSIf  upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='N'  then 
-----------FOR RCU REJECTED LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
			     cop.id_name_add as "name",
			     coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
		     cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.EMP_ID as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,wfm.count_group_id,ACC.EMP_ID  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU' and disp.prc_grp_disp ='REJECT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RCU'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status ='RCU_REJECT'
			            where ACC.emp_id = X_LOGIN_ID
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
				        
ELSIf  upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='Y'  then 
-----------FOR RCU REJECTED LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
			     cop.id_name_add as "name",
			     coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
		     cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.EMP_ID as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,wfm.count_group_id,ACC.EMP_ID  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU' and disp.prc_grp_disp ='REJECT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RCU'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status ='RCU_REJECT'
			            where ACC.emp_id = X_LOGIN_ID
			            and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
		          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
                )T;
				        
				        
ELSIf  upper(x_role) ='RCU'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",		     
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU' and disp.prc_grp_disp ='APPROVE'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RCU'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status ='RCU_APPROVED'
			            where ACC.emp_id = X_LOGIN_ID
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
ELSIf  upper(x_role) ='RCU'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='Y'
then

    select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",		     
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU' and disp.prc_grp_disp ='APPROVE'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RCU'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status ='RCU_APPROVED'
			            where ACC.emp_id = X_LOGIN_ID
			            and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
		                  order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				         
				        			        
----------------------------------------------------------------------------------------------------------------
 ---------FOR RCU CORRECTOR VIEW QUEUE BUCKET      
 ELSIf upper(x_role) ='RCU CORRECTOR' and x_count_group_id in ('MY_QUE') and x_filter_applied ='N' then
   
 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	       TT.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
                  where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
--			cop.login_id as "ASSIGNED_USER_ID",
(select acc1.emp_id  from tb_btc_accesscontrol acc1 
			  where acc1.object_pri_key_1 =tt.object_pri_key_1 
			  and acc1.system_role ='RM')
			as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
--			(select rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
--                 where branch in (select branch_code from tb_emp_hrms teh 
--                                   where employee_number = acc.emp_id
--                                    )) as "ASSIGNED_TO"
			(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh , tb_btc_accesscontrol tba,
                 tb_cop_metadata_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
 	            from 
              ((select cop1.object_pri_key_1,acc.access_type,acc.object_pri_key_1 as pk1  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			            and acc.system_role in ('RM')
			              and COP1.is_active ='Y'
			            and cop1.workflow_status = 'RCU_REWORK'
			        where acc.EMP_ID in (select employee_number from tb_emp_hrms teh 
			                    join tb_branch_rcu_corrector_mapping RCM on rcm.branch = teh.branch_code 
			                   where RCM.rcu_corrector_id =x_login_id)   
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100)
 union 
				       ( select cop1.object_pri_key_1,acc.access_type,acc.object_pri_key_1 as pk1  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			       --      and acc.system_role in ('RM','RCU_Correcter')
			              and COP1.is_active ='Y'
			            and cop1.workflow_status = 'RCU_REWORK'
			        where cop1.region_name  in (select region_name from tb_cop_metadata_txn teh 
			                    join tb_branch_rcu_corrector_mapping RCM on rcm.branch = teh.region_name 
			                   where RCM.rcu_corrector_id =x_login_id)   
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100)
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				        
ELSIf upper(x_role) ='RCU CORRECTOR' and x_count_group_id in ('MY_QUE') and x_filter_applied ='Y' then
   
   select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	       TT.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
                  where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
--			cop.login_id as "ASSIGNED_USER_ID",
(select acc1.emp_id  from tb_btc_accesscontrol acc1 
			  where acc1.object_pri_key_1 =tt.object_pri_key_1 
			  and acc1.system_role ='RM')
			as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
--			(select rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
--                 where branch in (select branch_code from tb_emp_hrms teh 
--                                   where employee_number = acc.emp_id
--                                    )) as "ASSIGNED_TO"
			(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh , tb_btc_accesscontrol tba,
                 tb_cop_metadata_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
                                       ,cop.lead_journey as "LEAD_JOURNEY"
 	            from 
                ((select cop1.object_pri_key_1,acc.access_type,acc.object_pri_key_1 as pk1  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			            and acc.system_role in ('RM')
			              and COP1.is_active ='Y'
			            and cop1.workflow_status = 'RCU_REWORK'
			        where acc.EMP_ID in (select employee_number from tb_emp_hrms teh 
			                    join tb_branch_rcu_corrector_mapping RCM on rcm.branch = teh.branch_code 
			                   where RCM.rcu_corrector_id =x_login_id) 
			         and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
              and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
              and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        )
 union 
				       ( select cop1.object_pri_key_1,acc.access_type,acc.object_pri_key_1 as pk1  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			       --      and acc.system_role in ('RM','RCU_Correcter')
			              and COP1.is_active ='Y'
			            and cop1.workflow_status = 'RCU_REWORK'
			        where cop1.region_name  in (select region_name from tb_cop_metadata_txn teh 
			                    join tb_branch_rcu_corrector_mapping RCM on rcm.branch = teh.region_name 
			                   where RCM.rcu_corrector_id =x_login_id)  
			          and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
              and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
              and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
			            order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        )
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				        
ELSIf x_role ='Auditor' and x_count_group_id in ('MY_QUE_GEN') and x_filter_applied ='N'
then

    select json_agg(row_to_json(t)) into v_data from  
	(select distinct cop.caseid as "caseid",
	       --wfm.count_group_id as "que_id",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select distinct employee_number from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,coalesce (cop.device_modify_timestamp ,cop.created_timestamp ),cop.lead_journey as "LEAD_JOURNEY" 
			from tb_cop_metadata_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                  and disp.process_group not in ('RM_SE','RCU') and disp.prc_grp_disp not in ('APPROVE','APPROVERQUERY','DVUQUERY','ASSIGNED','SUBMITTED','REJECT')
               join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
               and acc.system_role not in ('RM_SE','RCU') 
               where  --cop.created_timestamp + interval '60 day'< current_timestamp and
                     COP.is_active ='Y'
              order by coalesce (cop.device_modify_timestamp ,cop.created_timestamp )
              limit 100
               )T;
              
              
ELSIf x_role ='Auditor' and x_count_group_id in ('MY_QUE_GEN') and x_filter_applied ='Y'
then

    select json_agg(row_to_json(t)) into v_data from  
	(select distinct cop.caseid as "caseid",
	       --wfm.count_group_id as "que_id",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select distinct employee_number from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",cop.lead_journey as "LEAD_JOURNEY"  
			from tb_cop_metadata_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                  and disp.process_group not in ('RM_SE','RCU') and disp.prc_grp_disp not in ('APPROVE','APPROVERQUERY','DVUQUERY','ASSIGNED','SUBMITTED','REJECT')
               join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
               and acc.system_role not in ('RM_SE','RCU') 
              --and cop.created_timestamp + interval '60 day'< current_timestamp
              and COP.is_active ='Y'
              and case when v_filer_type ='date' then  date(coalesce (cop.device_modify_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
              and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
              and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
               )T;			        
--ELSIf  upper(x_role) ='AUDITOR'  and x_count_group_id in ('MY_BACKEND_QUE') 
--then
--
--  select json_agg(row_to_json(t)) into v_data from  
--	(select  distinct cop.caseid as "caseid",
----	wfm.count_group_id as "que_id",
----	ACC.access_type as "ACCESS_TYPE",
--	        cop.crn as "CRN" ,
--			cop.account_no as "ACCOUNT_NO" ,
--			cop.contact_mobile as "CONTACT_MOBILE" ,
----			case when cop.constitution_type = 'IN'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
----			     when cop.constitution_type = 'SP'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
----			     END as "name",
--                  cop.id_name_add as "name",
--			cop.scheme_code as "SCHEME_CODE",			
--			cop.crn_entity as "ENTITY_CRN",			
--			cop.aus_crn as "AUS_CRN",
--			cop1.program_option as "PRIVY",
----			cop.caseid as "caseid",
--			cop.lead_id as "LEAD_ID",
--			cop.opening_branch as "OPENING_BRANCH",
--			case when cop.constitution_type = 'IN'
--			     then 'Individual'
--			     when cop.constitution_type = 'SP'
--			     then 'Sole Proprietor' else cop.constitution_type
--			     end as "CONSTITUTION_TYPE",
--			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
--				(select CITY from tb_branch_mst tbm      
--               where branch_cd in (select cop.region_name))  as "REGION_NAME",
--			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
--			cop.login_id as "ASSIGNED_USER_ID",
--			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
--			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
--			'' as "CURRENT_WORKSTEP"  
--		from tb_cop_metadata_txn cop  
--		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
-- 		              and process_group in ('ACCOUNT')
--                           and prc_grp_disp in ('SUCCESS'))T;
				        

              
ELSIf x_role in ('Ops CA','BSG','Product Supervisor') and x_count_group_id in ('MY_QUE_GEN') and x_filter_applied ='N'
then

           select json_agg(row_to_json(t)) 
    into v_data
     from  
	(select distinct cop.lead_id as "LEAD_ID",
           COP.object_pri_key_1 ,
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select distinct employee_number from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" , date(cop.device_modify_timestamp) ,
			case when tt.prc_grp_disp = 'WAIT'
			     then (select CFG.process_group from tb_service_audit tsa
			     join tb_btc_prc_grp_disp CFG on CFG.process_group = TSA.process_group 
				  where TSA.object_pri_key_1 =COP.object_pri_key_1 
				order by TSA.created_timestamp desc limit 1)
			     else (select TSA.process_group from tb_service_audit tsa
			     join tb_btc_prc_grp_disp_cfg CFG on CFG.process_group = TSA.process_group 
				  where TSA.object_pri_key_1 =COP.object_pri_key_1
				order by TSA.created_timestamp desc limit 1  )
				end as "PROCESS_GROUP" ,
			case when tt.prc_grp_disp = 'WAIT'
			     then (select TT.prc_grp_disp from tb_service_audit tsa 
				 where object_pri_key_1 =COP.object_pri_key_1 
				order by created_timestamp desc
				limit 1)
			     else (select tsa.prc_grp_disp from tb_service_audit tsa 
				 where object_pri_key_1 =COP.object_pri_key_1 
				order by created_timestamp desc
				limit 1  )end as  "DISPOSITION"  ,
		case when tt.prc_grp_disp = 'WAIT'
			     then 'NA'
			     else (select case when tbpgd.config_id = '145' then 'BJCIFINDAOFUPD' 
			             when tbpgd.config_id = '117' then 'BJCIFAOFUPD'
			              when tbpgd.config_id = '305' then 'BJCIFINDAOFUPD' 
			             when tbpgd.config_id = '300' then 'BJCIFAOFUPD'
			         else tbpgd.event_process end 
			from tb_service_audit tsa , tb_btc_prc_grp_disp_cfg tbpgd 
				 where tt.object_pri_key_1 =COP.object_pri_key_1 
				 and tbpgd.process_group = tsa.process_group 
				 and tbpgd.prc_grp_disp = tsa.prc_grp_disp
				 and tt.config_id = cast(tbpgd.config_id as VARCHAR)
				order by tsa.created_timestamp desc
				limit 1  )end as  "EVENT_PROCESS"  ,cop.lead_journey as "LEAD_JOURNEY"
							
		    from 
                (select  cop1.object_pri_key_1,disp.prc_grp_disp,disp.process_group,disp.config_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			             and disp.process_group in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNTCASA','ACCOUNT','ACCOUNTCASA','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')
              and disp.prc_grp_disp in ('FAILURE','WAIT')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNTCASA','ACCOUNT','ACCOUNTCASA','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')
                          and COP1.is_active ='Y'
                      		where cop1.object_pri_key_1 not in (select distinct TSS.object_pri_key_1 from tb_service_audit tss
                                                 where process_group ='ACCOUNT' 
                                                 and TSS.prc_grp_disp ='SUCCESS')
               order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        --  limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1
                               order by date(cop.device_modify_timestamp))T;
                
                
ELSIf x_role in ('Ops CA','BSG','Product Supervisor') and x_count_group_id in ('MY_QUE_GEN') and x_filter_applied ='Y'
then

        select json_agg(row_to_json(t)) 
    into v_data
     from  
	(select distinct   cop.lead_id as "LEAD_ID",
           COP.object_pri_key_1 ,
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",		
			(select distinct employee_number from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",cop.lead_journey as "LEAD_JOURNEY",
			case when tt.prc_grp_disp = 'WAIT'
			     then (select CFG.process_group from tb_service_audit tsa
			     join tb_btc_prc_grp_disp CFG on CFG.process_group = TSA.process_group 
				  where TSA.object_pri_key_1 =COP.object_pri_key_1 
				order by TSA.created_timestamp desc limit 1)
			     else (select TSA.process_group from tb_service_audit tsa
			     join tb_btc_prc_grp_disp_cfg CFG on CFG.process_group = TSA.process_group 
				  where TSA.object_pri_key_1 =COP.object_pri_key_1
				order by TSA.created_timestamp desc limit 1  )
				end as "PROCESS_GROUP" ,
			case when tt.prc_grp_disp = 'WAIT'
			     then (select TT.prc_grp_disp from tb_service_audit tsa 
				 where object_pri_key_1 =COP.object_pri_key_1 
				order by created_timestamp desc
				limit 1)
			     else (select tsa.prc_grp_disp from tb_service_audit tsa 
				 where object_pri_key_1 =COP.object_pri_key_1 
				order by created_timestamp desc
				limit 1  )end as  "DISPOSITION"  ,
		case when tt.prc_grp_disp = 'WAIT'
			     then 'NA'
			     else (select case when tbpgd.config_id = '145' then 'BJCIFINDAOFUPD' 
			             when tbpgd.config_id = '117' then 'BJCIFAOFUPD'
			              when tbpgd.config_id = '305' then 'BJCIFINDAOFUPD' 
			             when tbpgd.config_id = '300' then 'BJCIFAOFUPD'
			         else tbpgd.event_process end 
			from tb_service_audit tsa , tb_btc_prc_grp_disp_cfg tbpgd 
				 where tt.object_pri_key_1 =COP.object_pri_key_1 
				 and tbpgd.process_group = tsa.process_group 
				 and tbpgd.prc_grp_disp = tsa.prc_grp_disp
				 and tt.config_id = cast(tbpgd.config_id as VARCHAR)
				order by tsa.created_timestamp desc
				limit 1  )end as  "EVENT_PROCESS" ,cop.lead_journey as "LEAD_JOURNEY"
		    from 
                (select  cop1.object_pri_key_1,disp.prc_grp_disp,disp.process_group,disp.config_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			             and disp.process_group in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNTCASA','ACCOUNT','ACCOUNTCASA','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')
              and disp.prc_grp_disp in ('FAILURE','WAIT')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNTCASA','ACCOUNT','ACCOUNTCASA','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')
                          and COP1.is_active ='Y'
                          where cop1.object_pri_key_1 not in (select distinct TSS.object_pri_key_1 from tb_service_audit tss
                                                 where process_group ='ACCOUNT' 
                                                 and TSS.prc_grp_disp ='SUCCESS')
                    and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
 and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
 and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
 order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1)T;            
 
                /*
ELSIf x_role in ('BSG','Product Supervisor') and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='N'
then

    select json_agg(row_to_json(t)) into v_data from  
	( select distinct cop.caseid as "caseid",
          cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
   	            cop.id_name_add as "name",	
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop1.program_option as "PRIVY",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
		  case   when COP.TEXT_1 in ('ASSIGNED','REJECTED')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'RM'
			            and COP.TEXT_1 in ('ASSIGNED','REJECTED'))	 
		         when COP.TEXT_1 in ('SUBMITTED','BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REJECT')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'BOM'
			            and COP.TEXT_1 in ('SUBMITTED','BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REJECT'))	
			     when COP.text_1 in ('BOM_APPROVED','DVU_APPROVED')
			      then  'YET TO ASSIGN'
			     when COP.text_1 in ('RCU_APPROVED')
			      then  'PENDING AT API'
			     when cop.text_1 in ('DVU_ASSIGNED','DVU_REWORK','BOM_DVU_REWORK_APPROVED')
			      then  (select tba.emp_hierarchy_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'DVU'
			            and cOP.text_1 in ('DVU_ASSIGNED','DVU_REWORK','BOM_DVU_REWORK_APPROVED'))
			     when COP.text_1 in ('RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REJECT')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'RCU' 
			            and COP.text_1 in ('RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REJECT'))			     
			     when COP.text_1 in ('RCU_REWORK')
			      then  (select rcu_corrector_id from tb_branch_rcu_corrector_mapping rcu
			                   where rcu.branch in (select branch_code from tb_emp_hrms teh2, tb_btc_accesscontrol tba2 
			                                          where employee_number = tba2.emp_id 
			                                          and tba2.object_pri_key_1 =acc.object_pri_key_1 
                   			                          and tba2.system_role ='RM'
                   			                          and cop.text_1 ='RCU_REWORK'))
			   else 'NA'                       
			      end as "ASSIGNED_TO", coalesce (cop.modified_timestamp ,cop.created_timestamp )
  from tb_cop_metadata_txn cop
  join tb_btc_prc_grp_disp disp on disp.object_pri_key_1 = cop.object_pri_key_1
  join tb_btc_accesscontrol acc on acc.object_pri_key_1 = disp.object_pri_key_1
  where -- cop.created_timestamp + interval '60 day'< current_timestamp and
    COP.is_active ='Y'
  order by coalesce (cop.modified_timestamp ,cop.created_timestamp )
  limit 100
  )T;				        

 ELSIf x_role in ('BSG','Product Supervisor') and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='Y'
then

    select json_agg(row_to_json(t)) into v_data from  
	( select distinct cop.caseid as "caseid",
          cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
   	            cop.id_name_add as "name",	
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop1.program_option as "PRIVY",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
		  case   when COP.TEXT_1 in ('ASSIGNED','REJECTED')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'RM'
			            and COP.TEXT_1 in ('ASSIGNED','REJECTED'))	 
		         when COP.TEXT_1 in ('SUBMITTED','BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REJECT')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'BOM'
			            and COP.TEXT_1 in ('SUBMITTED','BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REJECT'))	
			     when COP.text_1 in ('BOM_APPROVED','DVU_APPROVED')
			      then  'YET TO ASSIGN'
			     when COP.text_1 in ('RCU_APPROVED')
			      then  'PENDING AT API'
			     when cop.text_1 in ('DVU_ASSIGNED','DVU_REWORK','BOM_DVU_REWORK_APPROVED')
			      then  (select tba.emp_hierarchy_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'DVU'
			            and cOP.text_1 in ('DVU_ASSIGNED','DVU_REWORK','BOM_DVU_REWORK_APPROVED'))
			     when COP.text_1 in ('RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REJECT')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'RCU' 
			            and COP.text_1 in ('RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REJECT'))			     
			     when COP.text_1 in ('RCU_REWORK')
			      then  (select rcu_corrector_id from tb_branch_rcu_corrector_mapping rcu
			                   where rcu.branch in (select branch_code from tb_emp_hrms teh2, tb_btc_accesscontrol tba2 
			                                          where employee_number = tba2.emp_id 
			                                          and tba2.object_pri_key_1 =acc.object_pri_key_1 
                   			                          and tba2.system_role ='RM'
                   			                          and cop.text_1 ='RCU_REWORK'))
			   else 'NA'                       
			      end as "ASSIGNED_TO"
  from tb_cop_metadata_txn cop
  join tb_btc_prc_grp_disp disp on disp.object_pri_key_1 = cop.object_pri_key_1
  join tb_btc_accesscontrol acc on acc.object_pri_key_1 = disp.object_pri_key_1
 where  --cop.created_timestamp + interval '60 day'< current_timestamp
  COP.is_active ='Y'
 and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
 and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
 and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
  )T;	
--ELSIf x_role ='BSG' and x_count_group_id in ('MY_QUE_GEN') 
--then

--    select json_agg(row_to_json(t)) into v_data from  
--	(select wfm.count_group_id as "que_id",
--	ACC.access_type as "ACCESS_TYPE",
--			cop.crn as "CRN" ,
--			cop.account_no as "ACCOUNT_NO" ,
--			cop.contact_mobile as "CONTACT_MOBILE" ,
----			case when cop.constitution_type = 'IN'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
----			     when cop.constitution_type = 'SP'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
----			     END as "name",
--                  cop.id_name_add as "name",
--			cop.scheme_code as "SCHEME_CODE",			
--			cop.crn_entity as "ENTITY_CRN",			
--			cop.aus_crn as "AUS_CRN",
--			cop1.program_option as "PRIVY",
--			cop.caseid as "caseid",
--			cop.lead_id as "LEAD_ID",
--			cop.opening_branch as "OPENING_BRANCH",
--			case when cop.constitution_type = 'IN'
--			     then 'Individual'
--			     when cop.constitution_type = 'SP'
--			     then 'Sole Proprietor' else cop.constitution_type
--			     end as "CONSTITUTION_TYPE",
--			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
--				(select CITY from tb_branch_mst tbm      
--               where branch_cd in (select cop.region_name))  as "REGION_NAME",
--			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
--			cop.login_id as "ASSIGNED_USER_ID",
--			(select employee_number from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
--			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
--			'' as "CURRENT_WORKSTEP"  from tb_cop_metadata_txn cop  
--              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
--              and disp.process_group not in ('RM_SE') and disp.prc_grp_disp not in  ('APPROVERQUERY','DVUQUERY','ASSIGNED','REJECT')
--			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
--            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
----                            and disp.object_pri_key_2 = acc.object_pri_key_2 
----                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;                          
--	   order by case  cop1.program_option
--				         when  'Priority Privy' then 1 
--				         when  'Branch Privy' then 2  
--				         when 'Non Privy' then 3 end  )T;
*/
-------------------------------BSG RM_SE BUCKET-------------------------------
ELSIf x_role in  ('BSG','Product Supervisor') and x_count_group_id in ('MY_RMSE_QUE') and x_filter_applied ='N' then

  select json_agg(row_to_json(t)) 
into v_data
 from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,date(cop.device_modify_timestamp),
			tt.emp_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
                 from 
                (select cop1.object_pri_key_1, acc.access_type,acc.emp_id from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			             and disp.process_group  in ('RM_SE') and disp.prc_grp_disp  in ('APPROVERQUERY','DVUQUERY','ASSIGNED')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='RM'
                          and COP1.is_active ='Y'
                          and  cop1.account_no is not null 
              and  cop1.account_no<>''
               and COP1.workflow_status in  ('ASSIGNED','DVU_REWORK','BOM_REWORK','MOVETOASSISTED')
                           order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1
             order by date(cop.device_modify_timestamp))T;
              
ELSIf x_role in  ('BSG','Product Supervisor') and x_count_group_id in ('MY_RMSE_QUE') and x_filter_applied ='Y' then

  select json_agg(row_to_json(t)) 
into v_data
 from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
                 from 
                (select cop1.object_pri_key_1, acc.access_type,acc.emp_id from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			             and disp.process_group  in ('RM_SE') and disp.prc_grp_disp  in ('APPROVERQUERY','DVUQUERY','ASSIGNED')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='RM'
                          and COP1.is_active ='Y'
                          and  cop1.account_no is not null 
              and  cop1.account_no<>''
               and COP1.workflow_status in  ('ASSIGNED','DVU_REWORK','BOM_REWORK','MOVETOASSISTED')
                and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
               order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1)T;
             	  
-------------------------------BSG APPROVER BUCKET-------------------------------	  
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_APPROVER_QUE') and x_filter_applied ='N' then

select json_agg(row_to_json(t)) 
into v_data 
from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS')as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
						(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =tt.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"      
	  from 
                (select cop1.object_pri_key_1,acc.object_pri_key_1 as pk,acc.access_type  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			             and disp.process_group in ('RM_SE') and disp.prc_grp_disp in ('APPROVEDQUERY','DVUAPPROVEDQUERY','SUBMITTED','APPROVERQUERY','DVUQUERY')
               		    join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='RM'
                          and COP1.is_active ='Y'
                          and cop1.workflow_status in ('SUBMITTED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REWORK') 
                          order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_APPROVER_QUE') and x_filter_applied ='Y' then

select json_agg(row_to_json(t)) 
into v_data 
from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS')as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
						(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =tt.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"      
	  from 
                (select cop1.object_pri_key_1,acc.object_pri_key_1 as pk,acc.access_type  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			             and disp.process_group in ('RM_SE') and disp.prc_grp_disp in ('APPROVEDQUERY','DVUAPPROVEDQUERY','SUBMITTED','APPROVERQUERY','DVUQUERY')
               		    join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='RM'
                          and COP1.is_active ='Y'
                          and cop1.workflow_status in ('SUBMITTED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REWORK') 
                      and    case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
                          order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;				
-------------------------------BSG DVU BUCKET-------------------------------	  
ELSIf x_role in('BSG','Product Supervisor')
and x_count_group_id in ('MY_DVU_QUE') and x_filter_applied ='N' then

select json_agg(row_to_json(t)) into v_data from  
	 (select
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			 case when COP.TEXT_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED')
			      then  (select tba.update_login_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = cop.object_pri_key_1 
			            and tba.system_role  = 'BOM'
			            and COP.TEXT_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED'))	
			      when cop.text_1 in ('DVU_ASSIGNED','BOM_DVU_REWORK_APPROVED')
			      then  (select tba.emp_hierarchy_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = cop.object_pri_key_1 
			            and tba.system_role  = 'DVU'
			            and cOP.text_1 in ('DVU_ASSIGNED','BOM_DVU_REWORK_APPROVED'))
			      when cop.text_1 in ('DVU_REWORK','BOM_REWORK')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = cop.object_pri_key_1 
			            and tba.system_role  = 'RM'
			            and cOP.text_1 in ('DVU_REWORK','BOM_REWORK'))
			      else (select tba.emp_hierarchy_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = cop.object_pri_key_1 
			            and tba.system_role  = 'DVU')end  as "ASSIGNED_TO",
			            date(cop.device_modify_timestamp),cop.lead_journey as "LEAD_JOURNEY"
                    from 
                (select  cop1.object_pri_key_1,acc.access_type  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			              and disp.process_group IN('DVU') and disp.prc_grp_disp IN ('WIP','USERWAIT','REWORK')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role  = 'DVU'
			              and COP1.workflow_status in ('BOM_APPROVED','CPVAPPROVED','BOM_REWORK','BOM_APPROVED','DVU_ASSIGNED','DVU_REWORK','BOM_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_REWORK_APPROVED')
                          and COP1.is_active ='Y'
               order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
               order by date(cop.device_modify_timestamp) ) t;
                
                
ELSIf x_role in('BSG','Product Supervisor')and x_count_group_id in ('MY_DVU_QUE') 
and x_filter_applied ='Y' then
select json_agg(row_to_json(t)) into v_data from  
	 (select
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			 case when COP.TEXT_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED')
			      then  (select tba.update_login_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = cop.object_pri_key_1 
			            and tba.system_role  = 'BOM'
			            and COP.TEXT_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED'))	
			      when cop.text_1 in ('DVU_ASSIGNED','BOM_DVU_REWORK_APPROVED')
			      then  (select tba.emp_hierarchy_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = cop.object_pri_key_1 
			            and tba.system_role  = 'DVU'
			            and cOP.text_1 in ('DVU_ASSIGNED','BOM_DVU_REWORK_APPROVED'))
			      when cop.text_1 in ('DVU_REWORK','BOM_REWORK')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = cop.object_pri_key_1 
			            and tba.system_role  = 'RM'
			            and cOP.text_1 in ('DVU_REWORK','BOM_REWORK'))
			      else (select tba.emp_hierarchy_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = cop.object_pri_key_1 
			            and tba.system_role  = 'DVU')end  as "ASSIGNED_TO",
			            cop.lead_journey as "LEAD_JOURNEY"
                    from 
                    
                    (select  cop1.object_pri_key_1,acc.access_type  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			              and disp.process_group IN('DVU') and disp.prc_grp_disp IN ('WIP','USERWAIT','REWORK')

			            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			                            and disp.object_pri_key_2 = acc.object_pri_key_2 
			                           and disp.object_pri_key_3 = acc.object_pri_key_3 
			               and acc.system_role  = 'DVU'
			               and COP1.workflow_status in ('BOM_APPROVED','CPVAPPROVED','BOM_REWORK','BOM_APPROVED','DVU_ASSIGNED','DVU_REWORK','BOM_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_REWORK_APPROVED')
          
                           and COP1.is_active ='Y' and
                           case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
                order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                         case cop1.program_option
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				       ) tt
				       
				        join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				
			    )T;
-------------------------------BSG RCU BUCKET-------------------------------	  
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RCU_QUE')  and x_filter_applied ='N' then

   select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
	       	       case when cop.text_1 ='DVU_APPROVED'
	       then ''
	       when cop.text_1 ='RCU_REWORK'
	       then (select distinct rcu_corrector_id 
		       from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh , tb_btc_accesscontrol tba ,
                 tb_cop_metadata_txn cop
                                          where TBA.system_role ='RM'
                                          and TEH.employee_number = TBA.emp_id
                                          and tba.object_pri_key_1 =COP.object_pri_key_1)limit 1)
	       else 
			tt.emp_id  end as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
				 from (select cop1.object_pri_key_1,acc.access_type,acc.emp_id   from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			  and disp.process_group  = 'RCU' and disp.prc_grp_disp in  ('WIP','USERWAIT','REWORK')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='RCU'
                          and COP1.is_active ='Y'
                          and COP1.workflow_status in 
            ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REWORK')
               order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				        
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RCU_QUE')  and x_filter_applied ='Y' then

  select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
	       	       case when cop.text_1 ='DVU_APPROVED'
	       then ''
	       when cop.text_1 ='RCU_REWORK'
	       then (select distinct rcu_corrector_id 
		       from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh , tb_btc_accesscontrol tba ,
                 tb_cop_metadata_txn cop
                                          where TBA.system_role ='RM'
                                          and TEH.employee_number = TBA.emp_id
                                          and tba.object_pri_key_1 =COP.object_pri_key_1)limit 1)
	       else 
			tt.emp_id  end as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
				 from (select cop1.object_pri_key_1,acc.access_type,acc.emp_id   from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			  and disp.process_group  = 'RCU' and disp.prc_grp_disp in  ('WIP','USERWAIT','REWORK')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='RCU'
                          and COP1.is_active ='Y'
                          and COP1.workflow_status in 
            ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REWORK')
                            and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                   and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                   and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
                          order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
-------------------------------BSG RCU_CORRECTOR BUCKET-------------------------------	  
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RCU_COR_QUE') and x_filter_applied ='N'
then
 select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",		
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
		(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_metadata_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"		        
                                       ,cop.lead_journey as "LEAD_JOURNEY"
                                        from 
                (select cop1.object_pri_key_1,acc.access_type  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			  and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role = 'RCU_Correcter'
                          and COP1.is_active ='Y'
                          and COP1.workflow_status = 'RCU_REWORK'	
               order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
				        
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RCU_COR_QUE') and x_filter_applied ='Y'
then

   select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",		
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
		(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_metadata_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"	
                                       ,cop.lead_journey as "LEAD_JOURNEY"
                                        from 
                (select cop1.object_pri_key_1,acc.access_type  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			  and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role = 'RCU_Correcter'
                          and COP1.is_active ='Y'
                          and COP1.workflow_status = 'RCU_REWORK'	
                           and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                   and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                   and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
                          order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
---------------------------Product Supervisor RCU CORRECTOR SUPERVISOR---------------------
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='N'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
		    (select rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
                  where branch in (select branch_code from tb_emp_hrms teh , tb_btc_accesscontrol tba 
                                     where employee_number = tba.emp_id limit 1)) as "ASSIGNED_TO"
                                     ,cop.lead_journey as "LEAD_JOURNEY"
				            from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			  and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role = 'RCU_Correcter'
                          and COP1.is_active ='Y'
                          and COP1.workflow_status = 'RCU_REWORK'	
               order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;			        
				        
 ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='Y'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
		    (select rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
                  where branch in (select branch_code from tb_emp_hrms teh , tb_btc_accesscontrol tba 
                                     where employee_number = tba.emp_id limit 1)) as "ASSIGNED_TO"
                                     ,cop.lead_journey as "LEAD_JOURNEY"
				            from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			  and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role = 'RCU_Correcter'
                          and COP1.is_active ='Y'
                          and COP1.workflow_status = 'RCU_REWORK'	
                           and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                   and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                   and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
                          order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
				        
-------------------------------BSG ALL REJECTED BUCKET-------------------------------	  
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='N'
then

select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			tt.emp_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
				           from    (select cop1.object_pri_key_1,acc.access_type ,acc.emp_id from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			  and disp.process_group IN('RM_SE','BOM_APPROVER','RCU') and disp.prc_grp_disp IN ('REJECT')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role IN('RM','BOM','RCU')
			               and ACC.access_type = 'R'
                          and COP1.is_active ='Y'
                          and COP1.workflow_status IN ('REJECTED','BOM_REJECT','RCU_REJECT')
				  order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 )T;

ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='Y'
then

select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			tt.emp_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
				           from    (select cop1.object_pri_key_1,acc.access_type ,acc.emp_id from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			  and disp.process_group IN('RM_SE','BOM_APPROVER','RCU') and disp.prc_grp_disp IN ('REJECT')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role IN('RM','BOM','RCU')
			               and ACC.access_type = 'R'
                          and COP1.is_active ='Y'
                          and COP1.workflow_status IN ('REJECTED','BOM_REJECT','RCU_REJECT')
                    and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                   and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                   and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
                          order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 )T;
				        
				        
-------------------------------Product Supervisor ALL AFTER RCU_APPROVED BUCKET-------------------------------				        
ELSIf x_role in  ('BSG','Product Supervisor','Approver','DVU','RCU','Auditor','RCU Supervisor','DVU Supervisor','Approver Supervisor') 
    and x_count_group_id in ('MY_BACKEND_QUE')  and x_filter_applied  ='N' then

    select json_agg(row_to_json(t)) into v_data from  
	(select   cop.caseid as "caseid",
--	wfm.count_group_id as "que_id",
--	ACC.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",cop.lead_journey as "LEAD_JOURNEY"  
from tb_cop_metadata_txn cop 
		 where exists ( select 1 from tb_btc_prc_grp_disp disp 
		                 where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                  and process_group ='ACCOUNT'
                          and prc_grp_disp ='SUCCESS')
          		--and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'                        
          order by coalesce (cop.device_modify_timestamp ,cop.created_timestamp )
                limit 100
             --   and COP.workflow_status ='ACCOUNT_ACTIVATED'                           
--               order by case  cop1.program_option
--				         when  'Priority Privy' then 1 
--				         when  'Branch Privy' then 2  
--				         when 'Non Privy' then 3 end
				        )T;
				       
ELSIf x_role in  ('BSG','Product Supervisor','Approver','DVU','RCU','Auditor','RCU Supervisor','DVU Supervisor','Approver Supervisor') 
    and x_count_group_id in ('MY_BACKEND_QUE')  and x_filter_applied  ='Y' then

    raise notice 'v_filer_type%',v_filer_type;
    raise notice 'v_case_id%',v_case_id;
  select json_agg(row_to_json(t)) into v_data from  
	(select   cop.caseid as "caseid",
--	wfm.count_group_id as "que_id",
--	ACC.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",cop.lead_journey as "LEAD_JOURNEY"  
         from tb_cop_metadata_txn cop 
		 where exists ( select 1 from tb_btc_prc_grp_disp disp 
		                 where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                  and process_group ='ACCOUNT'
                           and prc_grp_disp ='SUCCESS')
           --and cop.created_timestamp + interval '60 day'< current_timestamp
           and COP.is_active ='Y'  
           and case when v_filer_type ='date' then  date(coalesce (cop.device_modify_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
           and  case when v_filer_type ='case_id' then cop.lead_id= v_case_id  else 1=1 end
           and case  when v_filer_type ='entity_name' then cop.id_name_add= v_cust_name else 1=1 end
--         ((cop.caseid=v_case_id) 
--               or (cop.id_name_add=v_cust_name)
--               or (date(COP.modified_timestamp) between v_from_date and v_to_date )
--                )
             --   and COP.workflow_status ='ACCOUNT_ACTIVATED'                           
--               order by case  cop1.program_option
--				         when  'Priority Privy' then 1 
--				         when  'Branch Privy' then 2  
--				         when 'Non Privy' then 3 end
				        )T;	
--  select json_agg(row_to_json(t)) into v_data from  
--	(select  distinct cop.caseid as "caseid",
----	wfm.count_group_id as "que_id",
----	ACC.access_type as "ACCESS_TYPE",
--	        cop.crn as "CRN" ,
--			cop.account_no as "ACCOUNT_NO" ,
--			cop.contact_mobile as "CONTACT_MOBILE" ,
----			case when cop.constitution_type = 'IN'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
----			     when cop.constitution_type = 'SP'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
----			     END as "name",
--                  cop.id_name_add as "name",
--			cop.scheme_code as "SCHEME_CODE",			
--			case when cop.crn_entity is not null 
--			     then cop.crn_entity
--			     else 'NA' end as "ENTITY_CRN",			
--			cop.aus_crn as "AUS_CRN",
--			cop1.program_option as "PRIVY",
--			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
----			cop.caseid as "caseid",
--			cop.lead_id as "LEAD_ID",
--			cop.opening_branch as "OPENING_BRANCH",
--			case when cop.constitution_type = 'IN'
--			     then 'Individual'
--			     when cop.constitution_type = 'SP'
--			     then 'Sole Proprietor' else cop.constitution_type
--			     end as "CONSTITUTION_TYPE",
--			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
--				(select CITY from tb_branch_mst tbm      
--               where branch_cd in (select cop.region_name))  as "REGION_NAME",
--			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
--			cop.login_id as "ASSIGNED_USER_ID",
--			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
--			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
--			'' as "CURRENT_WORKSTEP"  
--from tb_cop_metadata_txn cop  ,tb_btc_prc_grp_disp disp 
--  where cop.object_pri_key_1 = disp.object_pri_key_1 
--  and exists ((select 1 from tb_btc_prc_grp_disp tbpgd where tbpgd.object_pri_key_1 =cop.object_pri_key_1 
--                  and tbpgd.process_group = 'ACCOUNT'       and tbpgd.prc_grp_disp ='SUCCESS'))
--and exists ((select 1 from tb_btc_prc_grp_disp tbpgd where tbpgd.object_pri_key_1 =cop.object_pri_key_1 
--                  and tbpgd.process_group = 'CERSAI'       and tbpgd.prc_grp_disp ='SUCCESS'))
--and exists ((select 1 from tb_btc_prc_grp_disp tbpgd where tbpgd.object_pri_key_1 =cop.object_pri_key_1 
--                  and tbpgd.process_group = 'GSTIN'       and tbpgd.prc_grp_disp ='SUCCESS'))
--and exists ((select 1 from tb_btc_prc_grp_disp tbpgd where tbpgd.object_pri_key_1 =cop.object_pri_key_1 
--                  and tbpgd.process_group = 'FATCA Handoff'       and tbpgd.prc_grp_disp ='SUCCESS'))   
--				        )T;
-------------------------------BSG ALL ERROR BUCKET-------------------------------	  				        				       				       

-------------------------------------------------------------------------------				        
ELSIf upper(x_role) ='SE SUPERVISOR' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='N'
then
    
 select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id,wfm.count_group_id from tb_cop_metadata_txn cop1 
                 join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
                        and disp.process_group  in ('RM_SE') and disp.prc_grp_disp  in ('APPROVERQUERY','DVUQUERY','ASSIGNED')
			             join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                         and wfm.process_group = disp.process_group 
                         and cop1.workflow_status in  ('ASSIGNED','DVU_REWORK','BOM_REWORK','MOVETOASSISTED')
			             and acc.system_role ='RM'
			             and COP1.is_active ='Y'
			              and ACC.emp_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				        )T;


ELSIf upper(x_role) ='SE SUPERVISOR' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='Y'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id,wfm.count_group_id from tb_cop_metadata_txn cop1 
                 join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
                        and disp.process_group  in ('RM_SE') and disp.prc_grp_disp  in ('APPROVERQUERY','DVUQUERY','ASSIGNED')
			             join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                         and wfm.process_group = disp.process_group 
                         and cop1.workflow_status in  ('ASSIGNED','DVU_REWORK','BOM_REWORK','MOVETOASSISTED')
			             and acc.system_role ='RM'
			             and COP1.is_active ='Y'
			              and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
			             and ACC.emp_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				           ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				        )T;
			        
ELSIf x_role ='Approver Supervisor' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='N'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	        tt.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",	
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
		(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =TT.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY" 
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.object_pri_key_1 as pk1,wfm.count_group_id
                from tb_cop_metadata_txn cop1 
                 join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
                         and disp.process_group in ('BOM_APPROVER') and disp.prc_grp_disp in ('USERWAIT','REWORK', 'APPROVE')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                         and wfm.process_group = disp.process_group 
                         and cop1.workflow_status in ('SUBMITTED','BOM_REWORK_APPROVED','BOM_REWORK' , 'DVU_REWORK_APPROVED')
                         and acc.system_role ='BOM'
			             and COP1.is_active ='Y'
			              and ACC.update_login_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				        
ELSIf x_role ='Approver Supervisor' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='Y'
then
    
         select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	        tt.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",	
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
		(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =TT.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO" ,cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.object_pri_key_1 as pk1,wfm.count_group_id
                from tb_cop_metadata_txn cop1 
                 join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
                         and disp.process_group in ('BOM_APPROVER') and disp.prc_grp_disp in ('USERWAIT','REWORK', 'APPROVE')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                         and wfm.process_group = disp.process_group 
                         and cop1.workflow_status in ('SUBMITTED','BOM_REWORK_APPROVED','BOM_REWORK' , 'DVU_REWORK_APPROVED')
                         and acc.system_role ='BOM'
			             and COP1.is_active ='Y'
			              and ACC.update_login_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				        
-----------FOR APPROVER ACCOUNT ACTIVATED LEADS				        
ELSIf x_role ='Approver Supervisor'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",		     
			cop.scheme_code as "SCHEME_CODE",
						case when cop.workflow_status in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.workflow_status in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.workflow_status end as "STAT",
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =tt.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO" ,cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.object_pri_key_1 as pk1  from tb_cop_metadata_txn cop1 
              --   join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
             --  and disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			           and cop1.workflow_status in ('BOM_APPROVED','BOM_REWORK_APPROVED','DVU_ASSIGNED','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_APPROVED',
				            'RCU_ASSIGNED','RCU_REWORK','BOM_REWORK','RCU_REWORK_APPROVED') 
				    and acc.system_role ='RM'
			             and COP1.is_active ='Y'
			              and ACC.update_login_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;				        
				        

				        
ELSIf x_role ='Approver Supervisor'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='Y'
then

   select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",		     
			cop.scheme_code as "SCHEME_CODE",
						case when cop.workflow_status in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.workflow_status in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.workflow_status end as "STAT",
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =tt.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY" 
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.object_pri_key_1 as pk1  from tb_cop_metadata_txn cop1 
              --   join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
             --  and disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			           and cop1.workflow_status in ('BOM_APPROVED','BOM_REWORK_APPROVED','DVU_ASSIGNED','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_APPROVED',
				            'RCU_ASSIGNED','RCU_REWORK','BOM_REWORK','RCU_REWORK_APPROVED') 
				    and acc.system_role ='RM'
			             and COP1.is_active ='Y'
			              and ACC.update_login_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			               and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
            and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
            and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
                    order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				           ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;				        
				        

ELSIf x_role ='DVU Supervisor' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='N'
then
    
   select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.emp_hierarchy_id as "ASSIGNED_TO",date(cop.device_modify_timestamp),cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_hierarchy_id,wfm.count_group_id  from tb_cop_metadata_txn cop1 
                join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group IN ('DVU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
                         join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group
			             and COP1.workflow_status in ('BOM_APPROVED','DVU_ASSIGNED','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_REWORK','BOM_REWORK_APPROVED')
                         AND ACC.emp_hierarchy_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
                         and acc.system_role ='DVU'
			             and COP1.is_active ='Y'
			             order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				     order by date(cop.device_modify_timestamp)    )T;

ELSIf x_role ='DVU Supervisor' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='Y'
then
    
         select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.emp_hierarchy_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_hierarchy_id,wfm.count_group_id  from tb_cop_metadata_txn cop1 
                join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group IN ('DVU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
                         join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group
			             and COP1.workflow_status in ('BOM_APPROVED','DVU_ASSIGNED','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_REWORK','BOM_REWORK_APPROVED')
                         AND ACC.emp_hierarchy_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
                         and acc.system_role ='DVU'
			             and COP1.is_active ='Y'
			             and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
           and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
           and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
		               order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

ELSIf x_role ='DVU Supervisor'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",
			case when cop.workflow_status= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.workflow_status= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.workflow_status= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.workflow_status
			 end  as "STAT",
			--cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1 
                 join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
               and disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                         and wfm.process_group = disp.process_group 
                         and cop1.workflow_status in ('DVU_APPROVED',
				                                                          'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
                         and acc.system_role IN ('RCU','DVU')
			             and COP1.is_active ='Y'
			          and ACC.emp_hierarchy_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				        
ELSIf x_role ='DVU Supervisor'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='Y'
then

 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",
			case when cop.workflow_status= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.workflow_status= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.workflow_status= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.workflow_status
			 end  as "STAT",
			--cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1 
                 join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
               and disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                         and wfm.process_group = disp.process_group 
                         and cop1.workflow_status in ('DVU_APPROVED',
				                  'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
                         and acc.system_role IN ('RCU','DVU')
			             and COP1.is_active ='Y'
			             and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
           and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
           and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
		             and ACC.emp_hierarchy_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

ELSIf x_role ='RCU Supervisor' and x_count_group_id in ('MY_RE_QUE')  and x_filter_applied ='N'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select TT.count_group_id as "que_id",
	TT.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
             	       case when cop.text_1 ='DVU_APPROVED'
	       then ''
	       when cop.text_1 ='RCU_REWORK'
	       then (select distinct rcu_corrector_id 
		       from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba,
                 tb_cop_metadata_txn cop
                                          where TBA.system_role ='RM'
                                          and TEH.employee_number = TBA.emp_id
                                          and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1)
	       else 
			TT.emp_id  end as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id,wfm.count_group_id  from tb_cop_metadata_txn cop1 
                 join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
               and disp.process_group ='RCU' and disp.prc_grp_disp in  ('WIP','USERWAIT','REWORK')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                         and wfm.process_group = disp.process_group 
                         and cop1.workflow_status in ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REWORK')
                         and acc.system_role ='RCU'
			             and COP1.is_active ='Y'
			              and ACC.emp_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
				        
ELSIf x_role ='RCU Supervisor' and x_count_group_id in ('MY_RE_QUE')  and x_filter_applied ='Y'
then
    
         select json_agg(row_to_json(t)) into v_data from  
	(select TT.count_group_id as "que_id",
	TT.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
             	       case when cop.text_1 ='DVU_APPROVED'
	       then ''
	       when cop.text_1 ='RCU_REWORK'
	       then (select distinct rcu_corrector_id 
		       from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba,
                 tb_cop_metadata_txn cop
                                          where TBA.system_role ='RM'
                                          and TEH.employee_number = TBA.emp_id
                                          and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1)
	       else 
			TT.emp_id  end as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id,wfm.count_group_id  from tb_cop_metadata_txn cop1 
                 join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
               and disp.process_group ='RCU' and disp.prc_grp_disp in  ('WIP','USERWAIT','REWORK')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                         and wfm.process_group = disp.process_group 
                         and cop1.workflow_status in ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REWORK')
                         and acc.system_role ='RCU'
			             and COP1.is_active ='Y'
			              and ACC.emp_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
           and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
           and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
	    				        
				        
ELSIf x_role ='RCU Supervisor'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			TT.emp_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.emp_id  from tb_cop_metadata_txn cop1 
                 join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
               and disp.process_group ='RCU' and disp.prc_grp_disp in ('APPROVE','REWORK')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                         and wfm.process_group = disp.process_group 
                         and cop1.workflow_status in ('RCU_APPROVED','RCU_REWORK') 
                         and acc.system_role ='RCU'
			             and COP1.is_active ='Y'
			             where  ACC.emp_id in  (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
                           --   and ACC.update_login_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
ELSIf x_role ='RCU Supervisor'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='Y'
then

  
  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			TT.emp_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.emp_id  from tb_cop_metadata_txn cop1 
                 join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
               and disp.process_group ='RCU' and disp.prc_grp_disp in ('APPROVE','REWORK')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                         and wfm.process_group = disp.process_group 
                         and cop1.workflow_status in ('RCU_APPROVED','RCU_REWORK') 
                         and acc.system_role ='RCU'
			             and COP1.is_active ='Y'
			             where  ACC.emp_id in  (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
                          and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                   and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                   and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
			            --   and ACC.update_login_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				      				        
ELSIf x_role ='RCU Corrector Supervisor' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='N'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select 
	ACC.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
--			(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm , tb_btc_accesscontrol tba 
--                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh 
--                                   where TBA.system_role ='RM'
--                                    and TEH.employee_number = TBA.emp_id
--                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
				         (select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_metadata_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
                                       ,cop.lead_journey as "LEAD_JOURNEY"
                                      from tb_cop_metadata_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  = 'RM'
				   and COP.workflow_status = 'RCU_REWORK' 
				   where  --cop.created_timestamp + interval '60 day'< current_timestamp
                    COP.is_active ='Y'
				   and acc.EMP_ID in 	 				   (select teh2.employee_number from tb_emp_hrms teh2 
                      where branch_code in (select  branch from tb_branch_rcu_corrector_mapping tbrcm 
                                              where rcu_corrector_id in (select employee_number from tb_emp_hrms teh 
                                                                           where supervisor_emp_no =X_LOGIN_ID) )
                       and "role" in (select tfrm.role_name from tb_function_roles_mst tfrm 
                                        where default_system_role_code ='Sales Executive'))	
			  order by coalesce (cop.device_modify_timestamp ,cop.created_timestamp ), 
			             case  cop1.program_option
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end 
				        limit 100
				         )T;
ELSIf x_role ='RCU Corrector Supervisor' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='Y'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select 
	ACC.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
--			(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm , tb_btc_accesscontrol tba 
--                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh 
--                                   where TBA.system_role ='RM'
--                                    and TEH.employee_number = TBA.emp_id
--                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
				         (select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_metadata_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
                                      from tb_cop_metadata_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  = 'RM'
				   and COP.workflow_status = 'RCU_REWORK' 
				   where acc.EMP_ID in (select teh2.employee_number from tb_emp_hrms teh2 
                      where branch_code in (select  branch from tb_branch_rcu_corrector_mapping tbrcm 
                                              where rcu_corrector_id in (select employee_number from tb_emp_hrms teh 
                                                                           where supervisor_emp_no =X_LOGIN_ID) )
                       and "role" in (select tfrm.role_name from tb_function_roles_mst tfrm 
                                        where default_system_role_code ='Sales Executive'))	
                       --and cop.created_timestamp + interval '60 day'< current_timestamp
                       and COP.is_active ='Y'                 
                       and case when v_filer_type ='date' then  date(coalesce (cop.device_modify_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                       and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                       and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end                 
			  order by case  cop1.program_option
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;	
				        
				        
ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='GENERAL_QUE'  and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
              from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
		              	 and disp.process_group  = 'RU'  and disp.prc_grp_disp  = 'RU_USERWAIT'
                           join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RU'
			              and COP1.is_active ='Y'
			         --   where acc.EMP_ID = x_login_id
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1
				         )T;
				        
ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='GENERAL_QUE'  and x_filter_applied ='Y'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
              from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
		              	 and disp.process_group  = 'RU'  and disp.prc_grp_disp  = 'RU_USERWAIT'
                           join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RU'
			              and COP1.is_active ='Y'
			                and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
               and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
               and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
         	         --   where acc.EMP_ID = x_login_id
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				           ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1
				         )T;
               
ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='ASSIGN_QUE' and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
               from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
		              	 and disp.process_group  = 'RU'  and disp.prc_grp_disp  = 'RU_ASSIGN'
                           join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RU'
			              and COP1.is_active ='Y'
			            where acc.EMP_ID = x_login_id
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='ASSIGN_QUE' and x_filter_applied ='Y'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
               from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
		              	 and disp.process_group  = 'RU'  and disp.prc_grp_disp  = 'RU_ASSIGN'
                           join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RU'
			              and COP1.is_active ='Y'
			            where acc.EMP_ID = x_login_id
			            and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
             and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
             and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
                        order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
            			        
ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='SUBMITTED_QUE' and x_filter_applied ='N'
then

select json_agg(row_to_json(t)) into v_data from  
	(select tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
              from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
		              	 and disp.process_group  = 'RU'  and disp.prc_grp_disp  = 'RU_SUBMITTED'
                           join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RU'
			              and COP1.is_active ='Y'
			            where acc.EMP_ID = x_login_id
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;		


				      
ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='SUBMITTED_QUE' and x_filter_applied ='Y'
then

 select json_agg(row_to_json(t)) into v_data from  
	(select tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
              from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
		              	 and disp.process_group  = 'RU'  and disp.prc_grp_disp  = 'RU_SUBMITTED'
                           join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RU'
			              and COP1.is_active ='Y'
			            where acc.EMP_ID = x_login_id
			            and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
                          order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
			         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;		
				        
ELSIf UPPER(x_role) = UPPER('Risk Unit Supervisor') and x_count_group_id ='RUS_REASSIGNMENT_QUE' and x_filter_applied ='N'
then

 select json_agg(row_to_json(t)) into v_data from  
	(select tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
               from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
		              	 and disp.process_group  = 'RU'  and disp.prc_grp_disp  IN ('RU_ASSIGN','RU_SUBMITTED')
                           join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RU'
			              and COP1.is_active ='Y'
			             WHERE acc.EMP_ID in( select employee_number from tb_emp_hrms teh  where supervisor_emp_no = x_login_id )
			              order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;


				        
ELSIf UPPER(x_role) = UPPER('Risk Unit Supervisor') and x_count_group_id ='RUS_REASSIGNMENT_QUE' and x_filter_applied ='Y'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
               from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
		              	 and disp.process_group  = 'RU'  and disp.prc_grp_disp  IN ('RU_ASSIGN','RU_SUBMITTED')
                           join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RU'
			              and COP1.is_active ='Y'
			             WHERE acc.EMP_ID in( select employee_number from tb_emp_hrms teh  where supervisor_emp_no = x_login_id )
			             and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
                       order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
               				        

				        
ELSIf x_role in  ('BSG','Product Supervisor') and x_count_group_id ='RUS_REASSIGNMENT_QUE' and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
                from 
                (select cop1.object_pri_key_1,acc.access_type ,acc.emp_id from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group  = 'RU' and disp.prc_grp_disp  in ('RU_ASSIGN','RU_SUBMITTED','RU_USERWAIT')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='RU'
			              and COP1.is_active ='Y'
               order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;	
				        
				        
ELSIf x_role in  ('BSG','Product Supervisor') and x_count_group_id ='RUS_REASSIGNMENT_QUE' and x_filter_applied ='Y'
then

 select json_agg(row_to_json(t)) into v_data from  
	(select tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO",cop.lead_journey as "LEAD_JOURNEY"
                from 
                (select cop1.object_pri_key_1,acc.access_type ,acc.emp_id from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group  = 'RU' and disp.prc_grp_disp  in ('RU_ASSIGN','RU_SUBMITTED','RU_USERWAIT')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='RU'
			              and COP1.is_active ='Y'
			               and case when v_filer_type ='date' then  date(coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop1.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop1.id_name_add=v_cust_name else 1=1 end
         
               order by coalesce (cop1.device_modify_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;				        
    
else 
v_data = 'No Data';
--v_data = '[{"code":"","value":"No Data"}]';
end if ;
if (v_data = '' or v_data is null)
then --v_data := '';
null;
--'[{"code":"","value":"No Data"}]';
--No Leads present for this ID
--NULL;--= '[{"code":"","value":"No DATA exist"}]';

END IF;
 OPEN x_result FOR SELECT 
            v_data  AS    "OBJECT";
              return x_result;     
            
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_vflow_queue_details_v3(x_count_group_id character varying, x_login_id character varying, x_role character varying, x_filter_applied character varying, x_param character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_role varchar(100);
v_count int;
v_prc_grp VARCHAR(100);
v_prc_grp_disp VARCHAR(100) ;
v_from_date VARCHAR(100) ;
v_to_date VARCHAR(100);
v_case_id VARCHAR(100);
v_cust_name VARCHAR(100);
v_filer_type  VARCHAR(100);
begin
select role into v_role from tb_emp_hrms 
 where employee_number = x_login_id;

-----FOR RM_SE SUBMITTED LEADS  
--ELSIf upper(x_role) ='MIDOFFICE' and x_count_group_id in ('MIDOFFICEMYQUE') then
raise notice 'x_filter_applied%',x_filter_applied;
if x_filter_applied = 'N' then 
v_from_date :='' ;
v_to_date :='' ;
v_case_id :='' ;
v_cust_name :='' ;

else   

select json_array_elements(cast(x_param as json)) ->> 'filter_type',
	   json_array_elements(cast(x_param as json)) ->> 'lead_modified_from_date',
	   json_array_elements(cast(x_param as json)) ->> 'lead_modified_to_date' ,
	   json_array_elements(cast(x_param as json)) ->> 'case_id',
	   json_array_elements(cast(x_param as json)) ->> 'entity_name' 
  into v_filer_type ,v_from_date , v_to_date, v_case_id ,v_cust_name;
 
end if;
raise notice 'v_filer_type%',v_filer_type;
raise notice 'v_from_date%',v_from_date;
raise notice 'v_to_date%',v_to_date;
raise notice 'v_case_id%',v_case_id;
raise notice 'v_cust_name%',v_cust_name;


if upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE') and x_filter_applied ='N' then 
 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",	
   	            coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",	
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.update_login_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'USERWAIT'
				join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
				and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'BOM'
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'='SUBMITTED' 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
				where ACC.update_login_id = X_LOGIN_ID
				--and cop.created_timestamp + interval '60 day'< current_timestamp
                   and COP.is_active ='Y'
			       order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),
			             case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end 
				        limit 100
				         )T;
			--acc.emp_id in (select se_id from tb_se_app_mapping tsam where approver_id = X_LOGIN_ID))T;
elsif upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE') and x_filter_applied ='Y' then 
 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",	
   	            coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",	
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.update_login_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'USERWAIT'
				join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
				and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'BOM'
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'='SUBMITTED' 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
				where ACC.update_login_id = X_LOGIN_ID
			    --and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'
				and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
			       order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
ELSIf  upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE_REW')  and x_filter_applied ='N' then 
-----------FOR APPROVER REWORK LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
--	        ACC.access_type as "ACCESS_TYPE",
       case when disp.process_group = 'RM_SE' 
             and disp.prc_grp_disp IN ('APPROVERQUERY') 
             and acc.system_role  = 'BOM'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_REWORK' then 
             'R'
             when disp.process_group = 'RM_SE' 
             and disp.prc_grp_disp IN ('APPROVEDQUERY') 
             and acc.system_role  = 'BOM'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_REWORK_APPROVED' then 
             'W'
             when disp.process_group = 'RM_SE' 
             and disp.prc_grp_disp IN ('DVUAPPROVEDQUERY') 
             and acc.system_role  = 'BOM'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'DVU_REWORK_APPROVED' then 
             'W'
             else ACC.access_type end as "ACCESS_TYPE",
             case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'BOM_REWORK'
                  then 'APPROVER_REWORK'
                  when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'BOM_REWORK_APPROVED'
                  then 'APPROVER_REWORK_APPROVED' 
                  else cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' end as "STAT",
                  cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",		
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",		
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			ACC.update_login_id as "ASSIGNED_TO"
		From tb_cop_buss_obj_txn cop  
		join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
									-- and cop.object_pri_key_2  = disp.object_pri_key_2  
									 --and cop.object_pri_key_3 = disp.object_pri_key_3 
		  and disp.process_group = 'RM_SE' 
		  and disp.prc_grp_disp  in ('APPROVERQUERY','APPROVEDQUERY','DVUAPPROVEDQUERY')
             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 									 
		 join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
		    --and disp.object_pri_key_2 = acc.object_pri_key_2 
		    --and disp.object_pri_key_3 = acc.object_pri_key_3 
		    and acc.system_role  = 'BOM'
		    and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED') 
		--where ACC.emp_id = X_LOGIN_ID
		where ACC.update_login_id = X_LOGIN_ID
		    --and  cop.created_timestamp + interval '60 day'< current_timestamp
            and COP.is_active ='Y'
	order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),
	                    case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				        limit 100
				         )T;
	--UPPER(acc.emp_id) in (select se_id from tb_se_app_mapping tsam where approver_id = X_LOGIN_ID))T;
ELSIf  upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE_REW')  and x_filter_applied ='Y' then 
-----------FOR APPROVER REWORK LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
--	        ACC.access_type as "ACCESS_TYPE",
       case when disp.process_group = 'RM_SE' 
             and disp.prc_grp_disp IN ('APPROVERQUERY') 
             and acc.system_role  = 'BOM'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_REWORK' then 
             'R'
             when disp.process_group = 'RM_SE' 
             and disp.prc_grp_disp IN ('APPROVEDQUERY') 
             and acc.system_role  = 'BOM'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_REWORK_APPROVED' then 
             'W'
             when disp.process_group = 'RM_SE' 
             and disp.prc_grp_disp IN ('DVUAPPROVEDQUERY') 
             and acc.system_role  = 'BOM'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'DVU_REWORK_APPROVED' then 
             'W'
             else ACC.access_type end as "ACCESS_TYPE",
             case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'BOM_REWORK'
                  then 'APPROVER_REWORK'
                  when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'BOM_REWORK_APPROVED'
                  then 'APPROVER_REWORK_APPROVED' 
                  else cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' end as "STAT",
                  cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",		
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",		
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			ACC.update_login_id as "ASSIGNED_TO"
		From tb_cop_buss_obj_txn cop  
		join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
									-- and cop.object_pri_key_2  = disp.object_pri_key_2  
									 --and cop.object_pri_key_3 = disp.object_pri_key_3 
		  and disp.process_group = 'RM_SE' 
		  and disp.prc_grp_disp  in ('APPROVERQUERY','APPROVEDQUERY','DVUAPPROVEDQUERY')
             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 									 
		 join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
		    --and disp.object_pri_key_2 = acc.object_pri_key_2 
		    --and disp.object_pri_key_3 = acc.object_pri_key_3 
		    and acc.system_role  = 'BOM'
		    and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED') 
		--where ACC.emp_id = X_LOGIN_ID
		where ACC.update_login_id = X_LOGIN_ID
		--and cop.created_timestamp + interval '60 day'< current_timestamp
        and COp.is_active ='Y'
		and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
        and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
        and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name end
	order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
ELSIf  upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE_REJ') and  x_filter_applied ='N' then 
-----------FOR APPROVER REJECTED LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
			     OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			     coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",		
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
		     cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.update_login_id as "ASSIGNED_TO"
			From tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                           -- and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'REJECT'
				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
				and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'BOM'
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'='BOM_REJECT'
				where acc.emp_id =X_LOGIN_ID--in (select se_id from tb_se_app_mapping tsam where approver_id = X_LOGIN_ID)
			    --and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'
			      order by coalesce (cop.modified_timestamp ,cop.created_timestamp )desc , 
			             case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				        limit 100
				         )T;
ELSIf  upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE_REJ') and  x_filter_applied ='Y' then 
-----------FOR APPROVER REJECTED LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
			     OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			     coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",		
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
		     cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.update_login_id as "ASSIGNED_TO"
			From tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                           -- and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'REJECT'
				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
				and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'BOM'
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'='BOM_REJECT'
				where acc.emp_id =X_LOGIN_ID--in (select se_id from tb_se_app_mapping tsam where approver_id = X_LOGIN_ID)
				--and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'
				and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
			      order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
				        
ELSIf x_role ='Approver Supervisor'  and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='N'
then

select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",		     
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
						case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' end as "STAT",
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =ACC.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO" 
		from tb_cop_buss_obj_txn cop  
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role ='RM' --IN ('BOM','DVU','RCU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REJECT','RCU_REJECT') 
				where cop.modify_emp_id in (select employee_number from  tb_emp_hrms hrms  
				where supervisor_emp_no =X_LOGIN_ID) 
			    --and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'
			       order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),  
			       case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				        limit 100
				         )T;
ELSIf x_role ='Approver Supervisor'  and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='Y'
then

select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",		     
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
						case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' end as "STAT",
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =ACC.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO" 
		from tb_cop_buss_obj_txn cop  
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role ='RM' --IN ('BOM','DVU','RCU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REJECT','RCU_REJECT') 
				where cop.modify_emp_id in (select employee_number from  tb_emp_hrms hrms  
				where supervisor_emp_no =X_LOGIN_ID)
				--and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'
				and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
			       order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end)T;				        
				        
ELSIf x_role ='RCU Supervisor'  and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='N'
then

select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",		     
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
						case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' end as "STAT",
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =ACC.object_pri_key_1
			 and tba.system_role ='RM'
			 )as "ASSIGNED_TO" 
		from tb_cop_buss_obj_txn cop  
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role ='RM' --IN ('BOM','DVU','RCU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' ='RCU_REJECT' 
				where cop.modify_emp_id in (select employee_number from  tb_emp_hrms hrms  
				where supervisor_emp_no =X_LOGIN_ID) 
				--and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'
			       order by coalesce (cop.modified_timestamp ,cop.created_timestamp ), 
			             case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				        limit 100
				         )T;
ELSIf x_role ='RCU Supervisor'  and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='Y'
then

select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",		     
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
						case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' end as "STAT",
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =ACC.object_pri_key_1
			 and tba.system_role ='RM'
			 )as "ASSIGNED_TO" 
		from tb_cop_buss_obj_txn cop  
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role ='RM' --IN ('BOM','DVU','RCU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' ='RCU_REJECT' 
				where cop.modify_emp_id in (select employee_number from  tb_emp_hrms hrms  
				where supervisor_emp_no =X_LOGIN_ID) 
				--and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'
				and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
               and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
               and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
			       order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end)T;			
-----------FOR APPROVER ACCOUNT ACTIVATED LEADS				        
ELSIf  upper(x_role) ='APPROVER'  and x_count_group_id in ('MY_ALL_QUE')  and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",		     
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			     coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",	
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'
			 end  as "STAT",
			     cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.update_login_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
--				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 	 
--				  and disp.process_group IN ('BOM_APPROVER','DVU','RCU') and disp.prc_grp_disp in ('DVU_APPROVED','USERWAIT','WIP','REWORK') 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  ='RM'--,'DVU','RCU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_APPROVED','BOM_REWORK_APPROVED','DVU_ASSIGNED','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_APPROVED',
				                                                          'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
				where ACC.update_login_id = X_LOGIN_ID
				--and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'
			       order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),  
			            case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end 
				        limit 100
				         )T;				        
ELSIf  upper(x_role) ='APPROVER'  and x_count_group_id in ('MY_ALL_QUE')  and x_filter_applied ='Y'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",		     
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			     coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",	
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'
			 end  as "STAT",
			     cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.update_login_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
--				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 	 
--				  and disp.process_group IN ('BOM_APPROVER','DVU','RCU') and disp.prc_grp_disp in ('DVU_APPROVED','USERWAIT','WIP','REWORK') 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  ='RM'--,'DVU','RCU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_APPROVED','BOM_REWORK_APPROVED','DVU_ASSIGNED','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_APPROVED',
				                                                          'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
				where ACC.update_login_id = X_LOGIN_ID
				--and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'
				and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
			       order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end  )T;					        
				        
---------FOR DVU GENRAL LEADS                          
ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE_GEN') and x_filter_applied ='N' then
 	
 select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",	
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",                  
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"
			From tb_cop_buss_obj_txn cop  
		join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
									--and cop.object_pri_key_2  = disp.object_pri_key_2  
									--and cop.object_pri_key_3 = disp.object_pri_key_3 
		  and disp.process_group = 'DVU' and disp.prc_grp_disp = 'USERWAIT'
		   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
		join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
		and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'DVU'
		and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_APPROVED')
		--where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id)
	    --and cop.created_timestamp + interval '60 day'< current_timestamp
        and COP.is_active ='Y'
		order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),  
		           case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end 
				        limit 100
				         )T;
	--UPPER(acc.update_login_id) = UPPER(x_login_id))T;
ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE_GEN') and x_filter_applied ='Y' then
 	
 select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",	
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",                  
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"
			From tb_cop_buss_obj_txn cop  
		join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
									--and cop.object_pri_key_2  = disp.object_pri_key_2  
									--and cop.object_pri_key_3 = disp.object_pri_key_3 
		  and disp.process_group = 'DVU' and disp.prc_grp_disp = 'USERWAIT'
		   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
		join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
		and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'DVU'
		and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_APPROVED')
		--where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id)
		--and cop.created_timestamp + interval '60 day'< current_timestamp
        and COP.is_active ='Y'
		and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
        and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
        and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
		order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
---------FOR DVU MY QUEUE BUCKET
ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE') and x_filter_applied ='N' then
 	       
 select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			ACC.emp_hierarchy_id as "ASSIGNED_TO"
	 From tb_cop_buss_obj_txn cop  
		join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
									--and cop.object_pri_key_2  = disp.object_pri_key_2  
									--and cop.object_pri_key_3 = disp.object_pri_key_3 
		  and disp.process_group = 'DVU' and disp.prc_grp_disp = 'WIP'
		   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
		join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
		and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'DVU'
		and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_ASSIGNED')
		where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id)
		--and cop.created_timestamp + interval '60 day'< current_timestamp
        and COP.is_active ='Y'
		order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),  
		      case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end 
				        limit 100
				         )T;

ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE') and x_filter_applied ='Y' then
 	       
 select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			ACC.emp_hierarchy_id as "ASSIGNED_TO"
	 From tb_cop_buss_obj_txn cop  
		join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
									--and cop.object_pri_key_2  = disp.object_pri_key_2  
									--and cop.object_pri_key_3 = disp.object_pri_key_3 
		  and disp.process_group = 'DVU' and disp.prc_grp_disp = 'WIP'
		   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
		join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
		and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'DVU'
		and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_ASSIGNED')
		where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id)
		--and cop.created_timestamp + interval '60 day'< current_timestamp
        and COP.is_active ='Y'
		and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
        and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
        and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
		order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;				        
---------FOR DVU REWORK BUCKET
ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE_REW') and x_filter_applied ='N' then
 	       
 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
--	ACC.access_type as "ACCESS_TYPE",
 case when disp.process_group = 'DVU' 
             and disp.prc_grp_disp IN ('REWORK') 
             and acc.system_role  = 'DVU'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'IN ('DVU_REWORK','DVU_REWORK_APPROVED','BOM_REWORK_APPROVED','BOM_REWORK') then 
             'R'
             when disp.process_group = 'RM_SE' 
             and disp.prc_grp_disp IN ('DVUAPPROVEDQUERY') 
             and acc.system_role  = 'DVU'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'IN ('DVU_REWORK','DVU_REWORK_APPROVED' )then 
             'R'
             else ACC.access_type end as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			ACC.emp_hierarchy_id as "ASSIGNED_TO"
	        From tb_cop_buss_obj_txn cop  
   		     join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
and disp.process_group IN('DVU') and disp.prc_grp_disp IN ('REWORK')
--		     join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
			join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
			  and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'DVU'
			and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_REWORK','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED')
			where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id)
			--and cop.created_timestamp + interval '60 day'< current_timestamp
            and COP.is_active ='Y'
		order by coalesce (cop.modified_timestamp ,cop.created_timestamp ), 
		            case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				        limit 100
				         )T;
ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE_REW') and x_filter_applied ='Y' then
 	       
 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
--	ACC.access_type as "ACCESS_TYPE",
 case when disp.process_group = 'DVU' 
             and disp.prc_grp_disp IN ('REWORK') 
             and acc.system_role  = 'DVU'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'IN ('DVU_REWORK','DVU_REWORK_APPROVED','BOM_REWORK_APPROVED','BOM_REWORK') then 
             'R'
             when disp.process_group = 'RM_SE' 
             and disp.prc_grp_disp IN ('DVUAPPROVEDQUERY') 
             and acc.system_role  = 'DVU'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'IN ('DVU_REWORK','DVU_REWORK_APPROVED' )then 
             'R'
             else ACC.access_type end as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			ACC.emp_hierarchy_id as "ASSIGNED_TO"
	        From tb_cop_buss_obj_txn cop  
   		     join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
and disp.process_group IN('DVU') and disp.prc_grp_disp IN ('REWORK')
--		     join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
			join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
			  and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'DVU'
			and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_REWORK','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED')
			where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id)
			--and cop.created_timestamp + interval '60 day'< current_timestamp
            and COP.is_active ='Y'
			and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
            and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
            and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
		order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;				        
       
ELSIf x_role ='DVU'  and x_count_group_id in ('MY_ALL_QUE')  and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
   	            coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
		case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'
			 end  as "STAT",
			     cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.update_login_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
--				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  IN ('DVU','RCU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_APPROVED',
				                                                          'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
				where ACC.emp_hierarchy_id = X_LOGIN_ID
				--and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'
			       order by coalesce (cop.modified_timestamp ,cop.created_timestamp ), 
			             case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				        limit 100
				         )T;				        

ELSIf x_role ='DVU'  and x_count_group_id in ('MY_ALL_QUE')  and x_filter_applied ='Y'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
   	            coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
		case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'
			 end  as "STAT",
			     cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.update_login_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
--				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  IN ('DVU','RCU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_APPROVED',
				                                                          'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
				where ACC.emp_hierarchy_id = X_LOGIN_ID
				--and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'
				and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
			       order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;					        
---------FOR RCU GENRAL QUEUE BUCKET
       
 ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_GEN')  and x_filter_applied ='N' then  
  
   select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
					      --                      and cop.object_pri_key_2  = disp.object_pri_key_2  
					    --                        and cop.object_pri_key_3 = disp.object_pri_key_3 
					  and disp.process_group = 'RCU' and disp.prc_grp_disp = 'USERWAIT'
					   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
					                                 and wfm.process_group = disp.process_group 
					join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
					                            and disp.object_pri_key_2 = acc.object_pri_key_2 
					                           and disp.object_pri_key_3 = acc.object_pri_key_3 
					and acc.system_role  = 'RCU'
					and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_APPROVED')
					where  --cop.created_timestamp + interval '60 day'< current_timestamp and 
                     COP.is_active ='Y'
				order by coalesce (cop.modified_timestamp ,cop.created_timestamp ), 
				       case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end 
				        limit 100
				         )T;
ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_GEN')  and x_filter_applied ='Y' then  
  
   select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
					      --                      and cop.object_pri_key_2  = disp.object_pri_key_2  
					    --                        and cop.object_pri_key_3 = disp.object_pri_key_3 
					  and disp.process_group = 'RCU' and disp.prc_grp_disp = 'USERWAIT'
					   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
					                                 and wfm.process_group = disp.process_group 
					join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
					                            and disp.object_pri_key_2 = acc.object_pri_key_2 
					                           and disp.object_pri_key_3 = acc.object_pri_key_3 
					and acc.system_role  = 'RCU'
					and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' ='DVU_APPROVED'
					--and cop.created_timestamp + interval '60 day'< current_timestamp
                    and COP.is_active ='Y'
					and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                    and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                    and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
				order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
---------FOR RCU MY QUEUE BUCKET
       
 ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE') and x_filter_applied ='N' then
  
   select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			ACC.EMP_ID as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
      --                      and cop.object_pri_key_2  = disp.object_pri_key_2  
    --                        and cop.object_pri_key_3 = disp.object_pri_key_3 
              and disp.process_group = 'RCU' and disp.prc_grp_disp = 'WIP'
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                            and disp.object_pri_key_2 = acc.object_pri_key_2 
                           and disp.object_pri_key_3 = acc.object_pri_key_3 
               and acc.system_role  = 'RCU'
            and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' ='RCU_ASSIGNED'
                where acc.EMP_ID = x_login_id
                --and cop.created_timestamp + interval '60 day'< current_timestamp
                 and COP.is_active ='Y'
               order by coalesce (cop.modified_timestamp ,cop.created_timestamp ), 
                          case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				        limit 100
				         )T;
 ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE') and x_filter_applied ='Y' then
  
   select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			ACC.EMP_ID as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
      --                      and cop.object_pri_key_2  = disp.object_pri_key_2  
    --                        and cop.object_pri_key_3 = disp.object_pri_key_3 
              and disp.process_group = 'RCU' and disp.prc_grp_disp = 'WIP'
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                            and disp.object_pri_key_2 = acc.object_pri_key_2 
                           and disp.object_pri_key_3 = acc.object_pri_key_3 
               and acc.system_role  = 'RCU'
            and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' ='RCU_ASSIGNED'
                where acc.EMP_ID = x_login_id
                --and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'
                and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
               order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;     
---------FOR RCU GENRAL REWORK QUEUE BUCKET
       
 ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_REW')  and x_filter_applied ='N' then
  
   select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	    --ACC.access_type as "ACCESS_TYPE",
	    case when disp.process_group = 'RCU' 
             and disp.prc_grp_disp IN ('REWORK') 
             and acc.system_role  = 'RCU'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
             'R'
             when disp.process_group = 'RCU' 
             and disp.prc_grp_disp IN ('REWORK') 
             and acc.system_role  = 'RCU'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
             'W'else ACC.access_type end as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
									(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_buss_obj_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop 
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
      --                      and cop.object_pri_key_2  = disp.object_pri_key_2  
      --                      and cop.object_pri_key_3 = disp.object_pri_key_3 
                and disp.process_group = 'RCU' and disp.prc_grp_disp ='REWORK'
			  join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
              join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                                and acc.system_role  = 'RCU'
--            and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_ASSIGNED')
                                and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_REWORK','RCU_REWORK_APPROVED')
        where acc.EMP_ID = x_login_id 
        --and cop.created_timestamp + interval '60 day'< current_timestamp
        and COP.is_active ='Y'
               order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),
                         case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end 
				        limit 100
				         )T;
ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_REW')  and x_filter_applied ='Y' then
  
   select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	    --ACC.access_type as "ACCESS_TYPE",
	    case when disp.process_group = 'RCU' 
             and disp.prc_grp_disp IN ('REWORK') 
             and acc.system_role  = 'RCU'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
             'R'
             when disp.process_group = 'RCU' 
             and disp.prc_grp_disp IN ('REWORK') 
             and acc.system_role  = 'RCU'
             and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
             'W'else ACC.access_type end as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
									(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_buss_obj_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop 
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
      --                      and cop.object_pri_key_2  = disp.object_pri_key_2  
      --                      and cop.object_pri_key_3 = disp.object_pri_key_3 
                and disp.process_group = 'RCU' and disp.prc_grp_disp ='REWORK'
			  join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
              join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                            and acc.system_role  = 'RCU'
--            and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_ASSIGNED')
        and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_REWORK','RCU_REWORK_APPROVED')
        where acc.EMP_ID = x_login_id 
        --and cop.created_timestamp + interval '60 day'< current_timestamp
        and COP.is_active ='Y'
        and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
        and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
        and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
               order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;				        
----------------------------------------------------------------------------------------------------------------				        
ELSIf  upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='N'  then 
-----------FOR RCU REJECTED LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
			     OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			     coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
		     cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.EMP_ID as "ASSIGNED_TO"
			From tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                           -- and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group = 'RCU' and disp.prc_grp_disp = 'REJECT'
				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
				and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'RCU'
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'='RCU_REJECT'
				where acc.emp_id =X_LOGIN_ID--in (select se_id from tb_se_app_mapping tsam where approver_id = X_LOGIN_ID)
				--and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'
			      order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),  
                         case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				        limit 100
				         )T;
ELSIf  upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='Y'  then 
-----------FOR RCU REJECTED LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
			     OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			     coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
		     cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.EMP_ID as "ASSIGNED_TO"
			From tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                           -- and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group = 'RCU' and disp.prc_grp_disp = 'REJECT'
				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 and disp.object_pri_key_2 = acc.object_pri_key_2 
				and disp.object_pri_key_3 = acc.object_pri_key_3 and acc.system_role  = 'RCU'
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'='RCU_REJECT'
				where acc.emp_id =X_LOGIN_ID--in (select se_id from tb_se_app_mapping tsam where approver_id = X_LOGIN_ID)
				--and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'
				and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
			      order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
ELSIf  upper(x_role) ='RCU'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",		     
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.update_login_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group ='RCU' and disp.prc_grp_disp ='APPROVE'
--				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  ='RCU'
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' ='RCU_APPROVED' 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
				where ACC.emp_id = X_LOGIN_ID
				--and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'
			       order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),  
			             case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end 
				        limit 100
				         )T;
ELSIf  upper(x_role) ='RCU'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='Y'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",		     
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.update_login_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group ='RCU' and disp.prc_grp_disp ='APPROVE'
--				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  ='RCU'
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' ='RCU_APPROVED' 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
				where ACC.emp_id = X_LOGIN_ID
				--and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'
				and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
			       order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;				        
----------------------------------------------------------------------------------------------------------------
 ---------FOR RCU CORRECTOR VIEW QUEUE BUCKET      
 ELSIf upper(x_role) ='RCU CORRECTOR' and x_count_group_id in ('MY_QUE') and x_filter_applied ='N' then
   
   select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	       ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
                  where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
--			cop.login_id as "ASSIGNED_USER_ID",
(select acc1.emp_id  from tb_btc_accesscontrol acc1 
			  where acc1.object_pri_key_1 =acc.object_pri_key_1 
			  and acc1.system_role ='RM')
			as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
--			(select rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
--                 where branch in (select branch_code from tb_emp_hrms teh 
--                                   where employee_number = acc.emp_id
--                                    )) as "ASSIGNED_TO"
			(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh , tb_btc_accesscontrol tba,
                 tb_cop_buss_obj_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
 	           from tb_cop_buss_obj_txn cop 
                  join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                    and disp.process_group = 'RCU_Correcter' and disp.prc_grp_disp in  ('USERWAIT')
                  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                            and acc.system_role  = 'RM'
           and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' ='RCU_REWORK'
	        where acc.EMP_ID in (select employee_number from tb_emp_hrms teh 
			                    join tb_branch_rcu_corrector_mapping RCM on rcm.branch = teh.branch_code 
			                   where RCM.rcu_corrector_id =x_login_id)
			   --and cop.created_timestamp + interval '60 day'< current_timestamp
               and COP.is_active ='Y'
			  order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),  
			             case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				        limit 100
				         )T;
ELSIf upper(x_role) ='RCU CORRECTOR' and x_count_group_id in ('MY_QUE') and x_filter_applied ='Y' then
   
   select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	       ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
                  where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
--			cop.login_id as "ASSIGNED_USER_ID",
(select acc1.emp_id  from tb_btc_accesscontrol acc1 
			  where acc1.object_pri_key_1 =acc.object_pri_key_1 
			  and acc1.system_role ='RM')
			as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
--			(select rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
--                 where branch in (select branch_code from tb_emp_hrms teh 
--                                   where employee_number = acc.emp_id
--                                    )) as "ASSIGNED_TO"
			(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh , tb_btc_accesscontrol tba,
                 tb_cop_buss_obj_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
 	           from tb_cop_buss_obj_txn cop 
                  join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                    and disp.process_group = 'RCU_Correcter' and disp.prc_grp_disp in  ('USERWAIT')
                  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                            and acc.system_role  = 'RM'
           and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' ='RCU_REWORK'
	        where acc.EMP_ID in (select employee_number from tb_emp_hrms teh 
								  join tb_branch_rcu_corrector_mapping RCM on rcm.branch = teh.branch_code 
								   where RCM.rcu_corrector_id =x_login_id)
			  --and cop.created_timestamp + interval '60 day'< current_timestamp
              and COP.is_active ='Y'
			  and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
              and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
              and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end 
			  order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T; 
				        
ELSIf x_role ='Auditor' and x_count_group_id in ('MY_QUE_GEN') and x_filter_applied ='N'
then

    select json_agg(row_to_json(t)) into v_data from  
	(select distinct object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
	       --wfm.count_group_id as "que_id",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select distinct employee_number from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,coalesce (cop.modified_timestamp ,cop.created_timestamp ) 
			from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                  and disp.process_group not in ('RM_SE','RCU') and disp.prc_grp_disp not in ('APPROVE','APPROVERQUERY','DVUQUERY','ASSIGNED','SUBMITTED','REJECT')
               join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
               and acc.system_role not in ('RM_SE','RCU') 
               where  --cop.created_timestamp + interval '60 day'< current_timestamp and
                     COP.is_active ='Y'
              order by coalesce (cop.modified_timestamp ,cop.created_timestamp )
              limit 100
               )T;
ELSIf x_role ='Auditor' and x_count_group_id in ('MY_QUE_GEN') and x_filter_applied ='Y'
then

    select json_agg(row_to_json(t)) into v_data from  
	(select distinct object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
	       --wfm.count_group_id as "que_id",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select distinct employee_number from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                  and disp.process_group not in ('RM_SE','RCU') and disp.prc_grp_disp not in ('APPROVE','APPROVERQUERY','DVUQUERY','ASSIGNED','SUBMITTED','REJECT')
               join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
               and acc.system_role not in ('RM_SE','RCU') 
              --and cop.created_timestamp + interval '60 day'< current_timestamp
              and COP.is_active ='Y'
              and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
              and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
              and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
               )T;			        
--ELSIf  upper(x_role) ='AUDITOR'  and x_count_group_id in ('MY_BACKEND_QUE') 
--then
--
--  select json_agg(row_to_json(t)) into v_data from  
--	(select  distinct object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
----	wfm.count_group_id as "que_id",
----	ACC.access_type as "ACCESS_TYPE",
--	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
--			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
--			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
----			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
----			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
----			     END as "name",
--                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
--			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
--			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "ENTITY_CRN",			
--			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
--			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
----			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
--			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
--			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then 'Individual'
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
--			     end as "CONSTITUTION_TYPE",
--			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
--				(select CITY from tb_branch_mst tbm      
--               where branch_cd in (select object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE'))  as "REGION_NAME",
--			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
--			cop.login_id as "ASSIGNED_USER_ID",
--			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
--			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
--			'' as "CURRENT_WORKSTEP"  
--		from tb_cop_buss_obj_txn cop  
--		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
-- 		              and process_group in ('ACCOUNT')
--                           and prc_grp_disp in ('SUCCESS'))T;
				        

              
ELSIf x_role in ('Ops CA','BSG','Product Supervisor') and x_count_group_id in ('MY_QUE_GEN') and x_filter_applied ='N'
then

       
    select json_agg(row_to_json(t)) into v_data from  
	(select distinct   object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
           COP.object_pri_key_1 ,
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd in (select object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE'))  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			case when DISP.prc_grp_disp = 'WAIT'
			     then 'NA'
			     else (select case when tbpgd.config_id = '145' then 'BJCIFINDAOFUPD' 
			             when tbpgd.config_id = '117' then 'BJCIFAOFUPD'
			         else tbpgd.event_process end 
			from tb_service_audit tsa , tb_btc_prc_grp_disp_cfg tbpgd 
				 where disp.object_pri_key_1 =COP.object_pri_key_1 
				 and tbpgd.process_group = tsa.process_group 
				 and tbpgd.prc_grp_disp = tsa.prc_grp_disp
				 and DISP.config_id = cast(tbpgd.config_id as VARCHAR)
				order by tsa.created_timestamp desc
				limit 1  )end as  "EVENT_PROCESS",
			(select distinct employee_number from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
		case when (ACC.process_group ='ACCOUNT' and ACC.prc_grp_disp ='FAILURE') 
		     then 'FAILURE'
		     when (ACC.process_group ='ACCOUNT' and ACC.prc_grp_disp ='SUCCESS' 
		      and (CER.prc_grp_disp = 'FAILURE' OR 
	                HAN.prc_grp_disp = 'FAILURE' or 
	                GST.prc_grp_disp = 'FAILURE'))
		     then 'PENDING'
		     else 'A'
		     END as "HANDOFF_API_STATUS",
		    coalesce (cop.modified_timestamp ,cop.created_timestamp)
from tb_cop_buss_obj_txn cop ,  tb_btc_prc_grp_disp disp 
left join (select * from tb_btc_prc_grp_disp tbpgd where tbpgd.process_group = 'CERSAI') CER 
               on DISP.object_pri_key_1 = CER.object_pri_key_1 
left join (select * from tb_btc_prc_grp_disp tbpgd where  tbpgd.process_group = 'FATCA Handoff') HAN
               on DISP.object_pri_key_1 = HAN.object_pri_key_1 
left join (select * from tb_btc_prc_grp_disp tbpgd where  tbpgd.process_group = 'GSTIN') GST 
      on DISP.object_pri_key_1 = GST.object_pri_key_1 
left join (select * from tb_btc_prc_grp_disp tbpgd where  tbpgd.process_group = 'ACCOUNT') ACC
      on DISP.object_pri_key_1 = ACC.object_pri_key_1       
  where  cop.object_pri_key_1 = disp.object_pri_key_1
  and disp.process_group in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNTCASA','ACCOUNT','ACCOUNTCASA','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')
  and disp.prc_grp_disp in ('FAILURE','WAIT')
  --and cop.created_timestamp + interval '60 day'< current_timestamp
  and COP.is_active ='Y'
  and DISP.process_group in (select process_group from tb_service_audit tsa2
                              where TSA2.object_pri_key_1 =DISP.object_pri_key_1
                                order by created_timestamp desc limit 1)
                         order by coalesce (cop.modified_timestamp ,cop.created_timestamp )
                              limit 100)T;				        
ELSIf x_role in ('Ops CA','BSG','Product Supervisor') and x_count_group_id in ('MY_QUE_GEN') and x_filter_applied ='Y'
then

    select json_agg(row_to_json(t)) into v_data from  
	(select distinct object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
           COP.object_pri_key_1 ,
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd in (select object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE'))  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			case when DISP.prc_grp_disp = 'WAIT'
			     then 'NA'
			     else (select case when tbpgd.config_id = '145' then 'BJCIFINDAOFUPD' 
			             when tbpgd.config_id = '117' then 'BJCIFAOFUPD'
			         else tbpgd.event_process end 
			from tb_service_audit tsa , tb_btc_prc_grp_disp_cfg tbpgd 
				 where disp.object_pri_key_1 =COP.object_pri_key_1 
				 and tbpgd.process_group = tsa.process_group 
				 and tbpgd.prc_grp_disp = tsa.prc_grp_disp
				 and DISP.config_id = cast(tbpgd.config_id as VARCHAR)
				order by tsa.created_timestamp desc
				limit 1  )end as  "EVENT_PROCESS",
			(select distinct employee_number from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
		case when (ACC.process_group ='ACCOUNT' and ACC.prc_grp_disp ='FAILURE') 
		     then 'FAILURE'
		     when (ACC.process_group ='ACCOUNT' and ACC.prc_grp_disp ='SUCCESS' 
		      and (CER.prc_grp_disp = 'FAILURE' OR 
	                HAN.prc_grp_disp = 'FAILURE' or 
	                GST.prc_grp_disp = 'FAILURE'))
		     then 'PENDING'
		     else 'A'
		     END as "HANDOFF_API_STATUS"
from tb_cop_buss_obj_txn cop ,  tb_btc_prc_grp_disp disp 
left join (select * from tb_btc_prc_grp_disp tbpgd where tbpgd.process_group = 'CERSAI') CER 
               on DISP.object_pri_key_1 = CER.object_pri_key_1 
left join (select * from tb_btc_prc_grp_disp tbpgd where  tbpgd.process_group = 'FATCA Handoff') HAN
               on DISP.object_pri_key_1 = HAN.object_pri_key_1 
left join (select * from tb_btc_prc_grp_disp tbpgd where  tbpgd.process_group = 'GSTIN') GST 
      on DISP.object_pri_key_1 = GST.object_pri_key_1 
left join (select * from tb_btc_prc_grp_disp tbpgd where  tbpgd.process_group = 'ACCOUNT') ACC
      on DISP.object_pri_key_1 = ACC.object_pri_key_1       
  where  cop.object_pri_key_1 = disp.object_pri_key_1
  --and cop.created_timestamp + interval '60 day'< current_timestamp
  and COP.is_active ='Y'
  and disp.process_group in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNTCASA','ACCOUNT','ACCOUNTCASA','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')
  and disp.prc_grp_disp in ('FAILURE','WAIT')
  and DISP.process_group in (select process_group from tb_service_audit tsa2
                              where TSA2.object_pri_key_1 =DISP.object_pri_key_1
                                order by created_timestamp desc limit 1)
     and case when v_filer_type ='date' then  date(COP.modified_timestamp)::varchar between v_from_date and v_to_date else 1=1 end
                 and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
                )T;		
            
            
ELSIf x_role in ('BSG','Product Supervisor') and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='N'
then

    select json_agg(row_to_json(t)) into v_data from  
	( select distinct object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
          COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",	
   	            coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",	
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
		  case   when COP.TEXT_1 in ('ASSIGNED','REJECTED')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'RM'
			            and COP.TEXT_1 in ('ASSIGNED','REJECTED'))	 
		         when COP.TEXT_1 in ('SUBMITTED','BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REJECT')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'BOM'
			            and COP.TEXT_1 in ('SUBMITTED','BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REJECT'))	
			     when COP.text_1 in ('BOM_APPROVED','DVU_APPROVED')
			      then  'YET TO ASSIGN'
			     when COP.text_1 in ('RCU_APPROVED')
			      then  'PENDING AT API'
			     when cop.text_1 in ('DVU_ASSIGNED','DVU_REWORK','BOM_DVU_REWORK_APPROVED')
			      then  (select tba.emp_hierarchy_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'DVU'
			            and cOP.text_1 in ('DVU_ASSIGNED','DVU_REWORK','BOM_DVU_REWORK_APPROVED'))
			     when COP.text_1 in ('RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REJECT')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'RCU' 
			            and COP.text_1 in ('RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REJECT'))			     
			     when COP.text_1 in ('RCU_REWORK')
			      then  (select rcu_corrector_id from tb_branch_rcu_corrector_mapping rcu
			                   where rcu.branch in (select branch_code from tb_emp_hrms teh2, tb_btc_accesscontrol tba2 
			                                          where employee_number = tba2.emp_id 
			                                          and tba2.object_pri_key_1 =acc.object_pri_key_1 
                   			                          and tba2.system_role ='RM'
                   			                          and cop.text_1 ='RCU_REWORK'))
			   else 'NA'                       
			      end as "ASSIGNED_TO", coalesce (cop.modified_timestamp ,cop.created_timestamp )
  from tb_cop_buss_obj_txn cop
  join tb_btc_prc_grp_disp disp on disp.object_pri_key_1 = cop.object_pri_key_1
  join tb_btc_accesscontrol acc on acc.object_pri_key_1 = disp.object_pri_key_1
  where -- cop.created_timestamp + interval '60 day'< current_timestamp and
    COP.is_active ='Y'
  order by coalesce (cop.modified_timestamp ,cop.created_timestamp )
  limit 100
  )T;				        

 ELSIf x_role in ('BSG','Product Supervisor') and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='Y'
then

    select json_agg(row_to_json(t)) into v_data from  
	( select distinct object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
          COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",	
   	            coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",	
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
						case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
		  case   when COP.TEXT_1 in ('ASSIGNED','REJECTED')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'RM'
			            and COP.TEXT_1 in ('ASSIGNED','REJECTED'))	 
		         when COP.TEXT_1 in ('SUBMITTED','BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REJECT')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'BOM'
			            and COP.TEXT_1 in ('SUBMITTED','BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REJECT'))	
			     when COP.text_1 in ('BOM_APPROVED','DVU_APPROVED')
			      then  'YET TO ASSIGN'
			     when COP.text_1 in ('RCU_APPROVED')
			      then  'PENDING AT API'
			     when cop.text_1 in ('DVU_ASSIGNED','DVU_REWORK','BOM_DVU_REWORK_APPROVED')
			      then  (select tba.emp_hierarchy_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'DVU'
			            and cOP.text_1 in ('DVU_ASSIGNED','DVU_REWORK','BOM_DVU_REWORK_APPROVED'))
			     when COP.text_1 in ('RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REJECT')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'RCU' 
			            and COP.text_1 in ('RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REJECT'))			     
			     when COP.text_1 in ('RCU_REWORK')
			      then  (select rcu_corrector_id from tb_branch_rcu_corrector_mapping rcu
			                   where rcu.branch in (select branch_code from tb_emp_hrms teh2, tb_btc_accesscontrol tba2 
			                                          where employee_number = tba2.emp_id 
			                                          and tba2.object_pri_key_1 =acc.object_pri_key_1 
                   			                          and tba2.system_role ='RM'
                   			                          and cop.text_1 ='RCU_REWORK'))
			   else 'NA'                       
			      end as "ASSIGNED_TO"
  from tb_cop_buss_obj_txn cop
  join tb_btc_prc_grp_disp disp on disp.object_pri_key_1 = cop.object_pri_key_1
  join tb_btc_accesscontrol acc on acc.object_pri_key_1 = disp.object_pri_key_1
 where  --cop.created_timestamp + interval '60 day'< current_timestamp
  COP.is_active ='Y'
 and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
 and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
 and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
  )T;	
--ELSIf x_role ='BSG' and x_count_group_id in ('MY_QUE_GEN') 
--then

--    select json_agg(row_to_json(t)) into v_data from  
--	(select wfm.count_group_id as "que_id",
--	ACC.access_type as "ACCESS_TYPE",
--			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
--			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
--			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
----			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
----			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
----			     END as "name",
--                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
--			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
--			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "ENTITY_CRN",			
--			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
--			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
--			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
--			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
--			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then 'Individual'
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
--			     end as "CONSTITUTION_TYPE",
--			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
--				(select CITY from tb_branch_mst tbm      
--               where branch_cd in (select object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE'))  as "REGION_NAME",
--			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
--			cop.login_id as "ASSIGNED_USER_ID",
--			(select employee_number from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
--			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
--			'' as "CURRENT_WORKSTEP"  from tb_cop_buss_obj_txn cop  
--              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
--              and disp.process_group not in ('RM_SE') and disp.prc_grp_disp not in  ('APPROVERQUERY','DVUQUERY','ASSIGNED','REJECT')
--			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
--            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
----                            and disp.object_pri_key_2 = acc.object_pri_key_2 
----                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;                          
--	   order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
--				         when  'Priority Privy' then 1 
--				         when  'Branch Privy' then 2  
--				         when 'Non Privy' then 3 end  )T;

-------------------------------BSG RM_SE BUCKET-------------------------------
ELSIf x_role in  ('BSG','Product Supervisor') and x_count_group_id in ('MY_RMSE_QUE') and x_filter_applied ='N' then

  select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
               from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                        and disp.process_group  in ('RM_SE') and disp.prc_grp_disp  in ('APPROVERQUERY','DVUQUERY','ASSIGNED')
--			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
                join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;
               and acc.system_role ='RM' 
               and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' in  ('ASSIGNED','DVU_REWORK','BOM_REWORK')
             --and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_ASSIGNED')
              --  where acc.EMP_ID = x_login_id
              --and cop.created_timestamp + interval '60 day'< current_timestamp
              and COP.is_active ='Y'
              and  COP.object_data::json->'AOF'->'CA'->'CPV1'->>'ACC_NO' is not null 
              and  COP.object_data::json->'AOF'->'CA'->'CPV1'->>'ACC_NO'<>''
              order by   coalesce (cop.modified_timestamp ,cop.created_timestamp ),
                        case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end 
				        limit 100
				         )T;
              
ELSIf x_role in  ('BSG','Product Supervisor') and x_count_group_id in ('MY_RMSE_QUE') and x_filter_applied ='Y' then

  select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
               from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                        and disp.process_group  in ('RM_SE') and disp.prc_grp_disp  in ('APPROVERQUERY','DVUQUERY','ASSIGNED')
--			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
                join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;
               and acc.system_role ='RM' 
               and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' in  ('ASSIGNED','DVU_REWORK','BOM_REWORK')
             --and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_ASSIGNED')
              --  where acc.EMP_ID = x_login_id
               where  -- cop.created_timestamp + interval '60 day'< current_timestamp
               COP.is_active ='Y'
               and  COP.object_data::json->'AOF'->'CA'->'CPV1'->>'ACC_NO' is not null 
               and  COP.object_data::json->'AOF'->'CA'->'CPV1'->>'ACC_NO'<>''
               and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                 and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
              order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end  )T;
             	  
-------------------------------BSG APPROVER BUCKET-------------------------------	  
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_APPROVER_QUE') and x_filter_applied ='N' then

select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
						(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =ACC.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO" 
	from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group in ('RM_SE') and disp.prc_grp_disp in ('APPROVEDQUERY','DVUAPPROVEDQUERY','SUBMITTED','APPROVERQUERY')
--			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
                join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                and ACC.system_role = 'RM'
                and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('SUBMITTED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REWORK') 
                --and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'
                order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				        limit 100
				         )T;
				        
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_APPROVER_QUE') and x_filter_applied ='Y' then

select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
						(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =ACC.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO" 
	from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group in ('RM_SE') and disp.prc_grp_disp in ('APPROVEDQUERY','DVUAPPROVEDQUERY','SUBMITTED','APPROVERQUERY')
--			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
                join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                and ACC.system_role = 'RM'
                and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('SUBMITTED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REWORK') 
                where  --cop.created_timestamp + interval '60 day'< current_timestamp
                 COP.is_active ='Y'
                and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
                order by cop.modified_timestamp desc,case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				         )T;
				
-------------------------------BSG DVU BUCKET-------------------------------	  
ELSIf x_role in('BSG','Product Supervisor')and x_count_group_id in ('MY_DVU_QUE') and x_filter_applied ='N' then

 select json_agg(row_to_json(t)) into v_data from  
	(select
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			 case when COP.TEXT_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED')
			      then  (select tba.update_login_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'BOM'
			            and COP.TEXT_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED'))	
			      when cop.text_1 in ('DVU_ASSIGNED','BOM_DVU_REWORK_APPROVED')
			      then  (select tba.emp_hierarchy_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'DVU'
			            and cOP.text_1 in ('DVU_ASSIGNED','BOM_DVU_REWORK_APPROVED'))
			      when cop.text_1 ='DVU_REWORK'
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'RM'
			            and cOP.text_1 in ('DVU_REWORK')) end  as "ASSIGNED_TO"
                    from tb_cop_buss_obj_txn cop  
			              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
			              and disp.process_group IN('DVU') and disp.prc_grp_disp IN ('WIP','USERWAIT','REWORK')
--						   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--			              and wfm.process_group = disp.process_group 
			            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			                            and disp.object_pri_key_2 = acc.object_pri_key_2 
			                           and disp.object_pri_key_3 = acc.object_pri_key_3 
			               and acc.system_role  = 'DVU'
			               and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_REWORK','BOM_APPROVED','DVU_ASSIGNED','DVU_REWORK','BOM_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_REWORK_APPROVED')
            --and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_ASSIGNED')
              --  where acc.EMP_ID = x_login_id
			              -- and  cop.created_timestamp + interval '60 day'< current_timestamp
                           and COP.is_active ='Y'
               order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),
                         case object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				        limit  100
				         )T;
ELSIf x_role in('BSG','Product Supervisor')and x_count_group_id in ('MY_DVU_QUE') and x_filter_applied ='Y' then

 select json_agg(row_to_json(t)) into v_data from  
	(select
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			 case when COP.TEXT_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED')
			      then  (select tba.update_login_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'BOM'
			            and COP.TEXT_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED'))	
			      when cop.text_1 in ('DVU_ASSIGNED','BOM_DVU_REWORK_APPROVED')
			      then  (select tba.emp_hierarchy_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'DVU'
			            and cOP.text_1 in ('DVU_ASSIGNED','BOM_DVU_REWORK_APPROVED'))
			      when cop.text_1 ='DVU_REWORK'
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'RM'
			            and cOP.text_1 in ('DVU_REWORK')) end  as "ASSIGNED_TO"
                    from tb_cop_buss_obj_txn cop  
			              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
			              and disp.process_group IN('DVU') and disp.prc_grp_disp IN ('WIP','USERWAIT','REWORK')
--						   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--			              and wfm.process_group = disp.process_group 
			            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			                            and disp.object_pri_key_2 = acc.object_pri_key_2 
			                           and disp.object_pri_key_3 = acc.object_pri_key_3 
			               and acc.system_role  = 'DVU'
			               and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_REWORK','BOM_APPROVED','DVU_ASSIGNED','DVU_REWORK','BOM_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_REWORK_APPROVED')
            --and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_ASSIGNED')
              --  where acc.EMP_ID = x_login_id
			   where --cop.created_timestamp + interval '60 day'< current_timestamp
                COP.is_active ='Y'
			   and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
               order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
-------------------------------BSG RCU BUCKET-------------------------------	  
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RCU_QUE')  and x_filter_applied ='N' then

  select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
	       	       case when cop.text_1 ='DVU_APPROVED'
	       then ''
	       when cop.text_1 ='RCU_REWORK'
	       then (select distinct rcu_corrector_id 
		       from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh , tb_btc_accesscontrol tba ,
                 tb_cop_buss_obj_txn cop
                                          where TBA.system_role ='RM'
                                          and TEH.employee_number = TBA.emp_id
                                          and tba.object_pri_key_1 =COP.object_pri_key_1)limit 1)
	       else 
			acc.emp_id  end as "ASSIGNED_TO"
				from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group  = 'RCU' and disp.prc_grp_disp in  ('WIP','USERWAIT','REWORK')
            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
            and acc.system_role ='RCU'
            --and cop.created_timestamp + interval '60 day'< current_timestamp
            and COP.is_active ='Y'
            and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in 
            ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REWORK')
               order by coalesce (cop.modified_timestamp ,cop.created_timestamp ) ,
                         case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				        limit 100
				         )T;

				        
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RCU_QUE')  and x_filter_applied ='Y' then

  select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
	       	       case when cop.text_1 ='DVU_APPROVED'
	       then ''
	       when cop.text_1 ='RCU_REWORK'
	       then (select distinct rcu_corrector_id 
		       from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh , tb_btc_accesscontrol tba ,
                 tb_cop_buss_obj_txn cop
                                          where TBA.system_role ='RM'
                                          and TEH.employee_number = TBA.emp_id
                                          and tba.object_pri_key_1 =COP.object_pri_key_1)limit 1)
	       else 
			acc.emp_id  end as "ASSIGNED_TO"
				from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group  = 'RCU' and disp.prc_grp_disp in  ('WIP','USERWAIT','REWORK')
            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
            and acc.system_role ='RCU'
            and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in 
            ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REWORK')
            where --cop.created_timestamp + interval '60 day'< current_timestamp
                 COP.is_active ='Y'
                and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end 
               order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;				        
-------------------------------BSG RCU_CORRECTOR BUCKET-------------------------------	  
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RCU_COR_QUE') and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",		
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
		(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_buss_obj_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"		           from tb_cop_buss_obj_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
--			        join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				   and wfm.process_group = disp.process_group 
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  = 'RCU_Correcter'
				   and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_REWORK'			  
            --and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_ASSIGNED')
              --  where acc.EMP_ID = x_login_id
				    --and cop.created_timestamp + interval '60 day'< current_timestamp
                    and COP.is_active ='Y'
               order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),
                       case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				        limit 100
				         )T;
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RCU_COR_QUE') and x_filter_applied ='Y'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",		
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
		(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_buss_obj_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"		           from tb_cop_buss_obj_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
--			        join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				   and wfm.process_group = disp.process_group 
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  = 'RCU_Correcter'
				   and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_REWORK'			  
            --and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_ASSIGNED')
              --  where acc.EMP_ID = x_login_id
				  --and  cop.created_timestamp + interval '60 day'< current_timestamp
                  and COP.is_active ='Y'
				   and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                   and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                   and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
               order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
				        
---------------------------Product Supervisor RCU CORRECTOR SUPERVISOR---------------------
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='N'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
		    (select rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
                  where branch in (select branch_code from tb_emp_hrms teh 
                                     where employee_number = acc.emp_id)) as "ASSIGNED_TO"
				           from tb_cop_buss_obj_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
--			        join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				   and wfm.process_group = disp.process_group 
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  = 'RCU_Correcter'
				   and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_REWORK'	
				   --and cop.created_timestamp + interval '60 day'< current_timestamp
                   and COP.is_active ='Y'
			  order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),
			          case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end 
				        limit 100
				         )T;				        
				        
 ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='Y'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
		    (select rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
                  where branch in (select branch_code from tb_emp_hrms teh 
                                     where employee_number = acc.emp_id)) as "ASSIGNED_TO"
				           from tb_cop_buss_obj_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
--			        join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				   and wfm.process_group = disp.process_group 
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  = 'RCU_Correcter'
				   and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_REWORK'	
				   --and cop.created_timestamp + interval '60 day'< current_timestamp
                   and COP.is_active ='Y'
				   and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                   and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                    and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
			  order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;	             
-------------------------------BSG ALL REJECTED BUCKET-------------------------------	  
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			acc.emp_id as "ASSIGNED_TO"
				from tb_cop_buss_obj_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group IN('RM_SE','BOM_APPROVER','RCU') and disp.prc_grp_disp IN ('REJECT')
--			        join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				   and wfm.process_group = disp.process_group 
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			       --and cop.created_timestamp + interval '60 day'< current_timestamp
                   and COP.is_active ='Y'
				   and acc.system_role  IN('RM','BOM','RCU')
				   and ACC.access_type = 'R'
				   and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' IN ('REJECTED','BOM_REJECT','RCU_REJECT')
               order by coalesce (cop.modified_timestamp ,cop.created_timestamp ), 
                         case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end 
				        limit 100
				         )T;

ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='Y'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			acc.emp_id as "ASSIGNED_TO"
				from tb_cop_buss_obj_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group IN('RM_SE','BOM_APPROVER','RCU') and disp.prc_grp_disp IN ('REJECT')
--			        join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				   and wfm.process_group = disp.process_group 
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  IN('RM','BOM','RCU')
				   and ACC.access_type = 'R'
				   and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' IN ('REJECTED','BOM_REJECT','RCU_REJECT')
				   --and cop.created_timestamp + interval '60 day'< current_timestamp
                   and COP.is_active ='Y'
				   and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                   and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                   and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
               order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;				        
-------------------------------Product Supervisor ALL AFTER RCU_APPROVED BUCKET-------------------------------				        
ELSIf x_role in  ('BSG','Product Supervisor','Approver','DVU','RCU','Auditor','RCU Supervisor','DVU Supervisor','Approver Supervisor') 
    and x_count_group_id in ('MY_BACKEND_QUE')  and x_filter_applied  ='N' then

    raise notice 'nnnnn%',x_filter_applied;

  select json_agg(row_to_json(t)) into v_data from  
	(select   object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
--	wfm.count_group_id as "que_id",
--	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  
from tb_cop_buss_obj_txn cop 
		 where exists ( select 1 from tb_btc_prc_grp_disp disp 
		                 where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                  and process_group ='ACCOUNT'
                          and prc_grp_disp ='SUCCESS')
          		--and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'                        
          order by coalesce (cop.modified_timestamp ,cop.created_timestamp )
                limit 100
             --   and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' ='ACCOUNT_ACTIVATED'                           
--               order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
--				         when  'Priority Privy' then 1 
--				         when  'Branch Privy' then 2  
--				         when 'Non Privy' then 3 end
				        )T;
				       
ELSIf x_role in  ('BSG','Product Supervisor','Approver','DVU','RCU','Auditor','RCU Supervisor','DVU Supervisor','Approver Supervisor') 
    and x_count_group_id in ('MY_BACKEND_QUE')  and x_filter_applied  ='Y' then

    raise notice 'v_filer_type%',v_filer_type;
    raise notice 'v_case_id%',v_case_id;
  select json_agg(row_to_json(t)) into v_data from  
	(select   object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
--	wfm.count_group_id as "que_id",
--	ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  
         from tb_cop_buss_obj_txn cop 
		 where exists ( select 1 from tb_btc_prc_grp_disp disp 
		                 where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                  and process_group ='ACCOUNT'
                           and prc_grp_disp ='SUCCESS')
           --and cop.created_timestamp + interval '60 day'< current_timestamp
           and COP.is_active ='Y'  
           and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
           and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'= v_case_id  else 1=1 end
           and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'= v_cust_name else 1=1 end
--         ((object_data::JSON->'AOF'->>'LEAD_ID'=v_case_id) 
--               or (OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name)
--               or (date(COP.modified_timestamp) between v_from_date and v_to_date )
--                )
             --   and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' ='ACCOUNT_ACTIVATED'                           
--               order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
--				         when  'Priority Privy' then 1 
--				         when  'Branch Privy' then 2  
--				         when 'Non Privy' then 3 end
				        )T;				       
--
--  select json_agg(row_to_json(t)) into v_data from  
--	(select  distinct object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
----	wfm.count_group_id as "que_id",
----	ACC.access_type as "ACCESS_TYPE",
--	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
--			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
--			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
----			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
----			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
----			     END as "name",
--                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
--			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
--			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
--			     else 'NA' end as "ENTITY_CRN",			
--			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
--			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
--			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
----			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
--			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
--			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then 'Individual'
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
--			     end as "CONSTITUTION_TYPE",
--			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
--				(select CITY from tb_branch_mst tbm      
--               where branch_cd in (select object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE'))  as "REGION_NAME",
--			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
--			cop.login_id as "ASSIGNED_USER_ID",
--			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
--			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
--			'' as "CURRENT_WORKSTEP"  
--from tb_cop_buss_obj_txn cop  ,tb_btc_prc_grp_disp disp 
--  where cop.object_pri_key_1 = disp.object_pri_key_1 
--  and exists ((select 1 from tb_btc_prc_grp_disp tbpgd where tbpgd.object_pri_key_1 =cop.object_pri_key_1 
--                  and tbpgd.process_group = 'ACCOUNT'       and tbpgd.prc_grp_disp ='SUCCESS'))
--and exists ((select 1 from tb_btc_prc_grp_disp tbpgd where tbpgd.object_pri_key_1 =cop.object_pri_key_1 
--                  and tbpgd.process_group = 'CERSAI'       and tbpgd.prc_grp_disp ='SUCCESS'))
--and exists ((select 1 from tb_btc_prc_grp_disp tbpgd where tbpgd.object_pri_key_1 =cop.object_pri_key_1 
--                  and tbpgd.process_group = 'GSTIN'       and tbpgd.prc_grp_disp ='SUCCESS'))
--and exists ((select 1 from tb_btc_prc_grp_disp tbpgd where tbpgd.object_pri_key_1 =cop.object_pri_key_1 
--                  and tbpgd.process_group = 'FATCA Handoff'       and tbpgd.prc_grp_disp ='SUCCESS'))   
--				        )T;
-------------------------------BSG ALL ERROR BUCKET-------------------------------	  				        				       				       

-------------------------------------------------------------------------------				        
ELSIf upper(x_role) ='SE SUPERVISOR' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='N'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                        and disp.process_group  in ('RM_SE') and disp.prc_grp_disp  in ('APPROVERQUERY','DVUQUERY','ASSIGNED')
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group 
                join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;
          and acc.system_role ='RM'
          --and cop.created_timestamp + interval '60 day'< current_timestamp
          and COP.is_active ='Y'
          and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' in  ('ASSIGNED','DVU_REWORK','BOM_REWORK')
         and ACC.emp_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
        order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),
                   case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				         limit 100
				        )T;

ELSIf upper(x_role) ='SE SUPERVISOR' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='Y'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                        and disp.process_group  in ('RM_SE') and disp.prc_grp_disp  in ('APPROVERQUERY','DVUQUERY','ASSIGNED')
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group 
                join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;
          and acc.system_role ='RM'
          and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' in  ('ASSIGNED','DVU_REWORK','BOM_REWORK')
         --and cop.created_timestamp + interval '60 day'< current_timestamp
         and COP.is_active ='Y'
         and ACC.emp_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
         and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
         and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
         and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
        order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;
				        
ELSIf x_role ='Approver Supervisor' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='N'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	        ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",	
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
		(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =ACC.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO" 
			from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group in ('BOM_APPROVER') and disp.prc_grp_disp in ('USERWAIT','REWORK', 'APPROVE')
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group 
                join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                 and ACC.system_role = 'BOM'
                where --cop.created_timestamp + interval '60 day'< current_timestamp
                   COP.is_active ='Y'
                  and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('SUBMITTED','BOM_REWORK_APPROVED','BOM_REWORK' , 'DVU_REWORK_APPROVED')
                  and ACC.update_login_id in (select employee_number from  tb_emp_hrms hrms  where supervisor_emp_no =x_login_id)
						order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),
						case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end 
				        limit 100
				         )T;
ELSIf x_role ='Approver Supervisor' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='Y'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	        ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",	
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
		(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =ACC.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO" 
			from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group in ('BOM_APPROVER') and disp.prc_grp_disp in ('USERWAIT','REWORK', 'APPROVE')
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group 
                join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                 and ACC.system_role = 'BOM'
                where  --cop.created_timestamp + interval '60 day'< current_timestamp
                 COP.is_active ='Y'
                and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('SUBMITTED','BOM_REWORK_APPROVED','BOM_REWORK' , 'DVU_REWORK_APPROVED')
                and ACC.update_login_id in (select employee_number from  tb_emp_hrms hrms  where supervisor_emp_no =x_login_id)
                and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
						order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;				        
-----------FOR APPROVER ACCOUNT ACTIVATED LEADS				        
ELSIf x_role ='Approver Supervisor'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",		     
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
						case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' end as "STAT",
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =ACC.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO" 
			from tb_cop_buss_obj_txn cop  
--				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
--				  and disp.process_group IN ('BOM_APPROVER','DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role ='RM' --IN ('BOM','DVU','RCU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_APPROVED','BOM_REWORK_APPROVED','DVU_ASSIGNED','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_APPROVED',
				                                                          'RCU_ASSIGNED','RCU_REWORK','BOM_REWORK','RCU_REWORK_APPROVED') 
				where ACC.update_login_id in (select employee_number from  tb_emp_hrms hrms  where supervisor_emp_no =x_login_id)
				  --and cop.created_timestamp + interval '60 day'< current_timestamp
                  and COP.is_active ='Y'
			       order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),  
			             case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				        limit 100
				         )T;				        
ELSIf x_role ='Approver Supervisor'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='Y'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",		     
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
						case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' end as "STAT",
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =ACC.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO" 
			from tb_cop_buss_obj_txn cop  
--				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
--				  and disp.process_group IN ('BOM_APPROVER','DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role ='RM' --IN ('BOM','DVU','RCU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_APPROVED','BOM_REWORK_APPROVED','DVU_ASSIGNED','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_APPROVED',
				                                                          'RCU_ASSIGNED','RCU_REWORK','BOM_REWORK','RCU_REWORK_APPROVED') 
				where ACC.update_login_id in (select employee_number from  tb_emp_hrms hrms  where supervisor_emp_no =x_login_id)
				--and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'
				and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
			       order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end)T;					        	   

ELSIf x_role ='DVU Supervisor' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='N'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			acc.emp_hierarchy_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group  in ('DVU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group 
            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;
            and ACC.system_role ='DVU'
            and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_APPROVED','DVU_ASSIGNED','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_REWORK','BOM_REWORK_APPROVED')
            where ACC.emp_hierarchy_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
            --and cop.created_timestamp + interval '60 day'< current_timestamp
            and COP.is_active ='Y'
           order by coalesce (cop.modified_timestamp ,cop.created_timestamp ), 
                       case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end 
				        limit 100
				         )T;
ELSIf x_role ='DVU Supervisor' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='Y'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			acc.emp_hierarchy_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group  in ('DVU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group 
            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;
            and ACC.system_role ='DVU'
            and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('BOM_APPROVED','DVU_ASSIGNED','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_REWORK','BOM_REWORK_APPROVED')
            where ACC.emp_hierarchy_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
            --and cop.created_timestamp + interval '60 day'< current_timestamp
            and COP.is_active ='Y'
            and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
            and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
            and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
           order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;                         
ELSIf x_role ='DVU Supervisor'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
   	            coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'
			 end  as "STAT",
			--cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.update_login_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
--				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  IN ('RCU','DVU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_APPROVED',
				                                                          'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
                   where  ACC.emp_hierarchy_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
                   --and cop.created_timestamp + interval '60 day'< current_timestamp
                   and COP.is_active ='Y'
			       order by coalesce (cop.modified_timestamp ,cop.created_timestamp ), 
			              case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				        limit 100
				         )T;
ELSIf x_role ='DVU Supervisor'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='Y'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
   	            coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			case when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'
			 end  as "STAT",
			--cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.update_login_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
--				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  IN ('RCU','DVU')
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_APPROVED',
				                                                          'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
                   where  ACC.emp_hierarchy_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
                   --and cop.created_timestamp + interval '60 day'< current_timestamp
                   and COP.is_active ='Y'
                   and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                   and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                   and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
			       order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;				        
ELSIf x_role ='RCU Supervisor' and x_count_group_id in ('MY_RE_QUE')  and x_filter_applied ='N'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
             	       case when cop.text_1 ='DVU_APPROVED'
	       then ''
	       when cop.text_1 ='RCU_REWORK'
	       then (select distinct rcu_corrector_id 
		       from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba,
                 tb_cop_buss_obj_txn cop
                                          where TBA.system_role ='RM'
                                          and TEH.employee_number = TBA.emp_id
                                          and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1)
	       else 
			acc.emp_id  end as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group  = 'RCU' and disp.prc_grp_disp in  ('WIP','USERWAIT','REWORK')
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group 
            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;
            and acc.system_role ='RCU'
            and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REWORK')
	       and ACC.emp_id in  (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
	       --and cop.created_timestamp + interval '60 day'< current_timestamp
           and COP.is_active ='Y'
	      order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),  
                        case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				        limit 100
				         )T;
ELSIf x_role ='RCU Supervisor' and x_count_group_id in ('MY_RE_QUE')  and x_filter_applied ='Y'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select wfm.count_group_id as "que_id",
	ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
             	       case when cop.text_1 ='DVU_APPROVED'
	       then ''
	       when cop.text_1 ='RCU_REWORK'
	       then (select distinct rcu_corrector_id 
		       from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba,
                 tb_cop_buss_obj_txn cop
                                          where TBA.system_role ='RM'
                                          and TEH.employee_number = TBA.emp_id
                                          and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1)
	       else 
			acc.emp_id  end as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group  = 'RCU' and disp.prc_grp_disp in  ('WIP','USERWAIT','REWORK')
			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group 
            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
--                            and disp.object_pri_key_2 = acc.object_pri_key_2 
--                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;
            and acc.system_role ='RCU'
            and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REWORK')
	       and ACC.emp_id in  (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
	       --and cop.created_timestamp + interval '60 day'< current_timestamp
           and COP.is_active ='Y'
	       and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
           and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
           and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
	      order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;	      
ELSIf x_role ='RCU Supervisor'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
   	            coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.emp_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group ='RCU' and disp.prc_grp_disp in ('APPROVE','REWORK')
--				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  ='RCU'
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_APPROVED','RCU_REWORK') 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
                   where  ACC.emp_id in  (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
                   --and cop.created_timestamp + interval '60 day'< current_timestamp
                   and COP.is_active ='Y'
			       order by coalesce (cop.modified_timestamp ,cop.created_timestamp ), 
			             case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				        limit 100
				         )T;
ELSIf x_role ='RCU Supervisor'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='Y'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
   	            coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT",
			cop.object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STAT1",
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			ACC.emp_id as "ASSIGNED_TO"
			from tb_cop_buss_obj_txn cop  
				join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
				                            --and cop.object_pri_key_2  = disp.object_pri_key_2  
				                            --and cop.object_pri_key_3 = disp.object_pri_key_3 
				  and disp.process_group ='RCU' and disp.prc_grp_disp in ('APPROVE','REWORK')
--				   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--				                                 and wfm.process_group = disp.process_group 
				join tb_btc_accesscontrol acc on COP.object_pri_key_1 = acc.object_pri_key_1
				and acc.system_role  ='RCU'
				and cop.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_APPROVED','RCU_REWORK') 
--				where ACC.emp_id in (select se_id from tb_se_app_mapping tsam 
--							 join tb_emp_hrms hrms on hrms.employee_number = tsam.approver_id 
--							where tsam.approver_id =x_login_id)
                   where  ACC.emp_id in  (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
                   --and cop.created_timestamp + interval '60 day'< current_timestamp
                   and COP.is_active ='Y'
                   and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                   and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                   and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
			       order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;				        
ELSIf x_role ='RCU Corrector Supervisor' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='N'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select 
	ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
--			(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm , tb_btc_accesscontrol tba 
--                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh 
--                                   where TBA.system_role ='RM'
--                                    and TEH.employee_number = TBA.emp_id
--                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
				         (select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_buss_obj_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
                                      from tb_cop_buss_obj_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  = 'RM'
				   and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_REWORK' 
				   where  --cop.created_timestamp + interval '60 day'< current_timestamp
                    COP.is_active ='Y'
				   and acc.EMP_ID in 	 				   (select teh2.employee_number from tb_emp_hrms teh2 
                      where branch_code in (select  branch from tb_branch_rcu_corrector_mapping tbrcm 
                                              where rcu_corrector_id in (select employee_number from tb_emp_hrms teh 
                                                                           where supervisor_emp_no =X_LOGIN_ID) )
                       and "role" in (select tfrm.role_name from tb_function_roles_mst tfrm 
                                        where default_system_role_code ='Sales Executive'))	
			  order by coalesce (cop.modified_timestamp ,cop.created_timestamp ), 
			             case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end 
				        limit 100
				         )T;
ELSIf x_role ='RCU Corrector Supervisor' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='Y'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select 
	ACC.access_type as "ACCESS_TYPE",
			COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
                  coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
--			(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm , tb_btc_accesscontrol tba 
--                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh 
--                                   where TBA.system_role ='RM'
--                                    and TEH.employee_number = TBA.emp_id
--                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
				         (select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_buss_obj_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
                                      from tb_cop_buss_obj_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  = 'RM'
				   and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS' = 'RCU_REWORK' 
				   where acc.EMP_ID in (select teh2.employee_number from tb_emp_hrms teh2 
                      where branch_code in (select  branch from tb_branch_rcu_corrector_mapping tbrcm 
                                              where rcu_corrector_id in (select employee_number from tb_emp_hrms teh 
                                                                           where supervisor_emp_no =X_LOGIN_ID) )
                       and "role" in (select tfrm.role_name from tb_function_roles_mst tfrm 
                                        where default_system_role_code ='Sales Executive'))	
                       --and cop.created_timestamp + interval '60 day'< current_timestamp
                       and COP.is_active ='Y'                 
                       and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                       and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                       and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end                 
			  order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;				        
ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='GENERAL_QUE'  and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
               from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                                          and disp.process_group  = 'RU' 
                                          and disp.prc_grp_disp  = 'RU_USERWAIT'
			  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
               and acc.system_role ='RU' 
             --where acc.EMP_ID = x_login_id
               --and cop.created_timestamp + interval '60 day'< current_timestamp
              and COP.is_active ='Y'
              order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),
                        case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end 
				        limit 100
				         )T;
ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='GENERAL_QUE'  and x_filter_applied ='Y'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
               from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                                          and disp.process_group  = 'RU' 
                                          and disp.prc_grp_disp  = 'RU_USERWAIT'
			  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
               and acc.system_role ='RU' 
             --where acc.EMP_ID = x_login_id
               --and cop.created_timestamp + interval '60 day'< current_timestamp
               and COP.is_active ='Y'
               and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
               and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
               and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
              order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end  )T;
ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='ASSIGN_QUE' and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
               from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                                          and disp.process_group  = 'RU' 
                                          and disp.prc_grp_disp  = 'RU_ASSIGN'
			  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
               and acc.system_role ='RU'
             where acc.EMP_ID = x_login_id
             --and cop.created_timestamp + interval '60 day'< current_timestamp
             and COP.is_active ='Y'
              order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),
                        case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end 
				        limit 100
				         )T;
ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='ASSIGN_QUE' and x_filter_applied ='Y'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
               from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                                          and disp.process_group  = 'RU' 
                                          and disp.prc_grp_disp  = 'RU_ASSIGN'
			  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
               and acc.system_role ='RU'
             where acc.EMP_ID = x_login_id
             --and cop.created_timestamp + interval '60 day'< current_timestamp
             and COP.is_active ='Y'
             and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
             and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
             and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
              order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end  )T;				        
ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='SUBMITTED_QUE' and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
               from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                                          and disp.process_group  = 'RU' 
                                          and disp.prc_grp_disp  = 'RU_SUBMITTED'
			  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
              and acc.system_role ='RU' 
              where acc.EMP_ID = x_login_id
              --and cop.created_timestamp + interval '60 day'< current_timestamp
              and COP.is_active ='Y'
              order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),
                        case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				        limit 100
				         )T;		
ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='SUBMITTED_QUE' and x_filter_applied ='Y'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
               from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                                          and disp.process_group  = 'RU' 
                                          and disp.prc_grp_disp  = 'RU_SUBMITTED'
			  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
              and acc.system_role ='RU' 
              where acc.EMP_ID = x_login_id
              --and cop.created_timestamp + interval '60 day'< current_timestamp
              and COP.is_active ='Y'
              and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
              and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
              and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
              order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end  )T;					        
ELSIf UPPER(x_role) = UPPER('Risk Unit Supervisor') and x_count_group_id ='RUS_REASSIGNMENT_QUE' and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
               from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                                          and disp.process_group  = 'RU' 
                                          and disp.prc_grp_disp  IN ('RU_ASSIGN','RU_SUBMITTED')
			  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1  and acc.system_role ='RU'
               WHERE acc.EMP_ID in( select employee_number from tb_emp_hrms teh  where supervisor_emp_no = x_login_id )
               --and cop.created_timestamp + interval '60 day'< current_timestamp
               and COP.is_active ='Y'
               order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),
                         case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end 
				        limit 100
				         )T;
ELSIf UPPER(x_role) = UPPER('Risk Unit Supervisor') and x_count_group_id ='RUS_REASSIGNMENT_QUE' and x_filter_applied ='Y'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
               from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                                          and disp.process_group  = 'RU' 
                                          and disp.prc_grp_disp  IN ('RU_ASSIGN','RU_SUBMITTED')
			  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1  and acc.system_role ='RU'
               WHERE acc.EMP_ID in( select employee_number from tb_emp_hrms teh  where supervisor_emp_no = x_login_id )
               --and cop.created_timestamp + interval '60 day'< current_timestamp
               and COP.is_active ='Y'
                and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
               order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end  )T;				        

				        
ELSIf x_role in  ('BSG','Product Supervisor') and x_count_group_id ='RUS_REASSIGNMENT_QUE' and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
               from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                                          and disp.process_group  = 'RU' 
                                          and disp.prc_grp_disp  in ('RU_ASSIGN','RU_SUBMITTED','RU_USERWAIT')
			  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1  and acc.system_role ='RU'
               --WHERE acc.EMP_ID in( select employee_number from tb_emp_hrms teh  where supervisor_emp_no = x_login_id )
			  --and cop.created_timestamp + interval '60 day'< current_timestamp
              and COP.is_active ='Y'
               order by coalesce (cop.modified_timestamp ,cop.created_timestamp ),  
                        case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end 
				        limit 100
				         )T;	
ELSIf x_role in  ('BSG','Product Supervisor') and x_count_group_id ='RUS_REASSIGNMENT_QUE' and x_filter_applied ='Y'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select ACC.access_type as "ACCESS_TYPE",
	        COP.object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "CRN" ,
			object_data::JSON->'AOF'->'CA'->'CPV1'->>'ACC_NO' as "ACCOUNT_NO" ,
			object_data::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' as "CONTACT_MOBILE" ,
			coalesce(OBJECT_DATA::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1','NA') as "ENTITY_NAME",
--			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD' as "name",
			OBJECT_DATA::JSON->'AOF'->'CA'->'SCHEME_CODE'->>'VALUE' as "SCHEME_CODE",			
			case when OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY' is not null 
			     then OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_ENTITY'
			     else 'NA' end as "ENTITY_CRN",			
			OBJECT_DATA::JSON->'AOF'->'CA'->>'CRN_AUS' as "AUS_CRN",
			object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE' as "PRIVY",
			object_data::JSON->'AOF'->>'LEAD_ID' as "caseid",
			object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID' as "LEAD_ID",
			object_data::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'VALUE' as "OPENING_BRANCH",
			case when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'IN'
			     then 'Individual'
			     when object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY' = 'SP'
			     then 'Sole Proprietor' else object_data::JSON->'AOF'->>'WORKFLOW_JOURNEY'
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = object_DATA::JSON->'AOF'->'CA'->'HOME_BRANCH'->>'CODE')  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			acc.emp_id as "ASSIGNED_TO"
               from tb_cop_buss_obj_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                                          and disp.process_group  = 'RU' 
                                          and disp.prc_grp_disp  in ('RU_ASSIGN','RU_SUBMITTED','RU_USERWAIT')
			  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1  and acc.system_role ='RU'
               --WHERE acc.EMP_ID in( select employee_number from tb_emp_hrms teh  where supervisor_emp_no = x_login_id )
			  --and cop.created_timestamp + interval '60 day'< current_timestamp
              and COP.is_active ='Y'
			  and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
              and  case when v_filer_type ='case_id' then object_data::JSON->'AOF'->>'MODIFIED_LEAD_ID'=v_case_id  else 1=1 end
              and case  when v_filer_type ='entity_name' then OBJECT_DATA::JSON->'AOF'->'WORK_VARIABLES'->>'ID_NAME_ADD'=v_cust_name else 1=1 end
               order by case  object_data::JSON->'AOF'->'CA'->'PROGRAM_OPTION'->>'VALUE'
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end  )T;			        
    
else 
v_data = 'No Data';
--v_data = '[{"code":"","value":"No Data"}]';
end if ;
if (v_data = '' or v_data is null)
then --v_data := '';
null;
--'[{"code":"","value":"No Data"}]';
--No Leads present for this ID
--NULL;--= '[{"code":"","value":"No DATA exist"}]';

END IF;
 OPEN x_result FOR SELECT 
            v_data  AS    "OBJECT";
              return x_result;     
            
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_get_vflow_queue_details_v5_cop(x_count_group_id character varying, x_login_id character varying, x_role character varying, x_filter_applied character varying, x_param character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_role varchar(100);
v_count int;
v_prc_grp VARCHAR(100);
v_prc_grp_disp VARCHAR(100) ;
v_from_date VARCHAR(100) ;
v_to_date VARCHAR(100);
v_case_id VARCHAR(100);
v_cust_name VARCHAR(100);
v_filer_type  VARCHAR(100);
begin
select role into v_role from tb_emp_hrms 
 where employee_number = x_login_id;

-----FOR RM_SE SUBMITTED LEADS  
--ELSIf upper(x_role) ='MIDOFFICE' and x_count_group_id in ('MIDOFFICEMYQUE') then
raise notice 'x_filter_applied%',x_filter_applied;
if x_filter_applied = 'N' then 
v_from_date :='' ;
v_to_date :='' ;
v_case_id :='' ;
v_cust_name :='' ;

else   

select json_array_elements(cast(x_param as json)) ->> 'filter_type',
	   json_array_elements(cast(x_param as json)) ->> 'lead_modified_from_date',
	   json_array_elements(cast(x_param as json)) ->> 'lead_modified_to_date' ,
	   json_array_elements(cast(x_param as json)) ->> 'case_id',
	   json_array_elements(cast(x_param as json)) ->> 'entity_name' 
  into v_filer_type ,v_from_date , v_to_date, v_case_id ,v_cust_name;
 
end if;
raise notice 'v_filer_type%',v_filer_type;
raise notice 'v_from_date%',v_from_date;
raise notice 'v_to_date%',v_to_date;
raise notice 'v_case_id%',v_case_id;
raise notice 'v_cust_name%',v_cust_name;


if upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE') and x_filter_applied ='N' then 
 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
   	            cop.id_name_add as "name",	
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			       and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role = 'BOM'
			              and COP1.is_active ='Y'
			              and cop1.workflow_status='SUBMITTED'
			              	where ACC.update_login_id = X_LOGIN_ID
			            order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
				        
			--acc.emp_id in (select se_id from tb_se_app_mapping tsam where approver_id = X_LOGIN_ID))T;
elsif upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE') and x_filter_applied ='Y' then 
 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
   	            cop.id_name_add as "name",	
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			       and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role = 'BOM'
			              and COP1.is_active ='Y'
			              and cop1.workflow_status='SUBMITTED'
			              and case when  v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
        and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
        and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name end
                         where ACC.update_login_id = X_LOGIN_ID
			             order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				        
ELSIf  upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE_REW')  and x_filter_applied ='N' then 
-----------FOR APPROVER REWORK LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
--	        ACC.access_type as "ACCESS_TYPE",
       case when tt.process_group = 'RM_SE' 
             and tt.prc_grp_disp IN ('APPROVERQUERY') 
             and tt.system_role  = 'BOM'
             and cop.workflow_status= 'BOM_REWORK' then 
             'R'
             when tt.process_group = 'RM_SE' 
             and tt.prc_grp_disp IN ('APPROVEDQUERY') 
             and tt.system_role  = 'BOM'
             and cop.workflow_status= 'BOM_REWORK_APPROVED' then 
             'W'
             when tt.process_group = 'RM_SE' 
             and tt.prc_grp_disp IN ('DVUAPPROVEDQUERY') 
             and tt.system_role  = 'BOM'
             and cop.workflow_status= 'DVU_REWORK_APPROVED' then 
             'W'
             else tt.access_type end as "ACCESS_TYPE",
             case when cop.workflow_status = 'BOM_REWORK'
                  then 'APPROVER_REWORK'
                  when cop.workflow_status = 'BOM_REWORK_APPROVED'
                  then 'APPROVER_REWORK_APPROVED' 
                  else cop.workflow_status end as "STAT",
                  cop.workflow_status as "STAT1",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",		
			cop.scheme_code as "SCHEME_CODE",			
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",		
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.update_login_id as "ASSIGNED_TO"
		from 
                (select cop1.object_pri_key_1,acc.access_type,wfm.count_group_id,disp.process_group,disp.prc_grp_disp,
                acc.system_role,ACC.update_login_id
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group = 'RM_SE' 
		  and disp.prc_grp_disp  in ('APPROVERQUERY','APPROVEDQUERY','DVUAPPROVEDQUERY')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role = 'BOM'
			              and COP1.is_active ='Y'
			              and cop1.workflow_status in ('BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED') 
		               where ACC.update_login_id = X_LOGIN_ID
			            order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;


				        
				        --UPPER(acc.emp_id) in (select se_id from tb_se_app_mapping tsam where approver_id = X_LOGIN_ID))T;
ELSIf  upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE_REW')  and x_filter_applied ='Y' then 
-----------FOR APPROVER REWORK LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
--	        ACC.access_type as "ACCESS_TYPE",
       case when tt.process_group = 'RM_SE' 
             and tt.prc_grp_disp IN ('APPROVERQUERY') 
             and tt.system_role  = 'BOM'
             and cop.workflow_status= 'BOM_REWORK' then 
             'R'
             when tt.process_group = 'RM_SE' 
             and tt.prc_grp_disp IN ('APPROVEDQUERY') 
             and tt.system_role  = 'BOM'
             and cop.workflow_status= 'BOM_REWORK_APPROVED' then 
             'W'
             when tt.process_group = 'RM_SE' 
             and tt.prc_grp_disp IN ('DVUAPPROVEDQUERY') 
             and tt.system_role  = 'BOM'
             and cop.workflow_status= 'DVU_REWORK_APPROVED' then 
             'W'
             else tt.access_type end as "ACCESS_TYPE",
             case when cop.workflow_status = 'BOM_REWORK'
                  then 'APPROVER_REWORK'
                  when cop.workflow_status = 'BOM_REWORK_APPROVED'
                  then 'APPROVER_REWORK_APPROVED' 
                  else cop.workflow_status end as "STAT",
                  cop.workflow_status as "STAT1",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",		
			cop.scheme_code as "SCHEME_CODE",			
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",		
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.update_login_id as "ASSIGNED_TO"
		from 
                (select cop1.object_pri_key_1,acc.access_type,wfm.count_group_id,disp.process_group,disp.prc_grp_disp,
                acc.system_role,ACC.update_login_id
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group = 'RM_SE' 
		  and disp.prc_grp_disp  in ('APPROVERQUERY','APPROVEDQUERY','DVUAPPROVEDQUERY')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role = 'BOM'
			              and COP1.is_active ='Y'
			              and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
        and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
        and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name end
		              and cop1.workflow_status in ('BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED') 
		               where ACC.update_login_id = X_LOGIN_ID
			            order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				       
ELSIf  upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE_REJ') and  x_filter_applied ='N' then 
-----------FOR APPROVER REJECTED LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
			     cop.id_name_add as "name",
			     coalesce(cop.entity_name,'NA') as "ENTITY_NAME",		
			cop.scheme_code as "SCHEME_CODE",			
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
		     cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO"
			 from 
                (select cop1.object_pri_key_1,acc.access_type,wfm.count_group_id, ACC.update_login_id
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'REJECT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role = 'BOM'
			              and COP1.is_active ='Y'
			             and cop1.workflow_status='BOM_REJECT'
			             where ACC.update_login_id = X_LOGIN_ID
			            order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;


				        
ELSIf  upper(x_role) ='APPROVER' and x_count_group_id in ('MY_QUE_REJ') and  x_filter_applied ='Y' then 
-----------FOR APPROVER REJECTED LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
			     cop.id_name_add as "name",
			     coalesce(cop.entity_name,'NA') as "ENTITY_NAME",		
			cop.scheme_code as "SCHEME_CODE",			
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
		     cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO"
			 from 
                (select cop1.object_pri_key_1,acc.access_type,wfm.count_group_id, ACC.update_login_id
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'REJECT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role = 'BOM'
			              and COP1.is_active ='Y'
			             and cop1.workflow_status='BOM_REJECT'
			              and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
			             where ACC.update_login_id = X_LOGIN_ID
			            order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				       
				        
ELSIf x_role ='Approver Supervisor'  and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='N'
then

select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",		     
			cop.scheme_code as "SCHEME_CODE",
						case when cop.workflow_status in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.workflow_status in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.workflow_status end as "STAT",
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =tt.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO" 
		from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.object_pri_key_1 as pk1  from tb_cop_metadata_txn cop1  
			             join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
                         and cop1.workflow_status in ('BOM_REJECT','RCU_REJECT') 
			             and acc.system_role ='RM'
			              and COP1.is_active ='Y'
			             where cop.modify_emp_id in (select employee_number from  tb_emp_hrms hrms  
			              where supervisor_emp_no =X_LOGIN_ID)  
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				       limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
ELSIf x_role ='Approver Supervisor'  and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='Y'
then

select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",		     
			cop.scheme_code as "SCHEME_CODE",
						case when cop.workflow_status in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.workflow_status in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.workflow_status end as "STAT",
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =tt.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO" 
		from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.object_pri_key_1 as pk1  from tb_cop_metadata_txn cop1  
			             join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
                         and cop1.workflow_status in ('BOM_REJECT','RCU_REJECT') 
			             and acc.system_role ='RM'
			              and COP1.is_active ='Y'
			             where cop.modify_emp_id in (select employee_number from  tb_emp_hrms hrms  
			              where supervisor_emp_no =X_LOGIN_ID) 
			              and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                          and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                          and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				      ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
ELSIf x_role ='RCU Supervisor'  and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='N'
then

select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",		     
			cop.scheme_code as "SCHEME_CODE",
						case when cop.workflow_status in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.workflow_status in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.workflow_status end as "STAT",
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =tt.object_pri_key_1
			 and tba.system_role ='RM'
			 )as "ASSIGNED_TO" 
		 from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.object_pri_key_1 as pk1  from tb_cop_metadata_txn cop1  
			             join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
                         and cop1.workflow_status='RCU_REJECT' 
			             and acc.system_role ='RM'
			              and COP1.is_active ='Y'
			             where cop.modify_emp_id in (select employee_number from  tb_emp_hrms hrms  
			              where supervisor_emp_no =X_LOGIN_ID)
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				       limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				        
ELSIf x_role ='RCU Supervisor'  and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='Y'
then

select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",		     
			cop.scheme_code as "SCHEME_CODE",
						case when cop.workflow_status in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.workflow_status in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.workflow_status end as "STAT",
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =tt.object_pri_key_1
			 and tba.system_role ='RM'
			 )as "ASSIGNED_TO" 
		 from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.object_pri_key_1 as pk1  from tb_cop_metadata_txn cop1  
			             join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
                         and cop1.workflow_status='RCU_REJECT' 
			             and acc.system_role ='RM'
			              and COP1.is_active ='Y'
			              where cop.modify_emp_id in (select employee_number from  tb_emp_hrms hrms  
			              where supervisor_emp_no =X_LOGIN_ID)
			              and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
        and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
        and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
       	                  order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;


-----------FOR APPROVER ACCOUNT ACTIVATED LEADS				        
ELSIf  upper(x_role) ='APPROVER'  and x_count_group_id in ('MY_ALL_QUE')  and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
   	            cop.id_name_add as "name",		     
			cop.scheme_code as "SCHEME_CODE",			
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			     coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			case when cop.workflow_status= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.workflow_status= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.workflow_status= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.workflow_status
			 end  as "STAT",
			     cop.workflow_status as "STAT1",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			TT.update_login_id as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			          --    join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			--      and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'REJECT'
                          join tb_btc_accesscontrol acc on COP1.object_pri_key_1 = acc.object_pri_key_1 
                        and acc.system_role = 'RM'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status in ('BOM_APPROVED','BOM_REWORK_APPROVED','DVU_ASSIGNED','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_APPROVED',
				         'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
			           where ACC.update_login_id = X_LOGIN_ID
			            order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1
				         )T;				        

				        
ELSIf  upper(x_role) ='APPROVER'  and x_count_group_id in ('MY_ALL_QUE')  and x_filter_applied ='Y'
then

   select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
   	            cop.id_name_add as "name",		     
			cop.scheme_code as "SCHEME_CODE",			
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			     coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			case when cop.workflow_status= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.workflow_status= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.workflow_status= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.workflow_status
			 end  as "STAT",
			     cop.workflow_status as "STAT1",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			TT.update_login_id as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			          --    join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			--      and disp.process_group = 'BOM_APPROVER' and disp.prc_grp_disp = 'REJECT'
                          join tb_btc_accesscontrol acc on COP1.object_pri_key_1 = acc.object_pri_key_1 
                        and acc.system_role = 'RM'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status in ('BOM_APPROVED','BOM_REWORK_APPROVED','DVU_ASSIGNED','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_APPROVED',
				         'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
				          and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
        and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
        and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
       		           where ACC.update_login_id = X_LOGIN_ID
			            order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				      ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1
				         )T;				        
			        
---------FOR DVU GENRAL LEADS                          
ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE_GEN') and x_filter_applied ='N' then
 	
select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",                  
			cop.scheme_code as "SCHEME_CODE",			
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"
			 from 
                (select cop1.object_pri_key_1,acc.access_type,  wfm.count_group_id from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group = 'DVU' and disp.prc_grp_disp = 'USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='DVU'
			              and COP1.is_active ='Y'
			             	and COP1.workflow_status in ('BOM_APPROVED')
			          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
               order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1
				         )T;

				        
	--UPPER(acc.update_login_id) = UPPER(x_login_id))T;
ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE_GEN') and x_filter_applied ='Y' then

select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",                  
			cop.scheme_code as "SCHEME_CODE",			
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"
			 from 
                (select cop1.object_pri_key_1,acc.access_type,  wfm.count_group_id from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group = 'DVU' and disp.prc_grp_disp = 'USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='DVU'
			              and COP1.is_active ='Y'
			            	and COP1.workflow_status in ('BOM_APPROVED')
			          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group
        and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
        and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
        and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
                         order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1
				         )T;


---------FOR DVU MY QUEUE BUCKET
ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE') and x_filter_applied ='N' then
 	       
 select json_agg(row_to_json(t)) into v_data from  
	(select TT.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			TT.emp_hierarchy_id as "ASSIGNED_TO"
	from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.emp_hierarchy_id, wfm.count_group_id
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group = 'DVU' and disp.prc_grp_disp = 'WIP'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='DVU'
			              and COP1.is_active ='Y'
			              and COP1.workflow_status in ('DVU_ASSIGNED')
			              where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id)
               order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE') and x_filter_applied ='Y' then
 	       
  select json_agg(row_to_json(t)) into v_data from  
	(select TT.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			TT.emp_hierarchy_id as "ASSIGNED_TO"
	from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.emp_hierarchy_id, wfm.count_group_id
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group = 'DVU' and disp.prc_grp_disp = 'WIP'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='DVU'
			              and COP1.is_active ='Y'
			               and COP1.workflow_status in ('DVU_ASSIGNED')
			              where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id)
			        and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
        and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
        and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
       order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				        
				        
---------FOR DVU REWORK BUCKET
ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE_REW') and x_filter_applied ='N' then
 	       
 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
--	ACC.access_type as "ACCESS_TYPE",
 case when TT.process_group = 'DVU' 
             and TT.prc_grp_disp IN ('REWORK') 
             and TT.system_role  = 'DVU'
             and cop.workflow_status in ('DVU_REWORK','DVU_REWORK_APPROVED','BOM_REWORK_APPROVED','BOM_REWORK') then 
             'R'
             when TT.process_group = 'RM_SE' 
             and TT.prc_grp_disp IN ('DVUAPPROVEDQUERY') 
             and TT.system_role  = 'DVU'
             and cop.workflow_status in ('DVU_REWORK','DVU_REWORK_APPROVED' )then 
             'R'
             else TT.access_type end as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			TT.emp_hierarchy_id as "ASSIGNED_TO"
	       from 
                (select cop1.object_pri_key_1, ACC.access_type,disp.prc_grp_disp,disp.process_group,acc.system_role,ACC.emp_hierarchy_id 
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group = 'DVU' and disp.prc_grp_disp = 'REWORK'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='DVU'
			              and COP1.is_active ='Y'
			              where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id)
			           and COP1.workflow_status in ('BOM_REWORK','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED')
                       order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
				        
ELSIf upper(x_role) ='DVU' and x_count_group_id in ('MY_QUE_REW') and x_filter_applied ='Y' then
 	       
  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
--	ACC.access_type as "ACCESS_TYPE",
 case when TT.process_group = 'DVU' 
             and TT.prc_grp_disp IN ('REWORK') 
             and TT.system_role  = 'DVU'
             and cop.workflow_status in ('DVU_REWORK','DVU_REWORK_APPROVED','BOM_REWORK_APPROVED','BOM_REWORK') then 
             'R'
             when TT.process_group = 'RM_SE' 
             and TT.prc_grp_disp IN ('DVUAPPROVEDQUERY') 
             and TT.system_role  = 'DVU'
             and cop.workflow_status in ('DVU_REWORK','DVU_REWORK_APPROVED' )then 
             'R'
             else TT.access_type end as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			TT.emp_hierarchy_id as "ASSIGNED_TO"
	       from 
                (select cop1.object_pri_key_1, ACC.access_type,disp.prc_grp_disp,disp.process_group,acc.system_role,ACC.emp_hierarchy_id 
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group = 'DVU' and disp.prc_grp_disp = 'REWORK'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='DVU'
			              and COP1.is_active ='Y'
			              where UPPER(acc.emp_hierarchy_id) = UPPER(x_login_id)
			               and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
        and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
        and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
			           and COP1.workflow_status in ('BOM_REWORK','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED')
                       order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;				        
       
ELSIf x_role ='DVU'  and x_count_group_id in ('MY_ALL_QUE')  and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
		case when cop.workflow_status= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.workflow_status= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.workflow_status= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.workflow_status
			 end  as "STAT",
			     cop.workflow_status as "STAT1",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and  disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role  IN ('DVU','RCU')
				and cop1.workflow_status in ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
			              and COP1.is_active ='Y'
			              	where ACC.emp_hierarchy_id = X_LOGIN_ID
			        --   and COP1.workflow_status in ('BOM_REWORK','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED')
                       order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;				        

ELSIf x_role ='DVU'  and x_count_group_id in ('MY_ALL_QUE')  and x_filter_applied ='Y'
then

 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
		case when cop.workflow_status= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.workflow_status= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.workflow_status= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.workflow_status
			 end  as "STAT",
			     cop.workflow_status as "STAT1",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and  disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                                 and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role  IN ('DVU','RCU')
				and cop1.workflow_status in ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
			              and COP1.is_active ='Y'
			              	where ACC.emp_hierarchy_id = X_LOGIN_ID
			        --   and COP1.workflow_status in ('BOM_REWORK','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','BOM_REWORK_APPROVED')
                      and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                    and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                    and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
		               order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;	
				        
				        
---------FOR RCU GENRAL QUEUE BUCKET
       
 ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_GEN')  and x_filter_applied ='N' then  
  
   select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  
			from 
                (select cop1.object_pri_key_1,acc.access_type,wfm.count_group_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU' and disp.prc_grp_disp ='USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RCU'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status in ('DVU_APPROVED')
			        --    where ACC.emp_id = X_LOGIN_ID
			            order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				        
				        
ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_GEN')  and x_filter_applied ='Y' then  
  
  select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  
			from 
                (select cop1.object_pri_key_1,acc.access_type,wfm.count_group_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU' and disp.prc_grp_disp ='USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RCU'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status in ('DVU_APPROVED')
			             and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
                order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
				        
---------FOR RCU MY QUEUE BUCKET
       
 ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE') and x_filter_applied ='N' then
  
  select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			tt.EMP_ID as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.EMP_ID, wfm.count_group_id
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU' and disp.prc_grp_disp ='WIP'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RCU'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status= 'RCU_ASSIGNED'
			            where ACC.emp_id = X_LOGIN_ID
			            order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
				        
 ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE') and x_filter_applied ='Y' then
  
  select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			tt.EMP_ID as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.EMP_ID, wfm.count_group_id
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU' and disp.prc_grp_disp ='WIP'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RCU'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status= 'RCU_ASSIGNED'
			            where ACC.emp_id = X_LOGIN_ID
			             and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
			          order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				      ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				         
				        ---------FOR RCU GENRAL REWORK QUEUE BUCKET
       
 ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_REW')  and x_filter_applied ='N' then
  
   select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	    --ACC.access_type as "ACCESS_TYPE",
	    case when tt.process_group = 'RCU' 
             and tt.prc_grp_disp IN ('REWORK') 
             and tt.system_role  = 'RCU'
             and cop.workflow_status= 'RCU_REWORK' then 
             'R'
             when tt.process_group = 'RCU' 
             and tt.prc_grp_disp IN ('REWORK') 
             and tt.system_role  = 'RCU'
             and cop.workflow_status= 'RCU_REWORK_APPROVED' then 
             'W'else tt.access_type end as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
									(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_metadata_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
			 from 
                (select cop1.object_pri_key_1,acc.access_type,wfm.count_group_id,disp.prc_grp_disp,disp.process_group,
                acc.system_role
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU' and disp.prc_grp_disp ='REWORK'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RCU'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status in ('RCU_REWORK','RCU_REWORK_APPROVED')
			            where ACC.emp_id = X_LOGIN_ID
			            order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
             				         )T;
				        
				        
ELSIf upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_REW')  and x_filter_applied ='Y' then
  
   select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	    --ACC.access_type as "ACCESS_TYPE",
	    case when tt.process_group = 'RCU' 
             and tt.prc_grp_disp IN ('REWORK') 
             and tt.system_role  = 'RCU'
             and cop.workflow_status= 'RCU_REWORK' then 
             'R'
             when tt.process_group = 'RCU' 
             and tt.prc_grp_disp IN ('REWORK') 
             and tt.system_role  = 'RCU'
             and cop.workflow_status= 'RCU_REWORK_APPROVED' then 
             'W'else tt.access_type end as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
									(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_metadata_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
			 from 
                (select cop1.object_pri_key_1,acc.access_type,wfm.count_group_id,disp.prc_grp_disp,disp.process_group,
                acc.system_role
                from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU' and disp.prc_grp_disp ='REWORK'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RCU'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status in ('RCU_REWORK','RCU_REWORK_APPROVED')
			            where ACC.emp_id = X_LOGIN_ID
			             and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				           ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
             				         )T;		        
----------------------------------------------------------------------------------------------------------------				        
ELSIf  upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='N'  then 
-----------FOR RCU REJECTED LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
			     cop.id_name_add as "name",
			     coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
		     cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.EMP_ID as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,wfm.count_group_id,ACC.EMP_ID  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU' and disp.prc_grp_disp ='REJECT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RCU'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status ='RCU_REJECT'
			            where ACC.emp_id = X_LOGIN_ID
			            order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
				        
ELSIf  upper(x_role) ='RCU' and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='Y'  then 
-----------FOR RCU REJECTED LEADS 
select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
			     cop.id_name_add as "name",
			     coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
		     cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.EMP_ID as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,wfm.count_group_id,ACC.EMP_ID  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU' and disp.prc_grp_disp ='REJECT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RCU'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status ='RCU_REJECT'
			            where ACC.emp_id = X_LOGIN_ID
			            and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
		          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
                )T;
				        
				        
ELSIf  upper(x_role) ='RCU'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",		     
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU' and disp.prc_grp_disp ='APPROVE'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RCU'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status ='RCU_APPROVED'
			            where ACC.emp_id = X_LOGIN_ID
			            order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
ELSIf  upper(x_role) ='RCU'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='Y'
then

    select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",		     
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU' and disp.prc_grp_disp ='APPROVE'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RCU'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status ='RCU_APPROVED'
			            where ACC.emp_id = X_LOGIN_ID
			            and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
		                  order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				         
				        			        
----------------------------------------------------------------------------------------------------------------
 ---------FOR RCU CORRECTOR VIEW QUEUE BUCKET      
 ELSIf upper(x_role) ='RCU CORRECTOR' and x_count_group_id in ('MY_QUE') and x_filter_applied ='N' then
   
 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	       TT.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
                  where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
--			cop.login_id as "ASSIGNED_USER_ID",
(select acc1.emp_id  from tb_btc_accesscontrol acc1 
			  where acc1.object_pri_key_1 =tt.object_pri_key_1 
			  and acc1.system_role ='RM')
			as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
--			(select rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
--                 where branch in (select branch_code from tb_emp_hrms teh 
--                                   where employee_number = acc.emp_id
--                                    )) as "ASSIGNED_TO"
			(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh , tb_btc_accesscontrol tba,
                 tb_cop_metadata_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
 	            from 
                (select cop1.object_pri_key_1,acc.access_type,acc.object_pri_key_1 as pk1  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RM'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status = 'RCU_REWORK'
			        where acc.EMP_ID in (select employee_number from tb_emp_hrms teh 
			                    join tb_branch_rcu_corrector_mapping RCM on rcm.branch = teh.branch_code 
			                   where RCM.rcu_corrector_id =x_login_id)   
			            order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;


				        
ELSIf upper(x_role) ='RCU CORRECTOR' and x_count_group_id in ('MY_QUE') and x_filter_applied ='Y' then
   
   select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	       TT.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
                  where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
--			cop.login_id as "ASSIGNED_USER_ID",
(select acc1.emp_id  from tb_btc_accesscontrol acc1 
			  where acc1.object_pri_key_1 =tt.object_pri_key_1 
			  and acc1.system_role ='RM')
			as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
--			(select rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
--                 where branch in (select branch_code from tb_emp_hrms teh 
--                                   where employee_number = acc.emp_id
--                                    )) as "ASSIGNED_TO"
			(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh , tb_btc_accesscontrol tba,
                 tb_cop_metadata_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
 	            from 
                (select cop1.object_pri_key_1,acc.access_type,acc.object_pri_key_1 as pk1  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			 and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                           and wfm.process_group = disp.process_group 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RM'
			              and COP1.is_active ='Y'
			            and cop1.workflow_status = 'RCU_REWORK'
			        where acc.EMP_ID in (select employee_number from tb_emp_hrms teh 
			                    join tb_branch_rcu_corrector_mapping RCM on rcm.branch = teh.branch_code 
			                   where RCM.rcu_corrector_id =x_login_id) 
			                    and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
              and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
              and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
           
			            order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				        
ELSIf x_role ='Auditor' and x_count_group_id in ('MY_QUE_GEN') and x_filter_applied ='N'
then

    select json_agg(row_to_json(t)) into v_data from  
	(select distinct cop.caseid as "caseid",
	       --wfm.count_group_id as "que_id",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select distinct employee_number from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,coalesce (cop.modified_timestamp ,cop.created_timestamp ) 
			from tb_cop_metadata_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                  and disp.process_group not in ('RM_SE','RCU') and disp.prc_grp_disp not in ('APPROVE','APPROVERQUERY','DVUQUERY','ASSIGNED','SUBMITTED','REJECT')
               join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
               and acc.system_role not in ('RM_SE','RCU') 
               where  --cop.created_timestamp + interval '60 day'< current_timestamp and
                     COP.is_active ='Y'
              order by coalesce (cop.modified_timestamp ,cop.created_timestamp )
              limit 100
               )T;
              
              
ELSIf x_role ='Auditor' and x_count_group_id in ('MY_QUE_GEN') and x_filter_applied ='Y'
then

    select json_agg(row_to_json(t)) into v_data from  
	(select distinct cop.caseid as "caseid",
	       --wfm.count_group_id as "que_id",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select distinct employee_number from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  from tb_cop_metadata_txn cop  
              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
                  and disp.process_group not in ('RM_SE','RCU') and disp.prc_grp_disp not in ('APPROVE','APPROVERQUERY','DVUQUERY','ASSIGNED','SUBMITTED','REJECT')
               join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
               and acc.system_role not in ('RM_SE','RCU') 
              --and cop.created_timestamp + interval '60 day'< current_timestamp
              and COP.is_active ='Y'
              and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
              and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
              and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
               )T;			        
--ELSIf  upper(x_role) ='AUDITOR'  and x_count_group_id in ('MY_BACKEND_QUE') 
--then
--
--  select json_agg(row_to_json(t)) into v_data from  
--	(select  distinct cop.caseid as "caseid",
----	wfm.count_group_id as "que_id",
----	ACC.access_type as "ACCESS_TYPE",
--	        cop.crn as "CRN" ,
--			cop.account_no as "ACCOUNT_NO" ,
--			cop.contact_mobile as "CONTACT_MOBILE" ,
----			case when cop.constitution_type = 'IN'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
----			     when cop.constitution_type = 'SP'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
----			     END as "name",
--                  cop.id_name_add as "name",
--			cop.scheme_code as "SCHEME_CODE",			
--			cop.crn_entity as "ENTITY_CRN",			
--			cop.aus_crn as "AUS_CRN",
--			cop1.program_option as "PRIVY",
----			cop.caseid as "caseid",
--			cop.lead_id as "LEAD_ID",
--			cop.opening_branch as "OPENING_BRANCH",
--			case when cop.constitution_type = 'IN'
--			     then 'Individual'
--			     when cop.constitution_type = 'SP'
--			     then 'Sole Proprietor' else cop.constitution_type
--			     end as "CONSTITUTION_TYPE",
--			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
--				(select CITY from tb_branch_mst tbm      
--               where branch_cd in (select cop.region_name))  as "REGION_NAME",
--			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
--			cop.login_id as "ASSIGNED_USER_ID",
--			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
--			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
--			'' as "CURRENT_WORKSTEP"  
--		from tb_cop_metadata_txn cop  
--		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
-- 		              and process_group in ('ACCOUNT')
--                           and prc_grp_disp in ('SUCCESS'))T;
				        

              
ELSIf x_role in ('Ops CA','BSG','Product Supervisor') and x_count_group_id in ('MY_QUE_GEN') and x_filter_applied ='N'
then

           select json_agg(row_to_json(t)) 
    into v_data
     from  
	(select distinct cop.lead_id as "LEAD_ID",
           COP.object_pri_key_1 ,
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select distinct employee_number from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" 
		    from 
                (select  cop1.object_pri_key_1,disp.prc_grp_disp,disp.process_group,disp.config_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			             and disp.process_group in ('CIF','CERSAI','ACCOUNTCASA','ACCOUNT','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN')
              and disp.prc_grp_disp in ('FAILURE','WAIT')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNTCASA','ACCOUNT','ACCOUNTCASA','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')
                          and COP1.is_active ='Y'
                      		where cop1.object_pri_key_1 not in (select distinct TSS.object_pri_key_1 from tb_service_audit tss
                                                 where process_group ='ACCOUNT' 
                                                 and TSS.prc_grp_disp ='SUCCESS')
               order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1)T;
                
                
ELSIf x_role in ('Ops CA','BSG','Product Supervisor') and x_count_group_id in ('MY_QUE_GEN') and x_filter_applied ='Y'
then

        select json_agg(row_to_json(t)) 
    into v_data
     from  
	(select distinct   cop.lead_id as "LEAD_ID",
           COP.object_pri_key_1 ,
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",		
			(select distinct employee_number from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.device_modify_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" 
		    from 
                (select  cop1.object_pri_key_1,disp.prc_grp_disp,disp.process_group,disp.config_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			             and disp.process_group in ('CIF','CERSAI','ACCOUNTCASA','ACCOUNT','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN')
              and disp.prc_grp_disp in ('FAILURE','WAIT')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNTCASA','ACCOUNT','ACCOUNTCASA','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')
                          and COP1.is_active ='Y'
                          where cop1.object_pri_key_1 not in (select distinct TSS.object_pri_key_1 from tb_service_audit tss
                                                 where process_group ='ACCOUNT' 
                                                 and TSS.prc_grp_disp ='SUCCESS')
                    and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
 and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
 and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
 order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1)T;            
 
                /*
ELSIf x_role in ('BSG','Product Supervisor') and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='N'
then

    select json_agg(row_to_json(t)) into v_data from  
	( select distinct cop.caseid as "caseid",
          cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
   	            cop.id_name_add as "name",	
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop1.program_option as "PRIVY",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
		  case   when COP.TEXT_1 in ('ASSIGNED','REJECTED')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'RM'
			            and COP.TEXT_1 in ('ASSIGNED','REJECTED'))	 
		         when COP.TEXT_1 in ('SUBMITTED','BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REJECT')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'BOM'
			            and COP.TEXT_1 in ('SUBMITTED','BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REJECT'))	
			     when COP.text_1 in ('BOM_APPROVED','DVU_APPROVED')
			      then  'YET TO ASSIGN'
			     when COP.text_1 in ('RCU_APPROVED')
			      then  'PENDING AT API'
			     when cop.text_1 in ('DVU_ASSIGNED','DVU_REWORK','BOM_DVU_REWORK_APPROVED')
			      then  (select tba.emp_hierarchy_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'DVU'
			            and cOP.text_1 in ('DVU_ASSIGNED','DVU_REWORK','BOM_DVU_REWORK_APPROVED'))
			     when COP.text_1 in ('RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REJECT')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'RCU' 
			            and COP.text_1 in ('RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REJECT'))			     
			     when COP.text_1 in ('RCU_REWORK')
			      then  (select rcu_corrector_id from tb_branch_rcu_corrector_mapping rcu
			                   where rcu.branch in (select branch_code from tb_emp_hrms teh2, tb_btc_accesscontrol tba2 
			                                          where employee_number = tba2.emp_id 
			                                          and tba2.object_pri_key_1 =acc.object_pri_key_1 
                   			                          and tba2.system_role ='RM'
                   			                          and cop.text_1 ='RCU_REWORK'))
			   else 'NA'                       
			      end as "ASSIGNED_TO", coalesce (cop.modified_timestamp ,cop.created_timestamp )
  from tb_cop_metadata_txn cop
  join tb_btc_prc_grp_disp disp on disp.object_pri_key_1 = cop.object_pri_key_1
  join tb_btc_accesscontrol acc on acc.object_pri_key_1 = disp.object_pri_key_1
  where -- cop.created_timestamp + interval '60 day'< current_timestamp and
    COP.is_active ='Y'
  order by coalesce (cop.modified_timestamp ,cop.created_timestamp )
  limit 100
  )T;				        

 ELSIf x_role in ('BSG','Product Supervisor') and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='Y'
then

    select json_agg(row_to_json(t)) into v_data from  
	( select distinct cop.caseid as "caseid",
          cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
   	            cop.id_name_add as "name",	
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",	
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
						case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",
			cop.aus_crn as "AUS_CRN",
			cop1.program_option as "PRIVY",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
		  case   when COP.TEXT_1 in ('ASSIGNED','REJECTED')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'RM'
			            and COP.TEXT_1 in ('ASSIGNED','REJECTED'))	 
		         when COP.TEXT_1 in ('SUBMITTED','BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REJECT')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'BOM'
			            and COP.TEXT_1 in ('SUBMITTED','BOM_REWORK','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REJECT'))	
			     when COP.text_1 in ('BOM_APPROVED','DVU_APPROVED')
			      then  'YET TO ASSIGN'
			     when COP.text_1 in ('RCU_APPROVED')
			      then  'PENDING AT API'
			     when cop.text_1 in ('DVU_ASSIGNED','DVU_REWORK','BOM_DVU_REWORK_APPROVED')
			      then  (select tba.emp_hierarchy_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'DVU'
			            and cOP.text_1 in ('DVU_ASSIGNED','DVU_REWORK','BOM_DVU_REWORK_APPROVED'))
			     when COP.text_1 in ('RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REJECT')
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = acc.object_pri_key_1 
			            and tba.system_role  = 'RCU' 
			            and COP.text_1 in ('RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REJECT'))			     
			     when COP.text_1 in ('RCU_REWORK')
			      then  (select rcu_corrector_id from tb_branch_rcu_corrector_mapping rcu
			                   where rcu.branch in (select branch_code from tb_emp_hrms teh2, tb_btc_accesscontrol tba2 
			                                          where employee_number = tba2.emp_id 
			                                          and tba2.object_pri_key_1 =acc.object_pri_key_1 
                   			                          and tba2.system_role ='RM'
                   			                          and cop.text_1 ='RCU_REWORK'))
			   else 'NA'                       
			      end as "ASSIGNED_TO"
  from tb_cop_metadata_txn cop
  join tb_btc_prc_grp_disp disp on disp.object_pri_key_1 = cop.object_pri_key_1
  join tb_btc_accesscontrol acc on acc.object_pri_key_1 = disp.object_pri_key_1
 where  --cop.created_timestamp + interval '60 day'< current_timestamp
  COP.is_active ='Y'
 and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
 and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
 and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
  )T;	
--ELSIf x_role ='BSG' and x_count_group_id in ('MY_QUE_GEN') 
--then

--    select json_agg(row_to_json(t)) into v_data from  
--	(select wfm.count_group_id as "que_id",
--	ACC.access_type as "ACCESS_TYPE",
--			cop.crn as "CRN" ,
--			cop.account_no as "ACCOUNT_NO" ,
--			cop.contact_mobile as "CONTACT_MOBILE" ,
----			case when cop.constitution_type = 'IN'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
----			     when cop.constitution_type = 'SP'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
----			     END as "name",
--                  cop.id_name_add as "name",
--			cop.scheme_code as "SCHEME_CODE",			
--			cop.crn_entity as "ENTITY_CRN",			
--			cop.aus_crn as "AUS_CRN",
--			cop1.program_option as "PRIVY",
--			cop.caseid as "caseid",
--			cop.lead_id as "LEAD_ID",
--			cop.opening_branch as "OPENING_BRANCH",
--			case when cop.constitution_type = 'IN'
--			     then 'Individual'
--			     when cop.constitution_type = 'SP'
--			     then 'Sole Proprietor' else cop.constitution_type
--			     end as "CONSTITUTION_TYPE",
--			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
--				(select CITY from tb_branch_mst tbm      
--               where branch_cd in (select cop.region_name))  as "REGION_NAME",
--			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
--			cop.login_id as "ASSIGNED_USER_ID",
--			(select employee_number from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
--			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
--			'' as "CURRENT_WORKSTEP"  from tb_cop_metadata_txn cop  
--              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
--              and disp.process_group not in ('RM_SE') and disp.prc_grp_disp not in  ('APPROVERQUERY','DVUQUERY','ASSIGNED','REJECT')
--			   join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
--              and wfm.process_group = disp.process_group 
--            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
----                            and disp.object_pri_key_2 = acc.object_pri_key_2 
----                           and disp.object_pri_key_3 = acc.object_pri_key_3 ;                          
--	   order by case  cop1.program_option
--				         when  'Priority Privy' then 1 
--				         when  'Branch Privy' then 2  
--				         when 'Non Privy' then 3 end  )T;
*/
-------------------------------BSG RM_SE BUCKET-------------------------------
ELSIf x_role in  ('BSG','Product Supervisor') and x_count_group_id in ('MY_RMSE_QUE') and x_filter_applied ='N' then

  select json_agg(row_to_json(t)) 
into v_data
 from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO"
                 from 
                (select cop1.object_pri_key_1, acc.access_type,acc.emp_id from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			             and disp.process_group  in ('RM_SE') and disp.prc_grp_disp  in ('APPROVERQUERY','DVUQUERY','ASSIGNED')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='RM'
                          and COP1.is_active ='Y'
                          and  COP1.cop.account_no is not null 
              and  COP1.cop.account_no<>''
               and COP1.workflow_status in  ('ASSIGNED','DVU_REWORK','BOM_REWORK')
                           order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1)T;
              
ELSIf x_role in  ('BSG','Product Supervisor') and x_count_group_id in ('MY_RMSE_QUE') and x_filter_applied ='Y' then

  select json_agg(row_to_json(t)) 
into v_data
 from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO"
                 from 
                (select cop1.object_pri_key_1, acc.access_type,acc.emp_id from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			             and disp.process_group  in ('RM_SE') and disp.prc_grp_disp  in ('APPROVERQUERY','DVUQUERY','ASSIGNED')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='RM'
                          and COP1.is_active ='Y'
                          and  COP1.cop.account_no is not null 
              and  COP1.cop.account_no<>''
               and COP1.workflow_status in  ('ASSIGNED','DVU_REWORK','BOM_REWORK')
                and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
               order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1)T;
             	  
-------------------------------BSG APPROVER BUCKET-------------------------------	  
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_APPROVER_QUE') and x_filter_applied ='N' then

select json_agg(row_to_json(t)) 
into v_data 
from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS')as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
						(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =tt.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO"      
	  from 
                (select cop1.object_pri_key_1,acc.object_pri_key_1 as pk,acc.access_type  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			             and disp.process_group in ('RM_SE') and disp.prc_grp_disp in ('APPROVEDQUERY','DVUAPPROVEDQUERY','SUBMITTED','APPROVERQUERY')
               		    join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='RM'
                          and COP1.is_active ='Y'
                          and cop1.workflow_status in ('SUBMITTED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REWORK') 
                          order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_APPROVER_QUE') and x_filter_applied ='Y' then

select json_agg(row_to_json(t)) 
into v_data 
from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS')as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
						(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =tt.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO"      
	  from 
                (select cop1.object_pri_key_1,acc.object_pri_key_1 as pk,acc.access_type  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			             and disp.process_group in ('RM_SE') and disp.prc_grp_disp in ('APPROVEDQUERY','DVUAPPROVEDQUERY','SUBMITTED','APPROVERQUERY')
               		    join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='RM'
                          and COP1.is_active ='Y'
                          and cop1.workflow_status in ('SUBMITTED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED','BOM_REWORK') 
                      and    case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
                          order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;				
-------------------------------BSG DVU BUCKET-------------------------------	  
ELSIf x_role in('BSG','Product Supervisor')and x_count_group_id in ('MY_DVU_QUE') and x_filter_applied ='N' then

select json_agg(row_to_json(t)) into v_data from  
	 (select
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			 case when COP.TEXT_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED')
			      then  (select tba.update_login_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = cop.object_pri_key_1 
			            and tba.system_role  = 'BOM'
			            and COP.TEXT_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED'))	
			      when cop.text_1 in ('DVU_ASSIGNED','BOM_DVU_REWORK_APPROVED')
			      then  (select tba.emp_hierarchy_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = cop.object_pri_key_1 
			            and tba.system_role  = 'DVU'
			            and cOP.text_1 in ('DVU_ASSIGNED','BOM_DVU_REWORK_APPROVED'))
			      when cop.text_1 ='DVU_REWORK'
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = cop.object_pri_key_1 
			            and tba.system_role  = 'RM'
			            and cOP.text_1 in ('DVU_REWORK')) end  as "ASSIGNED_TO"
                    from 
                (select  cop1.object_pri_key_1,acc.access_type  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			              and disp.process_group IN('DVU') and disp.prc_grp_disp IN ('WIP','USERWAIT','REWORK')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role  = 'DVU'
			              and COP1.workflow_status in ('BOM_REWORK','BOM_APPROVED','DVU_ASSIGNED','DVU_REWORK','BOM_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_REWORK_APPROVED')
                          and COP1.is_active ='Y'
               order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 ) t;
                
                
ELSIf x_role in('BSG','Product Supervisor')and x_count_group_id in ('MY_DVU_QUE') and x_filter_applied ='Y' then
select json_agg(row_to_json(t)) into v_data from  
	 (select
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			 case when COP.TEXT_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED')
			      then  (select tba.update_login_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = cop.object_pri_key_1 
			            and tba.system_role  = 'BOM'
			            and COP.TEXT_1 in ('BOM_REWORK_APPROVED','DVU_REWORK_APPROVED'))	
			      when cop.text_1 in ('DVU_ASSIGNED','BOM_DVU_REWORK_APPROVED')
			      then  (select tba.emp_hierarchy_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = cop.object_pri_key_1 
			            and tba.system_role  = 'DVU'
			            and cOP.text_1 in ('DVU_ASSIGNED','BOM_DVU_REWORK_APPROVED'))
			      when cop.text_1 ='DVU_REWORK'
			      then  (select tba.emp_id from tb_btc_accesscontrol tba 
			            where tba.object_pri_key_1 = cop.object_pri_key_1 
			            and tba.system_role  = 'RM'
			            and cOP.text_1 in ('DVU_REWORK')) end  as "ASSIGNED_TO"
                    from 
                    
                    (select  cop1.object_pri_key_1,acc.access_type  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			              and disp.process_group IN('DVU') and disp.prc_grp_disp IN ('WIP','USERWAIT','REWORK')

			            join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			                            and disp.object_pri_key_2 = acc.object_pri_key_2 
			                           and disp.object_pri_key_3 = acc.object_pri_key_3 
			               and acc.system_role  = 'DVU'
			               and COP1.workflow_status in ('BOM_REWORK','BOM_APPROVED','DVU_ASSIGNED','DVU_REWORK','BOM_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_REWORK_APPROVED')
          
                           and COP1.is_active ='Y' and
                           case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
                
               order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                         case cop1.program_option
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end
				       ) tt
				       
				        join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				
			    )T;
-------------------------------BSG RCU BUCKET-------------------------------	  
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RCU_QUE')  and x_filter_applied ='N' then

   select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
	       	       case when cop.text_1 ='DVU_APPROVED'
	       then ''
	       when cop.text_1 ='RCU_REWORK'
	       then (select distinct rcu_corrector_id 
		       from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh , tb_btc_accesscontrol tba ,
                 tb_cop_metadata_txn cop
                                          where TBA.system_role ='RM'
                                          and TEH.employee_number = TBA.emp_id
                                          and tba.object_pri_key_1 =COP.object_pri_key_1)limit 1)
	       else 
			tt.emp_id  end as "ASSIGNED_TO"
				 from (select cop1.object_pri_key_1,acc.access_type,acc.emp_id   from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			  and disp.process_group  = 'RCU' and disp.prc_grp_disp in  ('WIP','USERWAIT','REWORK')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='RCU'
                          and COP1.is_active ='Y'
                          and COP1.workflow_status in 
            ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REWORK')
               order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				        
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RCU_QUE')  and x_filter_applied ='Y' then

  select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
	       	       case when cop.text_1 ='DVU_APPROVED'
	       then ''
	       when cop.text_1 ='RCU_REWORK'
	       then (select distinct rcu_corrector_id 
		       from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh , tb_btc_accesscontrol tba ,
                 tb_cop_metadata_txn cop
                                          where TBA.system_role ='RM'
                                          and TEH.employee_number = TBA.emp_id
                                          and tba.object_pri_key_1 =COP.object_pri_key_1)limit 1)
	       else 
			tt.emp_id  end as "ASSIGNED_TO"
				 from (select cop1.object_pri_key_1,acc.access_type,acc.emp_id   from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			  and disp.process_group  = 'RCU' and disp.prc_grp_disp in  ('WIP','USERWAIT','REWORK')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='RCU'
                          and COP1.is_active ='Y'
                          and COP1.workflow_status in 
            ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REWORK')
                            and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                   and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                   and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
                          order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
-------------------------------BSG RCU_CORRECTOR BUCKET-------------------------------	  
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RCU_COR_QUE') and x_filter_applied ='N'
then
 select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",		
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
		(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_metadata_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"		        
                                        from 
                (select cop1.object_pri_key_1,acc.access_type  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			  and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role = 'RCU_Correcter'
                          and COP1.is_active ='Y'
                          and COP1.workflow_status = 'RCU_REWORK'	
               order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
				        
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RCU_COR_QUE') and x_filter_applied ='Y'
then

   select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",		
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
		(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_metadata_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"		        
                                        from 
                (select cop1.object_pri_key_1,acc.access_type  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			  and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role = 'RCU_Correcter'
                          and COP1.is_active ='Y'
                          and COP1.workflow_status = 'RCU_REWORK'	
                           and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                   and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                   and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
                          order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
---------------------------Product Supervisor RCU CORRECTOR SUPERVISOR---------------------
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='N'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
		    (select rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
                  where branch in (select branch_code from tb_emp_hrms teh , tb_btc_accesscontrol tba 
                                     where employee_number = tba.emp_id limit 1)) as "ASSIGNED_TO"
				            from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			  and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role = 'RCU_Correcter'
                          and COP1.is_active ='Y'
                          and COP1.workflow_status = 'RCU_REWORK'	
               order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;			        
				        
 ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='Y'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
		    (select rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm 
                  where branch in (select branch_code from tb_emp_hrms teh , tb_btc_accesscontrol tba 
                                     where employee_number = tba.emp_id limit 1)) as "ASSIGNED_TO"
				            from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			  and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role = 'RCU_Correcter'
                          and COP1.is_active ='Y'
                          and COP1.workflow_status = 'RCU_REWORK'	
                           and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                   and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                   and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
                          order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
				        
-------------------------------BSG ALL REJECTED BUCKET-------------------------------	  
ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='N'
then

select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			tt.emp_id as "ASSIGNED_TO"
				           from    (select cop1.object_pri_key_1,acc.access_type ,acc.emp_id from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			  and disp.process_group IN('RM_SE','BOM_APPROVER','RCU') and disp.prc_grp_disp IN ('REJECT')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role IN('RM','BOM','RCU')
			               and ACC.access_type = 'R'
                          and COP1.is_active ='Y'
                          and COP1.workflow_status IN ('REJECTED','BOM_REJECT','RCU_REJECT')
				  order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 )T;

ELSIf x_role in('BSG','Product Supervisor') and x_count_group_id in ('MY_QUE_REJ') and x_filter_applied ='Y'
then

select json_agg(row_to_json(t)) into v_data from  
	(select 
--	wfm.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
			tt.emp_id as "ASSIGNED_TO"
				           from    (select cop1.object_pri_key_1,acc.access_type ,acc.emp_id from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			  and disp.process_group IN('RM_SE','BOM_APPROVER','RCU') and disp.prc_grp_disp IN ('REJECT')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role IN('RM','BOM','RCU')
			               and ACC.access_type = 'R'
                          and COP1.is_active ='Y'
                          and COP1.workflow_status IN ('REJECTED','BOM_REJECT','RCU_REJECT')
                    and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                   and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                   and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
                          order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 )T;
				        
				        
-------------------------------Product Supervisor ALL AFTER RCU_APPROVED BUCKET-------------------------------				        
ELSIf x_role in  ('BSG','Product Supervisor','Approver','DVU','RCU','Auditor','RCU Supervisor','DVU Supervisor','Approver Supervisor') 
    and x_count_group_id in ('MY_BACKEND_QUE')  and x_filter_applied  ='N' then

    select json_agg(row_to_json(t)) into v_data from  
	(select   cop.caseid as "caseid",
--	wfm.count_group_id as "que_id",
--	ACC.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  
from tb_cop_metadata_txn cop 
		 where exists ( select 1 from tb_btc_prc_grp_disp disp 
		                 where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                  and process_group ='ACCOUNT'
                          and prc_grp_disp ='SUCCESS')
          		--and cop.created_timestamp + interval '60 day'< current_timestamp
                and COP.is_active ='Y'                        
          order by coalesce (cop.modified_timestamp ,cop.created_timestamp )
                limit 100
             --   and COP.workflow_status ='ACCOUNT_ACTIVATED'                           
--               order by case  cop1.program_option
--				         when  'Priority Privy' then 1 
--				         when  'Branch Privy' then 2  
--				         when 'Non Privy' then 3 end
				        )T;
				       
ELSIf x_role in  ('BSG','Product Supervisor','Approver','DVU','RCU','Auditor','RCU Supervisor','DVU Supervisor','Approver Supervisor') 
    and x_count_group_id in ('MY_BACKEND_QUE')  and x_filter_applied  ='Y' then

    raise notice 'v_filer_type%',v_filer_type;
    raise notice 'v_case_id%',v_case_id;
  select json_agg(row_to_json(t)) into v_data from  
	(select   cop.caseid as "caseid",
--	wfm.count_group_id as "que_id",
--	ACC.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  
         from tb_cop_metadata_txn cop 
		 where exists ( select 1 from tb_btc_prc_grp_disp disp 
		                 where  cop.object_pri_key_1 = disp.object_pri_key_1 
 		                  and process_group ='ACCOUNT'
                           and prc_grp_disp ='SUCCESS')
           --and cop.created_timestamp + interval '60 day'< current_timestamp
           and COP.is_active ='Y'  
           and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
           and  case when v_filer_type ='case_id' then cop.lead_id= v_case_id  else 1=1 end
           and case  when v_filer_type ='entity_name' then cop.id_name_add= v_cust_name else 1=1 end
--         ((cop.caseid=v_case_id) 
--               or (cop.id_name_add=v_cust_name)
--               or (date(COP.modified_timestamp) between v_from_date and v_to_date )
--                )
             --   and COP.workflow_status ='ACCOUNT_ACTIVATED'                           
--               order by case  cop1.program_option
--				         when  'Priority Privy' then 1 
--				         when  'Branch Privy' then 2  
--				         when 'Non Privy' then 3 end
				        )T;	
--  select json_agg(row_to_json(t)) into v_data from  
--	(select  distinct cop.caseid as "caseid",
----	wfm.count_group_id as "que_id",
----	ACC.access_type as "ACCESS_TYPE",
--	        cop.crn as "CRN" ,
--			cop.account_no as "ACCOUNT_NO" ,
--			cop.contact_mobile as "CONTACT_MOBILE" ,
----			case when cop.constitution_type = 'IN'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
----			     when cop.constitution_type = 'SP'
----			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
----			     END as "name",
--                  cop.id_name_add as "name",
--			cop.scheme_code as "SCHEME_CODE",			
--			case when cop.crn_entity is not null 
--			     then cop.crn_entity
--			     else 'NA' end as "ENTITY_CRN",			
--			cop.aus_crn as "AUS_CRN",
--			cop1.program_option as "PRIVY",
--			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
----			cop.caseid as "caseid",
--			cop.lead_id as "LEAD_ID",
--			cop.opening_branch as "OPENING_BRANCH",
--			case when cop.constitution_type = 'IN'
--			     then 'Individual'
--			     when cop.constitution_type = 'SP'
--			     then 'Sole Proprietor' else cop.constitution_type
--			     end as "CONSTITUTION_TYPE",
--			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
--				(select CITY from tb_branch_mst tbm      
--               where branch_cd in (select cop.region_name))  as "REGION_NAME",
--			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
--			cop.login_id as "ASSIGNED_USER_ID",
--			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
--			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
--			'' as "CURRENT_WORKSTEP"  
--from tb_cop_metadata_txn cop  ,tb_btc_prc_grp_disp disp 
--  where cop.object_pri_key_1 = disp.object_pri_key_1 
--  and exists ((select 1 from tb_btc_prc_grp_disp tbpgd where tbpgd.object_pri_key_1 =cop.object_pri_key_1 
--                  and tbpgd.process_group = 'ACCOUNT'       and tbpgd.prc_grp_disp ='SUCCESS'))
--and exists ((select 1 from tb_btc_prc_grp_disp tbpgd where tbpgd.object_pri_key_1 =cop.object_pri_key_1 
--                  and tbpgd.process_group = 'CERSAI'       and tbpgd.prc_grp_disp ='SUCCESS'))
--and exists ((select 1 from tb_btc_prc_grp_disp tbpgd where tbpgd.object_pri_key_1 =cop.object_pri_key_1 
--                  and tbpgd.process_group = 'GSTIN'       and tbpgd.prc_grp_disp ='SUCCESS'))
--and exists ((select 1 from tb_btc_prc_grp_disp tbpgd where tbpgd.object_pri_key_1 =cop.object_pri_key_1 
--                  and tbpgd.process_group = 'FATCA Handoff'       and tbpgd.prc_grp_disp ='SUCCESS'))   
--				        )T;
-------------------------------BSG ALL ERROR BUCKET-------------------------------	  				        				       				       

-------------------------------------------------------------------------------				        
ELSIf upper(x_role) ='SE SUPERVISOR' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='N'
then
    
 select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id,wfm.count_group_id from tb_cop_metadata_txn cop1 
                 join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
                        and disp.process_group  in ('RM_SE') and disp.prc_grp_disp  in ('APPROVERQUERY','DVUQUERY','ASSIGNED')
			             join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                         and wfm.process_group = disp.process_group 
                         and cop1.workflow_status in  ('ASSIGNED','DVU_REWORK','BOM_REWORK')
			             and acc.system_role ='RM'
			             and COP1.is_active ='Y'
			              and ACC.emp_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				        )T;


ELSIf upper(x_role) ='SE SUPERVISOR' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='Y'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id,wfm.count_group_id from tb_cop_metadata_txn cop1 
                 join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
                        and disp.process_group  in ('RM_SE') and disp.prc_grp_disp  in ('APPROVERQUERY','DVUQUERY','ASSIGNED')
			             join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                         and wfm.process_group = disp.process_group 
                         and cop1.workflow_status in  ('ASSIGNED','DVU_REWORK','BOM_REWORK')
			             and acc.system_role ='RM'
			             and COP1.is_active ='Y'
			              and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
			             and ACC.emp_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				           ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				        )T;
			        
ELSIf x_role ='Approver Supervisor' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='N'
then
    
        select json_agg(row_to_json(t)) as v_data from  
	(select tt.count_group_id as "que_id",
	        tt.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",	
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
		(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =TT.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO" 
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.object_pri_key_1 as pk1,wfm.count_group_id
                from tb_cop_metadata_txn cop1 
                 join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
                         and disp.process_group in ('BOM_APPROVER') and disp.prc_grp_disp in ('USERWAIT','REWORK', 'APPROVE')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                         and wfm.process_group = disp.process_group 
                         and cop1.workflow_status in ('SUBMITTED','BOM_REWORK_APPROVED','BOM_REWORK' , 'DVU_REWORK_APPROVED')
                         and acc.system_role ='BOM'
			             and COP1.is_active ='Y'
			              and ACC.update_login_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				        
ELSIf x_role ='Approver Supervisor' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='Y'
then
    
         select json_agg(row_to_json(t)) as v_data from  
	(select tt.count_group_id as "que_id",
	        tt.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",	
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
		(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =TT.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO" 
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.object_pri_key_1 as pk1,wfm.count_group_id
                from tb_cop_metadata_txn cop1 
                 join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
                         and disp.process_group in ('BOM_APPROVER') and disp.prc_grp_disp in ('USERWAIT','REWORK', 'APPROVE')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                         and wfm.process_group = disp.process_group 
                         and cop1.workflow_status in ('SUBMITTED','BOM_REWORK_APPROVED','BOM_REWORK' , 'DVU_REWORK_APPROVED')
                         and acc.system_role ='BOM'
			             and COP1.is_active ='Y'
			              and ACC.update_login_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				        
-----------FOR APPROVER ACCOUNT ACTIVATED LEADS				        
ELSIf x_role ='Approver Supervisor'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",		     
			cop.scheme_code as "SCHEME_CODE",
						case when cop.workflow_status in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.workflow_status in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.workflow_status end as "STAT",
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =tt.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO" 
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.object_pri_key_1 as pk1  from tb_cop_metadata_txn cop1 
              --   join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
             --  and disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			           and cop1.workflow_status in ('BOM_APPROVED','BOM_REWORK_APPROVED','DVU_ASSIGNED','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_APPROVED',
				            'RCU_ASSIGNED','RCU_REWORK','BOM_REWORK','RCU_REWORK_APPROVED') 
				    and acc.system_role ='RM'
			             and COP1.is_active ='Y'
			              and ACC.update_login_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;				        
				        

				        
ELSIf x_role ='Approver Supervisor'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='Y'
then

   select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",		     
			cop.scheme_code as "SCHEME_CODE",
						case when cop.workflow_status in ('BOM_APPROVED')
			     then 'APPROVER_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK_APPROVED')
			     then 'APPROVER_REWORK_APPROVED'
			     when cop.workflow_status in ('BOM_REWORK')
			     then 'APPROVER_REWORK'
			     when cop.workflow_status in ('BOM_DVU_REWORK_APPROVED')
			     then 'DVU_REWORK_APPROVED'
			     when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			     when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			     when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'
			     else 
			cop.workflow_status end as "STAT",
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
									(select TBA.update_login_id from tb_btc_accesscontrol tba
			 where TBA.object_pri_key_1 =tt.object_pri_key_1
			 and tba.system_role ='BOM'
			 )as "ASSIGNED_TO" 
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.object_pri_key_1 as pk1  from tb_cop_metadata_txn cop1 
              --   join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
             --  and disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			           and cop1.workflow_status in ('BOM_APPROVED','BOM_REWORK_APPROVED','DVU_ASSIGNED','DVU_REWORK','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_APPROVED',
				            'RCU_ASSIGNED','RCU_REWORK','BOM_REWORK','RCU_REWORK_APPROVED') 
				    and acc.system_role ='RM'
			             and COP1.is_active ='Y'
			              and ACC.update_login_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			               and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
            and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
            and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
                    order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				           ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;				        
				        

ELSIf x_role ='DVU Supervisor' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='N'
then
    
   select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.emp_hierarchy_id as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_hierarchy_id,wfm.count_group_id  from tb_cop_metadata_txn cop1 
                join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group IN ('DVU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
                         join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group
			             and COP1.workflow_status in ('BOM_APPROVED','DVU_ASSIGNED','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_REWORK','BOM_REWORK_APPROVED')
                         AND ACC.emp_hierarchy_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
                         and acc.system_role ='DVU'
			             and COP1.is_active ='Y'
			             order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

ELSIf x_role ='DVU Supervisor' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='Y'
then
    
         select json_agg(row_to_json(t)) into v_data from  
	(select tt.count_group_id as "que_id",
	tt.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.emp_hierarchy_id as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_hierarchy_id,wfm.count_group_id  from tb_cop_metadata_txn cop1 
                join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
              and disp.process_group IN ('DVU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
                         join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
              and wfm.process_group = disp.process_group
			             and COP1.workflow_status in ('BOM_APPROVED','DVU_ASSIGNED','DVU_REWORK_APPROVED','BOM_DVU_REWORK_APPROVED','DVU_REWORK','BOM_REWORK_APPROVED')
                         AND ACC.emp_hierarchy_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
                         and acc.system_role ='DVU'
			             and COP1.is_active ='Y'
			             and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
           and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
           and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
		               order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

ELSIf x_role ='DVU Supervisor'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",
			case when cop.workflow_status= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.workflow_status= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.workflow_status= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.workflow_status
			 end  as "STAT",
			--cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1 
                 join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
               and disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                         and wfm.process_group = disp.process_group 
                         and cop1.workflow_status in ('DVU_APPROVED',
				                                                          'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
                         and acc.system_role IN ('RCU','DVU')
			             and COP1.is_active ='Y'
			          and ACC.emp_hierarchy_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				        
ELSIf x_role ='DVU Supervisor'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='Y'
then

 select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",
			case when cop.workflow_status= 'BOM_APPROVED' THEN 
		         'APPROVER_APPROVED'
			 when cop.workflow_status= 'BOM_REWORK_APPROVED' then
			     'APPROVER_REWORK_APPROVED'
			 when cop.workflow_status= 'BOM_DVU_REWORK_APPROVED' then 
			     'APPROVER_DVU_REWORK_APPROVED'
			 when cop.workflow_status= 'RCU_ASSIGNED' then 
			     'MIDOFFICE_ASSIGNED'
			 when cop.workflow_status= 'RCU_REWORK' then 
			     'MIDOFFICE_REWORK'
			 when cop.workflow_status= 'RCU_REWORK_APPROVED' then 
			     'MIDOFFICE_REWORK_APPROVED'			 
			     else cop.workflow_status
			 end  as "STAT",
			--cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop1.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			tt.update_login_id as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.update_login_id  from tb_cop_metadata_txn cop1 
                 join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
               and disp.process_group IN ('DVU','RCU') and disp.prc_grp_disp in ('USERWAIT','WIP','REWORK')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                         and wfm.process_group = disp.process_group 
                         and cop1.workflow_status in ('DVU_APPROVED',
				                  'RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED') 
                         and acc.system_role IN ('RCU','DVU')
			             and COP1.is_active ='Y'
			             and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
           and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
           and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
		             and ACC.emp_hierarchy_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

ELSIf x_role ='RCU Supervisor' and x_count_group_id in ('MY_RE_QUE')  and x_filter_applied ='N'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select TT.count_group_id as "que_id",
	TT.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
             	       case when cop.text_1 ='DVU_APPROVED'
	       then ''
	       when cop.text_1 ='RCU_REWORK'
	       then (select distinct rcu_corrector_id 
		       from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba,
                 tb_cop_metadata_txn cop
                                          where TBA.system_role ='RM'
                                          and TEH.employee_number = TBA.emp_id
                                          and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1)
	       else 
			TT.emp_id  end as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id,wfm.count_group_id  from tb_cop_metadata_txn cop1 
                 join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
               and disp.process_group ='RCU' and disp.prc_grp_disp in  ('WIP','USERWAIT','REWORK')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                         and wfm.process_group = disp.process_group 
                         and cop1.workflow_status in ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REWORK')
                         and acc.system_role ='RCU'
			             and COP1.is_active ='Y'
			              and ACC.emp_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
				        
ELSIf x_role ='RCU Supervisor' and x_count_group_id in ('MY_RE_QUE')  and x_filter_applied ='Y'
then
    
         select json_agg(row_to_json(t)) into v_data from  
	(select TT.count_group_id as "que_id",
	TT.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
             	       case when cop.text_1 ='DVU_APPROVED'
	       then ''
	       when cop.text_1 ='RCU_REWORK'
	       then (select distinct rcu_corrector_id 
		       from tb_branch_rcu_corrector_mapping tbrcm 
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba,
                 tb_cop_metadata_txn cop
                                          where TBA.system_role ='RM'
                                          and TEH.employee_number = TBA.emp_id
                                          and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1)
	       else 
			TT.emp_id  end as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id,wfm.count_group_id  from tb_cop_metadata_txn cop1 
                 join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
               and disp.process_group ='RCU' and disp.prc_grp_disp in  ('WIP','USERWAIT','REWORK')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                         and wfm.process_group = disp.process_group 
                         and cop1.workflow_status in ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK_APPROVED','RCU_REWORK')
                         and acc.system_role ='RCU'
			             and COP1.is_active ='Y'
			              and ACC.emp_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
           and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
           and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
	    				        
				        
ELSIf x_role ='RCU Supervisor'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			TT.emp_id as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.emp_id  from tb_cop_metadata_txn cop1 
                 join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
               and disp.process_group ='RCU' and disp.prc_grp_disp in ('APPROVE','REWORK')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                         and wfm.process_group = disp.process_group 
                         and cop1.workflow_status in ('RCU_APPROVED','RCU_REWORK') 
                         and acc.system_role ='RCU'
			             and COP1.is_active ='Y'
			             where  ACC.emp_id in  (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
                           --   and ACC.update_login_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
				        
ELSIf x_role ='RCU Supervisor'  and x_count_group_id in ('MY_ALL_QUE') and x_filter_applied ='Y'
then

  
  select json_agg(row_to_json(t)) into v_data from  
	(select --wfm.count_group_id as "que_id",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
   	            cop.id_name_add as "name",
   	            coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",
			cop.workflow_status as "STAT",
			cop.workflow_status as "STAT1",
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP",
			TT.emp_id as "ASSIGNED_TO"
			from 
                (select cop1.object_pri_key_1,acc.access_type,ACC.emp_id  from tb_cop_metadata_txn cop1 
                 join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
               and disp.process_group ='RCU' and disp.prc_grp_disp in ('APPROVE','REWORK')
                         join tb_btc_accesscontrol acc on cop1.object_pri_key_1 = acc.object_pri_key_1 
			             join tb_queues_workflow_mapping wfm on wfm.prc_grp_disp = disp.prc_grp_disp 
                         and wfm.process_group = disp.process_group 
                         and cop1.workflow_status in ('RCU_APPROVED','RCU_REWORK') 
                         and acc.system_role ='RCU'
			             and COP1.is_active ='Y'
			             where  ACC.emp_id in  (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
                          and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                   and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                   and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
			            --   and ACC.update_login_id in (select employee_number from tb_emp_hrms teh where supervisor_emp_no = x_login_id)
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

				      				        
ELSIf x_role ='RCU Corrector Supervisor' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='N'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select 
	ACC.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
--			(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm , tb_btc_accesscontrol tba 
--                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh 
--                                   where TBA.system_role ='RM'
--                                    and TEH.employee_number = TBA.emp_id
--                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
				         (select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_metadata_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
                                      from tb_cop_metadata_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  = 'RM'
				   and COP.workflow_status = 'RCU_REWORK' 
				   where  --cop.created_timestamp + interval '60 day'< current_timestamp
                    COP.is_active ='Y'
				   and acc.EMP_ID in 	 				   (select teh2.employee_number from tb_emp_hrms teh2 
                      where branch_code in (select  branch from tb_branch_rcu_corrector_mapping tbrcm 
                                              where rcu_corrector_id in (select employee_number from tb_emp_hrms teh 
                                                                           where supervisor_emp_no =X_LOGIN_ID) )
                       and "role" in (select tfrm.role_name from tb_function_roles_mst tfrm 
                                        where default_system_role_code ='Sales Executive'))	
			  order by coalesce (cop.modified_timestamp ,cop.created_timestamp ), 
			             case  cop1.program_option
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end 
				        limit 100
				         )T;
ELSIf x_role ='RCU Corrector Supervisor' and x_count_group_id in ('MY_RE_QUE') and x_filter_applied ='Y'
then
    
        select json_agg(row_to_json(t)) into v_data from  
	(select 
	ACC.access_type as "ACCESS_TYPE",
			cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
                  coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP"  ,
--			(select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm , tb_btc_accesscontrol tba 
--                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh 
--                                   where TBA.system_role ='RM'
--                                    and TEH.employee_number = TBA.emp_id
--                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
				         (select distinct rcu_corrector_id from tb_branch_rcu_corrector_mapping tbrcm
                 where tbrcm.branch in (select branch_code from tb_emp_hrms teh, tb_btc_accesscontrol tba, tb_cop_metadata_txn cop 
                                   where TBA.system_role ='RM'
                                    and TEH.employee_number = TBA.emp_id
                                       and tba.object_pri_key_1 =COP.object_pri_key_1  )limit 1) as "ASSIGNED_TO"
                                      from tb_cop_metadata_txn cop  
		              join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
 		               and disp.process_group ='RCU_Correcter' and disp.prc_grp_disp ='USERWAIT'
				  join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
				   and acc.system_role  = 'RM'
				   and COP.workflow_status = 'RCU_REWORK' 
				   where acc.EMP_ID in (select teh2.employee_number from tb_emp_hrms teh2 
                      where branch_code in (select  branch from tb_branch_rcu_corrector_mapping tbrcm 
                                              where rcu_corrector_id in (select employee_number from tb_emp_hrms teh 
                                                                           where supervisor_emp_no =X_LOGIN_ID) )
                       and "role" in (select tfrm.role_name from tb_function_roles_mst tfrm 
                                        where default_system_role_code ='Sales Executive'))	
                       --and cop.created_timestamp + interval '60 day'< current_timestamp
                       and COP.is_active ='Y'                 
                       and case when v_filer_type ='date' then  date(coalesce (cop.modified_timestamp ,cop.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                       and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                       and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end                 
			  order by case  cop1.program_option
				         when  'Priority Privy' then 1 
				         when  'Branch Privy' then 2  
				         when 'Non Privy' then 3 end )T;				        
ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='GENERAL_QUE'  and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO"
              from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
		              	 and disp.process_group  = 'RU'  and disp.prc_grp_disp  = 'RU_USERWAIT'
                           join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RU'
			              and COP1.is_active ='Y'
			         --   where acc.EMP_ID = x_login_id
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1
				         )T;
				        
ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='GENERAL_QUE'  and x_filter_applied ='Y'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO"
              from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
		              	 and disp.process_group  = 'RU'  and disp.prc_grp_disp  = 'RU_USERWAIT'
                           join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RU'
			              and COP1.is_active ='Y'
			                and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
               and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
               and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
         	         --   where acc.EMP_ID = x_login_id
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				           ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1
				         )T;
               
ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='ASSIGN_QUE' and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO"
               from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
		              	 and disp.process_group  = 'RU'  and disp.prc_grp_disp  = 'RU_ASSIGN'
                           join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RU'
			              and COP1.is_active ='Y'
			            where acc.EMP_ID = x_login_id
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;

ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='ASSIGN_QUE' and x_filter_applied ='Y'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO"
               from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
		              	 and disp.process_group  = 'RU'  and disp.prc_grp_disp  = 'RU_ASSIGN'
                           join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RU'
			              and COP1.is_active ='Y'
			            where acc.EMP_ID = x_login_id
			            and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
             and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
             and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
                        order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
            			        
ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='SUBMITTED_QUE' and x_filter_applied ='N'
then

select json_agg(row_to_json(t)) into v_data from  
	(select tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO"
              from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
		              	 and disp.process_group  = 'RU'  and disp.prc_grp_disp  = 'RU_SUBMITTED'
                           join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RU'
			              and COP1.is_active ='Y'
			            where acc.EMP_ID = x_login_id
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;		


				      
ELSIf UPPER(x_role) = UPPER('Risk Unit') and x_count_group_id ='SUBMITTED_QUE' and x_filter_applied ='Y'
then

 select json_agg(row_to_json(t)) into v_data from  
	(select tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO"
              from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
		              	 and disp.process_group  = 'RU'  and disp.prc_grp_disp  = 'RU_SUBMITTED'
                           join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RU'
			              and COP1.is_active ='Y'
			            where acc.EMP_ID = x_login_id
			            and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
                          order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
			         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;		
				        
ELSIf UPPER(x_role) = UPPER('Risk Unit Supervisor') and x_count_group_id ='RUS_REASSIGNMENT_QUE' and x_filter_applied ='N'
then

 select json_agg(row_to_json(t)) into v_data from  
	(select tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO"
               from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
		              	 and disp.process_group  = 'RU'  and disp.prc_grp_disp  IN ('RU_ASSIGN','RU_SUBMITTED')
                           join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RU'
			              and COP1.is_active ='Y'
			             WHERE acc.EMP_ID in( select employee_number from tb_emp_hrms teh  where supervisor_emp_no = x_login_id )
			              order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        limit  100
				          ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;


				        
ELSIf UPPER(x_role) = UPPER('Risk Unit Supervisor') and x_count_group_id ='RUS_REASSIGNMENT_QUE' and x_filter_applied ='Y'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO"
               from 
                (select cop1.object_pri_key_1,acc.access_type,acc.emp_id  from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
		              	 and disp.process_group  = 'RU'  and disp.prc_grp_disp  IN ('RU_ASSIGN','RU_SUBMITTED')
                           join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
                          and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			             and acc.system_role ='RU'
			              and COP1.is_active ='Y'
			             WHERE acc.EMP_ID in( select employee_number from tb_emp_hrms teh  where supervisor_emp_no = x_login_id )
			             and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
                       order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				        ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;
               				        

				        
ELSIf x_role in  ('BSG','Product Supervisor') and x_count_group_id ='RUS_REASSIGNMENT_QUE' and x_filter_applied ='N'
then

  select json_agg(row_to_json(t)) into v_data from  
	(select tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO"
                from 
                (select cop1.object_pri_key_1,acc.access_type ,acc.emp_id from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group  = 'RU' and disp.prc_grp_disp  in ('RU_ASSIGN','RU_SUBMITTED','RU_USERWAIT')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='RU'
			              and COP1.is_active ='Y'
               order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				          limit  100) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;	
				        
				        
ELSIf x_role in  ('BSG','Product Supervisor') and x_count_group_id ='RUS_REASSIGNMENT_QUE' and x_filter_applied ='Y'
then

 select json_agg(row_to_json(t)) into v_data from  
	(select tt.access_type as "ACCESS_TYPE",
	        cop.crn as "CRN" ,
			cop.account_no as "ACCOUNT_NO" ,
			cop.contact_mobile as "CONTACT_MOBILE" ,
			coalesce(cop.entity_name,'NA') as "ENTITY_NAME",
--			case when cop.constitution_type = 'IN'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'CUST_NAME' 
--			     when cop.constitution_type = 'SP'
--			     then OBJECT_DATA::JSON->'AOF'->'CA'->'CPV1'->>'ORG_PROPRITER_NAME'
--			     END as "name",
                  cop.id_name_add as "name",
			cop.scheme_code as "SCHEME_CODE",			
			case when cop.crn_entity is not null 
			     then cop.crn_entity
			     else 'NA' end as "ENTITY_CRN",			
			cop.aus_crn as "AUS_CRN",
			cop.program_option as "PRIVY",
			cop.caseid as "caseid",
			cop.lead_id as "LEAD_ID",
			cop.opening_branch as "OPENING_BRANCH",
			case when cop.constitution_type = 'IN'
			     then 'Individual'
			     when cop.constitution_type = 'SP'
			     then 'Sole Proprietor' else cop.constitution_type
			     end as "CONSTITUTION_TYPE",
			--object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE' as "CONSTITUTION_TYPE",
				(select CITY from tb_branch_mst tbm      
               where branch_cd = cop.region_name)  as "REGION_NAME",
			to_char(COP.device_create_timestamp, 'DD-MM-YYYY HH24:MI:SS' ) as "created_timestamp",
			cop.login_id as "ASSIGNED_USER_ID",
			(select first_name ||' ' || last_name from tb_emp_hrms teh WHERE employee_number = cop.login_id) as "ASSIGNED_RM",
			to_char(COP.modified_timestamp, 'DD-MM-YYYY HH24:MI:SS' )as "LAST_ACTIVITY_DATE",
			'' as "CURRENT_WORKSTEP" ,
			tt.emp_id as "ASSIGNED_TO"
                from 
                (select cop1.object_pri_key_1,acc.access_type ,acc.emp_id from tb_cop_metadata_txn cop1  
			              join tb_btc_prc_grp_disp disp on cop1.object_pri_key_1 = disp.object_pri_key_1 
			      and disp.process_group  = 'RU' and disp.prc_grp_disp  in ('RU_ASSIGN','RU_SUBMITTED','RU_USERWAIT')
                          join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1 
			              and disp.object_pri_key_2 = acc.object_pri_key_2 
			              and disp.object_pri_key_3 = acc.object_pri_key_3 
			              and acc.system_role ='RU'
			              and COP1.is_active ='Y'
			               and case when v_filer_type ='date' then  date(coalesce (cop1.modified_timestamp ,cop1.created_timestamp ))::varchar between v_from_date and v_to_date else 1=1 end
                and  case when v_filer_type ='case_id' then cop.lead_id=v_case_id  else 1=1 end
                and case  when v_filer_type ='entity_name' then cop.id_name_add=v_cust_name else 1=1 end
         
               order by coalesce (cop1.modified_timestamp ,cop1.created_timestamp ),
                          case cop1.program_option
				          when  'Priority Privy' then 1 
				          when  'Branch Privy' then 2  
				          when 'Non Privy' then 3 end
				         ) tt
                 join tb_cop_metadata_txn cop on cop.object_pri_key_1  = tt.object_pri_key_1 
				         )T;				        
    
else 
v_data = 'No Data';
--v_data = '[{"code":"","value":"No Data"}]';
end if ;
if (v_data = '' or v_data is null)
then --v_data := '';
null;
--'[{"code":"","value":"No Data"}]';
--No Leads present for this ID
--NULL;--= '[{"code":"","value":"No DATA exist"}]';

END IF;
 OPEN x_result FOR SELECT 
            v_data  AS    "OBJECT";
              return x_result;     
            
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_holiday_return()
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
v_count int;
x_result refcursor = 'cur';
begin 
	select count(1) into v_count from tb_temp_holiday_master where now() = to_date(holiday_date,'YYYY-MM-DD');

	if v_count > 0 then 
	open x_result for select 'Yes';
	else 
	open x_result for select 'No';
	end if;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_holiday_return_date()
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
v_data text;
v_date date;
x_result refcursor = 'cur';
begin
	
select now()::date into v_date;

select row_to_json(T) into v_data from (select * from tb_holiday_master_re where holiday_date =v_date)T;
if v_data is not null or v_data <> '' then 
open x_result for select v_data;
	return x_result;
else
open x_result for select 'No data';
	return x_result;
end if;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_image_status_tr()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$ 
DECLARE
x_count  int;
num_rows INT;
ref refcursor; 
X_STATUS  VARCHAR(200);



begin
	
	INSERT INTO image_status(image_name,
							doc_id,
							is_delete_enable,
							created_date,lead_id )
			select image_name,
			doc_id,
			'TRUE',
		CURRENT_TIMESTAMP,object_pri_key_1 from tb_image_data_obj where image_name =new.image_name and doc_id in ('50','51');	
	
	
return new;


END;$function$
;

CREATE OR REPLACE FUNCTION public.sp_ins_db_exception_log(x_org_id character varying, x_app_id character varying, x_pw_service_name character varying, x_object_name character varying, x_pw_request_id character varying, x_login_id character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_object_type character varying, x_err_state text, x_err_msg text, x_err_detail text, x_err_hint text, x_err_context text, x_ref_data_1 character varying, x_ref_data_2 character varying, x_ref_data_3 character varying, x_ref_data_4 character varying, x_ref_data_5 character varying, x_ref_data_6 character varying, x_ref_data_7 character varying, x_is_processed_1 character varying, x_is_processed_2 character varying, x_is_processed_1_timestamp character varying, x_is_processed_2_timestamp character varying, x_developer_remarks character varying)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare

    v_state   TEXT;
    v_msg     TEXT;
    v_detail  TEXT;
    v_hint    TEXT;
    v_context TEXT;
   
v_sqlcode varchar(20);
v_sqlerrm varchar(200);
BEGIN
 
-- x_exception_code character varying, x_exception_detail character varying,	
--x_stack_trace character varying, x_backtrace_line character varying,
--get stacked diagnostics
--        v_state   = returned_sqlstate,
--        v_msg     = message_text,
--        v_detail  = pg_exception_detail,
--        v_hint    = pg_exception_hint,
--        v_context = pg_exception_context;	
 --v_sqlcode := SQLSTATE;
 --v_sqlerrm := substr(sqlerrm, 1,200);  

--STACK_TRACE --DBMS_UTILITY.FORMAT_CALL_STACK,-- X_STACK_TRACE
--BACKTRACE_LINE--    DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
--    EXCEPTION_CODE,  -- v_sqlcode
--    EXCEPTION_DETAIL, --v_sqlerrm
INSERT INTO public.tb_db_exception_log
		(org_id, app_id, service_name, object_name, pw_request_id, login_id,
		 object_pri_key_1, object_pri_key_2, object_pri_key_3, object_type, 
		 err_state,err_msg,err_detail,err_hint,err_context,ref_data_1, ref_data_2, ref_data_3, 
		 ref_data_4, ref_data_5, ref_data_6, ref_data_7, exception_timestamp, 
		 is_processed_1, is_processed_2,is_processed_1_timestamp, is_processed_2_timestamp, developer_remarks)
values
		(x_org_id ,x_app_id ,x_pw_service_name ,x_object_name ,x_pw_request_id ,x_login_id ,
		 x_object_pri_key_1 ,x_object_pri_key_2 ,x_object_pri_key_3 ,x_object_type ,
		 x_err_state,x_err_msg,x_err_detail,x_err_hint,x_err_context ,x_ref_data_1 ,x_ref_data_2 ,x_ref_data_3 ,
		 x_ref_data_4 ,x_ref_data_5 ,x_ref_data_6 ,x_ref_data_7 ,now() ,
		 x_is_processed_1 ,x_is_processed_2 ,current_timestamp ,current_timestamp ,x_developer_remarks);
		
--          EXCEPTION
--            WHEN OTHERS THEN
--                  get stacked diagnostics
--		       v_state   = returned_sqlstate,
--		       v_msg     = message_text,
--		       v_detail  = pg_exception_detail,
--		       v_hint    = pg_exception_hint,
--		       v_context = pg_exception_context;
--  
--                  perform saarathi.sp_ins_db_exception_log(
--				x_org_id,--'org_id',
--				x_app_id,--'app_id',
--				x_pw_service_name,--'service_name',
--				x_pw_service_name,--'object_name',
--				x_pw_request_id,--'pw_request_id',
--				x_login_id,--'login_id',
--				x_object_pri_key_1,--'object_pri_key_1',
--				x_object_pri_key_2,--'object_pri_key_2',
--				x_object_pri_key_3,--'object_pri_key_3',
--				x_pw_service_name,--'object_type',
--				v_state,--'err_state',
--			    v_msg,--'err_msg',
--			    v_detail,--'err_detail',
--				v_hint,--'err_hint',
--				v_context,--'err_context',
--				x_ref_data_1,--'ref_data_1',
--				x_ref_data_2,--'ref_data_2',
--				x_ref_data_3,--'ref_data_3',
--				x_ref_data_4,--'ref_data_4',
--				x_ref_data_5,--'ref_data_5',
--				x_ref_data_6,--'ref_data_6',
--				x_ref_data_7,--'ref_data_7',
--				'N',--'is_processed_1',
--				'N',--'is_processed_2',
--				NULL,--'is_processed_1_timestamp',
--				NULL,--'is_processed_1_timestamp',
--				''--'developer_remarks'
--				); 


  --COMMIT;
  
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_insert_alerts_audit(x_system_req_id character varying, x_object_pri_key_1 character varying, x_lead_stage character varying, x_alert_type character varying, x_alert_to character varying, x_email_subject character varying, x_alert_body character varying, x_template_id character varying, x_server_ip character varying, x_alert_sent_status character varying, x_text_1 character varying, x_text_2 character varying, x_text_3 character varying, x_text_4 character varying, x_text_5 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT REFCURSOR:='cur'; 
v_count INT;
num_rows INT;
V_RESULT text;

BEGIN

if x_system_req_id is not null then 

INSERT INTO public.tb_alerts_audit
(system_req_id, object_pri_key_1, lead_stage, alert_type, alert_to, email_subject, alert_body, template_id, server_ip, alert_sent_status,  text_1, text_2, text_3, text_4, text_5)
VALUES(x_system_req_id, x_object_pri_key_1, x_lead_stage, x_alert_type, x_alert_to, x_email_subject, x_alert_body, x_template_id, x_server_ip,x_alert_sent_status,  x_text_1, x_text_2, x_text_3, x_text_4, x_text_5);


   GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'SUCCESS';
	ELSE 
	V_RESULT = 'FAILED';
	END IF;
 else
 	V_RESULT = 'FAILED';
 end if;
OPEN X_RESULT FOR
SELECT   V_RESULT;
RETURN X_RESULT;  

END;$function$
;

CREATE OR REPLACE FUNCTION public.sp_insert_aof_history(x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_event_process character varying, x_ref_input_1 character varying, x_status character varying, x_remarks text, x_login_id character varying, x_text_1 character varying, x_text_2 character varying, x_text_3 character varying, x_text_4 character varying, x_text_5 character varying, x_workflow_group_id character varying)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare 
v_state text;
y_time timestamp;
v_msg text;
v_detail text;
v_hint text;
v_context text;
v_err varchar(4000);

V_USER_ID varchar(200);

cur_a cursor is
select
	distinct cast(pgdc.config_id as VARCHAR)config_id,
	pgdc.event_process,
	pgdc.ref_input_1,
	pgdc.prc_grp_disp_desc,
	pgdc.process_group,
	pgdc.prc_grp_disp,
	pgdc.remarks,
	pgdc.config_id 
from public.tb_btc_prc_grp_disp_cfg pgdc 
join public.tb_btc_prc_grp_mst pgm on pgm.process_group = pgdc.process_group
join public.tb_btc_prc_grp_disp_mst dispmst on dispmst.process_group = pgm.process_group
	                                       and dispmst.prc_grp_disp = pgdc.prc_grp_disp
where pgdc.event_process = x_event_process
 and pgdc.ref_input_1 = x_ref_input_1
  and pgdc.workflow_group_id = x_workflow_group_id;

begin 
FOR i IN cur_a LOOP 

IF x_status is not NULL then


if ((i.process_group = 'CPV' and i.prc_grp_disp = 'WIP') or
 (i.process_group = 'CPV' and i.prc_grp_disp = 'REPORTPENDING') or
 (i.process_group = 'CPV' and i.prc_grp_disp = 'MOVETOASSISTED') or
 (i.process_group = 'CPV' and i.prc_grp_disp = 'CPVAPPROVED') or
 (i.process_group = 'CPV' and i.prc_grp_disp = 'CPVASSIGNED') or
 (i.process_group = 'MIDOFFICE' and i.prc_grp_disp = 'MOVETOASSISTED') or  
 (i.process_group = 'VKYC' and i.prc_grp_disp = 'PENDING') or
 (i.process_group = 'VKYC' and i.prc_grp_disp = 'REJECTED') or
 (i.process_group = 'VKYC' and i.prc_grp_disp = 'APPROVED') or
 (i.process_group = 'VKYC' and i.prc_grp_disp = 'MOVETOASSISTED') or
 (i.process_group = 'DIYWEBAPP' and i.prc_grp_disp = 'WIP') or
 (i.process_group = 'DIYWEBAPP' and i.prc_grp_disp = 'SUBMITTED') or
 (i.process_group = 'DIYWEBAPP' and i.prc_grp_disp = 'MIDOFFDROP') or
 (i.process_group = 'DIYWEBAPP' and i.prc_grp_disp = 'MOVETOASSISTED') or
  (i.process_group = 'DIYWEBAPP' and i.prc_grp_disp = 'REJECTED') or
(i.process_group = 'RU' and i.prc_grp_disp = 'RU_USERWAIT') or
 (i.process_group = 'ACCOUNTMAN' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'ACCOUNT' and i.prc_grp_disp = 'SUCCESS') or 
 (i.process_group = 'ACCOUNT' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'ACCOUNTCASA' and i.prc_grp_disp = 'SUCCESS') or 
 (i.process_group = 'ACCOUNTMAN' and i.prc_grp_disp = 'SUCCESS') or 
 (i.process_group = 'SIGNATURE' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'ACCOUNTCASA' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'ACCOUNTNOM' and i.prc_grp_disp = 'SUCCESS') or 
 (i.process_group = 'CIFCORP' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'CIF' and i.prc_grp_disp = 'SUCCESS') or 
 (i.process_group = 'CIFMAN' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'CIFCORP' and i.prc_grp_disp = 'SUCCESS') or 
 (i.process_group = 'ACCOUNTNOM' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'CIF' and i.prc_grp_disp = 'SUCCESS') or 
 (i.process_group = 'ACCOUNTNOM' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'CIFMAN' and i.prc_grp_disp = 'SUCCESS') or 
 (i.process_group = 'GSTIN' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'FATCA Handoff' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'FILENET' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'CERSAI' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'SIGNATURE' and i.prc_grp_disp = 'SUCCESS') or 
 (i.process_group = 'BOM_APPROVER' and i.prc_grp_disp = 'USERWAIT') or 
 (i.process_group = 'RM_SE' and i.prc_grp_disp = 'SUBMITTED') or 
 (i.process_group = 'ENRICHMENT' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'DVU' and i.prc_grp_disp = 'USERWAIT') or 
 (i.process_group = 'BOM_APPROVER' and i.prc_grp_disp = 'APPROVE') or 
 (i.process_group = 'BOM_APPROVER' and i.prc_grp_disp = 'REWORK') or 
 (i.process_group = 'RM_SE' and i.prc_grp_disp = 'APPROVERQUERY') or 
 (i.process_group = 'DVU' and i.prc_grp_disp = 'APPROVE') or 
 (i.process_group = 'RCU' and i.prc_grp_disp = 'USERWAIT') or 
 (i.process_group = 'DVU' and i.prc_grp_disp = 'REWORK') or 
 (i.process_group = 'RM_SE' and i.prc_grp_disp = 'DVUQUERY') or 
 (i.process_group = 'CIF' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'RCU' and i.prc_grp_disp = 'APPROVE') or 
 (i.process_group = 'RCU_Correcter' and i.prc_grp_disp = 'USERWAIT') or 
 (i.process_group = 'RCU' and i.prc_grp_disp = 'REWORK')  ) then
 
SELECT public.sp_get_lead_role_user_id(x_object_pri_key_1,x_object_pri_key_2,x_object_pri_key_3,
                              i.process_group,i.prc_grp_disp,x_login_id,'x_object')
into V_USER_ID;

else

V_USER_ID := x_login_id;
end if;

		select now() AT TIME ZONE 'Asia/Kolkata' into y_time;


INSERT INTO public.tb_aof_history
(object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3,SEQ_ID, process_group, prc_grp_disp, lead_status, REMARKS, user_id,created_timestamp)
VALUES(x_object_type, x_object_pri_key_1, x_object_pri_key_2, x_object_pri_key_3,i.config_id, i.process_group, i.prc_grp_disp, x_status,X_REMARKS ,V_USER_ID,y_time);

end if;
end loop;
end;

$function$
;

CREATE OR REPLACE FUNCTION public.sp_insert_aof_history_nreq(x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_event_process character varying, x_ref_input_1 character varying, x_status character varying, x_remarks text, x_login_id character varying, x_text_1 character varying, x_text_2 character varying, x_text_3 character varying, x_text_4 character varying, x_text_5 character varying)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare 
v_state text;
v_msg text;
v_detail text;
v_hint text;
v_context text;
v_err varchar(4000);

V_USER_ID varchar(200);

cur_a cursor is
select
	distinct cast(pgdc.config_id as VARCHAR)config_id,
	pgdc.event_process,
	pgdc.ref_input_1,
	pgdc.prc_grp_disp_desc,
	pgdc.process_group,
	pgdc.prc_grp_disp,
	pgdc.remarks,
	pgdc.config_id 
from public.tb_btc_prc_grp_disp_cfg pgdc 
join public.tb_btc_prc_grp_mst pgm on pgm.process_group = pgdc.process_group
join public.tb_btc_prc_grp_disp_mst dispmst on dispmst.process_group = pgm.process_group
	                                       and dispmst.prc_grp_disp = pgdc.prc_grp_disp
where pgdc.event_process = x_event_process
 and pgdc.ref_input_1 = x_ref_input_1;

begin 
FOR i IN cur_a LOOP 

IF x_status is not NULL then

if ( (i.process_group = 'RU' and i.prc_grp_disp = 'RU_USERWAIT') or
 (i.process_group = 'ACCOUNTMAN' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'ACCOUNT' and i.prc_grp_disp = 'SUCCESS') or 
 (i.process_group = 'ACCOUNT' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'ACCOUNTCASA' and i.prc_grp_disp = 'SUCCESS') or 
 (i.process_group = 'ACCOUNTMAN' and i.prc_grp_disp = 'SUCCESS') or 
 (i.process_group = 'SIGNATURE' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'ACCOUNTCASA' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'ACCOUNTNOM' and i.prc_grp_disp = 'SUCCESS') or 
 (i.process_group = 'CIFCORP' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'CIF' and i.prc_grp_disp = 'SUCCESS') or 
 (i.process_group = 'CIFMAN' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'CIFCORP' and i.prc_grp_disp = 'SUCCESS') or 
 (i.process_group = 'ACCOUNTNOM' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'CIF' and i.prc_grp_disp = 'SUCCESS') or 
 (i.process_group = 'ACCOUNTNOM' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'CIFMAN' and i.prc_grp_disp = 'SUCCESS') or 
 (i.process_group = 'GSTIN' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'FATCA Handoff' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'FILENET' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'CERSAI' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'SIGNATURE' and i.prc_grp_disp = 'SUCCESS') or 
 (i.process_group = 'BOM_APPROVER' and i.prc_grp_disp = 'USERWAIT') or 
 (i.process_group = 'RM_SE' and i.prc_grp_disp = 'SUBMITTED') or 
 (i.process_group = 'ENRICHMENT' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'DVU' and i.prc_grp_disp = 'USERWAIT') or 
 (i.process_group = 'BOM_APPROVER' and i.prc_grp_disp = 'APPROVE') or 
 (i.process_group = 'BOM_APPROVER' and i.prc_grp_disp = 'REWORK') or 
 (i.process_group = 'RM_SE' and i.prc_grp_disp = 'APPROVERQUERY') or 
 (i.process_group = 'DVU' and i.prc_grp_disp = 'APPROVE') or 
 (i.process_group = 'RCU' and i.prc_grp_disp = 'USERWAIT') or 
 (i.process_group = 'DVU' and i.prc_grp_disp = 'REWORK') or 
 (i.process_group = 'RM_SE' and i.prc_grp_disp = 'DVUQUERY') or 
 (i.process_group = 'CIF' and i.prc_grp_disp = 'WAIT') or 
 (i.process_group = 'RCU' and i.prc_grp_disp = 'APPROVE') or 
 (i.process_group = 'RCU_Correcter' and i.prc_grp_disp = 'USERWAIT') or 
 (i.process_group = 'RCU' and i.prc_grp_disp = 'REWORK')  ) then
 
SELECT public.sp_get_lead_role_user_id(x_object_pri_key_1,x_object_pri_key_2,x_object_pri_key_3,
                              i.process_group,i.prc_grp_disp,x_login_id,'x_object')
into V_USER_ID;

else

V_USER_ID := x_login_id;
end if;

INSERT INTO public.tb_aof_history
(object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3,SEQ_ID, process_group, prc_grp_disp, lead_status, REMARKS, user_id)
VALUES(x_object_type, x_object_pri_key_1, x_object_pri_key_2, x_object_pri_key_3,i.config_id, i.process_group, i.prc_grp_disp, x_status,X_REMARKS ,V_USER_ID);

end if;
end loop;
end;

$function$
;

CREATE OR REPLACE FUNCTION public.sp_insert_master_data(x_service_request_id character varying, x_processing_request_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT REFCURSOR:='cur';
v_count INT;
num_rows INT;
V_RESULT_1 text;
V_RESULT text;
v_request JSON;
v_request1 JSON;
v_request2 JSON;
v_request3 JSON;
begin

select request into v_request from tb_role_master_stagging
 where service_request_id =x_service_request_id
  and processing_request_id = x_processing_request_id
   and upper(table_name) ='TB_EMP_HRMS';

--select request into v_request1 from tb_role_master_stagging
-- where service_request_id =x_service_request_id
--  and processing_request_id = x_processing_request_id
--   and upper(table_name) ='TB_SE_APP';
--
--select request into v_request2 from tb_role_master_stagging
-- where service_request_id =x_service_request_id
--  and processing_request_id = x_processing_request_id
--   and upper(table_name) ='TB_BRANCH_RCU';

-- select request into v_request3 from tb_role_master_stagging
-- where service_request_id =x_service_request_id
--  and processing_request_id = x_processing_request_id
--   and table_name ='FUNCTION_MASTER';
--
--  raise notice '1:%',v_request;
-- raise notice '2:%',v_request1;
--raise notice '3:%',v_request2;

if v_request is not null THEN

--INSERT INTO public.tb_emp_hrms1
--(employee_number, oracle_employee_number,email_address )
--SELECT * from jsonb_to_recordset(cast(v_request as jsonb))
--   as (employee_number varchar, oracle_employee_number VARCHAR, email_address varchar);
 

INSERT INTO public.tb_emp_hrms
(employee_number, attribute3, first_name, middle_names, last_name, email_address, supervisor_emp_no, ROLE, lob_code,last_working_date, mobile_number, is_active,branch_code)
SELECT * from jsonb_to_recordset(cast(v_request as jsonb))
   as (employee_number varchar,attribute3 VARCHAR, first_name VARCHAR, middle_names VARCHAR, last_name VARCHAR, email_address varchar, supervisor_emp_no varchar, ROLE varchar, lob_code varchar,last_working_date varchar, mobile_number varchar , is_active varchar,branch_code varchar);
 update tb_role_master_stagging
   set process_flag ='Y'
    where service_request_id =x_service_request_id
  and processing_request_id = x_processing_request_id
   and upper(table_name) ='TB_EMP_HRMS';
 
  GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  -- added on 8march2022
IF NUM_ROWS  > 0 THEN
         V_RESULT = 'DATA INSERTED WITH :  '||x_service_request_id;
         V_RESULT_1 = 'SUCCESS';
ELSE
V_RESULT_1 = 'FAILED';
    V_RESULT = 'DATA CAN NOT BE INSERTED WITH :  '||x_service_request_id;
    end if;
   
--  elsif v_request1 is not null then -- added on 8march2022
--
-- INSERT INTO public.tb_se_app_mapping
--(se_id, approver_id, internal_flag)
--SELECT * from jsonb_to_recordset(cast(v_request1 as jsonb))
--   as (se_id varchar,approver_id VARCHAR , internal_flag VARCHAR);
--
-- update tb_role_master_stagging
--   set process_flag ='Y'
--    where service_request_id =x_service_request_id
--  and processing_request_id = x_processing_request_id
--   and upper(table_name) ='TB_SE_APP';
--
--  GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  -- added on 8march2022
-- IF NUM_ROWS  > 0 THEN
--         V_RESULT = 'DATA INSERTED WITH :  '||x_service_request_id;
--         V_RESULT_1 = 'SUCCESS';
-- ELSE
-- V_RESULT_1 = 'FAILED';
--    V_RESULT = 'DATA CAN NOT BE INSERTED WITH :  '||x_service_request_id;
--  end if;
--
--  elsif v_request2 is not null then -- added on 8march2022
--  
--INSERT INTO public.tb_branch_rcu_corrector_mapping
--(rcu_corrector_id, branch)
--SELECT * from jsonb_to_recordset(cast(v_request2 as jsonb))
--   as (rcu_corrector_id varchar,branch VARCHAR);
--  
-- update tb_role_master_stagging
--   set process_flag ='Y'
--    where service_request_id =x_service_request_id
--  and processing_request_id = x_processing_request_id
--   and upper(table_name) ='TB_BRANCH_RCU';
--
-- GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
-- IF NUM_ROWS  > 0 THEN
--         V_RESULT = 'DATA INSERTED WITH :  '||x_service_request_id;
--         V_RESULT_1 = 'SUCCESS';
-- ELSE
-- V_RESULT_1 = 'FAILED';
--    V_RESULT = 'DATA CAN NOT BE INSERTED WITH :  '||x_service_request_id;
-- END IF;

--elsif v_request3 is not null then -- added on 8march2022
--
--  INSERT INTO public.tb_function_roles_mst
--   (role_name, default_system_role_code)
--   SELECT * from jsonb_to_recordset(cast(v_request2 as jsonb))
-- as(role_name varchar,default_system_role_code VARCHAR);
--  
-- update tb_role_master_stagging
--      set process_flag ='Y'
--    where service_request_id =x_service_request_id
--      and processing_request_id = x_processing_request_id
--      and table_name ='FUNCTION_MASTER';
--
-- GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
-- IF NUM_ROWS  > 0 THEN
--         V_RESULT = 'DATA INSERTED WITH :  '||x_service_request_id;
--         V_RESULT_1 = 'SUCCESS';
-- ELSE
-- V_RESULT_1 = 'FAILED';
--    V_RESULT = 'DATA CAN NOT BE INSERTED WITH :  '||x_service_request_id;
-- END IF;

 ELSE
 V_RESULT_1 = 'FAILED';
    V_RESULT = 'REQUEST IS NULL';


END IF;

OPEN X_RESULT FOR
SELECT   V_RESULT,V_RESULT_1;
RETURN X_RESULT;  

END;$function$
;

CREATE OR REPLACE FUNCTION public.sp_insert_rework_lead_details(x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_login_id character varying, x_status character varying, x_final_remarks character varying)
 RETURNS void
 LANGUAGE plpgsql
AS $function$ declare 
V_ERR VARCHAR(4000);
V_SYSTIME_VAR timestamp;
NUM_ROWS INT;
--X_RESULT refcursor := 'cur';
v_add int := 0;
V_ADD_MMAX int;
v_count int;
V_FINAL VARCHAR(2000);
begin 
	select x_final_remarks into V_FINAL;
--raise notice '0:%',X_STATUS;
select count(*) into v_count  from tb_lead_rework_details
 where object_pri_key_1 = X_object_pri_key_1;

 if v_count > 0 AND X_STATUS IN ('BOM_REWORK','DVU_REWORK','RCU_REWORK') then 
--raise notice 'S:%',X_STATUS;
  select MAX(rework_iteration) into V_ADD_MMAX from tb_lead_rework_details
   where object_pri_key_1 = X_object_pri_key_1
   AND emp_id = x_login_id;
  v_add := 1;

INSERT INTO public.tb_lead_rework_details
(object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, object_data, emp_id,rework_iteration, section_id, status, status_remarks, screen_name, 
  status_update_user, status_timetstamp, created_by, created_timestamp, modified_by, modified_timestamp, rework_status, lead_remarks)
 select object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, 
                        object_data, "role",(coalesce(V_ADD_MMAX,0)+v_add), section_id,status, status_remarks, screen_name,
                        status_update_user, status_timetstamp,created_by,now(),modified_by, modified_timestamp, rework_status ,V_FINAL
					from tb_section_status tss 
					where object_pri_key_1 =x_object_pri_key_1
					 and "role" =x_login_id
					 and status ='N';
				
elsif v_count = 0 and  X_STATUS IN ('BOM_REWORK','DVU_REWORK','RCU_REWORK') AND  x_object_pri_key_1 is not NULL then

INSERT INTO public.tb_lead_rework_details
(object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, object_data, emp_id,rework_iteration, section_id, status, status_remarks, screen_name, 
  status_update_user, status_timetstamp, created_by, created_timestamp, modified_by, modified_timestamp, rework_status,lead_remarks)
 select object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, 
                        object_data, "role",'1', section_id,status, status_remarks, screen_name,
                        status_update_user, status_timetstamp,created_by,now(),modified_by, modified_timestamp, rework_status ,V_FINAL
					from tb_section_status tss 
					where object_pri_key_1 =x_object_pri_key_1
					 and "role" =x_login_id
					 and status ='N';
					
					
 ELSif v_count > 0 AND X_STATUS IN ('BOM_REWORK_APPROVED') then 

-- raise notice '1:%',X_STATUS;
update tb_lead_rework_details
set rm_se_remarks = x_final_remarks,
    rm_se_date = now(),
    RM_SE_ID = x_login_id
 where object_pri_key_1 = X_object_pri_key_1
   and rework_iteration =(select  max(rework_iteration ) from tb_lead_rework_details 
						where object_pri_key_1  = X_object_pri_key_1)
  and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =x_object_pri_key_1
					and fm.default_system_role_code ='Approver');

 ELSif v_count > 0 AND X_STATUS IN ('DVU_REWORK_APPROVED') then 
--raise notice '2:%',X_STATUS;
update tb_lead_rework_details
set rm_se_remarks = x_final_remarks,
    rm_se_date = now(),
    RM_SE_ID = x_login_id
 where object_pri_key_1 = X_object_pri_key_1
   and rework_iteration =(select  max(rework_iteration ) from tb_lead_rework_details 
						where object_pri_key_1  = X_object_pri_key_1
						  and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =X_object_pri_key_1
					and fm.default_system_role_code in ('DVU')))
  and emp_id in (select TEH.employee_number from tb_emp_hrms teh , 
                     tb_function_roles_mst fm , tb_section_status tss 
					where teh."role" = fm.role_name 
					and tss."role" =teh.employee_number 
					and tss.object_pri_key_1 =x_object_pri_key_1
					and fm.default_system_role_code ='DVU');


end if;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_insert_section_for_user(x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_object_data text, x_login_id character varying)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
  --x_result REFCURSOR := 'cur';
  v_journey_type varchar(200);
  NUM_ROWS INT;
  V_MANDATE VARCHAR(200);
  V_CPV VARCHAR(200);
 v_count int;
V_WORKFLOW varchar;
V_WORKFLOW_STATUS varchar;
v_group varchar;
v_object_type varchar;
obj_1 varchar;
obj_2 varchar;
obj_3 varchar;
v_obj_data text;
v_login_id varchar;
v_section_id varchar;
v_screen_name varchar;
v_WORK_VARIABLES varchar;
V_CODE varchar;
V_LOB_CODE varchar;
V_SCHEME_CODE varchar;
V_SCHEME_CODE1 varchar;
V_MOVE varchar;
x_count int;
v_ca_lob_code varchar;
vv_lob_code varchar;
v_RM_CODE  varchar;
cur_a CURSOR for select screen_name, section_id , group_name from tb_section_screen_mapping ;

BEGIN

	   
  v_object_type := x_object_type;
 obj_1 := x_object_pri_key_1;
obj_2 := x_object_pri_key_2;
obj_3 := x_object_pri_key_3;
v_obj_data := x_object_data;
v_login_id := x_login_id;


  
 select  CAST(X_OBJECT_DATA AS JSON)->'AOF'->>'WORKFLOW_JOURNEY' ,
         CAST(X_OBJECT_DATA AS JSON)->'AOF'->'INDIVIDUAL_STAKEHOLDERS'->0->'ADD_MHOLDER'->>'CODE' ,
         CAST(X_OBJECT_DATA AS JSON)->'AOF'->'BUS_DATA'->'EP2_DOCTYPE'->>'VALUE',
         cast(X_object_data as JSON)->'AOF'->>'WORKFLOW',
         cast(X_object_data as JSON)->'AOF'->>'WORKFLOW_STATUS',
         cast(X_object_data as JSON)->'AOF'->'WORK_VARIABLES'->>'IP_CHQ_FLAG',
          cast(X_object_data as JSON)->'AOF'->'LOB' ->>'CODE',
         cast(X_object_data as JSON)->'AOF'->'CA'->'SCHEME_CODE'->>'CODE',
         cast(X_object_data as JSON)->'AOF'->>'MOVE_TO_ASSISTED',
         cast(X_object_data as JSON)->'AOF'->>'RM_CODE'
         INTO  v_journey_type, V_MANDATE, V_CPV,V_WORKFLOW , V_WORKFLOW_STATUS,v_WORK_VARIABLES,V_LOB_CODE,V_SCHEME_CODE1,V_MOVE,v_RM_CODE;
        
         select count(value_code) into V_CODE from tb_lov_mst tlm where text_1 ='WBG' and value_code=V_LOB_CODE ;
        select count(scheme_code) into V_SCHEME_CODE from tb_product_master tlm 
        where (text_2 IN ('WBG') OR ((text_1 IN ('CC','OD')))) and scheme_code=V_SCHEME_CODE1;
       
    --    select lob_code into vv_lob_code from tb_emp_hrms teh where employee_number= v_login_id;
       
             select count(1) into v_ca_lob_code from tb_lov_mst tlm where text_1 ='WBG' and value_code=
         (select lob_code from tb_emp_hrms teh where employee_number= v_RM_CODE);
        
   raise notice 'T : %',v_journey_type;
  v_group := '0';
  

if v_journey_type = 'IN' and V_WORKFLOW = 'CA' and v_ca_lob_code ='0' and V_WORKFLOW_STATUS <> 'CPVAPPROVED' then
v_group := 'Group_1';
elsif v_journey_type = 'IN' and V_WORKFLOW = 'CA' and v_ca_lob_code >'0' and V_WORKFLOW_STATUS <> 'CPVAPPROVED' then
v_group := 'Group_2';
elsif v_journey_type = 'IN' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE ='0'  then
v_group := 'Group_14';
elsif v_journey_type = 'IN' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE >'0'  then
v_group := 'Group_15';

elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code ='0' and V_CPV ='1' and V_MANDATE ='1' then
v_group := 'Group_3';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code ='0' AND V_CPV !='1' and V_MANDATE !='1' then
v_group := 'Group_9';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code ='0' AND V_MANDATE !='1' and V_CPV ='1' then
v_group := 'Group_8';        -- Not MANDATE
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code ='0' AND V_MANDATE ='1' and V_CPV !='1' then
v_group := 'Group_7';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code >'0' AND V_MANDATE !='1' and V_CPV !='1' then
v_group := 'Group_6';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code >'0' AND V_MANDATE ='1' and V_CPV !='1' then
v_group := 'Group_4';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code >'0' AND V_MANDATE !='1' and V_CPV ='1' then
v_group := 'Group_5';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CA' and v_ca_lob_code >'0' AND V_MANDATE ='1' and V_CPV ='1' then
v_group := 'Group_23';

elsif v_journey_type = 'SP' and V_WORKFLOW =  'CADIY' and V_MOVE = 'Y' and V_CODE ='0' and V_CPV ='1' and V_MANDATE ='1' then
v_group := 'Group_16';
elsif v_journey_type = 'SP' and V_WORKFLOW =  'CADIY' and V_MOVE = 'Y' and V_CODE ='0' AND V_CPV !='1' and V_MANDATE !='1' then
v_group := 'Group_17';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE ='0' AND V_MANDATE !='1' and V_CPV ='1' then
v_group := 'Group_18';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE ='0' AND V_MANDATE ='1' and V_CPV !='1' then
v_group := 'Group_19';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE >'0' AND V_MANDATE !='1' and V_CPV !='1' then
v_group := 'Group_20';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE >'0' AND V_MANDATE ='1' and V_CPV !='1' then
v_group := 'Group_21';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE >'0' AND V_MANDATE !='1' and V_CPV ='1' then
v_group := 'Group_22';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'Y' and V_CODE >'0' AND V_MANDATE ='1' and V_CPV ='1' then
v_group := 'Group_24';

elsif v_journey_type = 'IN' and V_WORKFLOW = 'CADIY' and V_MOVE = 'N' and V_SCHEME_CODE>'0' then
v_group := 'Group_11';
elsif v_journey_type = 'IN' and V_WORKFLOW = 'CADIY' and V_MOVE = 'N' and V_SCHEME_CODE='0' then
v_group := 'Group_10';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'N' and V_SCHEME_CODE>'0' then
v_group := 'Group_13';
elsif v_journey_type = 'SP' and V_WORKFLOW = 'CADIY' and V_MOVE = 'N' and  V_SCHEME_CODE='0' then
v_group := 'Group_12';
end if;


SELECT COUNT(section_id) INTO V_COUNT FROM tb_section_status
   WHERE object_pri_key_1 =obj_1;


 for i in cur_a loop 
   
	   SELECT COUNT(section_id) INTO V_COUNT FROM tb_section_status 
       WHERE object_pri_key_1 = obj_1
	   AND SCREEN_NAME = i.SCREEN_NAME
	   and section_id  = i.section_id;
	 
if v_count = 0 then

 INSERT INTO public.tb_section_status_temp
(object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, "role", section_id, status, 
  screen_name, status_update_user, status_timetstamp, created_by, created_timestamp,group_name)
  values
  (v_object_type,obj_1,COALESCE(obj_2,'NA'), COALESCE(obj_3,'NA'),  v_login_id,
 i.section_id,'W', i.screen_name, v_login_id, current_timestamp, 'insertsectionsforusers', current_timestamp,i.group_name);




 elsif v_count> 0  THEN 
  update tb_section_status
       set status = 'W',
       role = (SELECT approver_id FROM tb_se_app_mapping where se_id = v_login_id),
	   status_timetstamp = CURRENT_TIMESTAMP
	   where object_pri_key_1 = obj_1;
	
   END IF;
end loop;

 INSERT INTO public.tb_section_status
(object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, "role", section_id, status, 
  screen_name, status_update_user, status_timetstamp, created_by, created_timestamp)
select v_object_type,obj_1,obj_2,obj_3,v_login_id,
section_id,'W',screen_name,v_login_id, current_timestamp, 'insertsectionsforusers', current_timestamp 
from tb_section_status_temp tssm where group_name=v_group;

select count(1) into x_count from tb_se_app_mapping where se_id = v_login_id;

if x_count >0 THEN 
  update tb_section_status
       set status = 'W',
       role = (SELECT approver_id FROM tb_se_app_mapping where se_id = v_login_id),
	   status_timetstamp = CURRENT_TIMESTAMP
	   where object_pri_key_1 = obj_1;
	  
	  end if;

truncate table public.tb_section_status_temp;


end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_insert_secugen_hits_dtls(x_role character varying, x_device_id character varying, x_rm character varying, x_lead_id character varying, x_status character varying, x_remarks character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
v_count int;
v_role varchar(100) := x_role ;
v_device_id varchar := x_device_id ;
v_rm varchar := x_rm;
v_lead_id varchar :=x_lead_id;
v_status varchar :=x_status;
v_remarks varchar :=x_remarks;
x_result refcursor := 'cur';

begin
--if(v_role <> '') then
--open x_result for
insert into tb_secugen_device_hits_dtls 
       (device_id,rm,lead_id,hit_time,status,remark,created_by,created_timestamp,modified_by,modified_timestamp)
       values(v_device_id,v_rm,v_lead_id,current_timestamp,v_status,v_remarks,'',current_timestamp,'',null);
 --open x_result for
   -- select 'S' as "status",
     --      'Data Inserted successfully' as "message";
     -- else 
      open x_result for
     select 'Success' as "status",
     'Data Updated' as "message";
   -- end if;
   return x_result ;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_insert_stagging_data(x_service_request_id character varying, x_processing_request_id character varying, x_table_name character varying, x_request character varying, x_process_flag character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT REFCURSOR:='cur';
v_count INT;
num_rows INT;
V_RESULT_1 text;
V_RESULT text;
V_RESULT_2 text;
v_rcu_corrector_request json:='{}';
BEGIN
--select coalesce(x_rcu_corrector_request ,'{}') into v_rcu_corrector_request;
if x_service_request_id is not null and x_processing_request_id is not null THEN
 INSERT INTO public.tb_role_master_stagging
   (service_request_id, processing_request_id, table_name, request, process_flag)
 VALUES(x_service_request_id, x_processing_request_id, x_table_name, cast(x_request as json), x_process_flag);

  --                      cast(v_rcu_corrector_request as json) );

 GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
IF NUM_ROWS  > 0 THEN
         V_RESULT = 'DATA INSERTED WITH :  '||x_service_request_id;
         V_RESULT_1 = 'SUCCESS';
         V_RESULT_2 = '01';
ELSE
V_RESULT_1 = 'FAILED';
    V_RESULT = 'DATA CAN NOT BE INSERTED WITH :  '||x_service_request_id;
   V_RESULT_2 = '02';
END IF;
 ELSE
 V_RESULT_1 = 'FAILED';
    V_RESULT = 'REQUEST IS NULL';
V_RESULT_2 = '02';

END IF;

OPEN X_RESULT FOR
SELECT   V_RESULT,V_RESULT_1,V_RESULT_2;
RETURN X_RESULT;  

END;$function$
;

CREATE OR REPLACE FUNCTION public.sp_insert_user_section_diy(x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_object_data text, x_login_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_object_data text;
v_status character varying;
v_section INT;
v_status_1 character varying;
begin

select  text_1,object_data  into v_status,v_object_data
from tb_cop_buss_obj_txn tcbot  where object_pri_key_1 =X_OBJECT_PRI_KEY_1;
select count(*) into v_section from tb_section_status tss  where object_pri_key_1 =X_OBJECT_PRI_KEY_1;


if v_status = 'CPVAPPROVED' and v_section = 0 then 
			perform public.sp_insert_section_for_user(x_object_type,x_object_pri_key_1,'','',x_object_data,x_login_id);
		
open x_result for select 'lead id exist';
return x_result;
else
open x_result for select 'NO lead id exist';
return x_result;
	
end if;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_job_update_acc_activated_status(x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_status character varying, x_login_id character varying)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
v_count INT;
BEGIN

select count(*) into v_count from tb_cop_buss_obj_txn tcbot 
 where object_pri_key_1= x_object_pri_key_1;

IF v_count >0 AND X_STATUS ='REJECTED' then

        UPDATE  TB_COP_BUSS_OBJ_TXN
           SET TEXT_1 = X_STATUS, 
               modified_by ='spjobupdateaccactivatedstatus',
               DEVICE_MODIFY_TIMESTAMP =current_timestamp, 
			   --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"AOF","DRAFT_FLAG"}','"226579"')			   
              OBJECT_DATA =JSONB_SET(CAST(OBJECT_DATA AS JSONB) , -- JSON OBJECT
                '{"AOF"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(OBJECT_DATA AS JSONB)->'AOF'|| JSONB_BUILD_OBJECT(
						'WORKFLOW_STATUS',X_STATUS
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  )
               --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"POD","GROUP","GROUP_STATUS"}','"GROUP_REJECTED"')
         WHERE object_pri_key_1 = x_object_pri_key_1;
        
        update tb_btc_prc_grp_disp
               set     prc_grp_disp = 'REJECT'       
               where object_pri_key_1 =x_object_pri_key_1
               and process_group ='RM_SE';

          update tb_cop_metadata_txn met
			set text_1 =X_STATUS,
			    OBJECT_DATA =JSONB_SET(CAST(OBJECT_DATA AS JSONB) , -- JSON OBJECT
                '{"AOF"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(OBJECT_DATA AS JSONB)->'AOF'|| JSONB_BUILD_OBJECT(
						'WORKFLOW_STATUS',X_STATUS
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  ),
			    workflow_status =X_STATUS,
			    modified_by ='spjobupdateaccactivatedstatus',
			    modified_timestamp  =current_timestamp,
			    device_modify_timestamp =current_timestamp
			 where object_pri_key_1 =x_object_pri_key_1;
			    
              
ELSIF v_count >0 AND X_STATUS ='ACCOUNT_ACTIVATED' then

        UPDATE  TB_COP_BUSS_OBJ_TXN
           SET TEXT_1 = X_STATUS,
               DEVICE_MODIFY_TIMESTAMP =current_timestamp, 
               modified_by ='spjobupdateaccactivatedstatus',
			   --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"AOF","DRAFT_FLAG"}','"226579"')			   
              OBJECT_DATA =JSONB_SET(CAST(OBJECT_DATA AS JSONB) , -- JSON OBJECT
                '{"AOF"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(OBJECT_DATA AS JSONB)->'AOF'|| JSONB_BUILD_OBJECT(
						'WORKFLOW_STATUS',X_STATUS
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  )
               --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"POD","GROUP","GROUP_STATUS"}','"GROUP_REJECTED"')
         WHERE object_pri_key_1 = x_object_pri_key_1;
                      
         update tb_cop_metadata_txn met
			set text_1 =X_STATUS,
			    workflow_status =X_STATUS,
			    modified_by ='spjobupdateaccactivatedstatus',
			    modified_timestamp  =current_timestamp,
			    device_modify_timestamp =current_timestamp
			 where object_pri_key_1 =x_object_pri_key_1;

             
--ELSIF v_count >0 AND X_STATUS ='RCU_REJECT' then
--
--        UPDATE  TB_COP_BUSS_OBJ_TXN
--           SET TEXT_1 = X_STATUS, 
--			   --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"AOF","DRAFT_FLAG"}','"226579"')			   
--              OBJECT_DATA =JSONB_SET(CAST(OBJECT_DATA AS JSONB) , -- JSON OBJECT
--                '{"AOF"}', -- PATH , SEPERATE CHILD PATH
--	                 CAST(OBJECT_DATA AS JSONB)->'AOF'|| JSONB_BUILD_OBJECT(
--						'WORKFLOW_STATUS',X_STATUS
--						)
--						::TEXT::JSONB -- VALUE
--	                  --,TRUE
--	                  )
--               --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"POD","GROUP","GROUP_STATUS"}','"GROUP_REJECTED"')
--         WHERE object_pri_key_1 = x_object_pri_key_1;
--        
--        update tb_btc_prc_grp_disp
--               set     prc_grp_disp = 'REJECT'       
--               where object_pri_key_1 =x_object_pri_key_1
--               and process_group ='RCU';
--              
--ELSIF v_count >0 AND X_STATUS ='BOM_REJECT' then
--
--        UPDATE  TB_COP_BUSS_OBJ_TXN
--           SET TEXT_1 = X_STATUS, 
--			   --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"AOF","DRAFT_FLAG"}','"226579"')			   
--              OBJECT_DATA =JSONB_SET(CAST(OBJECT_DATA AS JSONB) , -- JSON OBJECT
--                '{"AOF"}', -- PATH , SEPERATE CHILD PATH
--	                 CAST(OBJECT_DATA AS JSONB)->'AOF'|| JSONB_BUILD_OBJECT(
--						'WORKFLOW_STATUS',X_STATUS
--						)
--						::TEXT::JSONB -- VALUE
--	                  --,TRUE
--	                  )
--               --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"POD","GROUP","GROUP_STATUS"}','"GROUP_REJECTED"')
--         WHERE object_pri_key_1 = x_object_pri_key_1;
--        
--        update tb_btc_prc_grp_disp
--               set     prc_grp_disp = 'REJECT'       
--               where object_pri_key_1 =x_object_pri_key_1
--               and process_group ='BOM_APPROVER';              
--ELSIF v_count >0 AND X_STATUS ='DVU_REJECT' then
--
--        UPDATE  TB_COP_BUSS_OBJ_TXN
--           SET TEXT_1 = X_STATUS, 
--			   --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"AOF","DRAFT_FLAG"}','"226579"')			   
--              OBJECT_DATA =JSONB_SET(CAST(OBJECT_DATA AS JSONB) , -- JSON OBJECT
--                '{"AOF"}', -- PATH , SEPERATE CHILD PATH
--	                 CAST(OBJECT_DATA AS JSONB)->'AOF'|| JSONB_BUILD_OBJECT(
--						'WORKFLOW_STATUS',X_STATUS
--						)
--						::TEXT::JSONB -- VALUE
--	                  --,TRUE
--	                  )
--               --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"POD","GROUP","GROUP_STATUS"}','"GROUP_REJECTED"')
--         WHERE object_pri_key_1 = x_object_pri_key_1;
--        
--        update tb_btc_prc_grp_disp
--               set     prc_grp_disp = 'REJECT'       
--               where object_pri_key_1 =x_object_pri_key_1
--               and process_group ='DVU';              
                            
else null;

     
	
END IF;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_mb_authentication(x_org_id character varying, x_login_id character varying, x_process_id character varying, x_password character varying, x_auth_type character varying, x_app_id character varying, x_platform_type character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_ROLE VARCHAR(100);
user_count int;
ref refcursor := 'cur'; 
V_ROLE VARCHAR(20);
V_COUNT INT;
V_PASSWORD VARCHAR(20);
t_COUNT int;
begin
			  
select count(*) INTO V_COUNT from tb_emp_hrms teh 
  join tb_function_roles_mst fun on fun.role_name = teh."role" 
   where (teh.employee_number =x_login_id
   or UPPER(TEH.attribute3 )=UPPER(x_login_id))
  and fun.default_system_role_code = 'Sales Executive';
--raise notice 'q:%',V_COUNT;
 select count(*) INTO t_COUNT from tb_emp_hrms teh 
  join tb_function_roles_mst fun on fun.role_name = teh."role" 
   where (teh.employee_number =x_login_id
   or UPPER(TEH.attribute3) =UPPER(x_login_id));

  --  
--  	select count (*) INTO t_COUNT from tb_emp_hrms teh 
--          where employee_number =x_login_id
--           and is_active ='Y'
--           and cast(last_working_date as DATE) > CURRENT_DATE;

 
 
 if (x_password is not null AND x_password != '') AND V_COUNT > 0    then 

	SELECT count(user_id) INTO user_count from tb_user_mst tum 
      where user_id =x_login_id
          and user_password = md5(x_password);

      if user_count > 0  AND x_platform_type in ('ANDROID','IOS') then
	      OPEN ref FOR SELECT 
	           'SUCCESS' as "STATUS",
	           '01' as "RESPONSE_CODE";
	      return ref;
--	     
--	  elseif x_platform_type in ('WEB') then
--	      OPEN ref FOR SELECT 
--	           'SUCCESS' as "STATUS",
--	           '05' as "RESPONSE_CODE";
--	      return ref;
	   ELSE
	      OPEN ref FOR SELECT 
	           'FAILURE' as "STATUS",
	           '03' as "RESPONSE_CODE";
	      return ref;    
	  END IF;
	 raise notice '1:%','1';
 elsif V_COUNT > 0 and (x_password  = '' OR x_password is null AND x_platform_type in ('ANDROID','IOS')) then 
       raise notice '2:%','2';
       OPEN ref FOR SELECT 
           'SUCCESS' as "STATUS",
           '02' as "RESPONSE_CODE";
      return ref;
     raise notice '3:%','3';
 elsif t_COUNT > 0 and (x_password  = '' OR x_password is null) AND (x_platform_type in ('WEB')) then 
 
       
       OPEN ref FOR SELECT 
           'SUCCESS' as "STATUS",
           '05' as "RESPONSE_CODE";
      return ref;
 else open ref FOR SELECT 
           'FAILURE' as "STATUS",
          '04' as "RESPONSE_CODE";
 return ref;  
 
end if ;
   
RETURN ref;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_mb_get_account_activated_lead_count(x_login_id character varying, x_role character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_count int;
v_prc_grp VARCHAR(50);
v_role varchar(20);
v_id VARCHAR(50);
begin
SELECT jsonb_agg(row_to_json(t)) into v_data  from (
select count(cop.object_pri_key_1 ) as "COUNT"
  from tb_cop_buss_obj_txn cop  
    join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
     and disp.process_group ='ACCOUNT'
     and disp.prc_grp_disp ='SUCCESS'
    JOIN tb_btc_accesscontrol ac on cop.OBJECT_PRI_KEY_1 = ac.object_pri_key_1 
     WHERE ac.emp_id = x_login_id
      AND cop.IS_ACTIVE='Y'
      and system_role ='RM'
     and COP.object_data::json->'AOF'->>'WORKFLOW_JOURNEY' = x_role
    and COP.text_1 ='ACCOUNT_ACTIVATED')t;
	  
if (v_data  ='' or v_data is null)then
v_data = 'No User Exist';
end if;
open X_RESULT for
select v_data as "OBJECT";
return X_RESULT;


	end;$function$
;

CREATE OR REPLACE FUNCTION public.sp_mb_get_account_activated_lead_details(x_login_id character varying, x_role character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_count int;
v_prc_grp VARCHAR(50);
v_role varchar(20);
v_id VARCHAR(50);
begin
SELECT jsonb_agg(row_to_json(t)) into v_data  from (
select distinct cop.OBJECT_PRI_KEY_1  AS "OBJECT_PRI_KEY_1",
	OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' AS "CONTACT_NUMBER",
	cop.OBJECT_TYPE AS "OBJECT_TYPE", 	 
	cop.OBJECT_PRI_KEY_2 AS "OBJECT_PRI_KEY_2",
	cop.OBJECT_PRI_KEY_3 AS "OBJECT_PRI_KEY_3",
	object_data::json->'AOF'->>'MODIFIED_LEAD_ID' as "MAOF_ID",
	object_data::json->'AOF'->>'LEAD_ID' as "AOF_ID",
	TO_CHAR(DEVICE_MODIFY_TIMESTAMP, 'DD-MM-YYYY HH24:MI:SS') as "LAST_MODIFIED_ON",
	TO_CHAR(DEVICE_CREATE_TIMESTAMP, 'DD-MM-YYYY HH24:MI:SS') as "LEAD_CREATED_ON",
	case when object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('SUBMITTED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED')
	     then 'RM_SE'
	     when object_data::json->'AOF'->>'WORKFLOW_STATUS' IN ('BOM_APPROVED','BOM_REWORK')
	     then 'BOM_APPROVER'
	     when object_data::json->'AOF'->>'WORKFLOW_STATUS' IN ('DVU_APPROVED','DVU_REWORK')
	     then 'DVU'
	     when object_data::json->'AOF'->>'WORKFLOW_STATUS' IN ('RCU_APPROVED','RCU_REWORK')
	     then 'RCU'
	     else object_data::json->'AOF'->>'WORKFLOW_STATUS' end as "DESP",
--	case when (disp.process_group ='ACCOUNT'and disp.prc_grp_disp ='SUCCESS')
--	     then 'ACCOUNT ACTIVATED'
--	     else object_data::json->'AOF'->>'WORKFLOW_STATUS' end as "STATUS",
	      object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STATUS",
	object_data::json->'AOF'->'BUS_DATA'->>'ORG_PAN_NAME' as "ENTITY_NAME",
	object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_PAN_NAME' as "NAME",
	object_data::JSON->'AOF'->'CA'->>'ACCOUNT_NO' as "ACCOUNT_NO",
	object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "ENTITY_CRN",
	case when object_data::json->'AOF'->>'WORKFLOW_JOURNEY' ='IN'
	     then 'Individual'
	     when object_data::json->'AOF'->>'WORKFLOW_JOURNEY' ='SP'
	     then 'Sole - Prop'
	     else object_data::json->'AOF'->>'WORKFLOW_JOURNEY' end as JOURNEY_TYPE 
  from tb_cop_buss_obj_txn cop  
    join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
     and disp.process_group ='ACCOUNT'
     and disp.prc_grp_disp ='SUCCESS'
    JOIN tb_btc_accesscontrol ac on cop.OBJECT_PRI_KEY_1 = ac.object_pri_key_1 
     WHERE ac.emp_id = x_login_id
      AND cop.IS_ACTIVE='Y'
      and system_role ='RM'
     and COP.object_data::json->'AOF'->>'WORKFLOW_JOURNEY' = x_role
     and COP.text_1 ='ACCOUNT_ACTIVATED')t;
	  
if (v_data  ='' or v_data is null)then
v_data = 'No User Exist';
end if;
open X_RESULT for
select v_data as "OBJECT";
return X_RESULT;


	end;$function$
;

CREATE OR REPLACE FUNCTION public.sp_mb_get_aof_image_data(x_login_id character varying, x_process_id character varying, x_session_id character varying, x_modify_timestamp character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
 DECLARE 
	X_RESULT refcursor:='cur';                                                      
  	V_ERR VARCHAR(4000);
  X_ROLE VARCHAR(200);
begin
	
	

	
    OPEN X_RESULT FOR
  				 Select null;
     
    RETURN X_RESULT;
   
  /*EXCEPTION WHEN OTHERS THEN

   OPEN X_RESULT FOR SELECT '' as "ISSUCCESSFUL",
						'' as "ERROR_REMARKS",
                        '' as "PRIMARY_KEY_VALUE",
                       '' as "PRIMARY_KEY_COLUMN_NAME",
                        TO_CHAR(now(),'YYYY-MM-DD hh24:mi:SS') as "LAST_SYNC_TIMESTAMP",
                        'tb_image_data_obj' as "TABLENAME",
                        '' as "ACTION";

return X_RESULT;   */
  
END;$function$
;

CREATE OR REPLACE FUNCTION public.sp_mb_get_dvu_genral_lead_details(x_object_pri_key_1 character varying, x_login_id character varying, x_role character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT refcursor:='cur';
v_state   TEXT;
v_msg     TEXT;
v_detail  TEXT;
v_hint    TEXT;
v_context TEXT;
V_RESULT text;
NUM_ROWS INT;
V_TEXT VARCHAR(50);
begin
--
--select COP.text_1 into V_TEXT From tb_cop_buss_obj_txn cop  
--		join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 									
--		  and disp.process_group = 'DVU' and disp.prc_grp_disp = 'WIP'
--		 join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1  
--		   and acc.system_role  = 'DVU'
--		 and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_ASSIGNED')
--		where COP.object_pri_key_1 =x_object_pri_key_1;
--	
	select COP.text_1 into V_TEXT   From tb_cop_buss_obj_txn_hist cop  		 
		where COP.object_pri_key_1 =x_object_pri_key_1
	and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('DVU_ASSIGNED'); 
	

	
if V_TEXT = 'DVU_ASSIGNED' then 
  V_TEXT := 'Y';
 
ELSIf (V_TEXT = ''or V_TEXT is null) then 
   v_text:= 'N' ;

end IF;
OPEN X_RESULT for
select v_text as "STATUS";
RETURN X_RESULT;


/*
EXCEPTION WHEN OTHERS THEN

V_ERR:=SQLERRM;
OPEN ref FOR SELECT '' as "UNSUCCESSFUL",
'In-correct data. Some error has Occured' as "ERROR_REMARKS",
                         'tb_client_master' as "TABLENAME",
                '' as "ACTION";

return ref;                                    
*/
END;
 $function$
;

CREATE OR REPLACE FUNCTION public.sp_mb_get_dvu_genral_lead_rework_details(x_object_pri_key_1 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT refcursor:='cur';
v_state   TEXT;
v_msg     TEXT;
v_detail  TEXT;
v_hint    TEXT;
v_context TEXT;
V_RESULT text;
NUM_ROWS INT;
V_TEXT VARCHAR(50);
begin

select COP.text_1 into V_TEXT From tb_cop_buss_obj_txn_hist cop  
 where COP.object_pri_key_1 =x_object_pri_key_1
 and text_1 ='DVU_REWORK'
limit 1
;
	
	
if V_TEXT = 'DVU_REWORK' then 
  V_TEXT := 'Y';
 
ELSIf (V_TEXT = ''or V_TEXT is null) then 
       v_text:= 'N' ;
end IF;

OPEN X_RESULT for
select v_text as "STATUS";
RETURN X_RESULT;

END;
 $function$
;

CREATE OR REPLACE FUNCTION public.sp_mb_get_exception(x_login_id character varying, x_role character varying, x_object_pri_key_1 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_role varchar(100);
v_count int;
v_prc_grp VARCHAR(100);
v_prc_grp_disp VARCHAR(100);
begin
select role into v_role from tb_emp_hrms 
 where employee_number = x_login_id;

if x_role in ('Ops CA','BSG','Product Supervisor') then 
select json_agg(row_to_json(t)) into v_data from
(select case when DISP.prc_grp_disp = 'WAIT'
			     then (select DISP.process_group from tb_service_audit tsa
			     join tb_btc_prc_grp_disp CFG on CFG.process_group = TSA.process_group 
				  where TSA.object_pri_key_1 =COP.object_pri_key_1 
				order by TSA.created_timestamp desc limit 1  )
			     else (select TSA.process_group from tb_service_audit tsa
			     join tb_btc_prc_grp_disp_cfg CFG on CFG.process_group = TSA.process_group 
				  where TSA.object_pri_key_1 =COP.object_pri_key_1 
				order by TSA.created_timestamp desc limit 1  )
				end as "PROCESS_GROUP", --APINAME--
  case when DISP.prc_grp_disp = 'WAIT'
			     then (select DISP.prc_grp_disp from tb_service_audit tsa 
				 where object_pri_key_1 =COP.object_pri_key_1 
				order by created_timestamp desc
				limit 1)
			     else (select tsa.prc_grp_disp from tb_service_audit tsa 
				 where object_pri_key_1 =COP.object_pri_key_1 
				order by created_timestamp desc
				limit 1  )end as  "DISPOSITION", 
  case when DISP.prc_grp_disp = 'WAIT'
			     then 'NA'
			     else (select request_payload
			             from tb_service_audit tsa 
			             where object_pri_key_1 =COP.object_pri_key_1 
			             order by created_timestamp desc limit 1)
			             end as "REQUEST_TAG",
  case when DISP.prc_grp_disp = 'WAIT'
			     then 'NA'
			     else(select case when (response_payload is null or response_payload='') 
			 			then exception_payload 
						when response_payload is not null 
						then response_payload 
						else '' end 
			     from tb_service_audit tsa 
			     where object_pri_key_1 =COP.object_pri_key_1 
			     order by created_timestamp desc limit 1  ) end as "ERROR_TAG" 
from tb_cop_buss_obj_txn cop ,  tb_btc_prc_grp_disp disp 
left join (select * from tb_btc_prc_grp_disp tbpgd where tbpgd.process_group = 'CERSAI') CER 
               on DISP.object_pri_key_1 = CER.object_pri_key_1 
left join (select * from tb_btc_prc_grp_disp tbpgd where  tbpgd.process_group = 'FATCA Handoff') HAN
               on DISP.object_pri_key_1 = HAN.object_pri_key_1 
left join (select * from tb_btc_prc_grp_disp tbpgd where  tbpgd.process_group = 'GSTIN') GST 
      on DISP.object_pri_key_1 = GST.object_pri_key_1 
left join (select * from tb_btc_prc_grp_disp tbpgd where  tbpgd.process_group = 'ACCOUNT') ACC
      on DISP.object_pri_key_1 = ACC.object_pri_key_1       
  where  cop.object_pri_key_1 = disp.object_pri_key_1
  and cop.object_pri_key_1 = x_object_pri_key_1 
  and disp.process_group in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNTCASA','ACCOUNT','ACCOUNTCASA','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')
  and disp.prc_grp_disp in ('FAILURE','WAIT')
  and DISP.process_group in (select process_group from tb_service_audit tsa2
                              where TSA2.object_pri_key_1 =DISP.object_pri_key_1
                                order by created_timestamp desc limit 1)) T;

else 
v_data = 'No Data';
--v_data = '[{"code":"","value":"No Data"}]';
end if ;
if (v_data = '' or v_data is null)
then --v_data := '';
null;
--'[{"code":"","value":"No Data"}]';
--No Leads present for this ID
--NULL;--= '[{"code":"","value":"No DATA exist"}]';

END IF;
 OPEN x_result FOR SELECT 
            v_data  AS    "OBJECT";
              return x_result;     
            
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_mb_get_progress_lead_details(x_login_id character varying, x_role character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_count int;
v_prc_grp VARCHAR(50);
v_id VARCHAR(50);
begin
SELECT jsonb_agg(row_to_json(t)) into v_data  from (
select distinct cop.OBJECT_PRI_KEY_1  AS "OBJECT_PRI_KEY_1",
	OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' AS "CONTACT_NUMBER",
	cop.OBJECT_TYPE AS "OBJECT_TYPE", 	 
	cop.OBJECT_PRI_KEY_2 AS "OBJECT_PRI_KEY_2",
	cop.OBJECT_PRI_KEY_3 AS "OBJECT_PRI_KEY_3",
	object_data::json->'AOF'->>'MODIFIED_LEAD_ID' as "MAOF_ID",
	object_data::json->'AOF'->>'LEAD_ID' as "AOF_ID",
	TO_CHAR(DEVICE_MODIFY_TIMESTAMP, 'DD-MM-YYYY HH24:MI:SS') as "LAST_MODIFIED_ON",
	TO_CHAR(DEVICE_CREATE_TIMESTAMP, 'DD-MM-YYYY HH24:MI:SS') as "LEAD_CREATED_ON",
	case when object_data::json->'AOF'->>'WORKFLOW_STATUS' in ('BOM_REWORK','DVU_REWORK')
	     then 'RM_SE'
	     when object_data::json->'AOF'->>'WORKFLOW_STATUS' IN ('SUBMITTED','BOM_REWORK_APPROVED','DVU_REWORK_APPROVED')
	     then 'APPROVER'
	     when object_data::json->'AOF'->>'WORKFLOW_STATUS' IN ('BOM_APPROVED','DVU_ASSIGNED','BOM_DVU_REWORK_APPROVED')
	     then 'DVU'
	     when object_data::json->'AOF'->>'WORKFLOW_STATUS' IN ('DVU_APPROVED','RCU_ASSIGNED','RCU_REWORK_APPROVED')
	     then 'MID OFFICE'
	     when object_data::json->'AOF'->>'WORKFLOW_STATUS' IN ('RCU_REWORK')
	     then 'CORRECTOR'
	     else object_data::json->'AOF'->>'WORKFLOW_STATUS' end as "DESP",
	object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STATUS",
	object_data::json->'AOF'->'BUS_DATA'->>'ORG_PAN_NAME' as "ENTITY_NAME",
	object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_PAN_NAME' as "NAME",
	object_data::JSON->'AOF'->'CA'->>'ACCOUNT_NO' as "ACCOUNT_NO",
	object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "ENTITY_CRN",
	case when object_data::json->'AOF'->>'WORKFLOW_JOURNEY' ='IN'
	     then 'Individual'
	     when object_data::json->'AOF'->>'WORKFLOW_JOURNEY' ='SP'
	     then 'Sole - Prop'
	     else object_data::json->'AOF'->>'WORKFLOW_JOURNEY' end as JOURNEY_TYPE 
  from tb_cop_buss_obj_txn cop  
    join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
     and disp.process_group  in  ('BOM_APPROVER','RM_SE','DVU','RCU','OPS_ERROR','CIF','FATCA Handoff','SIGNATURE','CERSAI','CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN','GSTIN')
     and disp.prc_grp_disp not in ('ASSIGN','REJECT','REWORK')
    JOIN tb_btc_accesscontrol ac on cop.OBJECT_PRI_KEY_1 = ac.object_pri_key_1 
     WHERE ac.emp_id = x_login_id
      AND cop.IS_ACTIVE='Y'
      and COP.object_data::JSON->'AOF'->>'WORKFLOW_STATUS' not in ('ASSIGNED','REJECTED','BOM_REJECT','DVU_REJECT','RCU_REJECT','DVU_REWORK','BOM_REWORK','ACCOUNT_ACTIVATED','MOVETOASSISTED','WIP','CPVAPPROVED','MIDOFFDROP','VKYC_UNABLE','SYSTEMWAIT','ASSIGNMENTPENDING','APPROVED','VKYC_UNABLE')
--	                                                             'BOM_REWORK_APPROVED','DVU_REWORK_APPROVED')
     and COP.object_data::json->'AOF'->>'WORKFLOW_JOURNEY' = x_role)t;
	  
if (v_data  ='' or v_data is null)then
v_data = 'No User Exist';
end if;
open X_RESULT for
select v_data as "OBJECT";
return X_RESULT;


	end;$function$
;

CREATE OR REPLACE FUNCTION public.sp_mb_get_rcu_genral_lead_details(x_object_pri_key_1 character varying, x_login_id character varying, x_role character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT refcursor:='cur';
v_state   TEXT;
v_msg     TEXT;
v_detail  TEXT;
v_hint    TEXT;
v_context TEXT;
V_RESULT text;
NUM_ROWS INT;
V_TEXT VARCHAR(50);
begin
--
--select COP.text_1 into V_TEXT From tb_cop_buss_obj_txn cop  
-- join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1
--  and disp.process_group = 'RCU' and disp.prc_grp_disp = 'WIP'
-- join tb_btc_accesscontrol acc on disp.object_pri_key_1 = acc.object_pri_key_1  
--   and acc.system_role  = 'RCU'
-- and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_ASSIGNED')
-- where COP.object_pri_key_1 =x_object_pri_key_1;
--
select COP.text_1 into V_TEXT   From tb_cop_buss_obj_txn_hist cop  
where COP.object_pri_key_1 =x_object_pri_key_1
and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RCU_ASSIGNED');



if V_TEXT = 'RCU_ASSIGNED' then
  V_TEXT := 'Y';
 
ELSIf (V_TEXT = ''or V_TEXT is null) then
   v_text:= 'N' ;

end IF;
OPEN X_RESULT for
select v_text as "STATUS";
RETURN X_RESULT;


/*
EXCEPTION WHEN OTHERS THEN

V_ERR:=SQLERRM;
OPEN ref FOR SELECT '' as "UNSUCCESSFUL",
'In-correct data. Some error has Occured' as "ERROR_REMARKS",
                         'tb_client_master' as "TABLENAME",
                '' as "ACTION";

return ref;                                    
*/
END;
 $function$
;

CREATE OR REPLACE FUNCTION public.sp_mb_get_rejected_lead_details(x_login_id character varying, x_role character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
v_data text;
v_count int;
v_prc_grp VARCHAR(50);
v_role varchar(20);
v_id VARCHAR(50);
begin
SELECT jsonb_agg(row_to_json(t)) into v_data  from (
select distinct cop.OBJECT_PRI_KEY_1  AS "OBJECT_PRI_KEY_1",
	OBJECT_DATA::JSON->'AOF'->>'PRIMARY_CONTACT_MOBILE' AS "CONTACT_NUMBER",
	cop.OBJECT_TYPE AS "OBJECT_TYPE", 
	cop.OBJECT_PRI_KEY_2 AS "OBJECT_PRI_KEY_2",
	cop.OBJECT_PRI_KEY_3 AS "OBJECT_PRI_KEY_3",
	object_data::json->'AOF'->>'MODIFIED_LEAD_ID' as "MAOF_ID",
	object_data::json->'AOF'->>'LEAD_ID' as "AOF_ID",
	to_char(DEVICE_MODIFY_TIMESTAMP ,'YYYY-MM-DD HH24:MI:SS')as "LAST_MODIFIED_ON",
	object_data::json->'AOF'->>'WORKFLOW_REMARKS' as "REMARKS",
	to_char(DEVICE_CREATE_TIMESTAMP ,'YYYY-MM-DD HH24:MI:SS')as "LEAD_CREATED_ON",
	object_data::json->'AOF'->>'WORKFLOW_STATUS' as "STATUS",
	object_data::json->'AOF'->'BUS_DATA'->>'ORG_PAN_NAME' as "ENTITY_NAME",
	object_data::JSON->'AOF'->'BUS_DATA'->>'ORG_PAN_NAME' as "NAME",
	object_data::JSON->'AOF'->'CA'->>'ACCOUNT_NO' as "ACCOUNT_NO",
	cop.TEXT_2 as "REMARKS",
	object_data::JSON->'AOF'->'CA'->>'CRN_ENTITY' as "ENTITY_CRN",
	case when object_data::json->'AOF'->>'WORKFLOW_JOURNEY' ='IN'
	     then 'Individual'
	     when object_data::json->'AOF'->>'WORKFLOW_JOURNEY' ='SP'
	     then 'Sole - Prop'
	     else object_data::json->'AOF'->>'WORKFLOW_JOURNEY' end as JOURNEY_TYPE 
  from tb_cop_buss_obj_txn cop  
    join tb_btc_prc_grp_disp disp on cop.object_pri_key_1 = disp.object_pri_key_1 
     and disp.process_group  in  ('BOM_APPROVER','RM_SE','DVU','RCU') and disp.prc_grp_disp in ('REJECT')
    JOIN tb_btc_accesscontrol ac on cop.OBJECT_PRI_KEY_1 = ac.object_pri_key_1 
     WHERE ac.emp_id = x_login_id
      AND cop.IS_ACTIVE='Y' 
     and COP.object_data::json->'AOF'->>'WORKFLOW_JOURNEY' = x_role )t;
	  
if (v_data  ='' or v_data is null)then
v_data = 'No User Exist';
end if;
open X_RESULT for
select v_data as "OBJECT";
return X_RESULT;


	end;$function$
;

CREATE OR REPLACE FUNCTION public.sp_mb_insert_aof_image_data(x_form_id character varying, x_control_id character varying, x_image_dfn_id character varying, x_doc_id character varying, x_image_name character varying, x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_image_stream text, x_version_no character varying, x_modification_no character varying, x_login_id character varying, x_modify_emp_id character varying, x_create_app_id character varying, x_modify_app_id character varying, x_is_active character varying, x_device_create_timestamp character varying, x_device_modify_timestamp character varying, x_pw_session_id character varying, x_process_id character varying, x_doc_type character varying, x_doc_bundle_id character varying, x_file_type character varying, x_file_path character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
DECLARE X_RESULT refcursor;
V_ERR VARCHAR(4000);
V_SYSTIME_VAR  TIMESTAMP;
V_FCU_REQUIRED VARCHAR(1) DEFAULT 'N';
V_LEGAL_REQUIRED VARCHAR(1)  DEFAULT 'N';
V_TECHNICAL_REQUIRED VARCHAR(1)  DEFAULT 'N';
v_imagecount INTEGER;
v_pdf_image_count  INTEGER;
v_count INTEGER;  
img_count  int;
num_rows INT;
BEGIN

--     V_SYSTIME_VAR := now();
--    
--    
--    select count(*) into img_count from TB_IMAGE_DATA_OBJ
--     WHERE  IMAGE_NAME = X_IMAGE_NAME;
--    
--    if img_count <> 0 then     
--
--     UPDATE TB_IMAGE_DATA_OBJ
--      SET  FORM_ID                =  X_FORM_ID ,
--       CONTROL_ID                 = X_CONTROL_ID, 
--       IMAGE_DFN_ID               = X_IMAGE_DFN_ID ,   
--       DOC_ID                     = X_DOC_ID ,
--       OBJECT_TYPE                = X_OBJECT_TYPE,
--       OBJECT_PRI_KEY_1           = X_OBJECT_PRI_KEY_1,
--       OBJECT_PRI_KEY_2           = COALESCE(X_OBJECT_PRI_KEY_2,'NA'),
--       OBJECT_PRI_KEY_3           = COALESCE(X_OBJECT_PRI_KEY_3,'NA'),
--       IMAGE_STREAM               = X_IMAGE_STREAM,
--       SERVER_VERSION_integer      = X_VERSION_NO ,
--       DEVICE_MODIFICATION_integer = X_MODIFICATION_NO ,
--       MODIFY_EMP_ID            = X_MODIFY_EMP_ID,
--       MODIFY_APP_ID = X_MODIFY_APP_ID,
--       IS_ACTIVE                  = X_IS_ACTIVE,
--       LAST_PW_SESSION_ID         = X_PW_SESSION_ID,
--       DEACTIVATED_BY             = (CASE WHEN X_IS_ACTIVE='N' THEN X_LOGIN_ID ELSE NULL END),
--       DEACTIVATED_BY_PRC         = (CASE WHEN X_IS_ACTIVE='N' THEN X_PROCESS_ID ELSE NULL END),
--       DEACTIVATED_TIMESTAMP      = (CASE WHEN X_IS_ACTIVE='N' THEN now() ELSE NULL END),
--       MODIFIED_TIMESTAMP         = now(),
--       DOC_TYPE=  X_DOC_TYPE,
--       DOC_BUNDLE_ID = X_DOC_BUNDLE_ID ,
--       FILE_TYPE = X_FILE_TYPE,
--       FILE_PATH =  X_FILE_PATH ,
--       MODIFIED_BY = X_LOGIN_ID
--       WHERE  IMAGE_NAME = X_IMAGE_NAME;
--
--      else
--      
--      INSERT
--          INTO TB_IMAGE_DATA_OBJ
--          (
--              FORM_ID,
--              CONTROL_ID,
--              IMAGE_DFN_ID,
--              DOC_ID,
--              IMAGE_NAME,
--              OBJECT_TYPE,
--              OBJECT_PRI_KEY_1,
--              OBJECT_PRI_KEY_2,
--              OBJECT_PRI_KEY_3,
--              IMAGE_STREAM,
--              SERVER_VERSION_integer,
--              DEVICE_MODIFICATION_integer,
--              LOGIN_ID,
--              MODIFY_EMP_ID,
--              CREATE_APP_ID,
--              MODIFY_APP_ID,
--              IS_ACTIVE,
--              DOC_TYPE,
--              DOC_BUNDLE_ID ,
--              file_TYPE,
--              FILE_PATH ,
--            --  DEVICE_CREATE_TIMESTAMP,
--              CREATE_PW_SESSION_ID,
--              DEACTIVATED_BY,
--              DEACTIVATED_BY_PRC,
--              DEACTIVATED_TIMESTAMP,
--              CREATED_TIMESTAMP,
--              CREATED_BY
--            )
--            VALUES
--            (
--                X_FORM_ID ,
--               X_CONTROL_ID ,
--               X_IMAGE_DFN_ID ,  
--                X_DOC_ID ,
--                X_IMAGE_NAME,
--                X_OBJECT_TYPE,
--                X_OBJECT_PRI_KEY_1,
--                COALESCE(X_OBJECT_PRI_KEY_2,'NA'),
--              COALESCE(X_OBJECT_PRI_KEY_3,'NA'),
--                X_IMAGE_STREAM,
--                X_VERSION_NO ,
--                X_MODIFICATION_NO ,
--                X_LOGIN_ID,
--                X_MODIFY_EMP_ID,
--                X_CREATE_APP_ID,
--                X_MODIFY_APP_ID,
--                X_IS_ACTIVE,
--                X_DOC_TYPE,   
--                X_DOC_BUNDLE_ID ,
--                X_FILE_TYPE,
--                X_FILE_PATH ,
--                
--           --     X_DEVICE_CREATE_TIMESTAMP,
--                X_PW_SESSION_ID,
--                (CASE WHEN X_IS_ACTIVE='N' THEN X_LOGIN_ID ELSE NULL END), 
--                (CASE WHEN X_IS_ACTIVE='N' THEN X_PROCESS_ID ELSE NULL END), 
--                (CASE WHEN X_IS_ACTIVE='N' THEN now() ELSE NULL END),
--                now(),
--                X_LOGIN_ID
--                  );
--                  
--		
--   END IF;
--  
--  	OPEN X_RESULT FOR SELECT 'SUCCESS' as "ISSUCCESSFUL", 
--			                   '' as "ERROR_REMARKS",
--			                   X_IMAGE_NAME as "PRIMARY_KEY_VALUE",
--							   'IMAGE_NAME' as "PRIMARY_KEY_COLUMN_NAME",
--							   TO_CHAR(V_SYSTIME_VAR,'YYYY-MM-DD hh24:mi:SS') as "LAST_SYNC_TIMESTAMP",
--							   'tb_image_data_obj' as "TABLENAME",
--							  '' as "ACTION";
-- 
--	RETURN X_RESULT;
--    
----    COMMIT;
-- EXCEPTION WHEN OTHERS THEN
--
--   OPEN X_RESULT FOR SELECT '' as "ISSUCCESSFUL",
--						'In-correct data. Some error has Occured' as "ERROR_REMARKS",
--                        X_IMAGE_NAME as "PRIMARY_KEY_VALUE",
--                       'IMAGE_NAME' as "PRIMARY_KEY_COLUMN_NAME",
--                        TO_CHAR(V_SYSTIME_VAR,'YYYY-MM-DD hh24:mi:SS') as "LAST_SYNC_TIMESTAMP",
--                        'tb_image_data_obj' as "TABLENAME",
--                        '' as "ACTION";

return X_RESULT;   
                                   
END;$function$
;

CREATE OR REPLACE FUNCTION public.sp_mb_return_emp_number(x_login_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
V_ID VARCHAR(100);
user_count int;
ref refcursor := 'cur'; 
V_ROLE VARCHAR(20);
V_COUNT INT;
V_PASSWORD VARCHAR(20);
v_lower_login_id text;
begin
			  
	select lower(x_login_id) into v_lower_login_id;
 
	
select TEH.employee_number INTO V_ID from tb_emp_hrms teh 
  join tb_function_roles_mst fun on fun.role_name = teh."role" 
   where (lower(teh.employee_number) =v_lower_login_id
   or lower(TEH.attribute3) =v_lower_login_id);
--  and fun.default_system_role_code = 'Sales Executive';
  
 
 if  (V_ID is not null or V_ID!='')    then 
       OPEN ref FOR SELECT 
           V_ID as "EMPLOYEE_NUMBER",
           '01' as "RESPONSE_CODE",
      'SUCCESS' as "STATUS";
      return ref;
 else open ref FOR SELECT 
           'NO ID EXIST' as "EMPLOYEE_NUMBER",
           '02' as "RESPONSE_CODE",
      'FAILURE' as "STATUS";
 return ref;  
 
end if ;
   
RETURN ref;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_mb_vflow_authentication(x_org_id character varying, x_login_id character varying, x_process_id character varying, x_password character varying, x_auth_type character varying, x_app_id character varying, x_platform_type character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';
p_count int;
user_count int;
v_count int;
V_SYSTEM_ROLE VARCHAR(50);
V_ROLE VARCHAR(50);
begin
	select count (*) INTO v_count from tb_emp_hrms teh 
          where employee_number =x_login_id
           and is_active ='Y'
           and cast(last_working_date as DATE) > CURRENT_DATE;
          
       select fun.default_system_role_code  INTO V_SYSTEM_ROLE from tb_emp_hrms teh 
       join tb_function_roles_mst FUN on fun.role_name = teh."role" 
         where employee_number = x_login_id;
 if v_count>0 and (x_password != '' or x_password is not null )then 
	
	SELECT count(user_id) INTO user_count from tb_user_mst tum 
      where user_id = x_login_id
          and user_password = md5(x_password);
	  
      if (x_platform_type in ('WEB' )and user_count > 0 and V_SYSTEM_ROLE!='Sales Executive' ) then

         OPEN x_result FOR SELECT 'y'  AS    "p_gprs_string";
              return x_result;     
           ELSE
              OPEN x_result FOR SELECT 'y'  AS  "p_gprs_string";
             return x_result;
            END IF;
  else 

         OPEN x_result FOR SELECT 'y'  AS  "p_gprs_string";
             return x_result;

END IF;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_pr_check_is_lead_assign_ru(x_object_pri_key_1 character varying, x_login_id character varying, x_role character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT refcursor:='cur';
v_state   TEXT;
v_msg     TEXT;
v_detail  TEXT;
v_hint    TEXT;
v_context TEXT;
V_RESULT text;

V_flag VARCHAR(50);
v_cnt int;
begin

  select count(1) 
    into v_cnt   
    From tb_cop_buss_obj_txn_hist cop  		 
   where COP.object_pri_key_1 =x_object_pri_key_1
	 and COP.object_data::json->'AOF'->>'WORKFLOW_STATUS'in ('RU_ASSIGN'); 
	

	
	if v_cnt >0 then 
	  V_flag := 'Y';
	Else  
	   V_flag:= 'N' ;
	end IF;

 OPEN X_RESULT for
   select V_flag as "STATUS";

 RETURN X_RESULT;


/*
EXCEPTION WHEN OTHERS THEN

V_ERR:=SQLERRM;
OPEN ref FOR SELECT '' as "UNSUCCESSFUL",
'In-correct data. Some error has Occured' as "ERROR_REMARKS",
                         'tb_client_master' as "TABLENAME",
                '' as "ACTION";

return ref;                                    
*/
END;
 $function$
;

CREATE OR REPLACE FUNCTION public.sp_priv_program(p_constitution_type character varying, p_banking_type character varying, p_program_opt character varying, p_prog_variant character varying, p_sub_class character varying, p_acc_vrnt character varying, p_parent_id character varying, p_class_to_flow character varying, p_class_front_end character varying, p_ip_intial character varying, p_scheme_code character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$                                             
declare                                                  
P_RESULT refcursor:='cur';                            
v_data text;
begin 
 if P_PROGRAM_OPT in ('Branch Privy','Priority Privy') then 
	
	if  p_constitution_type is not null  
	and p_banking_type is not null 
	and P_PROGRAM_OPT IS NOT NULL 
	and (trim(P_PROG_VARIANT) is null or trim(P_PROG_VARIANT)='') THEN
  
  
  SELECT
        REPLACE(CONCAT('{"object": [{"code": "","value": "--select--"},', ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(T))), '}'),'},[{','},{')  into v_data
      FROM (  SELECT DISTINCT PROGRAM_VARIANT  as "code",
                              PROGRAM_VARIANT as "value"
    FROM TB_PROGRAM_PRIV
    WHERE PROGRAM_OPTION=P_PROGRAM_OPT 
	and constitution_type = p_constitution_type
	and banking_type = p_banking_type
	AND INTERNAL_FLAG='Y'
    )t;   
  
  OPEN P_RESULT FOR 
      select  v_data  as "DATA";
  return P_RESULT; 


  elsif p_constitution_type is not null  
  and p_banking_type is not null 
  and P_PROG_VARIANT IS NOT NULL 
  AND P_PROGRAM_OPT IS NOT NULL 
  and (trim(P_SUB_CLASS) is null or trim(P_SUB_CLASS) = '')THEN
  
    SELECT
        REPLACE(CONCAT('{"object": [{"code": "","value": "--select--"},', ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(T))), '}'),'},[{','},{') into v_data
      FROM (  SELECT DISTINCT SUB_CLASS  as "code",
                              SUB_CLASS as "value"
    FROM TB_PROGRAM_PRIV
        WHERE PROGRAM_VARIANT=P_PROG_VARIANT
    AND PROGRAM_OPTION   =P_PROGRAM_OPT 
	and constitution_type = p_constitution_type
	and banking_type = p_banking_type
	AND INTERNAL_FLAG='Y')t;
  
  OPEN P_RESULT FOR 
      select  v_data  as "DATA";
  return P_RESULT; 

elsif p_constitution_type is not null  
  and p_banking_type is not null 
  AND P_PROGRAM_OPT IS NOT NULL 
  and P_PROG_VARIANT IS NOT NULL 
  and P_SUB_CLASS ='Key'
  and (trim(p_class_to_flow) is  null or trim(p_class_to_flow)='')  
  and (trim(p_class_front_end) is NULL OR trim(p_class_front_end) = '')
    THEN
  
  OPEN P_RESULT FOR 
  
    SELECT DISTINCT class_to_flow  as "PROGRAM_CLASSIFICATION",
                     IP_INTIAL as "IP_INTIAL"
    FROM TB_PROGRAM_PRIV
        WHERE constitution_type = p_constitution_type
	      and banking_type     = p_banking_type
		  AND PROGRAM_OPTION   = P_PROGRAM_OPT 
		  and PROGRAM_VARIANT  = P_PROG_VARIANT
		  AND SUB_CLASS        = p_sub_class
	AND INTERNAL_FLAG='Y' ;
      
  return P_RESULT; 


elsif p_constitution_type is not null  
  and p_banking_type is not null 
  AND P_PROGRAM_OPT IS NOT NULL 
  and P_PROG_VARIANT IS NOT NULL 
  and P_SUB_CLASS ='Associate'
  and (trim(p_class_to_flow) is null  or trim(p_class_to_flow) ='')
   and (trim(p_class_front_end) is NULL OR trim(p_class_front_end) = '')
   and (p_scheme_code is not null and p_scheme_code != '')
    THEN
  
    OPEN P_RESULT FOR 
   
    SELECT (select DISTINCT class_to_flow
    FROM public.TB_PROGRAM_PRIV
        WHERE constitution_type = p_constitution_type
	      and banking_type     = p_banking_type
		  AND PROGRAM_OPTION   = P_PROGRAM_OPT 
		  and PROGRAM_VARIANT  = P_PROG_VARIANT
		  AND SUB_CLASS        = p_sub_class
	AND INTERNAL_FLAG='Y') as "PROGRAM_CLASSIFICATION",
	ip_min_req as "IP_INTIAL" from public.tb_product_master where scheme_code = p_scheme_code;

    return P_RESULT;
   

elsif p_constitution_type is not null  
  and p_banking_type is not null 
  AND P_PROGRAM_OPT IS NOT NULL 
  and P_PROG_VARIANT IS NOT NULL 
  and P_SUB_CLASS ='Associate'
  and (trim(p_class_to_flow) is null  or trim(p_class_to_flow) ='')
   and (trim(p_class_front_end) is NULL OR trim(p_class_front_end) = '')
   and (p_scheme_code is null or p_scheme_code ='')
    THEN
  
    OPEN P_RESULT FOR 
   
    SELECT '' as "PROGRAM_CLASSIFICATION",
           '' as "IP_INTIAL" ;

    return P_RESULT; 
   END IF;
   elsif P_PROGRAM_OPT in ('Non Privy') and (p_scheme_code is NOT null or p_scheme_code !='') then 
   
  
  OPEN P_RESULT FOR 
  
    SELECT DISTINCT classification  as "PROGRAM_CLASSIFICATION",
                     ip_min_req as "IP_INTIAL"
    FROM tb_product_master
        WHERE  scheme_code = p_scheme_code;
      
  return P_RESULT; 
  
  
 ELSE 
    OPEN P_RESULT FOR 
   
    SELECT '' as "PROGRAM_CLASSIFICATION",
           '' as "IP_INTIAL" ;

    return P_RESULT; 
      

END IF;
EXCEPTION WHEN OTHERS THEN

OPEN P_RESULT FOR SELECT '' as "UNSUCCESSFUL",
  'In-correct data. Some error has Occured' as "ERROR_REMARKS";

return P_RESULT;   

end;$function$
;

CREATE OR REPLACE FUNCTION public.sp_purge_leads()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
v_object text;
v_count smallint;
BEGIN

	-- deleteing blank leads
DELETE  from tb_cop_buss_obj_txn tcbot 
where ((object_data::json->'AOF'->'CA'->>'HOME_BRANCH' ='' or object_data::json->'AOF'->'CA'->>'HOME_BRANCH'      is null)
		or (object_data::json->'AOF'->>'PRIMARY_CONTACT_MOBILE' ='' or object_data::json->'AOF'->>'PRIMARY_CONTACT_MOBILE' is null)
		or (object_data::json->'AOF'->>'PRIMARY_CONTACT_EMAIL'  ='' or object_data::json->'AOF'->>'PRIMARY_CONTACT_EMAIL'  is NULL)
		or (object_data::json->'AOF'->'BUS_DATA'->>'ORG_PAN_NO' ='' or object_data::json->'AOF'->'BUS_DATA'->>'ORG_PAN_NO' is NULL))
  and CURRENT_DATE - cast(TO_CHAR(coalesce(tcbot.device_modify_timestamp,tcbot.created_timestamp),'YYYY-MM-DD')as DATE)>2
;	

--  update active flag when leads old 60 days 
update tb_cop_buss_obj_txn tcbot
set is_active ='N'
where modified_timestamp + interval '60 day'< current_timestamp
and is_active ='Y'
and text_1 in ('REJECTED','BOM_REJECT','RCU_REJECT','ACCOUNT_ACTIVATED','RU_SUBMITTED');

--  update active flag and Rejected when leads old 90 days 
update tb_cop_buss_obj_txn tcbot
set is_active ='N', text_1 ='REJECTED'
where modified_timestamp + interval '90 day'< current_timestamp
and is_active ='Y'
and text_1 in ('ASSIGNED','BOM_APPROVED','BOM_DVU_REWORK_APPROVED','BOM_REWORK','BOM_REWORK_APPROVED','DVU_APPROVED',
'DVU_ASSIGNED','DVU_REWORK','DVU_REWORK_APPROVED','RCU_APPROVED','RCU_ASSIGNED','RCU_REWORK','RCU_REWORK_APPROVED',
'RU_ASSIGN','SUBMITTED');

end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_reassign_leads_to_users(x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_login_id character varying, x_role character varying, x_assign_to character varying, x_check character varying, x_assign_role character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT refcursor:='cur';
v_state   TEXT;
v_msg     TEXT;
v_detail  TEXT;
v_hint    TEXT;
v_context TEXT;
V_RESULT text;
NUM_ROWS INT;
v_role varchar(30);
v_status VARCHAR(100);
v_assign_to  VARCHAR(100);
v_assign_role  VARCHAR(200);

cur_a CURSOR for select json_array_elements(cast(x_object_pri_key_1 as json)) ->> 'caseid' as leadid;
BEGIN

	/*
	 * V_ROLE used for assign person role 
	 * 
	*/
     --  select fun.default_system_role_code into V_ROLE  from tb_emp_hrms teh 
     --  join tb_function_roles_mst FUN on fun.role_name = teh."role" 
      --   where employee_number = x_assign_to;
	
    -- V_ROLE := x_login_role;
	
--select trim(substring(x_assign_to,1,position('-' in x_assign_to)-1)),
--       trim(substring(x_assign_to,position('-' in x_assign_to)+1))
--     into v_assign_to ,v_assign_role ;
    
	--V_ROLE := v_assign_role;
	
    v_assign_to := x_assign_to;
    V_ROLE := x_assign_role; 
	
  FOR i IN cur_a LOOP

--  select tEXT_1 from tb_cop_buss_obj_txn tcbot 
--   where object_pri_key_1 =i.leadid;
  
 if upper(V_ROLE)='SALES EXECUTIVE' THEN 
 
   UPDATE tb_btc_accesscontrol 
    SET emp_id = v_assign_to,
    modified_by = 'reassign_proc'
    where object_pri_key_1= i.leadid
    and system_role ='RM';
	
	   GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'LEAD SUCCESSFULLY REASSIGN';
	ELSE 
         V_RESULT = 'LEAD CAN NOT REASSIGN';
	END IF;
     
 ELSIf upper(V_ROLE)='APPROVER' THEN  
 
   UPDATE tb_btc_accesscontrol 
      SET update_login_id= v_assign_to,
      modified_by = 'reassign_proc'
    where object_pri_key_1= i.leadid
    and system_role IN ('BOM','RM');
   
      update tb_section_status tss 
   set role = v_assign_to
    where role in ( select employee_number from tb_emp_hrms teh 
       join tb_function_roles_mst FUN on fun.role_name = teh."role" 
         where default_system_role_code = 'Approver')
    and object_pri_key_1 = i.leadid;  
	
	GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'LEAD SUCCESSFULLY REASSIGN';
	ELSE 
         V_RESULT = 'LEAD CAN NOT REASSIGN';
	END IF;
	  
 ELSIf upper(V_ROLE)='DVU' THEN  

   UPDATE tb_btc_accesscontrol 
      SET emp_hierarchy_id = v_assign_to,
      modified_by = 'reassign_proc'
    where object_pri_key_1= i.leadid
    and system_role  = 'DVU'; 
	
   
 GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'LEAD SUCCESSFULLY REASSIGN';
           update tb_section_status tss 
   set role = v_assign_to
   where role in ( select employee_number from tb_emp_hrms teh 
       join tb_function_roles_mst FUN on fun.role_name = teh."role" 
         where default_system_role_code = 'DVU')
    and object_pri_key_1 = i.leadid; 
	ELSE 
         V_RESULT = 'LEAD CAN NOT REASSIGN';
	END IF;
	
 ELSIf upper(V_ROLE)='RCU' THEN  

   UPDATE tb_btc_accesscontrol 
      SET EMP_ID = v_assign_to,
      modified_by = 'reassign_proc'
    where object_pri_key_1= i.leadid
      and system_role  = 'RCU';
     

	
	GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'LEAD SUCCESSFULLY REASSIGN';
  update tb_section_status tss 
   set role = v_assign_to
   where role in ( select employee_number from tb_emp_hrms teh 
       join tb_function_roles_mst FUN on fun.role_name = teh."role" 
         where default_system_role_code = 'RCU')
    and object_pri_key_1 = i.leadid;  
	ELSE 
         V_RESULT = 'LEAD CAN NOT REASSIGN';
	END IF;

 ELSIf upper(V_ROLE)='RCU CORRECTOR' THEN  

   UPDATE tb_btc_accesscontrol 
      SET EMP_ID = v_assign_to,
      modified_by = 'reassign_proc'
    where object_pri_key_1= i.leadid
      and system_role  = 'RCU_Correcter';
     
--        update tb_section_status tss 
--   set role = v_assign_to
--    where role in (select employee_number from tb_emp_hrms teh 
--                    where role = 'RCU')
--    and object_pri_key_1 = i.leadid;  
	
	GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'LEAD SUCCESSFULLY REASSIGN';
	ELSE 
         V_RESULT = 'LEAD CAN NOT REASSIGN';
	END IF;

 ELSIf upper(x_role)= upper('Risk Unit Supervisor') THEN  


   UPDATE tb_btc_accesscontrol 
      SET EMP_ID = v_assign_to,
      modified_by = 'reassign_proc'
    where object_pri_key_1= i.leadid
      and system_role  = 'RU';
     
--        update tb_section_status tss 
--   set role = v_assign_to
--    where role in (select employee_number from tb_emp_hrms teh 
--                    where role = 'RCU')
--    and object_pri_key_1 = i.leadid;  
	
	GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'LEAD SUCCESSFULLY REASSIGN';
	ELSE 
         V_RESULT = 'LEAD CAN NOT REASSIGN';
	END IF;

ELSIf upper(x_role)= upper('RUS') THEN  -- FOR RUS RU LEAD REASSIGN


   UPDATE tb_btc_accesscontrol 
      SET EMP_ID = v_assign_to,
      modified_by = 'reassign_proc'
    where object_pri_key_1= i.leadid
      and system_role  = 'RU';
     
--        update tb_section_status tss 
--   set role = v_assign_to
--    where role in (select employee_number from tb_emp_hrms teh 
--                    where role = 'RCU')
--    and object_pri_key_1 = i.leadid;  
	
	GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'LEAD SUCCESSFULLY REASSIGN';
	ELSE 
         V_RESULT = 'LEAD CAN NOT REASSIGN';
	END IF;

	END IF;
 end loop;

OPEN X_RESULT FOR
SELECT   V_RESULT as "STATUS";

RETURN X_RESULT;  


/*
EXCEPTION WHEN OTHERS THEN

V_ERR:=SQLERRM;
OPEN ref FOR SELECT '' as "UNSUCCESSFUL",
'In-correct data. Some error has Occured' as "ERROR_REMARKS",
                         'tb_client_master' as "TABLENAME",
                '' as "ACTION";

return ref;                                    
*/
END;
 $function$
;

CREATE OR REPLACE FUNCTION public.sp_rollback_truncate_master_data(x_login character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT REFCURSOR:='cur';
v_count INT;
num_rows INT;
V_RESULT text;
V_RESULT_1 text;
V_RESULT_2 text;
V_RESULT_3 text;
BEGIN
TRUNCATE table tb_emp_hrms;

INSERT INTO public.tb_emp_hrms
(employee_number, oracle_employee_number, company, person_id, attribute3, prefix, first_name, middle_names, last_name, email_address, gender, dob, marital_status, paddress1, paddress2, paddress3, pcity, ppin, taddress1, taddress2, taddress3, tcity, tpin, supervisor_emp_no, sup_company, doj, father_husband_name, division, "function", function_id, designation_id, payroll_id, designation_label_id, "role", loc_code, location_name, date_employee_data_verified, lob_code, lob, cc_code, cc_name, category, domain_login_id, last_working_date, rm_name, supervisor_no, "source", kpo_code, supervisor_name, mobile_number, assignment_change_date, loc_code_new, ing_emp_type, segment, emp_hierarchy_id, emp_branch_hierarchy_id, created_date, created_by, modified_date, modified_by, loc_code_view, is_active, bc_code, emp_lwd_date, prc_grp, login_status, supervisor_mobile_number, branch_code)
select employee_number, oracle_employee_number, company, person_id, attribute3, prefix, first_name, middle_names, last_name, email_address, gender, dob, marital_status, paddress1, paddress2, paddress3, pcity, ppin, taddress1, taddress2, taddress3, tcity, tpin, supervisor_emp_no, sup_company, doj, father_husband_name, division, "function", function_id, designation_id, payroll_id, designation_label_id, "role", loc_code, location_name, date_employee_data_verified, lob_code, lob, cc_code, cc_name, category, domain_login_id, last_working_date, rm_name, supervisor_no, "source", kpo_code, supervisor_name, mobile_number, assignment_change_date, loc_code_new, ing_emp_type, segment, emp_hierarchy_id, emp_branch_hierarchy_id, created_date, created_by, modified_date, modified_by, loc_code_view, is_active, bc_code, emp_lwd_date, prc_grp, login_status, supervisor_mobile_number, branch_code
from tb_emp_hrms_hist;

truncate table tb_emp_hrms_hist;

insert into tb_emp_hrms_hist select * from tb_emp_hrms_rollback;


 GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
IF NUM_ROWS  > 0 THEN
         V_RESULT_1 = 'HRMS DATA INSERTED SUCCESSFULLY';
        v_result = '01';
ELSE
    V_RESULT_1 = 'HRMS DATA CONTAINING NO DATA';
   v_result = '02';
END IF;

--TRUNCATE tb_se_app_mapping;
--INSERT INTO public.tb_se_app_mapping
--(se_id, approver_id, internal_flag, created_by, created_timestamp, modified_by, modified_timestamp)
--select se_id, approver_id, internal_flag, created_by, created_timestamp, modified_by, modified_timestamp from tb_se_app_mapping_hist ;
--
--
-- GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
-- IF NUM_ROWS  > 0 THEN
--         V_RESULT_2 ='SE_APP DATA INSERTED SUCCESSFULLY';
--        v_result = '01';
-- ELSE
--    V_RESULT_2 = 'SE_APP DATA CAN NOT BE DELETED';
--   v_result = '02';
-- END IF;
--
--TRUNCATE tb_branch_rcu_corrector_mapping;
--INSERT INTO public.tb_branch_rcu_corrector_mapping
--(rcu_corrector_id, branch, internal_flag, created_by, created_timestamp, modified_by, modified_timestamp)
--select rcu_corrector_id, branch, internal_flag, created_by, created_timestamp, modified_by, modified_timestamp from tb_branch_rcu_corrector_mapping_hist ;
--
--
-- GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
-- IF NUM_ROWS  > 0 THEN
--         V_RESULT_3 = 'RCU_BRANCH_MAPPING DATA DELETED SUCCESSFULLY';
-- ELSE
--    V_RESULT_3 = 'RCU_BRANCH_MAPPING DATA CAN NOT BE DELETED';
--
-- END IF;
--delete from tb_function_roles_mst_hist;
--delete from tb_function_roles_mst;
--
-- GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
-- IF NUM_ROWS  > 0 THEN
--         V_RESULT_3 = 'TB_FUNCTION_ROLE_MASTER DATA DELETED SUCCESSFULLY';
-- ELSE
--    V_RESULT_3 = 'TB_FUNCTION_ROLE_MASTER DATA CAN NOT BE DELETED';

-- END IF;

OPEN X_RESULT FOR
SELECT  V_RESULT, V_RESULT_1;
RETURN X_RESULT;

EXCEPTION WHEN OTHERS THEN
open X_RESULT for  
      select  'HRMS DATA CAN NOT BE DELETED' as "V_RESULT_1";

return V_RESULT_1;

 

END;$function$
;

CREATE OR REPLACE FUNCTION public.sp_send_email(x_object_pri_key_1 character varying, x_login_id character varying, x_role character varying, x_disposition character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT refcursor:='cur';
v_state   TEXT;
v_msg     TEXT;
v_detail  TEXT;
v_hint    TEXT;
v_context TEXT;
V_RESULT text;
NUM_ROWS INT;
RM_EMP_ID VARCHAR(20);
app_id VARCHAR(20);
V_RCU_ID VARCHAR(20);
V_BRANCH VARCHAR(20);
cur_a CURSOR for select json_array_elements(cast(x_object_pri_key_1 as json)) ->> 'caseid' as leadid;
BEGIN

if x_disposition ='RM_SE_SUBMITTED' THEN 

-- select emp_id into RM_EMP_ID from tb_btc_accesscontrol acc
-- join tb_cop_buss_obj_txn COP on COP.object_pri_key_1 = acc.object_pri_key_1 
--  where acc.object_pri_key_1 =x_object_pri_key_1
--  and system_role ='RM'
--  order  by acc.created_timestamp asc;
  
  select approver_id into app_id from tb_se_app_mapping sap 
   join tb_btc_accesscontrol acc on acc.emp_id =sap.se_id  
   join tb_cop_buss_obj_txn COP on COP.object_pri_key_1 = acc.object_pri_key_1
  where acc.object_pri_key_1 =x_object_pri_key_1
   and system_role ='RM'
   order  by acc.created_timestamp asc
   limit 1;
  
  OPEN X_RESULT FOR
   select first_name as "App_Name",employee_number as "Appr_id", email_address as "App_email"  from tb_emp_hrms teh 
     where employee_number =app_id;

  RETURN X_RESULT;  

elsif x_disposition in
('SUBMITTED','DVU_REWORK','BOM_REWORK','REJECTED','ASSIGNED','BOM_REJECT','RCU_REJECT','RCU_REWORK','RCU_APPROVED','ACCOUNT_ACTIVATED') THEN 

 select emp_id into RM_EMP_ID from tb_btc_accesscontrol acc
 join tb_cop_buss_obj_txn COP on COP.object_pri_key_1 = acc.object_pri_key_1 
  where acc.object_pri_key_1 =x_object_pri_key_1
  and system_role ='RM'
  order  by acc.created_timestamp asc;

  OPEN X_RESULT FOR
   select first_name as "RM_Name",employee_number as "RM_id", email_address as "RM_email"  from tb_emp_hrms teh 
     where employee_number =RM_EMP_ID;

RETURN X_RESULT;

elsif x_disposition IN ('RCU_REWORK_COR') THEN 

 select emp_id into RM_EMP_ID from tb_btc_accesscontrol acc
 join tb_cop_buss_obj_txn COP on COP.object_pri_key_1 = acc.object_pri_key_1 
  where acc.object_pri_key_1 =x_object_pri_key_1
  and system_role ='RM'
  order  by acc.created_timestamp asc;

 select branch_code into V_BRANCH from tb_emp_hrms teh 
  where employee_number = RM_EMP_ID;
 select rcu_corrector_id into V_RCU_ID from tb_branch_rcu_corrector_mapping tbrcm 
  where branch = V_BRANCH;
 
  OPEN X_RESULT FOR
   select first_name as "RCU_Name",employee_number as "RCU_id", email_address as "RCU_email"  from tb_emp_hrms teh 
     where employee_number =V_RCU_ID;

RETURN X_RESULT;  

elsif x_role in ('BSG','Product Supervisor') and x_disposition in ('RM_SE_QUE','BOM_APPROVER_QUE','DVU_QUE','RCU_QUE') THEN 

-- FOR i IN cur_a loop
 
-- select emp_id into RM_EMP_ID from tb_btc_accesscontrol acc
-- join tb_cop_buss_obj_txn COP on COP.object_pri_key_1 = acc.object_pri_key_1 
--  where acc.object_pri_key_1 in (i.leadid)--IN(select json_array_elements(cast(x_object_pri_key_1 as json)) ->> 'caseid')
--  --=x_object_pri_key_1
--  and system_role ='RM'
--  order  by acc.created_timestamp asc;
 OPEN X_RESULT FOR 
  select hrms.first_name as "RM_Name",hrms.employee_number as "RM_id", 
         hrms.email_address as "RM_email" from tb_btc_accesscontrol acc
   join tb_cop_buss_obj_txn COP on COP.object_pri_key_1 = acc.object_pri_key_1
   join tb_emp_hrms HRMS on hrms.employee_number =acc.emp_id 
   where acc.object_pri_key_1 in (select json_array_elements(cast(x_object_pri_key_1 as json)) ->> 'caseid')
 
  and system_role ='RM'
  order  by acc.created_timestamp asc;
 RETURN X_RESULT;
--end loop;

--OPEN X_RESULT FOR
--  select employee_number as "RM_Name",first_name as "RM_id", email_address as "RM_email"  from tb_emp_hrms teh 
--     where first_name in (RM_EMP_ID);
--  
--RETURN X_RESULT;
  

elsif x_role in ('BSG','Product Supervisor') and  x_disposition in ('RCU_CORRECTOR') THEN 

  CREATE TEMP TABLE IF NOT EXISTS rcu_tem (
    rcu_id VARCHAR(50)
  ) ON COMMIT DELETE ROWS;
 
insert into rcu_tem
select branch_code  from tb_btc_accesscontrol acc
 join tb_cop_buss_obj_txn COP on COP.object_pri_key_1 = acc.object_pri_key_1 
 join tb_emp_hrms hrms on hrms.employee_number = acc.emp_id 
  where acc.object_pri_key_1 in (select json_array_elements(cast(x_object_pri_key_1 as json)) ->> 'caseid')
  and system_role ='RM'
  order  by acc.created_timestamp asc;
 
  OPEN X_RESULT FOR
 select hr.first_name as "RCU_Name", hr.employee_number as "RCU_id", hr.email_address as "RCU_email" 
 from tb_branch_rcu_corrector_mapping tbrcm 
 join tb_emp_hrms hr on hrms.employee_number = tbrcm.rcu_corrector_id 
  where branch in (select rcu_id from rcu_tem);


RETURN X_RESULT;

  end if;
/*
EXCEPTION WHEN OTHERS THEN

V_ERR:=SQLERRM;
OPEN ref FOR SELECT '' as "UNSUCCESSFUL",
'In-correct data. Some error has Occured' as "ERROR_REMARKS",
                         'tb_client_master' as "TABLENAME",
                '' as "ACTION";

return ref;                                    
*/
END;
 $function$
;

CREATE OR REPLACE FUNCTION public.sp_set_auto_dorm()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
v_object text;
v_count smallint;
cur_a CURSOR for  SELECT *
                     FROM ANALYTICS.LAST_LOGIN_DETAILS T1
                      WHERE cast(last_login_on as date) < current_date - interval '44 day';

BEGIN
FOR i IN cur_a LOOP

      UPDATE PUBLIC.tb_emp_hrms
      SET is_active='N',
	  modified_by='AUTO_DORMANCY',
	  modified_date=CURRENT_TIMESTAMP
      WHERE employee_number=i.LOGIN_ID;
END LOOP;

end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_set_rm_reject_lead_data(x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_object_data character varying)
 RETURNS void
 LANGUAGE plpgsql
AS $function$ 
declare 
v_remarks varchar(200);
v_test varchar(10);
v_draft_flag VARCHAR(20);
V_COUNT INT;
begin 

   select   X_OBJECT_DATA::json -> 'AOF'->> 'WORKFLOW_REMARKS' ,
            X_OBJECT_DATA::json -> 'AOF'->> 'DRAFT_FLAG' 
			into v_remarks, v_draft_flag
			from TB_COP_BUSS_OBJ_TXN TXN
		where txn.OBJECT_TYPE = X_OBJECT_TYPE
		 and txn.object_pri_key_1 =x_object_pri_key_1
		 and  coalesce(txn.object_pri_key_2,'NA') = coalesce(x_object_pri_key_2,'NA')
		 and  coalesce(txn.object_pri_key_3,'NA') = coalesce(x_object_pri_key_3,'NA');
--raise notice 'VR : %', v_remarks;
--raise notice 'VD : %', v_draft_flag;
--raise notice 'V0 : %', x_object_data;

   SELECT COUNT(*) INTO V_COUNT from tb_rejected_rm_leads_data TXN
   	where txn.OBJECT_TYPE = X_OBJECT_TYPE
		 and txn.object_pri_key_1 =x_object_pri_key_1
		 and  coalesce(txn.object_pri_key_2,'NA') = coalesce(x_object_pri_key_2,'NA')
		 and  coalesce(txn.object_pri_key_3,'NA') = coalesce(x_object_pri_key_3,'NA');
raise notice 'VD : %', V_COUNT;

if V_COUNT = 0 then 

   INSERT INTO public.tb_rejected_rm_leads_data
	(object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, remarks, 
	 screen_name, status, created_timestamp, created_by, modified_timestamp, modified_by)
	VALUES(x_object_type, x_object_pri_key_1, coalesce(x_object_pri_key_2,'NA'), coalesce(x_object_pri_key_3,'NA'), v_remarks,
	 v_draft_flag, 'Y', 'now()', 'sp_btc_prc_grp_disp', now(), 'sp_btc_prc_grp_disp');

elsif v_count >0 then  
 update tb_rejected_rm_leads_data
  set screen_name = v_draft_flag,
       remarks     = v_remarks,
       modified_timestamp = NOW(),
       modified_by = 'UPDATE - sp_btc_prc_grp_disp'
   	where object_pri_key_1 =x_object_pri_key_1;	   
end if;
end;

$function$
;

CREATE OR REPLACE FUNCTION public.sp_string_replace_mapping(x_group_code character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare 
X_RESULT refcursor:='cur';
v_count int;
v_consent_flag varchar;
v_string_tab text;
P_STRING_FINAL varchar;
x_status_code varchar;
--cur_a CURSOR for
--  select cast(json_array_elements(cast( x_group_code as json)->'OBJECT') as json)->> 'GROUPCODE' AS GROUP_CODE;

begin
	
--FOR REC IN cur_a LOOP

IF x_group_code is not null then 

 SELECT array_to_json(array_agg(row_to_json(t)))  INTO v_string_tab
    FROM (   
    	select groupcode  as "GROUPCODE" , searchstring as "SEARCHSTRING", replacewith as "REPLACEWITH"
		    from tb_string_rpl_mapping
		     where groupcode in (select cast(json_array_elements(cast( x_group_code as json)->'OBJECT') as json)->> 'GROUPCODE'))t;

 P_STRING_FINAL :=  CONCAT ('{"object_data":', v_string_tab,'}');
x_status_code := '00';
  
end if;
--END LOOP;
if P_STRING_FINAL = '{"object_data":}'   
    then P_STRING_FINAL := 'No Group ID exist';	
   x_status_code := '01';
   end if;
   open X_RESULT for 
	 SELECT P_STRING_FINAL as "OBJECT",
	x_status_code as "STATUS_CODE";
  return X_RESULT;

end;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_tb_get_emp_details(x_employee_number character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT refcursor;
 begin
 		OPEN X_RESULT FOR 
		SELECT first_name as "f_name", 
		       middle_names as"m_name" , 
		       last_name as "l_name" , 
		       email_address as "email_id",
		       concat(first_name,' ',middle_names,' ',last_name) as "full_name",
		       role as "sys_role" ,
		       function as "func",
		       doj as "Date_of_joining",
		       branch_code as "branch_code"
		FROM tb_emp_hrms
	where upper(x_employee_number) =upper(employee_number);
     

RETURN X_RESULT;
    
  
END;$function$
;

CREATE OR REPLACE FUNCTION public.sp_tb_get_emp_details_new(x_employee_number character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT refcursor := 'cur';
 begin
 		OPEN X_RESULT FOR 
		SELECT first_name as "f_name", 
		       middle_names as"m_name" , 
		       last_name as "l_name" , 
		       email_address as "email_id",
		       concat(first_name,' ',middle_names,' ',last_name) as "full_name",
		       role as "sys_role" ,
		       function as "func",
		       doj as "Date_of_joining",
		       branch_code as "branch_code"
		FROM tb_emp_hrms
	where upper(x_employee_number) =upper(employee_number);
     

RETURN X_RESULT;
    
  
END;$function$
;

CREATE OR REPLACE FUNCTION public.sp_tb_get_location(x_login_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
  X_RESULT REFCURSOR := 'cur';
  v_object TEXT := 'No location exist';
 v_count int;
BEGIN
    
  SELECT
        CONCAT('{"BRANCH": {"LOCATION":', ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(T))), '}}') into v_object
      FROM (SELECT
          LOCATION_CODE,
          location_type 
        FROM tb_org_locations_mst)T;
        --WHERE TRIM(location_code) = TRIM(x_loccation_code))t;
 OPEN X_RESULT FOR
   SELECT
    v_object AS "response_message",
    '100' AS "response_code",
    'I' AS "response_type";
  RETURN X_RESULT;

  EXCEPTION WHEN OTHERS THEN


        OPEN X_RESULT FOR SELECT
          'In-correct data' as "response_message",
          '500' AS "response_code",
          'E' AS "response_type";

        RETURN X_RESULT;

END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_tb_get_login_details(x_loginid character varying, x_sessionid character varying, x_processid character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare X_ROLE VARCHAR(100);
X_EMP_ID VARCHAR(100);
x_supervisor_emp_no varchar(100);
X_USER_NAME    varchar(100);
x_mobile_number varchar(100);
x_supervisor_mobile_number varchar(100);
ref REFCURSOR := 'cur';
x_user_ideal   text;
x_prc_grp varchar(100);
x_count int;
begin
	
		   /* SELECT   (FIRST_NAME|| ' ' ||MIDDLE_NAMES|| ' ' ||LAST_NAME) ,ROLE,first_name,last_name,MOBILE_NUMBER
               INTO  x_user_name,x_user_role,x_loc_code,x_first_name,x_last_name,V_MOBILE  
               FROM TRL_EMP_HRMS WHERE EMPLOYEE_NUMBER = 'FO1'

	
	select count(*) into x_count from trl_emp_hrms
	where employee_number=x_loginid;
	
	if x_count > 0 then 
	
		select  concat(FIRST_NAME,'',MIDDLE_NAMES,'',LAST_NAME) as "USER_NAME",
		employee_number,role,supervisor_emp_no ,mobile_number,supervisor_mobile_number,prc_grp
		into X_USER_NAME,X_EMP_ID, X_ROLE,x_supervisor_emp_no,x_mobile_number,x_supervisor_mobile_number,x_prc_grp
	from trl_emp_hrms
	where employee_number=x_loginid;

 OPEN ref FOR SELECT X_USER_NAME as "USER_NAME",X_EMP_ID,X_ROLE,x_supervisor_emp_no,x_prc_grp,x_mobile_number,x_supervisor_mobile_number;
else
OPEN ref FOR SELECT 'FALSE' as "STATUS";
end ;

	
	*
	**/
--	
--	if x_loginid in ('FO1','FO2','FO3','FO4','FO5') then 
--
--select  concat(FIRST_NAME,'',MIDDLE_NAMES,'',LAST_NAME) as "USER_NAME",
--		employee_number,role,supervisor_emp_no ,mobile_number,supervisor_mobile_number,prc_grp
--		into X_USER_NAME,X_EMP_ID, X_ROLE,x_supervisor_emp_no,x_mobile_number,x_supervisor_mobile_number,x_prc_grp
--	from trl_emp_hrms
--	where employee_number=x_loginid;
--
-- OPEN ref FOR SELECT X_USER_NAME as "USER_NAME",X_EMP_ID,X_ROLE,x_supervisor_emp_no,x_prc_grp,x_mobile_number,x_supervisor_mobile_number;
--
--
--else
--
-- OPEN ref FOR select 'N' as "STATUS";
--
--end if;
--
--
--
--
--
--
--
--
--
----insert into dheeraj VALUES(CONCAT(X_USER_NAME,X_EMP_ID, X_ROLE,x_supervisor_emp_no,x_mobile_number,x_supervisor_mobile_number,x_prc_grp));
--
--
--RETURN ref;

select count(*) into x_count from tb_emp_hrms a, tb_function_roles_mst tfrm  
			where a."role" =tfrm.role_name 
		    and employee_number = x_loginid;
		   
  if x_count >0-- (x_loginid = ''or x_loginid is not null) 
    THEN

      OPEN ref for
      
/*SELECT     a.user_id "LOGIN_ID",
			user_name "USER_NAME",
			mobile_no "MOBILE_NUMBER",
			email_id "EMAIL_ID",
			a.role "ROLE",
			system_role "System_role",
			A.home_location as "HOME_LOCATION"
			from tb_user_mst a  
			WHERE a.USER_ID = x_loginid; */  -- commneted by vipul

 SELECT     a.employee_number "USER_NAME",
			a.first_name ||' ' || a.last_name "LOGIN_ID",
			a.mobile_number "MOBILE_NUMBER",
			a.email_address "EMAIL_ID",
			tfrm.default_system_role_code "ROLE", 
			null as "System_role",
			null as "HOME_LOCATION",
			a.lob as "lob",
			a.lob_code as "lob_code"
			from tb_emp_hrms a, tb_function_roles_mst tfrm  
			where a."role" =tfrm.role_name 
		    and employee_number = x_loginid; -- added by vipul   

       RETURN ref;
     
     
    ELSE
      OPEN ref FOR SELECT
        '' AS "STATUS",
        'You are not authorized to access this application' AS "RESPONSE_CODE";
       
      RETURN ref;

  END IF;

	end;$function$
;

CREATE OR REPLACE FUNCTION public.sp_tb_get_lov(x_loginid character varying, x_sessionid character varying, x_processid character varying, x_org_id character varying, x_app_id character varying, x_current_version character varying, x_master_type character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$

DECLARE

  ref REFCURSOR := 'cur';

  V_COUNT INT;

BEGIN

  SELECT
    COUNT(1) INTO V_COUNT
  FROM public.TB_MASTER_DATA_OBJS
  WHERE GROUP_ID = X_APP_ID
  AND MASTER_TYPE = x_master_type;



  IF V_COUNT > 0
    THEN

      OPEN ref FOR

      SELECT
        MASTER_TYPE AS "MASTER_TYPE",
        DATA_OBJECT AS "DATA_OBJECT",

        version AS "VERSION",

        'Y' AS "REC_SYNC_STATUS"

      FROM public.TB_MASTER_DATA_OBJS

      WHERE GROUP_ID = X_APP_ID
      AND MASTER_TYPE = x_master_type;

    ELSE

      OPEN ref FOR

      SELECT
        '' AS "MASTER_TYPE",
        '{}' AS "DATA_OBJECT",

        '' AS "VERSION",

        'N' AS "REC_SYNC_STATUS";



  END IF;



  RETURN ref;

END;

$function$
;

CREATE OR REPLACE FUNCTION public.sp_tb_get_lov_version(x_loginid character varying, x_sessionid character varying, x_processid character varying, x_org_id character varying, x_app_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$

DECLARE

V_COUNT INT;

X_RESULT refcursor:= 'cur';

 

BEGIN

        OPEN X_RESULT FOR SELECT MASTER_TYPE as "MASTER_TYPE" ,VERSION as "VERSION" FROM TB_MASTER_DATA_OBJS WHERE GROUP_ID=x_app_id and ORG_ID=x_org_id and APP_ID= x_app_id;

      -- insert into dheeraj values('test_api');
       
return X_RESULT;

EXCEPTION

when NO_DATA_FOUND then

    OPEN X_RESULT FOR SELECT 'some error ocurred.' as "RESPONSE_MESSAGE";

return X_RESULT;

END;

$function$
;

CREATE OR REPLACE FUNCTION public.sp_tb_get_sqllite_ddl_cnf(x_org_id character varying, x_app_id character varying, x_version_number character varying, x_login_id character varying, x_out_process_id character varying, x_session_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
x_result refcursor:= 'cur';

V_LOB_CODE VARCHAR(50);
V_COUNT NUMeric;
V_VERSION_NO NUMeric;
V_MAX_VERSION_NO VARCHAR(50);
TIMETAKEN timestamp;
BEGIN
   
   
            SELECT MAX(version_number)
            INTO V_MAX_VERSION_NO
            FROM TB_SQLLITE_DDL_CNF;
                 
            
           
            OPEN x_result FOR  SELECT --OBJECT_NAME,
                      --ACTION,
                      --DDL_DESCRIPTION,
                      --V_MAX_VERSION_NO VERSION_NO,
                      SQL_DDL_SCRIPT as "SQL_DDL_SCRIPT" ,
                      EXECUTION_SEQUENCE as "EXECUTION_SEQUENCE" 
                      --,LOB_CODE
              FROM TB_SQLLITE_DDL_CNF
              WHERE ORG_ID  = X_ORG_ID  
              AND APP_ID  = X_APP_ID
              and version_number= V_MAX_VERSION_NO
               AND current_date BETWEEN EFFECTIVE_DATE AND INEFFECTIVE_DATE AND INTERNAL_FLAG='Y'
                          ORDER BY EXECUTION_SEQUENCE;

 return x_result;

--EXCEPTION
--  
--  WHEN NO_DATA_FOUND THEN
--   -- OPEN RESULT FOR SELECT 'ERROR WHILE VALIDATING' AS "ERROR" FROM DUAL;
--     SP_INS_DB_EXCEPTION_LOG(X_OUT_PROCESS_ID,'SP_TB_SQLLITE_DDL_CONFIG', 'SP', X_LOGIN_ID,
--                                    '', '', '', '',  '','','',
--                                    '',  '', 'No data found');
-- OPEN RESULT FOR  SELECT --OBJECT_NAME,
--                      --ACTION,
--                      --DDL_DESCRIPTION,
--                      --V_VERSION_NO,
--                      SQL_DDL_SCRIPT,
--                      EXECUTION_SEQUENCE
--                      --,LOB_CODE
--              FROM TB_SQLLITE_DDL_CNF  
--              ORDER BY EXECUTION_SEQUENCE;
--  WHEN OTHERS THEN
--  --  OPEN RESULT FOR SELECT 'ERROR WHILE VALIDATING' AS "ERROR" FROM DUAL;
--     SP_INS_DB_EXCEPTION_LOG(X_OUT_PROCESS_ID,'SP_TB_SQLLITE_DDL_CONFIG', 'SP', X_LOGIN_ID,
--                                    '', '', '', '',  '','','',
--                                    '',  '', 'No data found');
--                                    
--  
--   select current_timestamp into TIMETAKEN from dual;      
--dbms_output.put_line((TIMETAKEN));
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_tb_get_view_deatils_ios()
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$

declare reff refcursor := 'cur';
BEGIN

OPEN reff FOR SELECT * FROM tb_view_details;

return reff;

END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_tb_show_consent_data(x_loginid character varying, x_object_pri_key character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
  X_RESULT REFCURSOR := 'cur';
  V_ERR VARCHAR(4000);
 v_count int;
 V_DATA text;
BEGIN
 select count(1) into v_count from tb_cop_buss_obj_txn txn
   where coalesce(trim(txn.object_pri_key_1),'NA') =  coalesce(trim(x_object_pri_key),'NA');

if v_count> 0 then 

SELECT JSONB_AGG( ROW_TO_JSON (T)) into  V_DATA from 
( select object_data::json->'AOF_SP'->>'PRIMARY_CONTACT_MOBILE' as "PRIMARY_CONTACT_MOBILE",
   object_data::json->'AOF_SP'->'PRIMARY_CONTACT_EMAIL'  as "PRIMARY_CONTACT_EMAIL",
   object_data::json->'AOF_SP'->'BUS_DATA'->>'ORG_PAN_NO'  as "ORG_PAN_NO"
   from tb_cop_buss_obj_txn txn
  where coalesce(trim(txn.object_pri_key_1),'NA') =  coalesce(trim(x_object_pri_key),'NA')
 )t;
  
  else 

V_DATA :='NO ID EXIST';
END IF;

--if V_DATA = '' then 
--
--V_DATA := NULL;  
--end if;
OPEN X_RESULT FOR 
SELECT V_DATA AS "OBJECT";
       RETURN x_result;
     

/*
   EXCEPTION
   WHEN NO_DATA_FOUND THEN 
    OPEN X_RESULT FOR 
        SELECT 'FAILURE' as "ISSUCCESSFUL",
                          '' as "ERROR_REMARKS",
                          X_OBJECT_PRI_KEY_1 as "PRIMARY_KEY_VALUE",
                          TO_CHAR(V_SYSTIME_VAR,'YYYY-MM-DD hh24:mi:SS') as "LAST_SYNC_TIMESTAMP",
                          'tb_consent_data' as "TABLENAME",
                  		  '' as "ACTION";
                        
  WHEN OTHERS THEN 
                OPEN X_RESULT FOR 
        SELECT 'FAILURE' as "ISSUCCESSFUL",
                          '' as "ERROR_REMARKS",
                          X_OBJECT_PRI_KEY_1 as "PRIMARY_KEY_VALUE",
                          TO_CHAR(V_SYSTIME_VAR,'YYYY-MM-DD hh24:mi:SS') as "LAST_SYNC_TIMESTAMP",
                          'tb_consent_data' as "TABLENAME",
                  		  '' as "ACTION";
                       return X_RESULT; 
      */    


END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_truncate_master_table(x_login character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
X_RESULT REFCURSOR:='cur'; 
v_count INT;
num_rows INT;
V_RESULT text;
V_RESULT_1 text;
V_RESULT_2 text;
V_RESULT_3 text;
begin
     truncate table tb_emp_hrms_rollback;
    insert into tb_emp_hrms_rollback 
    select * from tb_emp_hrms_hist;
    
delete from tb_emp_hrms_hist ;

insert into tb_emp_hrms_hist
select * from tb_emp_hrms;

delete from tb_emp_hrms where employee_number not in 
(select employee_number from tb_emp_hrms where employee_number  like 'KXT%');


 GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
    IF NUM_ROWS  > 0 THEN
         V_RESULT_1 = 'HRMS DATA DELETED SUCCESSFULLY';
        v_result = '01';
    ELSE 
    V_RESULT_1 = 'HRMS DATA CONTAINING NO DATA';
   v_result = '02';
    END IF;
--delete from tb_se_app_mapping_hist ;
--delete from tb_se_app_mapping ;
--
--
-- GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
--    IF NUM_ROWS  > 0 THEN
--         V_RESULT_2 ='SE_APP DATA DELETED SUCCESSFULLY';
--        v_result = '01';
--    ELSE 
--    V_RESULT_2 = 'SE_APP DATA CAN NOT BE DELETED';
--   v_result = '02';
--    END IF;
--
--delete from tb_branch_rcu_corrector_mapping_HIST ;
--delete from tb_branch_rcu_corrector_mapping ;
--
-- GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
--    IF NUM_ROWS  > 0 THEN
--         V_RESULT_3 = 'RCU_BRANCH_MAPPING DATA DELETED SUCCESSFULLY';
--    ELSE 
--    V_RESULT_3 = 'RCU_BRANCH_MAPPING DATA CAN NOT BE DELETED';
--
--    END IF;
--delete from tb_function_roles_mst_hist; 
--delete from tb_function_roles_mst;
--
-- GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
--    IF NUM_ROWS  > 0 THEN
--         V_RESULT_3 = 'TB_FUNCTION_ROLE_MASTER DATA DELETED SUCCESSFULLY';
--    ELSE 
--    V_RESULT_3 = 'TB_FUNCTION_ROLE_MASTER DATA CAN NOT BE DELETED';

--    END IF;

OPEN X_RESULT for --select 'success' as res_msg;
SELECT  V_RESULT, V_RESULT_1;
RETURN X_RESULT; 
--
EXCEPTION WHEN OTHERS THEN
open X_RESULT for  
      select  'HRMS DATA CAN NOT BE DELETED' as "V_RESULT_1";

return V_RESULT_1;

 

END;$function$
;

CREATE OR REPLACE FUNCTION public.sp_update_mandate_crn(x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_mandate_crn character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
declare
x_result refcursor:= 'cur';
NUM_ROWS INT;
V_RESULT TEXT;
v_count int;
begin
select count(*) into v_count from tb_cop_buss_obj_txn tcbot 
 where object_pri_key_1 =x_object_pri_key_1;
 if v_count >0 and (x_mandate_crn !='' or x_mandate_crn is not null )then 
 
 update TB_COP_BUSS_OBJ_TXN
 set text_3 = x_mandate_crn,
  OBJECT_DATA =JSONB_SET(CAST(OBJECT_DATA AS JSONB) , -- JSON OBJECT
                '{"AOF","CA"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(OBJECT_DATA AS JSONB)->'AOF'->'CA'|| JSONB_BUILD_OBJECT(
						'CRN_MANDATE',x_mandate_crn
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  )
  WHERE object_pri_key_1 = x_object_pri_key_1
   and object_type= x_object_type;
  
   update tb_cop_metadata_txn
 set text_3 = x_mandate_crn,
  OBJECT_DATA =JSONB_SET(CAST(OBJECT_DATA AS JSONB) , -- JSON OBJECT
                '{"AOF","CA"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(OBJECT_DATA AS JSONB)->'AOF'->'CA'|| JSONB_BUILD_OBJECT(
						'CRN_MANDATE',x_mandate_crn
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  )
  WHERE object_pri_key_1 = x_object_pri_key_1;
 
 
 GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'LEAD STATUS SUCCESS WITH:  '||x_mandate_crn;
	ELSE 
         V_RESULT = 'LEAD STATUS FAILED WITH:  '||x_mandate_crn;
	END IF;
 end if ;    
 
OPEN X_RESULT FOR
SELECT   V_RESULT as "STATUS";

RETURN X_RESULT;  

 END;$function$
;

CREATE OR REPLACE FUNCTION public.sp_update_vflow_lead_status(x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_object text, x_status character varying, x_timestamp character varying, x_login_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
DECLARE 
X_RESULT REFCURSOR ='cur';    
v_count NUMERIC;
NUM_ROWS INT;
V_ERR  VARCHAR(4000);
V_SYSTIME_VAR  TIMESTAMP;
V_RESULT TEXT;
V_RESULT_1 TEXT;
V_check varchar(2);
V_TEST varchar(2);
v_lead_journey varchar(20);
-----------------------------------------
cur_out refcursor:= 'cur1';
rec_column   RECORD;
v_cur_out_response_code varchar(100);
v_cur_out_response_message varchar(1000);
v_cur_out_response_type varchar(100);

cur_a CURSOR for select *
                         from tb_section_status tss 
						 where object_pri_key_1 =x_object_pri_key_1
						 and role =x_login_id;
--										 AND status ='N';
										
BEGIN

select count(*) into v_count from tb_cop_buss_obj_txn tcbot 
 where coalesce(object_pri_key_1,'NA') = coalesce(x_object_pri_key_1,'NA')
  and  coalesce(object_pri_key_2,'NA') = coalesce(x_object_pri_key_2,'NA')
  and  coalesce(object_pri_key_3,'NA') = coalesce(x_object_pri_key_3,'NA')
  AND object_type = x_object_type;
 
 select  OBJECT_DATA::JSON->'AOF'->>'WORKFLOW'  into v_lead_journey from tb_cop_buss_obj_txn tcbot 
 where object_pri_key_1 = x_object_pri_key_1;

  if X_STATUS = 'BOM_REWORK' then
   	    PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRBOMAOFUPD','REWORK','REWORK BY APPROVER',x_object,X_LOGIN_ID,'','','','','',v_lead_journey);   
   	    perform  public.sp_insert_rework_lead_details(x_object_type,x_object_pri_key_1,x_object_pri_key_2,x_object_pri_key_3,x_login_id,x_status,x_object);
	 ELSif X_STATUS = 'BOM_REJECT' then
     	PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRBOMAOFUPD','REJECT','REJECTED BY APPROVER',x_object,X_LOGIN_ID,'','','','','',v_lead_journey); 
     ELSif X_STATUS = 'BOM_APPROVED' then
     	PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRBOMAOFUPD','APPROVE','APPROVED BY APPROVER','',x_login_id,'','','','','',v_lead_journey);   
 ELSif X_STATUS = 'BOM_DVU_REWORK_APPROVED' then
     	PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRBOMAOFUPD1','APPROVE','APPROVED BY APPROVER','',x_login_id,'','','','','',v_lead_journey);
     ELSif X_STATUS = 'DVU_REWORK' then
     	PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRDVUAOFUPD','REWORK','REWORK BY DVU',x_object,x_login_id,'','','','','',v_lead_journey);     
        perform  public.sp_insert_rework_lead_details(x_object_type,x_object_pri_key_1,x_object_pri_key_2,x_object_pri_key_3,x_login_id,x_status,x_object);
     ELSif X_STATUS = 'DVU_ASSIGNED' then
     	PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRDVUAOFUPD','WIP','ASSIGNED TO DVU','',X_LOGIN_ID,'','','','','',v_lead_journey); 
     ELSif X_STATUS = 'DVU_APPROVED' then
     	PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRDVUAOFUPD','APPROVE','APPROVED BY DVU','',x_login_id,'','','','','',v_lead_journey);   
     ELSif X_STATUS = 'RCU_ASSIGNED' then
     	PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRRCUAOFUPD','WIP','ASSIGNED TO RCU','',x_login_id,'','','','','',v_lead_journey);     
     ELSif X_STATUS = 'RCU_REWORK' then
     	PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRRCUAOFUPD','REWORK','REWORK BY RCU',x_object,x_login_id,'','','','','',v_lead_journey);     
   perform  public.sp_insert_rework_lead_details(x_object_type,x_object_pri_key_1,x_object_pri_key_2,x_object_pri_key_3,x_login_id,x_status,x_object);
     ELSif X_STATUS = 'RCU_APPROVED' then
     	PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRRCUAOFUPD','APPROVE','APPROVED BY RCU','',x_login_id,'','','','','',v_lead_journey);   
     ELSif X_STATUS = 'RCU_REWORK_APPROVED' then
     	PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRRCCAOFUPD','APPROVE','APPROVED BY RCU CORRECTOR','',x_login_id,'','','','','',v_lead_journey);   
     ELSif X_STATUS = 'RU_ASSIGN' then
         PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRRUUPD','ASSIGN','ASSIGNED BY RU','',x_login_id,'','','','','',v_lead_journey);
     ELSif X_STATUS = 'RU_SUBMITTED' then
         PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRRUUPD','SUBMITTED','APPROVED BY RU','',x_login_id,'','','','','',v_lead_journey);
     end if;
     

 
IF v_count >0 AND X_STATUS IN ('BOM_REWORK','RCU_REWORK','BOM_REJECT','RCU_REJECT','RU_ASSIGN','RU_SUBMITTED') THEN

        UPDATE  TB_COP_BUSS_OBJ_TXN
           SET TEXT_1 = X_STATUS, 
               modify_emp_id = x_login_id,
               text_2 =x_object, 
               text_10 = concat('checking with BOM',0),
			   --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"AOF","DRAFT_FLAG"}','"226579"')
			   DEVICE_MODIFY_TIMESTAMP =current_timestamp,
			   MODIFIED_BY = 'spupdatevflowleadstatus',
              OBJECT_DATA =JSONB_SET(CAST(OBJECT_DATA AS JSONB) , -- JSON OBJECT
                '{"AOF"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(OBJECT_DATA AS JSONB)->'AOF'|| JSONB_BUILD_OBJECT(
						'WORKFLOW_STATUS',X_STATUS
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  )
               --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"POD","GROUP","GROUP_STATUS"}','"GROUP_REJECTED"')
         WHERE object_pri_key_1 = x_object_pri_key_1;   
        
         UPDATE  tb_cop_metadata_txn
           SET TEXT_1 = X_STATUS, 
               modify_emp_id = x_login_id,
               workflow_status = X_STATUS,
               text_2 =x_object, 
               text_10 = concat('checking with BOM',0),
               entity_name = object_data::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1',
               constitution_type = object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE',
			   --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"AOF","DRAFT_FLAG"}','"226579"')
			   DEVICE_MODIFY_TIMESTAMP =current_timestamp,
			   MODIFIED_BY = 'spupdatevflowleadstatus',
              OBJECT_DATA =JSONB_SET(CAST(OBJECT_DATA AS JSONB) , -- JSON OBJECT
                '{"AOF"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(OBJECT_DATA AS JSONB)->'AOF'|| JSONB_BUILD_OBJECT(
						'WORKFLOW_STATUS',X_STATUS
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  )
	                  --text_10 = 'Check'
               --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"POD","GROUP","GROUP_STATUS"}','"GROUP_REJECTED"')
         WHERE object_pri_key_1 = x_object_pri_key_1;

        UPDATE  TB_COP_BUSS_OBJ_TXN
           SET 
			   OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"AOF","DRAFT_FLAG"}','"226579"')
             WHERE object_pri_key_1 = x_object_pri_key_1;    
            
            UPDATE  tb_cop_metadata_txn
           SET 
			   OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"AOF","DRAFT_FLAG"}','"226579"')
             WHERE object_pri_key_1 = x_object_pri_key_1;
            
            
         
            
   GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 then    
	V_RESULT = 'LEAD STATUS SUCCESS WITH:  '||X_STATUS;
        V_check = '01';
	ELSE 
         V_RESULT = 'LEAD STATUS FAILED WITH:  '||X_STATUS;
        V_check = '02';
	END IF;
     
ELSIF v_count >0 AND X_STATUS ='DVU_REWORK' THEN

        UPDATE  TB_COP_BUSS_OBJ_TXN
           SET TEXT_1 = X_STATUS, 
               modify_emp_id = x_login_id,
               text_2 =x_object,
               --text_10 = 0,
--               text_10 = 0,
               text_10 = concat('checking with DVU_REWORK',0),
			   --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"AOF","DRAFT_FLAG"}','"226579"')
              DEVICE_MODIFY_TIMESTAMP =current_timestamp,
              MODIFIED_BY = 'spupdatevflowleadstatus',
              OBJECT_DATA =JSONB_SET(CAST(OBJECT_DATA AS JSONB) , -- JSON OBJECT
                '{"AOF"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(OBJECT_DATA AS JSONB)->'AOF'|| JSONB_BUILD_OBJECT(
						'WORKFLOW_STATUS',X_STATUS
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  )
               --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"POD","GROUP","GROUP_STATUS"}','"GROUP_REJECTED"')
         WHERE object_pri_key_1 = x_object_pri_key_1;
        
         UPDATE  tb_cop_metadata_txn
           SET TEXT_1 = X_STATUS, 
               modify_emp_id = x_login_id,
               text_2 =x_object, 
               workflow_status = X_STATUS,
--               text_10 =0,
               text_10 = concat('checking with DVU_REWORK',0),
               entity_name = object_data::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1',
               constitution_type = object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE',
			   --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"AOF","DRAFT_FLAG"}','"226579"')
			   DEVICE_MODIFY_TIMESTAMP =current_timestamp,
			   MODIFIED_BY = 'spupdatevflowleadstatus',
              OBJECT_DATA =JSONB_SET(CAST(OBJECT_DATA AS JSONB) , -- JSON OBJECT
                '{"AOF"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(OBJECT_DATA AS JSONB)->'AOF'|| JSONB_BUILD_OBJECT(
						'WORKFLOW_STATUS',X_STATUS
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  )
	                  where object_pri_key_1  = x_object_pri_key_1;

        UPDATE  TB_COP_BUSS_OBJ_TXN
           SET OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"AOF","DRAFT_FLAG"}','"226579"')
             WHERE object_pri_key_1 = x_object_pri_key_1;
            
        UPDATE  tb_cop_metadata_txn
           SET 
			   OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"AOF","DRAFT_FLAG"}','"226579"')
             WHERE object_pri_key_1 = x_object_pri_key_1;
	
   FOR i IN cur_a loop 
 
UPDATE  tb_section_status ts
SET 
 status = i.STATUS,
 status_remarks = i.status_remarks,
 status_timetstamp = i.status_timetstamp,
 modified_by = 'updsectionstatus',
 object_data = i.object_data
where section_id = i.section_id
and object_pri_key_1 = x_object_pri_key_1;
end loop;

 update tb_section_status
SET 
-- status = 'W',
-- status_remarks ='',
  modified_by = 'updsectionstatus',
 object_data = '{}'
where  object_pri_key_1 = x_object_pri_key_1
and role = x_login_id;
 
   GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'LEAD STATUS SUCCESS WITH:  '||X_STATUS;
        V_check = '01';
	ELSE 
         V_RESULT = 'LEAD STATUS FAILED WITH:  '||X_STATUS;
        V_check = '02';
	END IF;

            
ELSIF v_count >0 AND X_STATUS NOT IN ('BOM_REWORK','DVU_REWORK','RCU_REWORK','UPD_OBJECT','BOM_REJECT','RCU_REJECT','RCU_REWORK_APPROVED') THEN

UPDATE  TB_COP_BUSS_OBJ_TXN
           SET     
              OBJECT_DATA =cast(x_object as jsonb)
         WHERE object_pri_key_1 = x_object_pri_key_1;
        
        UPDATE  tb_cop_metadata_txn
           SET     
              OBJECT_DATA =cast(x_object as jsonb)
         WHERE object_pri_key_1 = x_object_pri_key_1;

UPDATE  TB_COP_BUSS_OBJ_TXN
           SET TEXT_1 = X_STATUS, 
               modify_emp_id = x_login_id,
               --text_10 = 0,
               text_10 = 'checking with not in condition',
			   DEVICE_MODIFY_TIMESTAMP =current_timestamp,
			   MODIFIED_BY = 'spupdatevflowleadstatus',
              OBJECT_DATA =JSONB_SET(CAST(OBJECT_DATA AS JSONB) , -- JSON OBJECT
                '{"AOF"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(OBJECT_DATA AS JSONB)->'AOF'|| JSONB_BUILD_OBJECT(
						'WORKFLOW_STATUS',X_STATUS
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  )
               --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"POD","GROUP","GROUP_STATUS"}','"GROUP_REJECTED"')
         WHERE object_pri_key_1 = x_object_pri_key_1;
        
   UPDATE  tb_cop_metadata_txn
           SET TEXT_1 = X_STATUS, 
               modify_emp_id = x_login_id,
               text_2 =x_object, 
               workflow_status = X_STATUS,
--               text_10 =0,
               text_10 = concat('checking with NOT IN',0),
               entity_name = object_data::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1',
               constitution_type = object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE',
			   --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"AOF","DRAFT_FLAG"}','"226579"')
			   DEVICE_MODIFY_TIMESTAMP =current_timestamp,
			   MODIFIED_BY = 'spupdatevflowleadstatus',
              OBJECT_DATA =JSONB_SET(CAST(OBJECT_DATA AS JSONB) , -- JSON OBJECT
                '{"AOF"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(OBJECT_DATA AS JSONB)->'AOF'|| JSONB_BUILD_OBJECT(
						'WORKFLOW_STATUS',X_STATUS
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  )
	                  where object_pri_key_1  = x_object_pri_key_1;
	                 
UPDATE  tb_cop_metadata_txn           
	SET     
              OBJECT_DATA =cast(x_object as jsonb)
         WHERE object_pri_key_1 = x_object_pri_key_1;
        
        
-------- ADDED ON 09/11/22
IF X_STATUS in ('BOM_DVU_REWORK_APPROVED','DVU_ASSIGNED') THEN 

 begin
	perform public.set_section_status_dvu(x_object_type ,x_object_pri_key_1 ,x_object_pri_key_2 ,x_object_pri_key_3 ,x_login_id ,'{}');
		
     loop
	   FETCH cur_out INTO rec_column;
	   EXIT WHEN NOT FOUND;
	   v_cur_out_response_code := rec_column."STATUS";
	   v_cur_out_response_message := rec_column."RESPONSE_MESSAGE" ;

	 END LOOP;

   CLOSE cur_out;
  
 end;        
end if;
       
        
 GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 then
         V_RESULT = 'LEAD STATUS SUCCESS WITH:  '||X_STATUS;
        V_check = '01';
	ELSE 
    V_RESULT = 'LEAD STATUS FAILED WITH:  '||X_STATUS;
   V_check = '02';
	END IF;
     
   ELSIF v_count >0 AND X_STATUS ='UPD_OBJECT' then
   
	    UPDATE  TB_COP_BUSS_OBJ_TXN
           SET     modify_emp_id =x_login_id,
           --text_10 = 0,
           text_10 ='Checking with UPD_OBJECT condition',
			   DEVICE_MODIFY_TIMESTAMP =current_timestamp,
			   MODIFIED_BY = 'spupdatevflowleadstatus',
              OBJECT_DATA =cast(x_object as jsonb)
         WHERE object_pri_key_1 = x_object_pri_key_1;
        
        update tb_cop_metadata_txn 
        SET     modify_emp_id =x_login_id,
           --text_10 = 0,
           text_10 ='Checking with UPD_OBJECT condition',
           entity_name = object_data::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1',
           constitution_type = object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE',
        --   workflow_status = X_STATUS,
			   DEVICE_MODIFY_TIMESTAMP =current_timestamp,
			   MODIFIED_BY = 'spupdatevflowleadstatus',
              OBJECT_DATA =cast(x_object as jsonb)
         WHERE object_pri_key_1 = x_object_pri_key_1;
        
        
 GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'LEAD OBJECT SUCCESS';
        V_check = '01';
	ELSE 
    V_RESULT = 'LEAD OBJECT FAILED';
   V_check = '02';
	END IF;
     
   ELSIF v_count >0 AND X_STATUS ='RCU_REWORK_APPROVED' then
   
	    UPDATE  tb_btc_accesscontrol 
           SET  emp_id = x_login_id
         WHERE object_pri_key_1 = x_object_pri_key_1
         and system_role = 'RCU_Correcter';
        
        UPDATE  TB_COP_BUSS_OBJ_TXN
           SET     
              OBJECT_DATA =cast(x_object as jsonb)
         WHERE object_pri_key_1 = x_object_pri_key_1;
        
        UPDATE  tb_cop_metadata_txn
           SET     
              OBJECT_DATA =cast(x_object as jsonb)
         WHERE object_pri_key_1 = x_object_pri_key_1;

UPDATE  TB_COP_BUSS_OBJ_TXN
           SET TEXT_1 = X_STATUS, 
               modify_emp_id = x_login_id,
               --text_10 = 0,
               text_10 ='Checking with RCU_REWORK_APPROVED condition',
			   DEVICE_MODIFY_TIMESTAMP =current_timestamp,
			   MODIFIED_BY = 'spupdatevflowleadstatus',
              OBJECT_DATA =JSONB_SET(CAST(OBJECT_DATA AS JSONB) , -- JSON OBJECT
                '{"AOF"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(OBJECT_DATA AS JSONB)->'AOF'|| JSONB_BUILD_OBJECT(
						'WORKFLOW_STATUS',X_STATUS
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  )
               --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"POD","GROUP","GROUP_STATUS"}','"GROUP_REJECTED"')
         WHERE object_pri_key_1 = x_object_pri_key_1;
        
UPDATE  tb_cop_metadata_txn
           SET TEXT_1 = X_STATUS, 
               modify_emp_id = x_login_id,
               --text_10 = 0,
               workflow_status = X_STATUS,
               text_10 ='Checking with RCU_REWORK_APPROVED condition',
               entity_name = object_data::JSON->'AOF'->'BUS_DATA'->>'BUS_NAME_1',
               constitution_type = object_data::JSON->'AOF'->'CA'->>'CONSTITUTION_TYPE',
			   DEVICE_MODIFY_TIMESTAMP =current_timestamp,
			   MODIFIED_BY = 'spupdatevflowleadstatus',
              OBJECT_DATA =JSONB_SET(CAST(OBJECT_DATA AS JSONB) , -- JSON OBJECT
                '{"AOF"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(OBJECT_DATA AS JSONB)->'AOF'|| JSONB_BUILD_OBJECT(
						'WORKFLOW_STATUS',X_STATUS
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  )
               --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"POD","GROUP","GROUP_STATUS"}','"GROUP_REJECTED"')
         WHERE object_pri_key_1 = x_object_pri_key_1;
        
        
        
 GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'LEAD OBJECT SUCCESS';
        V_check = '01';
	ELSE 
    V_RESULT = 'LEAD OBJECT FAILED';
   V_check = '02';
	END IF;


ELSE
 GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
    V_RESULT = 'LEAD STATUS FAILED WITH:  '||X_STATUS;
   V_check = '02';
	END IF;
     
	OPEN X_RESULT for
	select 'code reached at the end' as res_msg;
return x_result;
END IF;
OPEN X_RESULT FOR
SELECT   V_RESULT as "STATUS", V_check as "V_check";

RETURN X_RESULT;  

END;
$function$
;

CREATE OR REPLACE FUNCTION public.sp_update_vflow_lead_status_nreq(x_object_type character varying, x_object_pri_key_1 character varying, x_object_pri_key_2 character varying, x_object_pri_key_3 character varying, x_object text, x_status character varying, x_timestamp character varying, x_login_id character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ 
DECLARE 
X_RESULT REFCURSOR:='CUR';    
v_count NUMERIC;
NUM_ROWS INT;
V_ERR  VARCHAR(4000);
V_SYSTIME_VAR  TIMESTAMP;
V_RESULT TEXT;
V_RESULT_1 TEXT;
V_check varchar(2);
V_TEST varchar(2);
cur_a CURSOR for select section_id, status_remarks, object_data, status_timetstamp from tb_section_status tss 
										 where object_pri_key_1 =x_object_pri_key_1
										 and role =x_login_id
										 AND status ='N';
BEGIN

select count(*) into v_count from tb_cop_buss_obj_txn tcbot 
 where coalesce(object_pri_key_1,'NA') = coalesce(x_object_pri_key_1,'NA')
  and  coalesce(object_pri_key_2,'NA') = coalesce(x_object_pri_key_2,'NA')
  and  coalesce(object_pri_key_3,'NA') = coalesce(x_object_pri_key_3,'NA')
  AND object_type = x_object_type;

  if X_STATUS = 'BOM_REWORK' then
   	    PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRBOMAOFUPD','REWORK','REWORK BY APPROVER',x_object,X_LOGIN_ID,'','','','','');   
   	    perform  public.sp_insert_rework_lead_details(x_object_type,x_object_pri_key_1,x_object_pri_key_2,x_object_pri_key_3,x_login_id,x_status,x_object);
	 ELSif X_STATUS = 'BOM_REJECT' then
     	PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRBOMAOFUPD','REJECT','REJECTED BY APPROVER',x_object,X_LOGIN_ID,'','','','',''); 
     ELSif X_STATUS = 'BOM_APPROVED' then
     	PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRBOMAOFUPD','APPROVE','APPROVED BY APPROVER','',x_login_id,'','','','','');   
 ELSif X_STATUS = 'BOM_DVU_REWORK_APPROVED' then
     	PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRBOMAOFUPD1','APPROVE','APPROVED BY APPROVER','',x_login_id,'','','','','');
     ELSif X_STATUS = 'DVU_REWORK' then
     	PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRDVUAOFUPD','REWORK','REWORK BY DVU',x_object,x_login_id,'','','','','');     
        perform  public.sp_insert_rework_lead_details(x_object_type,x_object_pri_key_1,x_object_pri_key_2,x_object_pri_key_3,x_login_id,x_status,x_object);
     ELSif X_STATUS = 'DVU_ASSIGNED' then
     	PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRDVUAOFUPD','WIP','ASSIGNED TO DVU','',X_LOGIN_ID,'','','','',''); 
     ELSif X_STATUS = 'DVU_APPROVED' then
     	PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRDVUAOFUPD','APPROVE','APPROVED BY DVU','',x_login_id,'','','','','');   
     ELSif X_STATUS = 'RCU_ASSIGNED' then
     	PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRRCUAOFUPD','WIP','ASSIGNED TO RCU','',x_login_id,'','','','','');     
     ELSif X_STATUS = 'RCU_REWORK' then
     	PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRRCUAOFUPD','REWORK','REWORK BY RCU',x_object,x_login_id,'','','','','');     
   perform  public.sp_insert_rework_lead_details(x_object_type,x_object_pri_key_1,x_object_pri_key_2,x_object_pri_key_3,x_login_id,x_status,x_object);
     ELSif X_STATUS = 'RCU_APPROVED' then
     	PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRRCUAOFUPD','APPROVE','APPROVED BY RCU','',x_login_id,'','','','','');   
     ELSif X_STATUS = 'RCU_REWORK_APPROVED' then
     	PERFORM public.sp_insert_aof_history('AOF',x_object_pri_key_1,'','','PRRCCAOFUPD','APPROVE','APPROVED BY RCU CORRECTOR','',x_login_id,'','','','','');   
     end if;
     

 
IF v_count >0 AND X_STATUS IN ('BOM_REWORK','RCU_REWORK','BOM_REJECT','RCU_REJECT') THEN

        UPDATE  TB_COP_BUSS_OBJ_TXN
           SET TEXT_1 = X_STATUS, 
               modify_emp_id = x_login_id,
               text_2 =x_object, 
               text_10 = 0,
			   --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"AOF","DRAFT_FLAG"}','"226579"')
			   DEVICE_MODIFY_TIMESTAMP =current_timestamp,
              OBJECT_DATA =JSONB_SET(CAST(OBJECT_DATA AS JSONB) , -- JSON OBJECT
                '{"AOF"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(OBJECT_DATA AS JSONB)->'AOF'|| JSONB_BUILD_OBJECT(
						'WORKFLOW_STATUS',X_STATUS
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  )
               --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"POD","GROUP","GROUP_STATUS"}','"GROUP_REJECTED"')
         WHERE object_pri_key_1 = x_object_pri_key_1;

        UPDATE  TB_COP_BUSS_OBJ_TXN
           SET 
			   OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"AOF","DRAFT_FLAG"}','"226579"')
             WHERE object_pri_key_1 = x_object_pri_key_1;
         
            
   GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 then    
	V_RESULT = 'LEAD STATUS SUCCESS WITH:  '||X_STATUS;
        V_check = '01';
	ELSE 
         V_RESULT = 'LEAD STATUS FAILED WITH:  '||X_STATUS;
        V_check = '02';
	END IF;
     
ELSIF v_count >0 AND X_STATUS ='DVU_REWORK' THEN

        UPDATE  TB_COP_BUSS_OBJ_TXN
           SET TEXT_1 = X_STATUS, 
               modify_emp_id = x_login_id,
               text_2 =x_object,
               text_10 = 0,
			   --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"AOF","DRAFT_FLAG"}','"226579"')
              DEVICE_MODIFY_TIMESTAMP =current_timestamp,
              OBJECT_DATA =JSONB_SET(CAST(OBJECT_DATA AS JSONB) , -- JSON OBJECT
                '{"AOF"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(OBJECT_DATA AS JSONB)->'AOF'|| JSONB_BUILD_OBJECT(
						'WORKFLOW_STATUS',X_STATUS
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  )
               --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"POD","GROUP","GROUP_STATUS"}','"GROUP_REJECTED"')
         WHERE object_pri_key_1 = x_object_pri_key_1;

        UPDATE  TB_COP_BUSS_OBJ_TXN
           SET OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"AOF","DRAFT_FLAG"}','"226579"')
             WHERE object_pri_key_1 = x_object_pri_key_1;
	
   FOR i IN cur_a loop 
 
UPDATE  tb_section_status ts
SET 
 status = 'N',
 status_remarks = i.status_remarks,
 status_timetstamp = i.status_timetstamp,
 modified_by = 'updsectionstatus',
 object_data = i.object_data
where section_id = i.section_id
and object_pri_key_1 = x_object_pri_key_1;
end loop;

 update tb_section_status
SET 
-- status = 'W',
-- status_remarks ='',
  modified_by = 'updsectionstatus',
 object_data = '{}'
where  object_pri_key_1 = x_object_pri_key_1
and role = x_login_id;
 
   GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'LEAD STATUS SUCCESS WITH:  '||X_STATUS;
        V_check = '01';
	ELSE 
         V_RESULT = 'LEAD STATUS FAILED WITH:  '||X_STATUS;
        V_check = '02';
	END IF;

            
ELSIF v_count >0 AND X_STATUS NOT IN ('BOM_REWORK','DVU_REWORK','RCU_REWORK','UPD_OBJECT','BOM_REJECT','RCU_REJECT','RCU_REWORK_APPROVED') THEN

UPDATE  TB_COP_BUSS_OBJ_TXN
           SET     
              OBJECT_DATA =cast(x_object as jsonb)
         WHERE object_pri_key_1 = x_object_pri_key_1;

UPDATE  TB_COP_BUSS_OBJ_TXN
           SET TEXT_1 = X_STATUS, 
               modify_emp_id = x_login_id,
               text_10 = 0,
			   DEVICE_MODIFY_TIMESTAMP =current_timestamp,
              OBJECT_DATA =JSONB_SET(CAST(OBJECT_DATA AS JSONB) , -- JSON OBJECT
                '{"AOF"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(OBJECT_DATA AS JSONB)->'AOF'|| JSONB_BUILD_OBJECT(
						'WORKFLOW_STATUS',X_STATUS
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  )
               --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"POD","GROUP","GROUP_STATUS"}','"GROUP_REJECTED"')
         WHERE object_pri_key_1 = x_object_pri_key_1;
        
        
 GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 then
         V_RESULT = 'LEAD STATUS SUCCESS WITH:  '||X_STATUS;
        V_check = '01';
	ELSE 
    V_RESULT = 'LEAD STATUS FAILED WITH:  '||X_STATUS;
   V_check = '02';
	END IF;
     
   ELSIF v_count >0 AND X_STATUS ='UPD_OBJECT' then
   
	    UPDATE  TB_COP_BUSS_OBJ_TXN
           SET     modify_emp_id =x_login_id,
           text_10 = 0,
			   DEVICE_MODIFY_TIMESTAMP =current_timestamp,
              OBJECT_DATA =cast(x_object as jsonb)
         WHERE object_pri_key_1 = x_object_pri_key_1;
        
 GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'LEAD OBJECT SUCCESS';
        V_check = '01';
	ELSE 
    V_RESULT = 'LEAD OBJECT FAILED';
   V_check = '02';
	END IF;
     
   ELSIF v_count >0 AND X_STATUS ='RCU_REWORK_APPROVED' then
   
	    UPDATE  tb_btc_accesscontrol 
           SET  emp_id = x_login_id
         WHERE object_pri_key_1 = x_object_pri_key_1
         and system_role = 'RCU_Correcter';
        
        UPDATE  TB_COP_BUSS_OBJ_TXN
           SET     
              OBJECT_DATA =cast(x_object as jsonb)
         WHERE object_pri_key_1 = x_object_pri_key_1;

UPDATE  TB_COP_BUSS_OBJ_TXN
           SET TEXT_1 = X_STATUS, 
               modify_emp_id = x_login_id,
               text_10 = 0,
			   DEVICE_MODIFY_TIMESTAMP =current_timestamp,
              OBJECT_DATA =JSONB_SET(CAST(OBJECT_DATA AS JSONB) , -- JSON OBJECT
                '{"AOF"}', -- PATH , SEPERATE CHILD PATH
	                 CAST(OBJECT_DATA AS JSONB)->'AOF'|| JSONB_BUILD_OBJECT(
						'WORKFLOW_STATUS',X_STATUS
						)
						::TEXT::JSONB -- VALUE
	                  --,TRUE
	                  )
               --OBJECT_DATA = JSONB_SET(OBJECT_DATA::JSONB, '{"POD","GROUP","GROUP_STATUS"}','"GROUP_REJECTED"')
         WHERE object_pri_key_1 = x_object_pri_key_1;
        
        
 GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
         V_RESULT = 'LEAD OBJECT SUCCESS';
        V_check = '01';
	ELSE 
    V_RESULT = 'LEAD OBJECT FAILED';
   V_check = '02';
	END IF;


ELSE
 GET DIAGNOSTICS NUM_ROWS = ROW_COUNT;  
	IF NUM_ROWS  > 0 THEN
    V_RESULT = 'LEAD STATUS FAILED WITH:  '||X_STATUS;
   V_check = '02';
	END IF;
     
	
END IF;
OPEN X_RESULT FOR
SELECT   V_RESULT as "STATUS", V_check as "V_check";

RETURN X_RESULT;  

END;$function$
;

CREATE OR REPLACE FUNCTION public.test_jatin_fn(x_login_id character varying, x_object_pri_key_1 character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$ declare X_RESULT refcursor:='cur';
P_SYSTEM_ROLE varchar(30);
V_DATA text;
v_count int;
begin
	
select count(*) into v_count from tb_aof_history tah2 
 where object_pri_key_1 = X_OBJECT_PRI_KEY_1
and TO_CHAR(tah2.created_timestamp , 'DD-MM-YYYY') <'16-02-2022';

if v_count = 0 then 

select jsonb_agg(row_to_json(t)) into v_data from 
	(select to_CHAR(disp.created_timestamp ,'DD-MM-YYYY HH24:MI:SS')as "Activity_Date", 
		  cfg.prc_grp_disp_desc as "user_role",
		   coalesce(hrms.employee_number,'System') as "user_id",
		    coalesce(hrms.first_name || ' '|| hrms.last_name,'System') as "user_name",
		   disp.prc_grp_disp as "actoion_name",
		   disp.created_timestamp as "created_timestamp",
		   disp.config_id as "seq_id"
	from tb_btc_prc_grp_disp_hist disp join
		  (select process_group, min(created_timestamp) created_timestamp, prc_grp_disp
		  from tb_btc_prc_grp_disp_hist
		  where object_pri_key_1= X_OBJECT_PRI_KEY_1
		   group by process_group, prc_grp_disp) samp
	on (samp.process_group= disp.process_group and samp.created_timestamp = disp.created_timestamp)
	join tb_btc_prc_grp_disp_cfg cfg on cfg.process_group = disp.process_group 
	left join tb_emp_hrms hrms on upper(hrms.employee_number )= upper(disp.login_id)
	where disp.object_pri_key_1 = X_OBJECT_PRI_KEY_1
	and disp.process_group != 'ENRICHMENT'
	and disp.log_action = 'INSERT'
	group by disp.process_group, disp.object_pri_key_1, disp.prc_grp_disp, disp.config_id, 
	disp.created_timestamp, disp.start_timestamp, hrms.employee_number, hrms.first_name,hrms.last_name,cfg.prc_grp_disp_desc
	order by disp.created_timestamp, disp.config_id,cfg.prc_grp_disp_desc)t;

elsif V_COUNT >0 then 

select jsonb_agg(row_to_json(t)) into v_data from
(select * from  
(select --created_timestamp as "Activity_Date",
to_CHAR(created_timestamp ,'DD-MM-YYYY HH24:MI:SS')as "Activity_Date", 
case when  process_group = 'BOM_APPROVER' 
     then 'APPROVER'
     when  process_group = 'RCU_Correcter' 
     then 'RCU CORRECTOR'
     else process_group end as "user_role",
 case when (process_group in ('DVU','RCU') and 
             prc_grp_disp ='USERWAIT')
      then ''
      when (process_group = 'BOM_APPROVER' and 
             prc_grp_disp ='USERWAIT')
      then (select approver_id from tb_se_app_mapping tsam 
                where se_id in ( select distinct ta.user_id from tb_aof_history ta
                                 where  process_group ='RM_SE'
                                 and TA.object_pri_key_1= TAH.object_pri_key_1))
      when (process_group = 'RCU_Correcter' and 
             prc_grp_disp ='USERWAIT')                                 
       then (select RC.rcu_corrector_id from tb_emp_hrms teh , tb_branch_rcu_corrector_mapping RC 
        where TEH.branch_code = RC.branch 
        and TEH.employee_number in ( select distinct ta.user_id from tb_aof_history ta
                                 where  process_group ='RM_SE'
                                 and TA.object_pri_key_1= TAH.object_pri_key_1))
      ELSE user_id end as "user_id",
 (select CONCAT(TEH.first_name ,' ',TEH.middle_names ,' ',
         TEH.last_name) as "user_name"
       from tb_emp_hrms teh  
       where teh.employee_number =tah.user_id),
       (select PROCESS_NAME from tb_process_group_nomenclature1 NM 
         where NM.prc_grp_disp = TAH.prc_grp_disp
          and NM.process_group =TAH.process_group ) as "actoion_name",
--   prc_grp_disp as "actoion_name",
       seq_id 
from tb_aof_history tah 
where object_pri_key_1 =X_OBJECT_PRI_KEY_1
and process_group not in ('ENRICHMENT','SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNT','ACCOUNTCASA',
                          'CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')
union 
select 
--dis.created_timestamp as "Activity_Date",   
to_CHAR(dis.created_timestamp ,'DD-MM-YYYY HH24:MI:SS')as "Activity_Date", 
      (select PROCESS_NAME from tb_process_group_nomenclature1 NM 
         where NM.prc_grp_disp = DIS.prc_grp_disp
          and NM.process_group =DIS.process_group ) as "user_role",
'System' as "user_id",
'System' as "user_name",
       (select text_1 from tb_process_group_nomenclature1 NM 
         where NM.prc_grp_disp = DIS.prc_grp_disp
          and NM.process_group =DIS.process_group ) as "actoion_name",
--dis.prc_grp_disp as "actoion_name",
config_id 
from tb_btc_prc_grp_disp_hist dis  
where object_pri_key_1 =X_OBJECT_PRI_KEY_1
and dis.process_group in ('SIGNATURE','FATCA Handoff','CIF','CERSAI','ACCOUNT','ACCOUNTCASA',
                          'CIFCORP','CIFMAN','ACCOUNTNOM','ACCOUNTMAN','GSTIN')                        
and dis.prc_grp_disp in ('WAIT','SUCCESS','FAILURE'))A
order by "Activity_Date", seq_id )t;

	else 
	V_DATA = 'No Data Exist';
 END IF;

  IF V_DATA = ''
    THEN
     V_DATA := NULL;
  END IF;
 
 OPEN X_RESULT FOR

  SELECT
    V_DATA AS "OBJECT";
 RETURN X_RESULT;

/*
EXCEPTION WHEN OTHERS THEN

V_ERR:=SQLERRM;
OPEN ref FOR SELECT '' as "UNSUCCESSFUL",
'In-correct data. Some error has Occured' as "ERROR_REMARKS",
                         'tb_client_master' as "TABLENAME",
                '' as "ACTION";

return ref;                                    
*/
END;
 $function$
;

CREATE OR REPLACE FUNCTION public.tf_h_tb_btc_accesscontrol()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$ 
			declare 
            v_user varchar(100);
			 v_state   TEXT;
			 v_msg     TEXT;
			 v_detail  TEXT;
			 v_hint    TEXT;
			 v_context TEXT;
			begin
                
                 select user into v_user;
				 if TG_OP in ('INSERT','UPDATE') then
				
                      INSERT INTO public.tb_btc_accesscontrol_hist 
			                  (workflow_group_id,object_pri_key_1,object_pri_key_2,object_pri_key_3,object_type,location,system_role,emp_id,access_type,access_group,update_login_id,emp_hierarchy_id,location_hierarchy_id,config_id,created_by,created_timestamp,modified_by,modified_timestamp,log_action,log_time,log_user,system_name)
			           VALUES (new.workflow_group_id,new.object_pri_key_1,new.object_pri_key_2,new.object_pri_key_3,new.object_type,new.location,new.system_role,new.emp_id,new.access_type,new.access_group,new.update_login_id,new.emp_hierarchy_id,new.location_hierarchy_id,new.config_id,new.created_by,new.created_timestamp,new.modified_by,new.modified_timestamp,TG_OP,CURRENT_TIMESTAMP,'tf_h_tb_btc_accesscontrol'||'-'||v_user,CURRENT_DATABASE());
			    
                    RETURN new;           
			     
                 elseif TG_OP = 'DELETE' THEN
				
		              INSERT INTO public.tb_btc_accesscontrol_hist 
		                      (workflow_group_id,object_pri_key_1,object_pri_key_2,object_pri_key_3,object_type,location,system_role,emp_id,access_type,access_group,update_login_id,emp_hierarchy_id,location_hierarchy_id,config_id,created_by,created_timestamp,modified_by,modified_timestamp,log_action,log_time,log_user,system_name)
		               VALUES (old.workflow_group_id,old.object_pri_key_1,old.object_pri_key_2,old.object_pri_key_3,old.object_type,old.location,old.system_role,old.emp_id,old.access_type,old.access_group,old.update_login_id,old.emp_hierarchy_id,old.location_hierarchy_id,old.config_id,old.created_by,old.created_timestamp,old.modified_by,old.modified_timestamp,TG_OP,CURRENT_TIMESTAMP,'tf_h_tb_btc_accesscontrol'||'-'||v_user,CURRENT_DATABASE());
			         
                      return OLD;

				 end if;
			
  EXCEPTION
             WHEN OTHERS THEN
                   get stacked diagnostics
				        v_state   = returned_sqlstate,
				        v_msg     = message_text,
				        v_detail  = pg_exception_detail,
				        v_hint    = pg_exception_hint,
				        v_context = pg_exception_context;
          
                   perform public.sp_ins_db_exception_log(
									'kotak',--'org_id',
									'kotak',--'app_id',
									 'tf_h_tb_btc_accesscontrol',--'service_name',
									'tf_h_tb_btc_accesscontrol',--'object_name',
									'123',--'pw_request_id',
									'0',--'login_id',
									'NA',--'object_pri_key_1',
									'NA',--'object_pri_key_2',
									'NA',--'object_pri_key_3',
									'CREATE HIST TRIGGER PROC',--'object_type',
									v_state,--'err_state',
							        v_msg,--'err_msg',
							        v_detail,--'err_detail',
							        v_hint,--'err_hint',
							        v_context,--'err_context',
									'',--'ref_data_1',
									'',--'ref_data_2',
									'',--'ref_data_3',
									'',--'ref_data_4',
									'',--'ref_data_5',
									'',--'ref_data_6',
									'',--'ref_data_7',
									'N',--'is_processed_1',
									'N',--'is_processed_2',
									NULL,--'is_processed_1_timestamp',
									NULL,--'is_processed_1_timestamp',
									''--'developer_remarks'
									);
	 
        return NULL;
			END;
			$function$
;

CREATE OR REPLACE FUNCTION public.tf_h_tb_btc_accesscontrol_cfg()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$ 
			declare 
            v_user varchar(100);
			 v_state   TEXT;
			 v_msg     TEXT;
			 v_detail  TEXT;
			 v_hint    TEXT;
			 v_context TEXT;
			begin
                
                 select user into v_user;
				 if TG_OP in ('INSERT','UPDATE') then
				
                      INSERT INTO public.tb_btc_accesscontrol_cfg_hist 
			                  (config_id,workflow_group_id,process_group,prc_grp_disp,access_type,action_flag,system_role,location,emp_id,access_group,execution_br_id,location_function,access_group_function,emp_function,effective_date,ineffective_date,internal_flag,created_by,created_timestamp,modified_by,modified_timestamp,delete_current,log_action,log_time,log_user,system_name)
			           VALUES (new.config_id,new.workflow_group_id,new.process_group,new.prc_grp_disp,new.access_type,new.action_flag,new.system_role,new.location,new.emp_id,new.access_group,new.execution_br_id,new.location_function,new.access_group_function,new.emp_function,new.effective_date,new.ineffective_date,new.internal_flag,new.created_by,new.created_timestamp,new.modified_by,new.modified_timestamp,new.delete_current,TG_OP,CURRENT_TIMESTAMP,'tf_h_tb_btc_accesscontrol_cfg'||'-'||v_user,CURRENT_DATABASE());
			    
                    RETURN new;           
			     
                 elseif TG_OP = 'DELETE' THEN
				
		              INSERT INTO public.tb_btc_accesscontrol_cfg_hist 
		                      (config_id,workflow_group_id,process_group,prc_grp_disp,access_type,action_flag,system_role,location,emp_id,access_group,execution_br_id,location_function,access_group_function,emp_function,effective_date,ineffective_date,internal_flag,created_by,created_timestamp,modified_by,modified_timestamp,delete_current,log_action,log_time,log_user,system_name)
		               VALUES (old.config_id,old.workflow_group_id,old.process_group,old.prc_grp_disp,old.access_type,old.action_flag,old.system_role,old.location,old.emp_id,old.access_group,old.execution_br_id,old.location_function,old.access_group_function,old.emp_function,old.effective_date,old.ineffective_date,old.internal_flag,old.created_by,old.created_timestamp,old.modified_by,old.modified_timestamp,old.delete_current,TG_OP,CURRENT_TIMESTAMP,'tf_h_tb_btc_accesscontrol_cfg'||'-'||v_user,CURRENT_DATABASE());
			         
                      return OLD;

				 end if;
			
  EXCEPTION
             WHEN OTHERS THEN
                   get stacked diagnostics
				        v_state   = returned_sqlstate,
				        v_msg     = message_text,
				        v_detail  = pg_exception_detail,
				        v_hint    = pg_exception_hint,
				        v_context = pg_exception_context;
          
                   perform public.sp_ins_db_exception_log(
									'public',--'org_id',
									'public',--'app_id',
									 'tf_h_tb_btc_accesscontrol_cfg',--'service_name',
									'tf_h_tb_btc_accesscontrol_cfg',--'object_name',
									'123',--'pw_request_id',
									'0',--'login_id',
									'NA',--'object_pri_key_1',
									'NA',--'object_pri_key_2',
									'NA',--'object_pri_key_3',
									'CREATE HIST TRIGGER PROC',--'object_type',
									v_state,--'err_state',
							        v_msg,--'err_msg',
							        v_detail,--'err_detail',
							        v_hint,--'err_hint',
							        v_context,--'err_context',
									'',--'ref_data_1',
									'',--'ref_data_2',
									'',--'ref_data_3',
									'',--'ref_data_4',
									'',--'ref_data_5',
									'',--'ref_data_6',
									'',--'ref_data_7',
									'N',--'is_processed_1',
									'N',--'is_processed_2',
									NULL,--'is_processed_1_timestamp',
									NULL,--'is_processed_1_timestamp',
									''--'developer_remarks'
									);
	 
        return NULL;
			END;
			$function$
;

CREATE OR REPLACE FUNCTION public.tf_h_tb_btc_prc_grp_disp()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$ 
			declare 
            v_user varchar(100);
			 v_state   TEXT;
			 v_msg     TEXT;
			 v_detail  TEXT;
			 v_hint    TEXT;
			 v_context TEXT;
			begin
                
                 select user into v_user;
				 if TG_OP in ('INSERT','UPDATE') then
				
                      INSERT INTO public.tb_btc_prc_grp_disp_hist 
			                  (workflow_group_id,object_pri_key_1,object_pri_key_2,object_pri_key_3,object_type,process_group,prc_grp_disp,start_timestamp,end_timestamp,last_updated_timestamp,prc_grp_disp_category,process_iteration_count,process_remarks,config_id,login_id,lob,text_1,text_2,text_3,text_4,text_5,created_timestamp,created_by,modified_timestamp,modified_by,tat_in_working_hrs,log_action,log_time,log_user,system_name)
			           VALUES (new.workflow_group_id,new.object_pri_key_1,new.object_pri_key_2,new.object_pri_key_3,new.object_type,new.process_group,new.prc_grp_disp,new.start_timestamp,new.end_timestamp,new.last_updated_timestamp,new.prc_grp_disp_category,new.process_iteration_count,new.process_remarks,new.config_id,new.login_id,new.lob,new.text_1,new.text_2,new.text_3,new.text_4,new.text_5,new.created_timestamp,new.created_by,new.modified_timestamp,new.modified_by,new.tat_in_working_hrs,TG_OP,CURRENT_TIMESTAMP,'tf_h_tb_btc_prc_grp_disp'||'-'||v_user,CURRENT_DATABASE());
			    
                    RETURN new;           
			     
                 elseif TG_OP = 'DELETE' THEN
				
		              INSERT INTO public.tb_btc_prc_grp_disp_hist 
		                      (workflow_group_id,object_pri_key_1,object_pri_key_2,object_pri_key_3,object_type,process_group,prc_grp_disp,start_timestamp,end_timestamp,last_updated_timestamp,prc_grp_disp_category,process_iteration_count,process_remarks,config_id,login_id,lob,text_1,text_2,text_3,text_4,text_5,created_timestamp,created_by,modified_timestamp,modified_by,tat_in_working_hrs,log_action,log_time,log_user,system_name)
		               VALUES (old.workflow_group_id,old.object_pri_key_1,old.object_pri_key_2,old.object_pri_key_3,old.object_type,old.process_group,old.prc_grp_disp,old.start_timestamp,old.end_timestamp,old.last_updated_timestamp,old.prc_grp_disp_category,old.process_iteration_count,old.process_remarks,old.config_id,old.login_id,old.lob,old.text_1,old.text_2,old.text_3,old.text_4,old.text_5,old.created_timestamp,old.created_by,old.modified_timestamp,old.modified_by,old.tat_in_working_hrs,TG_OP,CURRENT_TIMESTAMP,'tf_h_tb_btc_prc_grp_disp'||'-'||v_user,CURRENT_DATABASE());
			         
                      return OLD;

				 end if;
			
  EXCEPTION
             WHEN OTHERS THEN
                   get stacked diagnostics
				        v_state   = returned_sqlstate,
				        v_msg     = message_text,
				        v_detail  = pg_exception_detail,
				        v_hint    = pg_exception_hint,
				        v_context = pg_exception_context;
          
                   perform public.sp_ins_db_exception_log(
									'public',--'org_id',
									'public',--'app_id',
									 'tf_h_tb_btc_prc_grp_disp',--'service_name',
									'tf_h_tb_btc_prc_grp_disp',--'object_name',
									'123',--'pw_request_id',
									'0',--'login_id',
									'NA',--'object_pri_key_1',
									'NA',--'object_pri_key_2',
									'NA',--'object_pri_key_3',
									'CREATE HIST TRIGGER PROC',--'object_type',
									v_state,--'err_state',
							        v_msg,--'err_msg',
							        v_detail,--'err_detail',
							        v_hint,--'err_hint',
							        v_context,--'err_context',
									'',--'ref_data_1',
									'',--'ref_data_2',
									'',--'ref_data_3',
									'',--'ref_data_4',
									'',--'ref_data_5',
									'',--'ref_data_6',
									'',--'ref_data_7',
									'N',--'is_processed_1',
									'N',--'is_processed_2',
									NULL,--'is_processed_1_timestamp',
									NULL,--'is_processed_1_timestamp',
									''--'developer_remarks'
									);
	 
        return NULL;
			END;
			$function$
;

CREATE OR REPLACE FUNCTION public.tf_h_tb_btc_prc_grp_disp_cfg()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$ 
			declare 
            v_user varchar(100);
			 v_state   TEXT;
			 v_msg     TEXT;
			 v_detail  TEXT;
			 v_hint    TEXT;
			 v_context TEXT;
			begin
                
--                 select user into v_user;
				 if TG_OP in ('INSERT','UPDATE') then
				
                      INSERT INTO public.tb_btc_prc_grp_disp_cfg_hist 
			                  (config_id,workflow_group_id,event_process,ref_input_1,ref_input_2,br_id,condition_function,process_group,prc_grp_disp,exec_level,remarks,notification_grp_id,ref_batch_job,effective_date,ineffective_date,internal_flag,created_by,created_timestamp,modified_by,modified_timestamp,exception_id,exception_group_id,exception_disposition,exception_level,message_id,log_action,log_time,log_user,system_name)
			           VALUES (new.config_id,new.workflow_group_id,new.event_process,new.ref_input_1,new.ref_input_2,new.br_id,new.condition_function,new.process_group,new.prc_grp_disp,new.exec_level,new.remarks,new.notification_grp_id,new.ref_batch_job,new.effective_date,new.ineffective_date,new.internal_flag,new.created_by,new.created_timestamp,new.modified_by,new.modified_timestamp,new.exception_id,new.exception_group_id,new.exception_disposition,new.exception_level,new.message_id,TG_OP,CURRENT_TIMESTAMP,'tf_h_tb_btc_prc_grp_disp_cfg'||'-'||v_user,CURRENT_DATABASE());
			    
                    RETURN new;           
			     
                 elseif TG_OP = 'DELETE' THEN
				
		              INSERT INTO public.tb_btc_prc_grp_disp_cfg_hist 
		                      (config_id,workflow_group_id,event_process,ref_input_1,ref_input_2,br_id,condition_function,process_group,prc_grp_disp,exec_level,remarks,notification_grp_id,ref_batch_job,effective_date,ineffective_date,internal_flag,created_by,created_timestamp,modified_by,modified_timestamp,exception_id,exception_group_id,exception_disposition,exception_level,message_id,log_action,log_time,log_user,system_name)
		               VALUES (old.config_id,old.workflow_group_id,old.event_process,old.ref_input_1,old.ref_input_2,old.br_id,old.condition_function,old.process_group,old.prc_grp_disp,old.exec_level,old.remarks,old.notification_grp_id,old.ref_batch_job,old.effective_date,old.ineffective_date,old.internal_flag,old.created_by,old.created_timestamp,old.modified_by,old.modified_timestamp,old.exception_id,old.exception_group_id,old.exception_disposition,old.exception_level,old.message_id,TG_OP,CURRENT_TIMESTAMP,'tf_h_tb_btc_prc_grp_disp_cfg'||'-'||v_user,CURRENT_DATABASE());
			         
                      return OLD;

				 end if;
			
  EXCEPTION
             WHEN OTHERS THEN
                   get stacked diagnostics
				        v_state   = returned_sqlstate,
				        v_msg     = message_text,
				        v_detail  = pg_exception_detail,
				        v_hint    = pg_exception_hint,
				        v_context = pg_exception_context;
          
                   perform public.sp_ins_db_exception_log(
									'public',--'org_id',
									'public',--'app_id',
									 'tf_h_tb_btc_prc_grp_disp_cfg',--'service_name',
									'tf_h_tb_btc_prc_grp_disp_cfg',--'object_name',
									'123',--'pw_request_id',
									'0',--'login_id',
									'NA',--'object_pri_key_1',
									'NA',--'object_pri_key_2',
									'NA',--'object_pri_key_3',
									'CREATE HIST TRIGGER PROC',--'object_type',
									v_state,--'err_state',
							        v_msg,--'err_msg',
							        v_detail,--'err_detail',
							        v_hint,--'err_hint',
							        v_context,--'err_context',
									'',--'ref_data_1',
									'',--'ref_data_2',
									'',--'ref_data_3',
									'',--'ref_data_4',
									'',--'ref_data_5',
									'',--'ref_data_6',
									'',--'ref_data_7',
									'N',--'is_processed_1',
									'N',--'is_processed_2',
									NULL,--'is_processed_1_timestamp',
									NULL,--'is_processed_1_timestamp',
									''--'developer_remarks'
									);
	 
        return NULL;
			END;
			$function$
;

CREATE OR REPLACE FUNCTION public.tf_h_tb_btc_prc_grp_disp_mst()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$ 
			declare 
            v_user varchar(100);
			 v_state   TEXT;
			 v_msg     TEXT;
			 v_detail  TEXT;
			 v_hint    TEXT;
			 v_context TEXT;
			begin
                
                 select user into v_user;
				 if TG_OP in ('INSERT','UPDATE') then
				
                      INSERT INTO public.tb_btc_prc_grp_disp_mst_hist 
			                  (workflow_group_id,process_group,prc_grp_disp,prc_grp_disp_category,effective_date,ineffective_date,internal_flag,created_by,created_timestamp,modified_by,modified_timestamp,prc_grp_disp_desc,exec_seq,log_action,log_time,log_user,system_name)
			           VALUES (new.workflow_group_id,new.process_group,new.prc_grp_disp,new.prc_grp_disp_category,new.effective_date,new.ineffective_date,new.internal_flag,new.created_by,new.created_timestamp,new.modified_by,new.modified_timestamp,new.prc_grp_disp_desc,new.exec_seq,TG_OP,CURRENT_TIMESTAMP,'tf_h_tb_btc_prc_grp_disp_mst'||'-'||v_user,CURRENT_DATABASE());
			    
                    RETURN new;           
			     
                 elseif TG_OP = 'DELETE' THEN
				
		              INSERT INTO public.tb_btc_prc_grp_disp_mst_hist 
		                      (workflow_group_id,process_group,prc_grp_disp,prc_grp_disp_category,effective_date,ineffective_date,internal_flag,created_by,created_timestamp,modified_by,modified_timestamp,prc_grp_disp_desc,exec_seq,log_action,log_time,log_user,system_name)
		               VALUES (old.workflow_group_id,old.process_group,old.prc_grp_disp,old.prc_grp_disp_category,old.effective_date,old.ineffective_date,old.internal_flag,old.created_by,old.created_timestamp,old.modified_by,old.modified_timestamp,old.prc_grp_disp_desc,old.exec_seq,TG_OP,CURRENT_TIMESTAMP,'tf_h_tb_btc_prc_grp_disp_mst'||'-'||v_user,CURRENT_DATABASE());
			         
                      return OLD;

				 end if;
			
  EXCEPTION
             WHEN OTHERS THEN
                   get stacked diagnostics
				        v_state   = returned_sqlstate,
				        v_msg     = message_text,
				        v_detail  = pg_exception_detail,
				        v_hint    = pg_exception_hint,
				        v_context = pg_exception_context;
          
                   perform public.sp_ins_db_exception_log(
									'public',--'org_id',
									'public',--'app_id',
									 'tf_h_tb_btc_prc_grp_disp_mst',--'service_name',
									'tf_h_tb_btc_prc_grp_disp_mst',--'object_name',
									'123',--'pw_request_id',
									'0',--'login_id',
									'NA',--'object_pri_key_1',
									'NA',--'object_pri_key_2',
									'NA',--'object_pri_key_3',
									'CREATE HIST TRIGGER PROC',--'object_type',
									v_state,--'err_state',
							        v_msg,--'err_msg',
							        v_detail,--'err_detail',
							        v_hint,--'err_hint',
							        v_context,--'err_context',
									'',--'ref_data_1',
									'',--'ref_data_2',
									'',--'ref_data_3',
									'',--'ref_data_4',
									'',--'ref_data_5',
									'',--'ref_data_6',
									'',--'ref_data_7',
									'N',--'is_processed_1',
									'N',--'is_processed_2',
									NULL,--'is_processed_1_timestamp',
									NULL,--'is_processed_1_timestamp',
									''--'developer_remarks'
									);
	 
        return NULL;
			END;
			$function$
;

CREATE OR REPLACE FUNCTION public.tf_ins_consent_hist()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$ 
			declare 
            v_user varchar(100);
			 v_state   TEXT;
			 v_msg     TEXT;
			 v_detail  TEXT;
			 v_hint    TEXT;
			 v_context TEXT;
			begin
                
                 select user into v_user;
				 if TG_OP in ('INSERT') then
				
                      INSERT INTO public.tb_consent_data_hist
						(object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, consent_type, consent_sub_type, request_sent_timestamp, request_expiry_timestamp, request_url, request_sent_to_mobile_no, requert_sent_to_email, request_status, status_source, status_update_timestamp, status_update_lat, status_update_long, status_update_address, final_status, final_status_change_allowed, created_by, created_timestamp, modified_by, modified_timestamp)
						VALUES(new.object_type, new.object_pri_key_1, new.object_pri_key_2, new.object_pri_key_3, new.consent_type, new.consent_sub_type, new.request_sent_timestamp, new.request_expiry_timestamp, new.request_url, new.request_sent_to_mobile_no, new.requert_sent_to_email, new.request_status, new.status_source, new.status_update_timestamp, new.status_update_lat, new.status_update_long, new.status_update_address, new.final_status, new.final_status_change_allowed, 'INSERT', now(), 'tf_ins_consent_hist', now());

                    RETURN new;           
				 elseif TG_OP in ('UPDATE') then
				
                      INSERT INTO public.tb_consent_data_hist
						(object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, consent_type, consent_sub_type, request_sent_timestamp, request_expiry_timestamp, request_url, request_sent_to_mobile_no, requert_sent_to_email, request_status, status_source, status_update_timestamp, status_update_lat, status_update_long, status_update_address, final_status, final_status_change_allowed, created_by, created_timestamp, modified_by, modified_timestamp)
						VALUES(new.object_type, new.object_pri_key_1, new.object_pri_key_2, new.object_pri_key_3, new.consent_type, new.consent_sub_type, new.request_sent_timestamp, new.request_expiry_timestamp, new.request_url, new.request_sent_to_mobile_no, new.requert_sent_to_email, new.request_status, new.status_source, new.status_update_timestamp, new.status_update_lat, new.status_update_long, new.status_update_address, new.final_status, new.final_status_change_allowed, 'UPDATE', now(), 'tf_ins_consent_hist', now());

                    RETURN new;                              
			     
                 elseif TG_OP = 'DELETE' THEN
				
                      INSERT INTO public.tb_consent_data_hist
						(object_type, object_pri_key_1, object_pri_key_2, object_pri_key_3, consent_type, consent_sub_type, request_sent_timestamp, request_expiry_timestamp, request_url, request_sent_to_mobile_no, requert_sent_to_email, request_status, status_source, status_update_timestamp, status_update_lat, status_update_long, status_update_address, final_status, final_status_change_allowed, created_by, created_timestamp, modified_by, modified_timestamp)
						VALUES(old.object_type, old.object_pri_key_1, old.object_pri_key_2, old.object_pri_key_3, old.consent_type, old.consent_sub_type, old.request_sent_timestamp, old.request_expiry_timestamp, old.request_url, old.request_sent_to_mobile_no, old.requert_sent_to_email, old.request_status, old.status_source, old.status_update_timestamp, old.status_update_lat, old.status_update_long, old.status_update_address, old.final_status, old.final_status_change_allowed, 'DELETE', now(), 'tf_ins_consent_hist', now());
                      return OLD;

				 end if;
			
  EXCEPTION
             WHEN OTHERS THEN
                   get stacked diagnostics
				        v_state   = returned_sqlstate,
				        v_msg     = message_text,
				        v_detail  = pg_exception_detail,
				        v_hint    = pg_exception_hint,
				        v_context = pg_exception_context;
          
                   perform public.sp_ins_db_exception_log(
									'public',--'org_id',
									'public',--'app_id',
									 'tf_ins_consent_hist',--'service_name',
									'tf_ins_consent_hist',--'object_name',
									'123',--'pw_request_id',
									'0',--'login_id',
									'NA',--'object_pri_key_1',
									'NA',--'object_pri_key_2',
									'NA',--'object_pri_key_3',
									'CREATE HIST TRIGGER PROC',--'object_type',
									v_state,--'err_state',
							        v_msg,--'err_msg',
							        v_detail,--'err_detail',
							        v_hint,--'err_hint',
							        v_context,--'err_context',
									'',--'ref_data_1',
									'',--'ref_data_2',
									'',--'ref_data_3',
									'',--'ref_data_4',
									'',--'ref_data_5',
									'',--'ref_data_6',
									'',--'ref_data_7',
									'N',--'is_processed_1',
									'N',--'is_processed_2',
									NULL,--'is_processed_1_timestamp',
									NULL,--'is_processed_1_timestamp',
									''--'developer_remarks'
									);
	 
        return NULL;
			END;
			$function$
;

CREATE OR REPLACE FUNCTION public.tf_tb_btc_prc_grp_disp_trig()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$

DECLARE

 cur_rec_accesscontrol cursor is
    select *
    from public.tb_btc_accesscontrol_cfg 
    where process_group = NEW.process_group 
      and prc_grp_disp = NEW.prc_grp_disp;
--      and workflow_group_id = NEW.workflow_group_id; -- COMMENTED FOR KOTAK_CA

--    and system_role='sales'  ;
--type tp_rec_acc_control is table of cur_rec_accesscontrol%rowtype;
--vcl_access_control tp_rec_acc_control;
--

 /*v_final_emp varchar(50);
v_location varchar(50);
v_system_role varchar(50);
v_emp_id varchar(50);
v_access_type varchar(50);
v_access_group varchar(50);
v_emp_hierarchy_id varchar(500);
v_location_hierarchy_id varchar(500);*/

v_current_location varchar(50);
v_current_system_role varchar(50);
v_current_emp_id varchar(50);

v_supervisor_no varchar(50);
v_supervisor_1 varchar(50); 
v_supervisor_2 varchar(50);
v_supervisor_count varchar(50);

v_err varchar(4000);
x_ref_object text;

v_final_system_role varchar(50);
v_workflow_group_id  varchar(50);
v_object_type varchar(50);
v_object_pri_key_1 varchar(50);
v_object_pri_key_2 varchar(50);
v_object_pri_key_3 varchar(50);
v_process_group varchar(50);
v_prc_grp_disp varchar(50);
v_text_1  varchar(50);
v_text_2  varchar(50);
v_text_3  varchar(50);
v_text_4  varchar(50);
v_text_5  varchar(50);
v_process_remarks varchar(50);
v_login_id varchar(50);

v_ac_location varchar(50);
v_ac_emp_id varchar(50);
v_ac_access_group varchar(50);
v_ac_location_function varchar(50);
v_ac_access_group_function varchar(50);
v_ac_emp_function varchar(50);


v_location_hierarchy_id varchar(50);
v_emp_hierarchy_id varchar(500);
v_created_timestamp timestamptz;

v_delete_current int4;

v_user varchar(100);
 v_state   TEXT;
 v_msg     TEXT;
 v_detail  TEXT;
 v_hint    TEXT;
 v_context TEXT;
cur_get_obj refcursor:= 'cur_access';
--cur refcursor;
v_count int;
rec_column   RECORD;
v_get_RESPONSE_MESSAGE varchar(100);
v_get_RESPONSE_TYPE varchar(100);

v_final_emp varchar(100);
v_final_location varchar(100);
v_final_access_group varchar(100);
v_current_emp_hierarchy_id varchar(100);
v_current_location_hierarchy_id varchar(100);
v_create_timestamp varchar(100);
v_created_by varchar(100);
v_updated_logid varchar(30);
v_obj varchar(20);

begin
	
	select  a.object_pri_key_1 into v_obj from tb_btc_prc_grp_disp a join tb_btc_accesscontrol t on a.object_pri_key_1 = t.object_pri_key_1 
where t.system_role = 'DVU' and a.prc_grp_disp = 'REWORK' and a.process_group = 'DVU'
and (t.emp_hierarchy_id in ('') or t.emp_hierarchy_id is null);

if v_obj is not null then 

update tb_btc_accesscontrol a set emp_hierarchy_id = 
(select modify_emp_id  from tb_cop_buss_obj_txn_hist tcbot  where object_pri_key_1 = a.object_pri_key_1  and text_1 = 'DVU_REWORK'
order by modified_timestamp desc limit 1)
where a.object_pri_key_1 in 
(select  a.object_pri_key_1  from tb_btc_prc_grp_disp a join tb_btc_accesscontrol t on a.object_pri_key_1 = t.object_pri_key_1 
where t.system_role = 'DVU' and a.prc_grp_disp = 'REWORK' and a.process_group = 'DVU'
and (t.emp_hierarchy_id in ('') or t.emp_hierarchy_id is null)
) and system_role = 'DVU';

end if;
    
	 select user into v_user;
	 --open cur_rec_accesscontrol;
     --fetch cur_rec_accesscontrol bulk collect into vcl_access_control;
     --close cur_rec_accesscontrol;
     
     v_workflow_group_id := NEW.workflow_group_id;
     v_object_type       := NEW.object_type;          
     v_object_pri_key_1  := NEW.object_pri_key_1;
     v_object_pri_key_2  := NEW.object_pri_key_2;
     v_object_pri_key_3  := NEW.object_pri_key_3;
     v_process_group     := NEW.process_group;
     v_prc_grp_disp      := NEW.prc_grp_disp;
     v_login_id          := NEW.login_id;  
   
   
   raise notice'v_workflow_group_id%',v_workflow_group_id;
   raise notice'v_process_group%', v_process_group;

    --delete from  gtt_btc_laf_object;

     CREATE TEMPORARY table IF NOT EXISTS  gtt_btc_laf_object(
     	object_data jsonb NULL);
   
    insert into gtt_btc_laf_object
     select object_data::jsonb from public.tb_cop_buss_obj_txn where object_pri_key_1 = NEW.object_pri_key_1;
    
    if v_object_pri_key_1 like 'DSABD%' then
        insert into gtt_btc_laf_object
         select object_data from public.tb_dsa_onboard_obj_txn where object_pri_key_1 =NEW.object_pri_key_1;
    end if;
   
    
     for rec in cur_rec_accesscontrol loop    

            v_final_system_role :=  rec.system_role ;      
            v_ac_location :=rec.location;
            v_ac_emp_id :=rec.emp_id;
            v_ac_access_group :=rec.access_group;
            v_ac_location_function :=rec.location_function;
            v_ac_access_group_function :=rec.access_group_function;
            v_ac_emp_function :=rec.emp_function;
            v_delete_current := rec.delete_current;
                                        

	
	   begin
	     perform public.sp_btc_get_ac_emp_loc_ag
	             (v_workflow_group_id ,v_object_type ,v_object_pri_key_1,v_object_pri_key_2 ,
  	              v_object_pri_key_3 ,v_process_group ,v_prc_grp_disp ,v_login_id ,
				  v_final_system_role , v_ac_location , v_ac_emp_id , v_ac_access_group ,
				  v_ac_location_function ,v_ac_access_group_function , v_ac_emp_function , v_text_1 ,
				  v_text_2 ,v_text_3 , v_text_4 ,v_text_5 ,v_process_remarks 
				  --v_final_emp ,  v_final_location ,  v_final_access_group,  v_emp_hierarchy_id,
				  --v_location_hierarchy_id,  v_created_timestamp,  v_created_by
                 );

		  --OPEN cur_get_obj;  
		  LOOP
		  FETCH cur_get_obj INTO rec_column;
	      EXIT WHEN NOT FOUND;
		   --v_get_RESPONSE_MESSAGE := rec_column."RESPONSE_MESSAGE" ;
		   --v_get_RESPONSE_TYPE := rec_column."RESPONSE_TYPE" ;
 		    v_final_emp := rec_column.final_emp ;	
			v_final_location := rec_column.final_location ;
			v_final_access_group := rec_column.final_access_group ;
			v_current_emp_hierarchy_id := rec_column.current_emp_hierarchy_id ;
			v_current_location_hierarchy_id := rec_column.current_location_hierarchy_id ;
			v_create_timestamp := rec_column.create_timestamp ;
			v_created_by := rec_column.created_by ;
		  
	      END LOOP;
		 CLOSE cur_get_obj;  
	 
	   end;
	  raise notice 's2';
--	         select function call--             
                -- insert into test(timestamp,v_data,v_clob)values(v_object_pri_key_1,'finaltrigger--'||v_login_id ,'finallocation--'||v_final_location||','||v_final_system_role);    
           
             insert into public.tb_btc_accesscontrol_hist
                   (workflow_group_id,object_pri_key_1,object_pri_key_2,object_pri_key_3,
					object_type,location,system_role,emp_id,access_type,access_group,
					update_login_id,emp_hierarchy_id,location_hierarchy_id,config_id,
					created_by,created_timestamp,modified_by,modified_timestamp,
	                log_action,log_time,log_user,system_name)             
               select 
	                workflow_group_id,object_pri_key_1,object_pri_key_2,object_pri_key_3,
					object_type,location,system_role,emp_id,access_type,access_group,
					update_login_id,emp_hierarchy_id,location_hierarchy_id,config_id,
					created_by,created_timestamp,modified_by,modified_timestamp,
					'DELETE',CURRENT_TIMESTAMP,'tf_h_tb_lp_function_access'||'-'||v_user,CURRENT_DATABASE()
				from public.tb_btc_accesscontrol ac  
                where system_role = v_final_system_role
                  and workflow_group_id=v_workflow_group_id
                  and object_pri_key_1=v_object_pri_key_1
                  and object_pri_key_2=v_object_pri_key_2
                  and object_pri_key_3=v_object_pri_key_3;
                 
    raise notice 's3';         
--	insert into test values (NEW.process_group, NEW.prc_grp_disp );
	  IF  ( NEW.prc_grp_disp !='APPROVERQUERY')  and 
             (NEW.prc_grp_disp !='REWORK') 
             and   (NEW.prc_grp_disp !='APPROVE') --new.PROCESS_GROUP != 'BOM_APPROVER' and
             and   (NEW.prc_grp_disp !='DVU_APPROVED')--and  (NEW.prc_grp_disp !='DVUAPPROVEDQUERY')
             THEN 

	  
             delete from public.tb_btc_accesscontrol 
              where system_role = v_final_system_role 
                and workflow_group_id = v_workflow_group_id
                and object_pri_key_1 = v_object_pri_key_1 
                and object_pri_key_2 = v_object_pri_key_2
                and object_pri_key_3 = v_object_pri_key_3
                and v_delete_current = 1;    
                       
--               select update_login_id into v_updated_logid from tb_btc_accesscontrol tba 
--                        where system_role = v_final_system_role 
--                and workflow_group_id = v_workflow_group_id
--                and object_pri_key_1 = v_object_pri_key_1 ;
               
         --     insert into test(timestamp,v_data,v_clob)values(v_object_pri_key_1,'loginid--'||v_login_id ,v_final_system_role||','||v_workflow_group_id);            
         

                
  
  
    select APPROVER_ID into v_supervisor_no from tb_se_app_mapping
    where se_id = NEW.login_id;
   
--     select case when mod((select count(counting) from
--  (select count(object_pri_key_1) as counting 
--  from tb_btc_accesscontrol tba where system_role = 'BOM' and update_login_id in
-- -- (select approver_id from tb_se_app_mapping where se_id = NEW.login_id)
--   (select update_login_id from tb_btc_accesscontrol where emp_id = NEW.login_id)
--   group by object_pri_key_1)t)+1,10)=0
--   then approver_id2 else approver_id end "Approver_id" into v_supervisor_no
--   from tb_btc_accesscontrol tba  
--   join tb_se_app_mapping tsam ON tsam.se_id  = tba.emp_id  
--   where se_id = NEW.login_id
--   group by object_pri_key_1,approver_id2, approver_id limit 1;
                                          
             if rec.action_flag <> 'D' then
                 insert into public.tb_btc_accesscontrol
                        (
                          workflow_group_id,
                          object_pri_key_1,
                          object_pri_key_2,
                          object_pri_key_3,
                          object_type,
                          location,
                          system_role,
                          emp_id,
                          access_type,
                          access_group,
                          update_login_id,
                          emp_hierarchy_id,
                          location_hierarchy_id,
                          config_id,
                          created_by,
                          created_timestamp,
                          modified_by,
                          modified_timestamp
                          )
                   values
                          (
                           v_workflow_group_id,
                           v_object_pri_key_1,
                           v_object_pri_key_2,
                           v_object_pri_key_3,
                           v_object_type,
                           v_final_location,
                           v_final_system_role,
                           v_login_id,
                           --coalesce(v_final_emp,'na'),
                           rec.access_type,
                           v_final_access_group,
                            v_supervisor_no,
                           coalesce(v_emp_hierarchy_id,v_final_emp,'na'),
                           v_location_hierarchy_id,
                           rec.config_id,
                           case when v_created_by is null then 'tb_btc_prc_grp_disp_trig' else v_created_by end,
                           case when v_created_timestamp is null then now() else v_created_timestamp end,
                           case when v_created_by is not null then 'tb_btc_prc_grp_disp_trig' else null end,
                           case when v_created_timestamp is not null then now() else null end
                          );    
                         
                         raise notice 'values inserted in access control'; 
                       --     insert into test(timestamp,v_data,v_clob)values(v_object_pri_key_1,'loginid--'||v_login_id ,v_final_location||','||v_final_system_role);      
             end if;
			 ELSE NULL;
			 END IF;
      end loop;
return new;
     drop table gtt_btc_laf_object;
--  EXCEPTION
--             WHEN OTHERS THEN
--                   get stacked diagnostics
--				        v_state   = returned_sqlstate,
--				        v_msg     = message_text,
--				        v_detail  = pg_exception_detail,
--				        v_hint    = pg_exception_hint,
--				        v_context = pg_exception_context;
--          
--                   perform public.sp_ins_db_exception_log(
--									'public',--'org_id',
--									'public',--'app_id',
--									'tf_tb_btc_prc_grp_disp_trig',--'service_name',
--									'tf_tb_btc_prc_grp_disp_trig',--'object_name',
--									'123',--'pw_request_id',
--									'0',--'login_id',
--									NEW.object_pri_key_1,--'object_pri_key_1',
--									NEW.object_pri_key_2,--'object_pri_key_2',
--									NEW.object_pri_key_3,--'object_pri_key_3',
--									'CREATE HIST TRIGGER PROC',--'object_type',
--									v_state,--'err_state',
--							        v_msg,--'err_msg',
--							        v_detail,--'err_detail',
--							        v_hint,--'err_hint',
--							        v_context,--'err_context',
--									'',--'ref_data_1',
--									'',--'ref_data_2',
--									'',--'ref_data_3',
--									'',--'ref_data_4',
--									'',--'ref_data_5',
--									'',--'ref_data_6',
--									'',--'ref_data_7',
--									'N',--'is_processed_1',
--									'N',--'is_processed_2',
--									NULL,--'is_processed_1_timestamp',
--									NULL,--'is_processed_1_timestamp',
--									''--'developer_remarks'
--									);
--	 
--        return NULL;     
-- 
end;
$function$
;

CREATE OR REPLACE FUNCTION public.tr_ins_function_role_hist()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$ 
			declare 
            v_user varchar(100);
			 v_state   TEXT;
			 v_msg     TEXT;
			 v_detail  TEXT;
			 v_hint    TEXT;
			 v_context TEXT;
			begin
    		     
  if TG_OP = 'DELETE' THEN

  truncate table tb_function_roles_mst_hist;
  
INSERT INTO public.tb_function_roles_mst_hist
(function_code, role_code, role_name, parent_role_code, default_system_role_code, sort_sequence, effective_date, ineffective_date, internal_flag, created_timestamp, created_by, modified_timestamp, modified_by, server_ver_no, device_mod_no, log)
VALUES(
old.function_code,
old.role_code,
old.role_name,
old.parent_role_code,
old.default_system_role_code,
old.sort_sequence,
old.effective_date,
old.ineffective_date,
old.internal_flag,
now(),
old.created_by,
now(),
old.modified_by,
old.server_ver_no,
old.device_mod_no,
'JOB_INSERT');

                      return OLD;

	end if;
			
  EXCEPTION
             WHEN OTHERS THEN
                   get stacked diagnostics
				        v_state   = returned_sqlstate,
				        v_msg     = message_text,
				        v_detail  = pg_exception_detail,
				        v_hint    = pg_exception_hint,
				        v_context = pg_exception_context;
          
                   perform public.sp_ins_db_exception_log(
									'kotak',--'org_id',
									'kotak',--'app_id',
									 'tf_h_tb_btc_accesscontrol',--'service_name',
									'tf_h_tb_btc_accesscontrol',--'object_name',
									'123',--'pw_request_id',
									'0',--'login_id',
									'NA',--'object_pri_key_1',
									'NA',--'object_pri_key_2',
									'NA',--'object_pri_key_3',
									'CREATE HIST TRIGGER PROC',--'object_type',
									v_state,--'err_state',
							        v_msg,--'err_msg',
							        v_detail,--'err_detail',
							        v_hint,--'err_hint',
							        v_context,--'err_context',
									'',--'ref_data_1',
									'',--'ref_data_2',
									'',--'ref_data_3',
									'',--'ref_data_4',
									'',--'ref_data_5',
									'',--'ref_data_6',
									'',--'ref_data_7',
									'N',--'is_processed_1',
									'N',--'is_processed_2',
									NULL,--'is_processed_1_timestamp',
									NULL,--'is_processed_1_timestamp',
									''--'developer_remarks'
									);
	 
        return NULL;
			END;
			$function$
;

CREATE OR REPLACE FUNCTION public.tr_ins_hrms_hist()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$ 
			declare 
            v_user varchar(100);
			 v_state   TEXT;
			 v_msg     TEXT;
			 v_detail  TEXT;
			 v_hint    TEXT;
			 v_context TEXT;
			begin
    		     
  if TG_OP = 'DELETE' THEN

--  truncate table tb_emp_hrms_hist;
  INSERT INTO public.tb_emp_hrms_hist
(employee_number, oracle_employee_number, company, person_id, attribute3, prefix, first_name, middle_names, last_name, email_address, gender, dob, marital_status, paddress1, paddress2, paddress3, pcity, ppin, taddress1, taddress2, taddress3, tcity, tpin, supervisor_emp_no, sup_company, doj, father_husband_name, division, "function", function_id, designation_id, payroll_id, designation_label_id, "role", loc_code, location_name, date_employee_data_verified, lob_code, lob, cc_code, cc_name, category, domain_login_id, last_working_date, rm_name, supervisor_no, "source", kpo_code, supervisor_name, mobile_number, assignment_change_date, loc_code_new, ing_emp_type, segment, emp_hierarchy_id, emp_branch_hierarchy_id, created_date, created_by, modified_date, modified_by, loc_code_view, is_active, bc_code, emp_lwd_date, prc_grp, login_status, supervisor_mobile_number, branch_code,LOG)
VALUES(OLD.employee_number, OLD.oracle_employee_number, OLD.company, OLD.person_id, OLD.attribute3, OLD.prefix, OLD.first_name, OLD.middle_names, OLD.last_name, OLD.email_address, OLD.gender, OLD.dob, OLD.marital_status, OLD.paddress1, OLD.paddress2, OLD.paddress3, OLD.pcity, OLD.ppin, OLD.taddress1, OLD.taddress2, OLD.taddress3, OLD.tcity, OLD.tpin, OLD.supervisor_emp_no, OLD.sup_company, OLD.doj, OLD.father_husband_name, OLD.division, OLD."function", OLD.function_id, OLD.designation_id, OLD.payroll_id, OLD.designation_label_id, OLD."role", OLD.loc_code, OLD.location_name, OLD.date_employee_data_verified, OLD.lob_code, OLD.lob, OLD.cc_code, OLD.cc_name, OLD.category, OLD.domain_login_id, OLD.last_working_date, OLD.rm_name, OLD.supervisor_no, OLD."source", OLD.kpo_code, OLD.supervisor_name, OLD.mobile_number, OLD.assignment_change_date, OLD.loc_code_new, OLD.ing_emp_type, OLD.segment, OLD.emp_hierarchy_id, OLD.emp_branch_hierarchy_id, OLD.created_date, OLD.created_by, OLD.modified_date, OLD.modified_by, OLD.loc_code_view, OLD.is_active, OLD.bc_code, OLD.emp_lwd_date, OLD.prc_grp, OLD.login_status, OLD.supervisor_mobile_number, OLD.branch_code,'JOB_INSERT');

                      return OLD;

	end if;
			
  EXCEPTION
             WHEN OTHERS THEN
                   get stacked diagnostics
				        v_state   = returned_sqlstate,
				        v_msg     = message_text,
				        v_detail  = pg_exception_detail,
				        v_hint    = pg_exception_hint,
				        v_context = pg_exception_context;
          
                   perform public.sp_ins_db_exception_log(
									'kotak',--'org_id',
									'kotak',--'app_id',
									 'tf_h_tb_btc_accesscontrol',--'service_name',
									'tf_h_tb_btc_accesscontrol',--'object_name',
									'123',--'pw_request_id',
									'0',--'login_id',
									'NA',--'object_pri_key_1',
									'NA',--'object_pri_key_2',
									'NA',--'object_pri_key_3',
									'CREATE HIST TRIGGER PROC',--'object_type',
									v_state,--'err_state',
							        v_msg,--'err_msg',
							        v_detail,--'err_detail',
							        v_hint,--'err_hint',
							        v_context,--'err_context',
									'',--'ref_data_1',
									'',--'ref_data_2',
									'',--'ref_data_3',
									'',--'ref_data_4',
									'',--'ref_data_5',
									'',--'ref_data_6',
									'',--'ref_data_7',
									'N',--'is_processed_1',
									'N',--'is_processed_2',
									NULL,--'is_processed_1_timestamp',
									NULL,--'is_processed_1_timestamp',
									''--'developer_remarks'
									);
	 
        return NULL;
			END;
			$function$
;

CREATE OR REPLACE FUNCTION public.tr_ins_rcu_corrector_hist()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$ 
			declare 
            v_user varchar(100);
			 v_state   TEXT;
			 v_msg     TEXT;
			 v_detail  TEXT;
			 v_hint    TEXT;
			 v_context TEXT;
			begin
    		     
  if TG_OP = 'DELETE' THEN
				
--  truncate table tb_branch_rcu_corrector_mapping_hist;
INSERT INTO public.tb_branch_rcu_corrector_mapping_hist
(rcu_corrector_id, branch, internal_flag, created_by, created_timestamp, modified_by, modified_timestamp, log)
VALUES(OLD.rcu_corrector_id, OLD.branch, OLD.internal_flag, OLD.created_by, NOW(), OLD.modified_by, OLD.modified_timestamp, 'JOB_INSERT');

return old;
	end if;
			
  EXCEPTION
             WHEN OTHERS THEN
                   get stacked diagnostics
				        v_state   = returned_sqlstate,
				        v_msg     = message_text,
				        v_detail  = pg_exception_detail,
				        v_hint    = pg_exception_hint,
				        v_context = pg_exception_context;
          
                   perform public.sp_ins_db_exception_log(
									'kotak',--'org_id',
									'kotak',--'app_id',
									 'tf_h_tb_btc_accesscontrol',--'service_name',
									'tf_h_tb_btc_accesscontrol',--'object_name',
									'123',--'pw_request_id',
									'0',--'login_id',
									'NA',--'object_pri_key_1',
									'NA',--'object_pri_key_2',
									'NA',--'object_pri_key_3',
									'CREATE HIST TRIGGER PROC',--'object_type',
									v_state,--'err_state',
							        v_msg,--'err_msg',
							        v_detail,--'err_detail',
							        v_hint,--'err_hint',
							        v_context,--'err_context',
									'',--'ref_data_1',
									'',--'ref_data_2',
									'',--'ref_data_3',
									'',--'ref_data_4',
									'',--'ref_data_5',
									'',--'ref_data_6',
									'',--'ref_data_7',
									'N',--'is_processed_1',
									'N',--'is_processed_2',
									NULL,--'is_processed_1_timestamp',
									NULL,--'is_processed_1_timestamp',
									''--'developer_remarks'
									);
	 
        return NULL;
			END;
			$function$
;

CREATE OR REPLACE FUNCTION public.tr_ins_se_app_hist()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$ 
			declare 
            v_user varchar(100);
			 v_state   TEXT;
			 v_msg     TEXT;
			 v_detail  TEXT;
			 v_hint    TEXT;
			 v_context TEXT;
			begin
    		     
  if TG_OP = 'DELETE' THEN
				
-- delete from tb_se_app_mapping_hist;
--  where old.SE_ID = new.SE_ID;
 
INSERT INTO public.tb_se_app_mapping_hist
(se_id,
approver_id,
internal_flag,
created_by,
created_timestamp,
--modified_by,
modified_timestamp,
log)
VALUES(
old.se_id,
old.approver_id,
old.internal_flag,
old.created_by,
now(),
--old.modified_by,
NOW(),
'JOB_INSERT');

 return OLD;

	end if;
			
  EXCEPTION
             WHEN OTHERS THEN
                   get stacked diagnostics
				        v_state   = returned_sqlstate,
				        v_msg     = message_text,
				        v_detail  = pg_exception_detail,
				        v_hint    = pg_exception_hint,
				        v_context = pg_exception_context;
          
                   perform public.sp_ins_db_exception_log(
									'kotak',--'org_id',
									'kotak',--'app_id',
									 'tf_h_tb_btc_accesscontrol',--'service_name',
									'tf_h_tb_btc_accesscontrol',--'object_name',
									'123',--'pw_request_id',
									'0',--'login_id',
									'NA',--'object_pri_key_1',
									'NA',--'object_pri_key_2',
									'NA',--'object_pri_key_3',
									'CREATE HIST TRIGGER PROC',--'object_type',
									v_state,--'err_state',
							        v_msg,--'err_msg',
							        v_detail,--'err_detail',
							        v_hint,--'err_hint',
							        v_context,--'err_context',
									'',--'ref_data_1',
									'',--'ref_data_2',
									'',--'ref_data_3',
									'',--'ref_data_4',
									'',--'ref_data_5',
									'',--'ref_data_6',
									'',--'ref_data_7',
									'N',--'is_processed_1',
									'N',--'is_processed_2',
									NULL,--'is_processed_1_timestamp',
									NULL,--'is_processed_1_timestamp',
									''--'developer_remarks'
									);
	 
        return NULL;
			END;
			$function$
;
